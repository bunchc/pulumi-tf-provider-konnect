{
    "name": "konnect",
    "description": "A Pulumi package for creating and managing konnect cloud resources.",
    "keywords": [
        "bunchc",
        "konnect",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`konnect` Terraform Provider](https://github.com/kong/terraform-provider-konnect).",
    "repository": "https://github.com/bunchc/pulumi-tf-provider-konnect",
    "publisher": "bunchc",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing konnect cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/kong/terraform-provider-konnect)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-konnect` repo](https://github.com/bunchc/pulumi-tf-provider-konnect/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-konnect` repo](https://github.com/kong/terraform-provider-konnect/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/kong/terraform-provider-konnect)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-konnect` repo](https://github.com/bunchc/pulumi-tf-provider-konnect/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-konnect` repo](https://github.com/kong/terraform-provider-konnect/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "konnectAccessToken": {
                "type": "string",
                "secret": true
            },
            "personalAccessToken": {
                "type": "string",
                "secret": true
            },
            "serverUrl": {
                "type": "string",
                "description": "Server URL (defaults to https://global.api.konghq.com)\n"
            },
            "systemAccountAccessToken": {
                "type": "string",
                "secret": true
            }
        }
    },
    "types": {
        "konnect:index/ApiProductDocumentMetadata:ApiProductDocumentMetadata": {
            "type": "object"
        },
        "konnect:index/ApiProductPortal:ApiProductPortal": {
            "properties": {
                "portalId": {
                    "type": "string"
                },
                "portalName": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "portalId",
                        "portalName"
                    ]
                }
            }
        },
        "konnect:index/ApiProductVersionGatewayService:ApiProductVersionGatewayService": {
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The identifier of the control plane that the gateway service resides in. Not Null\n"
                },
                "id": {
                    "type": "string",
                    "description": "The identifier of a gateway service associated with the version of the API product. Not Null\n"
                },
                "runtimeGroupId": {
                    "type": "string",
                    "description": "This field is deprecated, please use `control_plane_id` instead. The identifier of the control plane that the gateway service resides in\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "controlPlaneId",
                        "id",
                        "runtimeGroupId"
                    ]
                }
            }
        },
        "konnect:index/ApiProductVersionPortal:ApiProductVersionPortal": {
            "properties": {
                "applicationRegistrationEnabled": {
                    "type": "boolean"
                },
                "authStrategies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/ApiProductVersionPortalAuthStrategy:ApiProductVersionPortalAuthStrategy"
                    }
                },
                "autoApproveRegistration": {
                    "type": "boolean"
                },
                "deprecated": {
                    "type": "boolean"
                },
                "portalId": {
                    "type": "string"
                },
                "portalName": {
                    "type": "string"
                },
                "portalProductVersionId": {
                    "type": "string"
                },
                "publishStatus": {
                    "type": "string",
                    "description": "must be one of [\"published\", \"unpublished\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "applicationRegistrationEnabled",
                        "authStrategies",
                        "autoApproveRegistration",
                        "deprecated",
                        "portalId",
                        "portalName",
                        "portalProductVersionId",
                        "publishStatus"
                    ]
                }
            }
        },
        "konnect:index/ApiProductVersionPortalAuthStrategy:ApiProductVersionPortalAuthStrategy": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyKeyAuth:ApplicationAuthStrategyKeyAuth": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "At least one published product version is using this auth strategy.\n"
                },
                "configs": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyKeyAuthConfigs:ApplicationAuthStrategyKeyAuthConfigs",
                    "description": "JSON-B object containing the configuration for the Key Auth strategy. Requires replacement if changed. ; Not Null\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "dcrProvider": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyKeyAuthDcrProvider:ApplicationAuthStrategyKeyAuthDcrProvider"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.\n"
                },
                "strategyType": {
                    "type": "string",
                    "description": "Requires replacement if changed. ; Not Null; must be one of [\"key_auth\"]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "active",
                        "configs",
                        "createdAt",
                        "dcrProvider",
                        "displayName",
                        "id",
                        "name",
                        "strategyType",
                        "updatedAt"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyKeyAuthConfigs:ApplicationAuthStrategyKeyAuthConfigs": {
            "properties": {
                "keyAuth": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyKeyAuthConfigsKeyAuth:ApplicationAuthStrategyKeyAuthConfigsKeyAuth",
                    "description": "The most basic mode to configure an Application Auth Strategy for an API Product Version.\nUsing this mode will allow developers to generate API keys that will authenticate their application requests.\nOnce authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "keyAuth"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyKeyAuthConfigsKeyAuth:ApplicationAuthStrategyKeyAuthConfigsKeyAuth": {
            "properties": {
                "keyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the headers containing the API key. You can specify multiple header names. Requires replacement if changed.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "keyNames"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyKeyAuthDcrProvider:ApplicationAuthStrategyKeyAuthDcrProvider": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "providerType": {
                    "type": "string",
                    "description": "The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of [\"auth0\", \"azureAd\", \"curity\", \"okta\", \"http\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id",
                        "name",
                        "providerType"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyOpenidConnect:ApplicationAuthStrategyOpenidConnect": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "At least one published product version is using this auth strategy.\n"
                },
                "configs": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyOpenidConnectConfigs:ApplicationAuthStrategyOpenidConnectConfigs",
                    "description": "JSON-B object containing the configuration for the OIDC strategy. Requires replacement if changed. ; Not Null\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "dcrProvider": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyOpenidConnectDcrProvider:ApplicationAuthStrategyOpenidConnectDcrProvider"
                },
                "dcrProviderId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.\n"
                },
                "strategyType": {
                    "type": "string",
                    "description": "Requires replacement if changed. ; Not Null; must be one of [\"openid_connect\"]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "active",
                        "configs",
                        "createdAt",
                        "dcrProvider",
                        "dcrProviderId",
                        "displayName",
                        "id",
                        "name",
                        "strategyType",
                        "updatedAt"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyOpenidConnectConfigs:ApplicationAuthStrategyOpenidConnectConfigs": {
            "properties": {
                "openidConnect": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyOpenidConnectConfigsOpenidConnect:ApplicationAuthStrategyOpenidConnectConfigsOpenidConnect",
                    "description": "A more advanced mode to configure an API Product Version’s Application Auth Strategy.\nUsing this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests.\nOnce authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy.\nAn OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "openidConnect"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyOpenidConnectConfigsOpenidConnect:ApplicationAuthStrategyOpenidConnectConfigsOpenidConnect": {
            "properties": {
                "additionalProperties": {
                    "type": "string",
                    "description": "Parsed as JSON.\n"
                },
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed. ; Not Null\n"
                },
                "credentialClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed. ; Not Null\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "Requires replacement if changed. ; Not Null\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed. ; Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "additionalProperties",
                        "authMethods",
                        "credentialClaims",
                        "issuer",
                        "scopes"
                    ]
                }
            }
        },
        "konnect:index/ApplicationAuthStrategyOpenidConnectDcrProvider:ApplicationAuthStrategyOpenidConnectDcrProvider": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "providerType": {
                    "type": "string",
                    "description": "The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of [\"auth0\", \"azureAd\", \"curity\", \"okta\", \"http\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "displayName",
                        "id",
                        "name",
                        "providerType"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroup:CloudGatewayConfigurationDataplaneGroup": {
            "properties": {
                "autoscale": {
                    "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupAutoscale:CloudGatewayConfigurationDataplaneGroupAutoscale",
                    "description": "Not Null\n"
                },
                "cloudGatewayNetworkId": {
                    "type": "string",
                    "description": "Not Null\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of data-plane group creation date.\n"
                },
                "egressIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of egress IP addresses for the network that this data-plane group runs on.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the data-plane group that represents a deployment target for a set of data-planes.\n"
                },
                "privateIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of private IP addresses of the internal load balancer that proxies traffic to this data-plane group.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Name of cloud provider. Not Null; must be one of [\"aws\"]\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region ID for cloud provider region. Not Null\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the data-plane group. must be one of [\"created\", \"initializing\", \"ready\", \"terminating\", \"terminated\"]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of data-plane group update date.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoscale",
                        "cloudGatewayNetworkId",
                        "createdAt",
                        "egressIpAddresses",
                        "id",
                        "privateIpAddresses",
                        "provider",
                        "region",
                        "state",
                        "updatedAt"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroupAutoscale:CloudGatewayConfigurationDataplaneGroupAutoscale": {
            "properties": {
                "configurationDataPlaneGroupAutoscaleAutopilot": {
                    "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot",
                    "description": "Object that describes the autopilot autoscaling strategy.\n"
                },
                "configurationDataPlaneGroupAutoscaleStatic": {
                    "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic",
                    "description": "Object that describes the static autoscaling strategy.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configurationDataPlaneGroupAutoscaleAutopilot",
                        "configurationDataPlaneGroupAutoscaleStatic"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot": {
            "properties": {
                "baseRps": {
                    "type": "integer",
                    "description": "Base number of requests per second that the deployment target should support. Not Null\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Not Null; must be one of [\"autopilot\"]\n"
                },
                "maxRps": {
                    "type": "integer",
                    "description": "Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseRps",
                        "kind",
                        "maxRps"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic": {
            "properties": {
                "instanceType": {
                    "type": "string",
                    "description": "Instance type name to indicate capacity. Not Null; must be one of [\"small\", \"medium\", \"large\"]\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Not Null; must be one of [\"static\"]\n"
                },
                "requestedInstances": {
                    "type": "integer",
                    "description": "Number of data-planes the deployment target will contain. Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "instanceType",
                        "kind",
                        "requestedInstances"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroupConfig:CloudGatewayConfigurationDataplaneGroupConfig": {
            "properties": {
                "autoscale": {
                    "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupConfigAutoscale:CloudGatewayConfigurationDataplaneGroupConfigAutoscale"
                },
                "cloudGatewayNetworkId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string",
                    "description": "Name of cloud provider. must be one of [\"aws\"]\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region ID for cloud provider region.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "autoscale",
                        "cloudGatewayNetworkId",
                        "provider",
                        "region"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroupConfigAutoscale:CloudGatewayConfigurationDataplaneGroupConfigAutoscale": {
            "properties": {
                "configurationDataPlaneGroupAutoscaleAutopilot": {
                    "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot",
                    "description": "Object that describes the autopilot autoscaling strategy.\n"
                },
                "configurationDataPlaneGroupAutoscaleStatic": {
                    "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic",
                    "description": "Object that describes the static autoscaling strategy.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "configurationDataPlaneGroupAutoscaleAutopilot",
                        "configurationDataPlaneGroupAutoscaleStatic"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot": {
            "properties": {
                "baseRps": {
                    "type": "integer",
                    "description": "Base number of requests per second that the deployment target should support.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "must be one of [\"autopilot\"]\n"
                },
                "maxRps": {
                    "type": "integer",
                    "description": "Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "baseRps",
                        "kind",
                        "maxRps"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic": {
            "properties": {
                "instanceType": {
                    "type": "string",
                    "description": "Instance type name to indicate capacity. must be one of [\"small\", \"medium\", \"large\"]\n"
                },
                "kind": {
                    "type": "string",
                    "description": "must be one of [\"static\"]\n"
                },
                "requestedInstances": {
                    "type": "integer",
                    "description": "Number of data-planes the deployment target will contain.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "instanceType",
                        "kind",
                        "requestedInstances"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayCustomDomainStateMetadata:CloudGatewayCustomDomainStateMetadata": {
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason why the custom domain may be in an erroneous state, reported from backing infrastructure.\n"
                },
                "reportedStatus": {
                    "type": "string",
                    "description": "Reported status of the custom domain from backing infrastructure.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "reason",
                        "reportedStatus"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayNetworkFirewall:CloudGatewayNetworkFirewall": {
            "properties": {
                "allowedCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed CIDR blocks to access a network.\n"
                },
                "deniedCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of denied CIDR blocks to access a network.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowedCidrBlocks",
                        "deniedCidrBlocks"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayNetworkProviderMetadata:CloudGatewayNetworkProviderMetadata": {
            "properties": {
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vpcId": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "subnetIds",
                        "vpcId"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayTransitGatewayDnsConfig:CloudGatewayTransitGatewayDnsConfig": {
            "properties": {
                "domainProxyLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Internal domain names to proxy for DNS resolution from the listed remote DNS server IP addresses,\nfor a transit gateway.\n"
                },
                "remoteDnsServerIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote DNS Server IP Addresses to connect to for resolving internal DNS via a transit gateway. Requires replacement if changed. ; Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "domainProxyLists",
                        "remoteDnsServerIpAddresses"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayTransitGatewayTransitGatewayAttachmentConfig:CloudGatewayTransitGatewayTransitGatewayAttachmentConfig": {
            "properties": {
                "awsTransitGatewayAttachmentConfig": {
                    "$ref": "#/types/konnect:index/CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig:CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig",
                    "description": "Requires replacement if changed.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsTransitGatewayAttachmentConfig"
                    ]
                }
            }
        },
        "konnect:index/CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig:CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "Requires replacement if changed. ; Not Null; must be one of [\"aws-transit-gateway-attachment\"]\n"
                },
                "ramShareArn": {
                    "type": "string",
                    "description": "Resource Share ARN to verify request to create transit gateway attachment. Requires replacement if changed. ; Not Null\n"
                },
                "transitGatewayId": {
                    "type": "string",
                    "description": "AWS Transit Gateway ID to create attachment to. Requires replacement if changed. ; Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "kind",
                        "ramShareArn",
                        "transitGatewayId"
                    ]
                }
            }
        },
        "konnect:index/GatewayAclConsumer:GatewayAclConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayBasicAuthConsumer:GatewayBasicAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayControlPlaneConfig:GatewayControlPlaneConfig": {
            "properties": {
                "controlPlaneEndpoint": {
                    "type": "string",
                    "description": "Control Plane Endpoint.\n"
                },
                "telemetryEndpoint": {
                    "type": "string",
                    "description": "Telemetry Endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "controlPlaneEndpoint",
                        "telemetryEndpoint"
                    ]
                }
            }
        },
        "konnect:index/GatewayControlPlaneMembershipMember:GatewayControlPlaneMembershipMember": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                }
            },
            "type": "object"
        },
        "konnect:index/GatewayControlPlaneProxyUrl:GatewayControlPlaneProxyUrl": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Hostname of the proxy URL.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of the proxy URL.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol of the proxy URL.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "port",
                "protocol"
            ]
        },
        "konnect:index/GatewayHmacAuthConsumer:GatewayHmacAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayJwtConsumer:GatewayJwtConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayKeyAuthConsumer:GatewayKeyAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayKeyPem:GatewayKeyPem": {
            "properties": {
                "privateKey": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "privateKey",
                        "publicKey"
                    ]
                }
            }
        },
        "konnect:index/GatewayKeySet:GatewayKeySet": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAclConfig:GatewayPluginAclConfig": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "hideGroupsHeader": {
                    "type": "boolean",
                    "description": "If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.\n"
                },
                "includeConsumerGroups": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allows",
                        "denies",
                        "hideGroupsHeader",
                        "includeConsumerGroups"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAclConsumer:GatewayPluginAclConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAclConsumerGroup:GatewayPluginAclConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAclRoute:GatewayPluginAclRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAclService:GatewayPluginAclService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorConfig:GatewayPluginAiPromptDecoratorConfig": {
            "properties": {
                "prompts": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConfigPrompts:GatewayPluginAiPromptDecoratorConfigPrompts"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "prompts"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorConfigPrompts:GatewayPluginAiPromptDecoratorConfigPrompts": {
            "properties": {
                "appends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConfigPromptsAppend:GatewayPluginAiPromptDecoratorConfigPromptsAppend"
                    },
                    "description": "Insert chat messages at the end of the chat message array. This array preserves exact order when adding messages.\n"
                },
                "prepends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConfigPromptsPrepend:GatewayPluginAiPromptDecoratorConfigPromptsPrepend"
                    },
                    "description": "Insert chat messages at the beginning of the chat message array. This array preserves exact order when adding messages.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "appends",
                        "prepends"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorConfigPromptsAppend:GatewayPluginAiPromptDecoratorConfigPromptsAppend": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Not Null\n"
                },
                "role": {
                    "type": "string",
                    "description": "must be one of [\"system\", \"assistant\", \"user\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "content",
                        "role"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorConfigPromptsPrepend:GatewayPluginAiPromptDecoratorConfigPromptsPrepend": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "Not Null\n"
                },
                "role": {
                    "type": "string",
                    "description": "must be one of [\"system\", \"assistant\", \"user\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "content",
                        "role"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorConsumer:GatewayPluginAiPromptDecoratorConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorConsumerGroup:GatewayPluginAiPromptDecoratorConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorRoute:GatewayPluginAiPromptDecoratorRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptDecoratorService:GatewayPluginAiPromptDecoratorService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptGuardConfig:GatewayPluginAiPromptGuardConfig": {
            "properties": {
                "allowAllConversationHistory": {
                    "type": "boolean",
                    "description": "If true, will ignore all previous chat prompts from the conversation history.\n"
                },
                "allowPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of valid regex patterns, or valid questions from the 'user' role in chat.\n"
                },
                "denyPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of invalid regex patterns, or invalid questions from the 'user' role in chat.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowAllConversationHistory",
                        "allowPatterns",
                        "denyPatterns"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptGuardConsumer:GatewayPluginAiPromptGuardConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptGuardConsumerGroup:GatewayPluginAiPromptGuardConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptGuardRoute:GatewayPluginAiPromptGuardRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptGuardService:GatewayPluginAiPromptGuardService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptTemplateConfig:GatewayPluginAiPromptTemplateConfig": {
            "properties": {
                "allowUntemplatedRequests": {
                    "type": "boolean",
                    "description": "Set true to allow requests that don't call or match any template.\n"
                },
                "logOriginalRequest": {
                    "type": "boolean",
                    "description": "Set true to add the original request to the Kong log plugin(s) output.\n"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConfigTemplate:GatewayPluginAiPromptTemplateConfigTemplate"
                    },
                    "description": "Array of templates available to the request context.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowUntemplatedRequests",
                        "logOriginalRequest",
                        "templates"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptTemplateConfigTemplate:GatewayPluginAiPromptTemplateConfigTemplate": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique name for the template, can be called with `{template://NAME}`. Not Null\n"
                },
                "template": {
                    "type": "string",
                    "description": "Template string for this request, supports mustache-style `{{placeholders}}`. Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "template"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptTemplateConsumer:GatewayPluginAiPromptTemplateConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptTemplateConsumerGroup:GatewayPluginAiPromptTemplateConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptTemplateRoute:GatewayPluginAiPromptTemplateRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiPromptTemplateService:GatewayPluginAiPromptTemplateService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyConfig:GatewayPluginAiProxyConfig": {
            "properties": {
                "auth": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConfigAuth:GatewayPluginAiProxyConfigAuth"
                },
                "logging": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConfigLogging:GatewayPluginAiProxyConfigLogging"
                },
                "model": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConfigModel:GatewayPluginAiProxyConfigModel"
                },
                "responseStreaming": {
                    "type": "string",
                    "description": "Whether to 'optionally allow', 'deny', or 'always' (force) the streaming of answers via server sent events. must be one of [\"allow\", \"deny\", \"always\"]\n"
                },
                "routeType": {
                    "type": "string",
                    "description": "The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation. must be one of [\"llm/v1/chat\", \"llm/v1/completions\", \"preserve\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "auth",
                        "logging",
                        "model",
                        "responseStreaming",
                        "routeType"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyConfigAuth:GatewayPluginAiProxyConfigAuth": {
            "properties": {
                "azureClientId": {
                    "type": "string",
                    "description": "If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.\n"
                },
                "azureClientSecret": {
                    "type": "string",
                    "description": "If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.\n"
                },
                "azureUseManagedIdentity": {
                    "type": "boolean",
                    "description": "Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "If AI model requires authentication via Authorization or API key header, specify its name here.\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.\n"
                },
                "paramLocation": {
                    "type": "string",
                    "description": "Specify whether the 'param*name' and 'param*value' options go in a query string, or the POST form/JSON body. must be one of [\"query\", \"body\"]\n"
                },
                "paramName": {
                    "type": "string",
                    "description": "If AI model requires authentication via query parameter, specify its name here.\n"
                },
                "paramValue": {
                    "type": "string",
                    "description": "Specify the full parameter value for 'param_name'.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "azureClientId",
                        "azureClientSecret",
                        "azureTenantId",
                        "azureUseManagedIdentity",
                        "headerName",
                        "headerValue",
                        "paramLocation",
                        "paramName",
                        "paramValue"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyConfigLogging:GatewayPluginAiProxyConfigLogging": {
            "properties": {
                "logPayloads": {
                    "type": "boolean",
                    "description": "If enabled, will log the request and response body into the Kong log plugin(s) output.\n"
                },
                "logStatistics": {
                    "type": "boolean",
                    "description": "If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "logPayloads",
                        "logStatistics"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyConfigModel:GatewayPluginAiProxyConfigModel": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Model name to execute.\n"
                },
                "options": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConfigModelOptions:GatewayPluginAiProxyConfigModelOptions",
                    "description": "Key/value settings for the model\n"
                },
                "provider": {
                    "type": "string",
                    "description": "AI provider request format - Kong translates requests to and from the specified backend compatible formats. must be one of [\"openai\", \"azure\", \"anthropic\", \"cohere\", \"mistral\", \"llama2\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "options",
                        "provider"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyConfigModelOptions:GatewayPluginAiProxyConfigModelOptions": {
            "properties": {
                "anthropicVersion": {
                    "type": "string",
                    "description": "Defines the schema/API version, if using Anthropic provider.\n"
                },
                "azureApiVersion": {
                    "type": "string",
                    "description": "'api-version' for Azure OpenAI instances.\n"
                },
                "azureDeploymentId": {
                    "type": "string",
                    "description": "Deployment ID for Azure OpenAI instances.\n"
                },
                "azureInstance": {
                    "type": "string",
                    "description": "Instance name for Azure OpenAI hosted models.\n"
                },
                "llama2Format": {
                    "type": "string",
                    "description": "If using llama2 provider, select the upstream message format. must be one of [\"raw\", \"openai\", \"ollama\"]\n"
                },
                "maxTokens": {
                    "type": "integer",
                    "description": "Defines the max_tokens, if using chat or completion models.\n"
                },
                "mistralFormat": {
                    "type": "string",
                    "description": "If using mistral provider, select the upstream message format. must be one of [\"openai\", \"ollama\"]\n"
                },
                "temperature": {
                    "type": "number",
                    "description": "Defines the matching temperature, if using chat or completion models.\n"
                },
                "topK": {
                    "type": "integer",
                    "description": "Defines the top-k most likely tokens, if supported.\n"
                },
                "topP": {
                    "type": "number",
                    "description": "Defines the top-p probability mass, if supported.\n"
                },
                "upstreamPath": {
                    "type": "string",
                    "description": "Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.\n"
                },
                "upstreamUrl": {
                    "type": "string",
                    "description": "Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "anthropicVersion",
                        "azureApiVersion",
                        "azureDeploymentId",
                        "azureInstance",
                        "llama2Format",
                        "maxTokens",
                        "mistralFormat",
                        "temperature",
                        "topK",
                        "topP",
                        "upstreamPath",
                        "upstreamUrl"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyConsumer:GatewayPluginAiProxyConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyConsumerGroup:GatewayPluginAiProxyConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyRoute:GatewayPluginAiProxyRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAiProxyService:GatewayPluginAiProxyService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAwsLambdaConfig:GatewayPluginAwsLambdaConfig": {
            "properties": {
                "awsAssumeRoleArn": {
                    "type": "string",
                    "description": "The target AWS IAM role ARN used to invoke the Lambda function.\n"
                },
                "awsImdsProtocolVersion": {
                    "type": "string",
                    "description": "Identifier to select the IMDS protocol version to use: `v1` or `v2`. must be one of [\"v1\", \"v2\"]\n"
                },
                "awsKey": {
                    "type": "string",
                    "description": "The AWS key credential to be used when invoking the function.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "awsRoleSessionName": {
                    "type": "string",
                    "description": "The identifier of the assumed role session.\n"
                },
                "awsSecret": {
                    "type": "string",
                    "description": "The AWS secret credential to be used when invoking the function.\n"
                },
                "awsgatewayCompatible": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the plugin should wrap requests into the Amazon API gateway.\n"
                },
                "base64EncodeBody": {
                    "type": "boolean",
                    "description": "An optional value that Base64-encodes the request body.\n"
                },
                "disableHttps": {
                    "type": "boolean"
                },
                "forwardRequestBody": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the request body is sent in the request*body field of the JSON-encoded request. If the body arguments can be parsed, they are sent in the separate request*body_args field of the request.\n"
                },
                "forwardRequestHeaders": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the original HTTP request headers are sent as a map in the request_headers field of the JSON-encoded request.\n"
                },
                "forwardRequestMethod": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the original HTTP request method verb is sent in the request_method field of the JSON-encoded request.\n"
                },
                "forwardRequestUri": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the original HTTP request URI is sent in the request_uri field of the JSON-encoded request.\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "The AWS Lambda function to invoke. Both function name and function ARN (including partial) are supported.\n"
                },
                "host": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "invocationType": {
                    "type": "string",
                    "description": "The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun. must be one of [\"RequestResponse\", \"Event\", \"DryRun\"]\n"
                },
                "isProxyIntegration": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the response format to receive from the Lambda to this format.\n"
                },
                "keepalive": {
                    "type": "number",
                    "description": "An optional value in milliseconds that defines how long an idle connection lives before being closed.\n"
                },
                "logType": {
                    "type": "string",
                    "description": "The LogType to use when invoking the function. By default, None and Tail are supported. must be one of [\"Tail\", \"None\"]\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "proxyUrl": {
                    "type": "string",
                    "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.\n"
                },
                "qualifier": {
                    "type": "string",
                    "description": "The qualifier to use when invoking the function.\n"
                },
                "skipLargeBodies": {
                    "type": "boolean",
                    "description": "An optional value that defines whether Kong should send large bodies that are buffered to disk\n"
                },
                "timeout": {
                    "type": "number",
                    "description": "An optional timeout in milliseconds when invoking the function.\n"
                },
                "unhandledStatus": {
                    "type": "integer",
                    "description": "The response status code to use (instead of the default 200, 202, or 204) in the case of an Unhandled Function Error.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsAssumeRoleArn",
                        "awsImdsProtocolVersion",
                        "awsKey",
                        "awsRegion",
                        "awsRoleSessionName",
                        "awsSecret",
                        "awsgatewayCompatible",
                        "base64EncodeBody",
                        "disableHttps",
                        "forwardRequestBody",
                        "forwardRequestHeaders",
                        "forwardRequestMethod",
                        "forwardRequestUri",
                        "functionName",
                        "host",
                        "invocationType",
                        "isProxyIntegration",
                        "keepalive",
                        "logType",
                        "port",
                        "proxyUrl",
                        "qualifier",
                        "skipLargeBodies",
                        "timeout",
                        "unhandledStatus"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAwsLambdaConsumer:GatewayPluginAwsLambdaConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAwsLambdaConsumerGroup:GatewayPluginAwsLambdaConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAwsLambdaRoute:GatewayPluginAwsLambdaRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginAwsLambdaService:GatewayPluginAwsLambdaService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginBasicAuthConfig:GatewayPluginBasicAuthConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (Consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`. Please note that this value must refer to the Consumer `id` or `username` attribute, and **not** its `custom_id`.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin will strip the credential from the request (i.e. the `Authorization` header) before proxying it.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "anonymous",
                        "hideCredentials",
                        "realm"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginBasicAuthConsumer:GatewayPluginBasicAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginBasicAuthConsumerGroup:GatewayPluginBasicAuthConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginBasicAuthRoute:GatewayPluginBasicAuthRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginBasicAuthService:GatewayPluginBasicAuthService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorrelationIdConfig:GatewayPluginCorrelationIdConfig": {
            "properties": {
                "echoDownstream": {
                    "type": "boolean",
                    "description": "Whether to echo the header back to downstream (the client).\n"
                },
                "generator": {
                    "type": "string",
                    "description": "The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See Generators. must be one of [\"uuid\", \"uuid#counter\", \"tracker\"]\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "The HTTP header name to use for the correlation ID.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "echoDownstream",
                        "generator",
                        "headerName"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorrelationIdConsumer:GatewayPluginCorrelationIdConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorrelationIdConsumerGroup:GatewayPluginCorrelationIdConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorrelationIdRoute:GatewayPluginCorrelationIdRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorrelationIdService:GatewayPluginCorrelationIdService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorsConfig:GatewayPluginCorsConfig": {
            "properties": {
                "credentials": {
                    "type": "boolean",
                    "description": "Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.\n"
                },
                "exposedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value for the `Access-Control-Allow-Headers` header.\n"
                },
                "maxAge": {
                    "type": "number",
                    "description": "Indicates how long the results of the preflight request can be cached, in `seconds`.\n"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'\n"
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.\n"
                },
                "preflightContinue": {
                    "type": "boolean",
                    "description": "A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.\n"
                },
                "privateNetwork": {
                    "type": "boolean",
                    "description": "Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "credentials",
                        "exposedHeaders",
                        "headers",
                        "maxAge",
                        "methods",
                        "origins",
                        "preflightContinue",
                        "privateNetwork"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorsConsumer:GatewayPluginCorsConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorsConsumerGroup:GatewayPluginCorsConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorsRoute:GatewayPluginCorsRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginCorsService:GatewayPluginCorsService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginExitTransformerConfig:GatewayPluginExitTransformerConfig": {
            "properties": {
                "functions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "handleUnexpected": {
                    "type": "boolean",
                    "description": "Determines whether to handle unexpected errors by transforming their responses.\n"
                },
                "handleUnknown": {
                    "type": "boolean",
                    "description": "Determines whether to handle unknown status codes by transforming their responses.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "functions",
                        "handleUnexpected",
                        "handleUnknown"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginExitTransformerConsumer:GatewayPluginExitTransformerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginExitTransformerConsumerGroup:GatewayPluginExitTransformerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginExitTransformerRoute:GatewayPluginExitTransformerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginExitTransformerService:GatewayPluginExitTransformerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginFileLogConfig:GatewayPluginFileLogConfig": {
            "properties": {
                "customFieldsByLua": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Lua code as a key-value map\n"
                },
                "path": {
                    "type": "string",
                    "description": "The file path of the output log file. The plugin creates the log file if it doesn't exist yet.\n"
                },
                "reopen": {
                    "type": "boolean",
                    "description": "Determines whether the log file is closed and reopened on every request.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "customFieldsByLua",
                        "path",
                        "reopen"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginFileLogConsumer:GatewayPluginFileLogConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginFileLogConsumerGroup:GatewayPluginFileLogConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginFileLogRoute:GatewayPluginFileLogRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginFileLogService:GatewayPluginFileLogService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginIpRestrictionConfig:GatewayPluginIpRestrictionConfig": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs or CIDR ranges to allow. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs or CIDR ranges to deny. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to send as a response body to rejected requests.\n"
                },
                "status": {
                    "type": "number",
                    "description": "The HTTP status of the requests that will be rejected by the plugin.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allows",
                        "denies",
                        "message",
                        "status"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginIpRestrictionConsumer:GatewayPluginIpRestrictionConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginIpRestrictionConsumerGroup:GatewayPluginIpRestrictionConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginIpRestrictionRoute:GatewayPluginIpRestrictionRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginIpRestrictionService:GatewayPluginIpRestrictionService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJqConfig:GatewayPluginJqConfig": {
            "properties": {
                "requestIfMediaTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requestJqProgram": {
                    "type": "string"
                },
                "requestJqProgramOptions": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConfigRequestJqProgramOptions:GatewayPluginJqConfigRequestJqProgramOptions"
                },
                "responseIfMediaTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "responseIfStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "responseJqProgram": {
                    "type": "string"
                },
                "responseJqProgramOptions": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConfigResponseJqProgramOptions:GatewayPluginJqConfigResponseJqProgramOptions"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "requestIfMediaTypes",
                        "requestJqProgram",
                        "requestJqProgramOptions",
                        "responseIfMediaTypes",
                        "responseIfStatusCodes",
                        "responseJqProgram",
                        "responseJqProgramOptions"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJqConfigRequestJqProgramOptions:GatewayPluginJqConfigRequestJqProgramOptions": {
            "properties": {
                "asciiOutput": {
                    "type": "boolean"
                },
                "compactOutput": {
                    "type": "boolean"
                },
                "joinOutput": {
                    "type": "boolean"
                },
                "rawOutput": {
                    "type": "boolean"
                },
                "sortKeys": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asciiOutput",
                        "compactOutput",
                        "joinOutput",
                        "rawOutput",
                        "sortKeys"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJqConfigResponseJqProgramOptions:GatewayPluginJqConfigResponseJqProgramOptions": {
            "properties": {
                "asciiOutput": {
                    "type": "boolean"
                },
                "compactOutput": {
                    "type": "boolean"
                },
                "joinOutput": {
                    "type": "boolean"
                },
                "rawOutput": {
                    "type": "boolean"
                },
                "sortKeys": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "asciiOutput",
                        "compactOutput",
                        "joinOutput",
                        "rawOutput",
                        "sortKeys"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJqConsumer:GatewayPluginJqConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJqConsumerGroup:GatewayPluginJqConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJqRoute:GatewayPluginJqRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJqService:GatewayPluginJqService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtConfig:GatewayPluginJwtConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.\n"
                },
                "claimsToVerifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of registered claims (according to RFC 7519) that Kong can verify as well. Accepted values: one of exp or nbf.\n"
                },
                "cookieNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of cookie names that Kong will inspect to retrieve JWTs.\n"
                },
                "headerNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of HTTP header names that Kong will inspect to retrieve JWTs.\n"
                },
                "keyClaimName": {
                    "type": "string",
                    "description": "The name of the claim in which the key identifying the secret must be passed. The plugin will attempt to read this claim from the JWT payload and the header, in that order.\n"
                },
                "maximumExpiration": {
                    "type": "number",
                    "description": "A value between 0 and 31536000 (365 days) limiting the lifetime of the JWT to maximum_expiration seconds in the future.\n"
                },
                "runOnPreflight": {
                    "type": "boolean",
                    "description": "A boolean value that indicates whether the plugin should run (and try to authenticate) on OPTIONS preflight requests. If set to false, then OPTIONS requests will always be allowed.\n"
                },
                "secretIsBase64": {
                    "type": "boolean",
                    "description": "If true, the plugin assumes the credential’s secret to be base64 encoded. You will need to create a base64-encoded secret for your Consumer, and sign your JWT with the original secret.\n"
                },
                "uriParamNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of querystring parameters that Kong will inspect to retrieve JWTs.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "anonymous",
                        "claimsToVerifies",
                        "cookieNames",
                        "headerNames",
                        "keyClaimName",
                        "maximumExpiration",
                        "runOnPreflight",
                        "secretIsBase64",
                        "uriParamNames"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtConsumer:GatewayPluginJwtConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtConsumerGroup:GatewayPluginJwtConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtRoute:GatewayPluginJwtRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtService:GatewayPluginJwtService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtSignerConfig:GatewayPluginJwtSignerConfig": {
            "properties": {
                "accessTokenConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to apply an access token to a Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of alues. Valid values are `id`, `username`, and `custom_id`.\n"
                },
                "accessTokenConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (for example, `sub` or `username`) in an access token to Kong consumer entity.\n"
                },
                "accessTokenIntrospectionAuthorization": {
                    "type": "string",
                    "description": "If the introspection endpoint requires client authentication (client being the JWT Signer plugin), you can specify the `Authorization` header's value with this configuration parameter.\n"
                },
                "accessTokenIntrospectionBodyArgs": {
                    "type": "string",
                    "description": "This parameter allows you to pass URL encoded request body arguments. For example: `resource=` or `a=1\u0026b=\u0026c`.\n"
                },
                "accessTokenIntrospectionConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to do access token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values.\n"
                },
                "accessTokenIntrospectionConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in access token introspection results to the Kong consumer entity.\n"
                },
                "accessTokenIntrospectionEndpoint": {
                    "type": "string",
                    "description": "When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter.\n"
                },
                "accessTokenIntrospectionHint": {
                    "type": "string",
                    "description": "If you need to give `hint` parameter when introspecting an access token, use this parameter to specify the value. By default, the plugin sends `hint=access_token`.\n"
                },
                "accessTokenIntrospectionJwtClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If your introspection endpoint returns an access token in one of the keys (or claims) within the introspection results (`JSON`). If the key cannot be found, the plugin responds with `401 Unauthorized`. Also if the key is found but cannot be decoded as JWT, it also responds with `401 Unauthorized`.\n"
                },
                "accessTokenIntrospectionLeeway": {
                    "type": "number",
                    "description": "Adjusts clock skew between the token issuer introspection results and Kong. The value is added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time in seconds. You can disable access token introspection `expiry` verification altogether with `config.verify_access_token_introspection_expiry`.\n"
                },
                "accessTokenIntrospectionScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the claim/property in access token introspection results (`JSON`) to be verified against values of `config.access_token_introspection_scopes_required`. This supports nested claims. For example, with Keycloak you could use `[ \"realm_access\", \"roles\" ]`, hich can be given as `realm_access,roles` (form post). If the claim is not found in access token introspection results, and you have specified `config.access_token_introspection_scopes_required`, the plugin responds with `403 Forbidden`.\n"
                },
                "accessTokenIntrospectionScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.access_token_introspection_scopes_claim`.\n"
                },
                "accessTokenIntrospectionTimeout": {
                    "type": "number",
                    "description": "Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on access token introspection.\n"
                },
                "accessTokenIssuer": {
                    "type": "string",
                    "description": "The `iss` claim of a signed or re-signed access token is set to this value. Original `iss` claim of the incoming token (possibly introspected) is stored in `original_iss` claim of the newly signed access token.\n"
                },
                "accessTokenJwksUri": {
                    "type": "string",
                    "description": "Specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the access token.\n"
                },
                "accessTokenJwksUriClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.\n"
                },
                "accessTokenJwksUriClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_username`\n"
                },
                "accessTokenJwksUriClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_password`\n"
                },
                "accessTokenJwksUriRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `access_token_jwks_uri`. The default value 0 means no auto-rotation.\n"
                },
                "accessTokenKeyset": {
                    "type": "string",
                    "description": "The name of the keyset containing signing keys.\n"
                },
                "accessTokenKeysetClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `access_token_keyset` is an https uri that requires mTLS Auth.\n"
                },
                "accessTokenKeysetClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_username`\n"
                },
                "accessTokenKeysetClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_password`\n"
                },
                "accessTokenKeysetRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `access_token_keyset`. The default value 0 means no auto-rotation.\n"
                },
                "accessTokenLeeway": {
                    "type": "number",
                    "description": "Adjusts clock skew between the token issuer and Kong. The value is added to the token's `exp` claim before checking token expiry against Kong servers' current time in seconds. You can disable access token `expiry` verification altogether with `config.verify_access_token_expiry`.\n"
                },
                "accessTokenOptional": {
                    "type": "boolean",
                    "description": "If an access token is not provided or no `config.access_token_request_header` is specified, the plugin cannot verify the access token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Use this parameter to allow the request to proceed even when there is no token to check. If the token is provided, then this parameter has no effect\n"
                },
                "accessTokenRequestHeader": {
                    "type": "string",
                    "description": "This parameter tells the name of the header where to look for the access token.\n"
                },
                "accessTokenScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the claim in an access token to verify against values of `config.access_token_scopes_required`.\n"
                },
                "accessTokenScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the required values (or scopes) that are checked by a claim specified by `config.access_token_scopes_claim`.\n"
                },
                "accessTokenSigningAlgorithm": {
                    "type": "string",
                    "description": "When this plugin sets the upstream header as specified with `config.access_token_upstream_header`, re-signs the original access token using the private keys of the JWT Signer plugin. Specify the algorithm that is used to sign the token. The `config.access_token_issuer` specifies which `keyset` is used to sign the new token issued by Kong using the specified signing algorithm. must be one of [\"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"EdDSA\"]\n"
                },
                "accessTokenUpstreamHeader": {
                    "type": "string",
                    "description": "Removes the `config.access_token_request_header` from the request after reading its value. With `config.access_token_upstream_header`, you can specify the upstream header where the plugin adds the Kong signed token. If you don't specify a value, such as use `null` or `\"\"` (empty string), the plugin does not even try to sign or re-sign the token.\n"
                },
                "accessTokenUpstreamLeeway": {
                    "type": "number",
                    "description": "If you want to add or subtract (using a negative value) expiry time (in seconds) of the original access token, you can specify a value that is added to the original access token's `exp` claim.\n"
                },
                "addAccessTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "addChannelTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "addClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Add customized claims to both tokens if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "cacheAccessTokenIntrospection": {
                    "type": "boolean",
                    "description": "Whether to cache access token introspection results.\n"
                },
                "cacheChannelTokenIntrospection": {
                    "type": "boolean",
                    "description": "Whether to cache channel token introspection results.\n"
                },
                "channelTokenConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to do channel token to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of valid values: `id`, `username`, and `custom_id`.\n"
                },
                "channelTokenConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter. Kong consumers have an `id`, a `username`, and a `custom_id`. If this parameter is enabled but the mapping fails, such as when there's a non-existent Kong consumer, the plugin responds with `403 Forbidden`.\n"
                },
                "channelTokenIntrospectionAuthorization": {
                    "type": "string",
                    "description": "When using `opaque` channel tokens, and you want to turn on channel token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise the plugin will not try introspection, and instead returns `401 Unauthorized` when using opaque channel tokens.\n"
                },
                "channelTokenIntrospectionBodyArgs": {
                    "type": "string",
                    "description": "If you need to pass additional body arguments to introspection endpoint when the plugin introspects the opaque channel token, you can use this config parameter to specify them. You should URL encode the value. For example: `resource=` or `a=1\u0026b=\u0026c`.\n"
                },
                "channelTokenIntrospectionConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to do channel token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values. Valid values are `id`, `username` and `custom_id`.\n"
                },
                "channelTokenIntrospectionConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in channel token introspection results to Kong consumer entity\n"
                },
                "channelTokenIntrospectionEndpoint": {
                    "type": "string",
                    "description": "When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise, the plugin does not try introspection and returns `401 Unauthorized` instead.\n"
                },
                "channelTokenIntrospectionHint": {
                    "type": "string",
                    "description": "If you need to give `hint` parameter when introspecting a channel token, you can use this parameter to specify the value of such parameter. By default, a `hint` isn't sent with channel token introspection.\n"
                },
                "channelTokenIntrospectionJwtClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If your introspection endpoint returns a channel token in one of the keys (or claims) in the introspection results (`JSON`), the plugin can use that value instead of the introspection results when doing expiry verification and signing of the new token issued by Kong.\n"
                },
                "channelTokenIntrospectionLeeway": {
                    "type": "number",
                    "description": "You can use this parameter to adjust clock skew between the token issuer introspection results and Kong. The value will be added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time (in seconds). You can disable channel token introspection `expiry` verification altogether with `config.verify_channel_token_introspection_expiry`.\n"
                },
                "channelTokenIntrospectionScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Use this parameter to specify the claim/property in channel token introspection results (`JSON`) to be verified against values of `config.channel_token_introspection_scopes_required`. This supports nested claims.\n"
                },
                "channelTokenIntrospectionScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Use this parameter to specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.channel_token_introspection_scopes_claim`.\n"
                },
                "channelTokenIntrospectionTimeout": {
                    "type": "number",
                    "description": "Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on channel token introspection.\n"
                },
                "channelTokenIssuer": {
                    "type": "string",
                    "description": "The `iss` claim of the re-signed channel token is set to this value, which is `kong` by default. The original `iss` claim of the incoming token (possibly introspected) is stored in the `original_iss` claim of the newly signed channel token.\n"
                },
                "channelTokenJwksUri": {
                    "type": "string",
                    "description": "If you want to use `config.verify_channel_token_signature`, you must specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the channel token. If you don't specify a URI and you pass a JWT token to the plugin, then the plugin responds with `401 Unauthorized`.\n"
                },
                "channelTokenJwksUriClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.\n"
                },
                "channelTokenJwksUriClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_username`\n"
                },
                "channelTokenJwksUriClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_password`\n"
                },
                "channelTokenJwksUriRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `channel_token_jwks_uri`. The default value 0 means no auto-rotation.\n"
                },
                "channelTokenKeyset": {
                    "type": "string",
                    "description": "The name of the keyset containing signing keys.\n"
                },
                "channelTokenKeysetClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `channel_token_keyset` is an https uri that requires mTLS Auth.\n"
                },
                "channelTokenKeysetClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_username`\n"
                },
                "channelTokenKeysetClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_password`\n"
                },
                "channelTokenKeysetRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `channel_token_keyset`. The default value 0 means no auto-rotation.\n"
                },
                "channelTokenLeeway": {
                    "type": "number",
                    "description": "Adjusts clock skew between the token issuer and Kong. The value will be added to token's `exp` claim before checking token expiry against Kong servers current time in seconds. You can disable channel token `expiry` verification altogether with `config.verify_channel_token_expiry`.\n"
                },
                "channelTokenOptional": {
                    "type": "boolean",
                    "description": "If a channel token is not provided or no `config.channel_token_request_header` is specified, the plugin cannot verify the channel token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Enable this parameter to allow the request to proceed even when there is no channel token to check. If the channel token is provided, then this parameter has no effect\n"
                },
                "channelTokenRequestHeader": {
                    "type": "string",
                    "description": "This parameter tells the name of the header where to look for the channel token. If you don't want to do anything with the channel token, then you can set this to `null` or `\"\"` (empty string).\n"
                },
                "channelTokenScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the claim in a channel token to verify against values of `config.channel_token_scopes_required`. This supports nested claims.\n"
                },
                "channelTokenScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the required values (or scopes) that are checked by a claim specified by `config.channel_token_scopes_claim`.\n"
                },
                "channelTokenSigningAlgorithm": {
                    "type": "string",
                    "description": "When this plugin sets the upstream header as specified with `config.channel_token_upstream_header`, it also re-signs the original channel token using private keys of this plugin. Specify the algorithm that is used to sign the token. must be one of [\"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"EdDSA\"]\n"
                },
                "channelTokenUpstreamHeader": {
                    "type": "string",
                    "description": "This plugin removes the `config.channel_token_request_header` from the request after reading its value.\n"
                },
                "channelTokenUpstreamLeeway": {
                    "type": "number",
                    "description": "If you want to add or perhaps subtract (using negative value) expiry time of the original channel token, you can specify a value that is added to the original channel token's `exp` claim.\n"
                },
                "enableAccessTokenIntrospection": {
                    "type": "boolean",
                    "description": "If you don't want to support opaque access tokens, change this configuration parameter to `false` to disable introspection.\n"
                },
                "enableChannelTokenIntrospection": {
                    "type": "boolean",
                    "description": "If you don't want to support opaque channel tokens, disable introspection by changing this configuration parameter to `false`.\n"
                },
                "enableHsSignatures": {
                    "type": "boolean",
                    "description": "Tokens signed with HMAC algorithms such as `HS256`, `HS384`, or `HS512` are not accepted by default. If you need to accept such tokens for verification, enable this setting.\n"
                },
                "enableInstrumentation": {
                    "type": "boolean",
                    "description": "Writes log entries with some added information using `ngx.CRIT` (CRITICAL) level.\n"
                },
                "originalAccessTokenUpstreamHeader": {
                    "type": "string",
                    "description": "The HTTP header name used to store the original access token.\n"
                },
                "originalChannelTokenUpstreamHeader": {
                    "type": "string",
                    "description": "The HTTP header name used to store the original channel token.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "When authentication or authorization fails, or there is an unexpected error, the plugin sends an `WWW-Authenticate` header with the `realm` attribute value.\n"
                },
                "removeAccessTokenClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "remove claims. It should be an array, and each element is a claim key string.\n"
                },
                "removeChannelTokenClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "remove claims. It should be an array, and each element is a claim key string.\n"
                },
                "setAccessTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "setChannelTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "setClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Set customized claims to both tokens. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "trustAccessTokenIntrospection": {
                    "type": "boolean",
                    "description": "Use this parameter to enable and disable further checks on a payload before the new token is signed. If you set this to `true`, the expiry or scopes are not checked on a payload.\n"
                },
                "trustChannelTokenIntrospection": {
                    "type": "boolean",
                    "description": "Providing an opaque channel token for plugin introspection, and verifying expiry and scopes on introspection results may make further payload checks unnecessary before the plugin signs a new token. This also applies when using a JWT token with introspection JSON as per config.channel*token*introspection*jwt*claim. Use this parameter to manage additional payload checks before signing a new token. With true (default), payload's expiry or scopes aren't checked.\n"
                },
                "verifyAccessTokenExpiry": {
                    "type": "boolean",
                    "description": "Quickly turn access token expiry verification off and on as needed.\n"
                },
                "verifyAccessTokenIntrospectionExpiry": {
                    "type": "boolean",
                    "description": "Quickly turn access token introspection expiry verification off and on as needed.\n"
                },
                "verifyAccessTokenIntrospectionScopes": {
                    "type": "boolean",
                    "description": "Quickly turn off and on the access token introspection scopes verification, specified with `config.access_token_introspection_scopes_required`.\n"
                },
                "verifyAccessTokenScopes": {
                    "type": "boolean",
                    "description": "Quickly turn off and on the access token required scopes verification, specified with `config.access_token_scopes_required`.\n"
                },
                "verifyAccessTokenSignature": {
                    "type": "boolean",
                    "description": "Quickly turn access token signature verification off and on as needed.\n"
                },
                "verifyChannelTokenExpiry": {
                    "type": "boolean"
                },
                "verifyChannelTokenIntrospectionExpiry": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token introspection expiry verification.\n"
                },
                "verifyChannelTokenIntrospectionScopes": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token introspection scopes verification specified with `config.channel_token_introspection_scopes_required`.\n"
                },
                "verifyChannelTokenScopes": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token required scopes verification specified with `config.channel_token_scopes_required`.\n"
                },
                "verifyChannelTokenSignature": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token signature verification.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accessTokenConsumerBies",
                        "accessTokenConsumerClaims",
                        "accessTokenIntrospectionAuthorization",
                        "accessTokenIntrospectionBodyArgs",
                        "accessTokenIntrospectionConsumerBies",
                        "accessTokenIntrospectionConsumerClaims",
                        "accessTokenIntrospectionEndpoint",
                        "accessTokenIntrospectionHint",
                        "accessTokenIntrospectionJwtClaims",
                        "accessTokenIntrospectionLeeway",
                        "accessTokenIntrospectionScopesClaims",
                        "accessTokenIntrospectionScopesRequireds",
                        "accessTokenIntrospectionTimeout",
                        "accessTokenIssuer",
                        "accessTokenJwksUri",
                        "accessTokenJwksUriClientCertificate",
                        "accessTokenJwksUriClientPassword",
                        "accessTokenJwksUriClientUsername",
                        "accessTokenJwksUriRotatePeriod",
                        "accessTokenKeyset",
                        "accessTokenKeysetClientCertificate",
                        "accessTokenKeysetClientPassword",
                        "accessTokenKeysetClientUsername",
                        "accessTokenKeysetRotatePeriod",
                        "accessTokenLeeway",
                        "accessTokenOptional",
                        "accessTokenRequestHeader",
                        "accessTokenScopesClaims",
                        "accessTokenScopesRequireds",
                        "accessTokenSigningAlgorithm",
                        "accessTokenUpstreamHeader",
                        "accessTokenUpstreamLeeway",
                        "addAccessTokenClaims",
                        "addChannelTokenClaims",
                        "addClaims",
                        "cacheAccessTokenIntrospection",
                        "cacheChannelTokenIntrospection",
                        "channelTokenConsumerBies",
                        "channelTokenConsumerClaims",
                        "channelTokenIntrospectionAuthorization",
                        "channelTokenIntrospectionBodyArgs",
                        "channelTokenIntrospectionConsumerBies",
                        "channelTokenIntrospectionConsumerClaims",
                        "channelTokenIntrospectionEndpoint",
                        "channelTokenIntrospectionHint",
                        "channelTokenIntrospectionJwtClaims",
                        "channelTokenIntrospectionLeeway",
                        "channelTokenIntrospectionScopesClaims",
                        "channelTokenIntrospectionScopesRequireds",
                        "channelTokenIntrospectionTimeout",
                        "channelTokenIssuer",
                        "channelTokenJwksUri",
                        "channelTokenJwksUriClientCertificate",
                        "channelTokenJwksUriClientPassword",
                        "channelTokenJwksUriClientUsername",
                        "channelTokenJwksUriRotatePeriod",
                        "channelTokenKeyset",
                        "channelTokenKeysetClientCertificate",
                        "channelTokenKeysetClientPassword",
                        "channelTokenKeysetClientUsername",
                        "channelTokenKeysetRotatePeriod",
                        "channelTokenLeeway",
                        "channelTokenOptional",
                        "channelTokenRequestHeader",
                        "channelTokenScopesClaims",
                        "channelTokenScopesRequireds",
                        "channelTokenSigningAlgorithm",
                        "channelTokenUpstreamHeader",
                        "channelTokenUpstreamLeeway",
                        "enableAccessTokenIntrospection",
                        "enableChannelTokenIntrospection",
                        "enableHsSignatures",
                        "enableInstrumentation",
                        "originalAccessTokenUpstreamHeader",
                        "originalChannelTokenUpstreamHeader",
                        "realm",
                        "removeAccessTokenClaims",
                        "removeChannelTokenClaims",
                        "setAccessTokenClaims",
                        "setChannelTokenClaims",
                        "setClaims",
                        "trustAccessTokenIntrospection",
                        "trustChannelTokenIntrospection",
                        "verifyAccessTokenExpiry",
                        "verifyAccessTokenIntrospectionExpiry",
                        "verifyAccessTokenIntrospectionScopes",
                        "verifyAccessTokenScopes",
                        "verifyAccessTokenSignature",
                        "verifyChannelTokenExpiry",
                        "verifyChannelTokenIntrospectionExpiry",
                        "verifyChannelTokenIntrospectionScopes",
                        "verifyChannelTokenScopes",
                        "verifyChannelTokenSignature"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtSignerConsumer:GatewayPluginJwtSignerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtSignerConsumerGroup:GatewayPluginJwtSignerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtSignerRoute:GatewayPluginJwtSignerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginJwtSignerService:GatewayPluginJwtSignerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginKeyAuthConfig:GatewayPluginKeyAuthConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request.\n"
                },
                "keyInBody": {
                    "type": "boolean",
                    "description": "If enabled, the plugin reads the request body. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.\n"
                },
                "keyInHeader": {
                    "type": "boolean",
                    "description": "If enabled (default), the plugin reads the request header and tries to find the key in it.\n"
                },
                "keyInQuery": {
                    "type": "boolean",
                    "description": "If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.\n"
                },
                "keyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describes an array of parameter names where the plugin will look for a key. The key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.\n"
                },
                "runOnPreflight": {
                    "type": "boolean",
                    "description": "A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "anonymous",
                        "hideCredentials",
                        "keyInBody",
                        "keyInHeader",
                        "keyInQuery",
                        "keyNames",
                        "realm",
                        "runOnPreflight"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginKeyAuthConsumer:GatewayPluginKeyAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginKeyAuthConsumerGroup:GatewayPluginKeyAuthConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginKeyAuthRoute:GatewayPluginKeyAuthRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginKeyAuthService:GatewayPluginKeyAuthService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOauth2Config:GatewayPluginOauth2Config": {
            "properties": {
                "acceptHttpIfAlreadyTerminated": {
                    "type": "boolean",
                    "description": "Accepts HTTPs requests that have already been terminated by a proxy or load balancer.\n"
                },
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.\n"
                },
                "authHeaderName": {
                    "type": "string",
                    "description": "The name of the header that is supposed to carry the access token.\n"
                },
                "enableAuthorizationCode": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).\n"
                },
                "enableClientCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).\n"
                },
                "enableImplicitGrant": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).\n"
                },
                "enablePasswordGrant": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).\n"
                },
                "globalCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value that allows using the same OAuth credentials generated by the plugin with any other service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service.\n"
                },
                "mandatoryScope": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.\n"
                },
                "persistentRefreshToken": {
                    "type": "boolean"
                },
                "pkce": {
                    "type": "string",
                    "description": "Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin. must be one of [\"none\", \"lax\", \"strict\"]\n"
                },
                "provisionKey": {
                    "type": "string",
                    "description": "The unique key the plugin has generated when it has been added to the Service.\n"
                },
                "refreshTokenTtl": {
                    "type": "number",
                    "description": "Time-to-live value for data\n"
                },
                "reuseRefreshToken": {
                    "type": "boolean",
                    "description": "An optional boolean value that indicates whether an OAuth refresh token is reused when refreshing an access token.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describes an array of scope names that will be available to the end user. If `mandatory_scope` is set to `true`, then `scopes` are required.\n"
                },
                "tokenExpiration": {
                    "type": "number",
                    "description": "An optional integer value telling the plugin how many seconds a token should last, after which the client will need to refresh the token. Set to `0` to disable the expiration.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "acceptHttpIfAlreadyTerminated",
                        "anonymous",
                        "authHeaderName",
                        "enableAuthorizationCode",
                        "enableClientCredentials",
                        "enableImplicitGrant",
                        "enablePasswordGrant",
                        "globalCredentials",
                        "hideCredentials",
                        "mandatoryScope",
                        "persistentRefreshToken",
                        "pkce",
                        "provisionKey",
                        "refreshTokenTtl",
                        "reuseRefreshToken",
                        "scopes",
                        "tokenExpiration"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOauth2Consumer:GatewayPluginOauth2Consumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOauth2ConsumerGroup:GatewayPluginOauth2ConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOauth2Route:GatewayPluginOauth2Route": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOauth2Service:GatewayPluginOauth2Service": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpenidConnectConfig:GatewayPluginOpenidConnectConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value that functions as an “anonymous” consumer if authentication fails. If empty (default null), requests that fail authentication will return a `4xx` HTTP status code. This value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.\n"
                },
                "audienceClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the audience. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "audienceRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The audiences (`audience_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The audience passed to the authorization endpoint.\n"
                },
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of credentials/grants to enable.\n"
                },
                "authenticatedGroupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains authenticated groups. This setting can be used together with ACL plugin, but it also enables IdP managed groups with other applications and integrations. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "authorizationCookieDomain": {
                    "type": "string",
                    "description": "The authorization cookie Domain flag.\n"
                },
                "authorizationCookieHttpOnly": {
                    "type": "boolean",
                    "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.\n"
                },
                "authorizationCookieName": {
                    "type": "string",
                    "description": "The authorization cookie name.\n"
                },
                "authorizationCookiePath": {
                    "type": "string",
                    "description": "The authorization cookie Path flag.\n"
                },
                "authorizationCookieSameSite": {
                    "type": "string",
                    "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of [\"Strict\", \"Lax\", \"None\", \"Default\"]\n"
                },
                "authorizationCookieSecure": {
                    "type": "boolean",
                    "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.\n"
                },
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "The authorization endpoint. If set it overrides the value in `authorization_endpoint` returned by the discovery endpoint.\n"
                },
                "authorizationQueryArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query arguments passed from the client to the authorization endpoint.\n"
                },
                "authorizationQueryArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument names passed to the authorization endpoint.\n"
                },
                "authorizationQueryArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument values passed to the authorization endpoint.\n"
                },
                "authorizationRollingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the session used for the authorization code flow can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.\n"
                },
                "bearerTokenCookieName": {
                    "type": "string",
                    "description": "The name of the cookie in which the bearer token is passed.\n"
                },
                "bearerTokenParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the bearer token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body - `cookie`: search the HTTP request cookies specified with `config.bearer_token_cookie_name`.\n"
                },
                "byUsernameIgnoreCase": {
                    "type": "boolean",
                    "description": "If `consumer_by` is set to `username`, specify whether `username` can match consumers case-insensitively.\n"
                },
                "cacheIntrospection": {
                    "type": "boolean",
                    "description": "Cache the introspection endpoint requests.\n"
                },
                "cacheTokenExchange": {
                    "type": "boolean",
                    "description": "Cache the token exchange endpoint requests.\n"
                },
                "cacheTokens": {
                    "type": "boolean",
                    "description": "Cache the token endpoint requests.\n"
                },
                "cacheTokensSalt": {
                    "type": "string",
                    "description": "Salt used for generating the cache key that is used for caching the token endpoint requests.\n"
                },
                "cacheTtl": {
                    "type": "number",
                    "description": "The default cache ttl in seconds that is used in case the cached object does not specify the expiry.\n"
                },
                "cacheTtlMax": {
                    "type": "number",
                    "description": "The maximum cache ttl in seconds (enforced).\n"
                },
                "cacheTtlMin": {
                    "type": "number",
                    "description": "The minimum cache ttl in seconds (enforced).\n"
                },
                "cacheTtlNeg": {
                    "type": "number",
                    "description": "The negative cache ttl in seconds.\n"
                },
                "cacheTtlResurrect": {
                    "type": "number",
                    "description": "The resurrection ttl in seconds.\n"
                },
                "cacheUserInfo": {
                    "type": "boolean",
                    "description": "Cache the user info requests.\n"
                },
                "clientAlgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The algorithm to use for client*secret*jwt (only HS***) or private*key*jwt authentication.\n"
                },
                "clientArg": {
                    "type": "string",
                    "description": "The client to use for this request (the selection is made with a request parameter with the same name).\n"
                },
                "clientAuths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default OpenID Connect client authentication method is 'client*secret*basic' (using 'Authorization: Basic' header), 'client*secret*post' (credentials in body), 'client*secret*jwt' (signed client assertion in body), 'private*key*jwt' (private key-signed assertion), 'tls*client*auth' (client certificate), 'self*signed*tls*client*auth' (self-signed client certificate), and 'none' (no authentication).\n"
                },
                "clientCredentialsParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the client credentials: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search from the HTTP request body.\n"
                },
                "clientIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The client id(s) that the plugin uses when it calls authenticated endpoints on the identity provider.\n"
                },
                "clientJwks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConfigClientJwk:GatewayPluginOpenidConnectConfigClientJwk"
                    },
                    "description": "The JWK used for the private*key*jwt authentication.\n"
                },
                "clientSecrets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The client secret.\n"
                },
                "consumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Consumer fields used for mapping: - `id`: try to find the matching Consumer by `id` - `username`: try to find the matching Consumer by `username` - `custom_id`: try to find the matching Consumer by `custom_id`.\n"
                },
                "consumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim used for consumer mapping. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "consumerOptional": {
                    "type": "boolean",
                    "description": "Do not terminate the request if consumer mapping fails.\n"
                },
                "credentialClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim used to derive virtual credentials (e.g. to be consumed by the rate-limiting plugin), in case the consumer mapping is not used. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "disableSessions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Disable issuing the session cookie with the specified grants.\n"
                },
                "discoveryHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the discovery endpoint.\n"
                },
                "discoveryHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the discovery endpoint.\n"
                },
                "displayErrors": {
                    "type": "boolean",
                    "description": "Display errors on failure responses.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The allowed values for the `hd` claim.\n"
                },
                "downstreamAccessTokenHeader": {
                    "type": "string",
                    "description": "The downstream access token header.\n"
                },
                "downstreamAccessTokenJwkHeader": {
                    "type": "string",
                    "description": "The downstream access token JWK header.\n"
                },
                "downstreamHeadersClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The downstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "downstreamHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The downstream header names for the claim values.\n"
                },
                "downstreamIdTokenHeader": {
                    "type": "string",
                    "description": "The downstream id token header.\n"
                },
                "downstreamIdTokenJwkHeader": {
                    "type": "string",
                    "description": "The downstream id token JWK header.\n"
                },
                "downstreamIntrospectionHeader": {
                    "type": "string",
                    "description": "The downstream introspection header.\n"
                },
                "downstreamIntrospectionJwtHeader": {
                    "type": "string",
                    "description": "The downstream introspection JWT header.\n"
                },
                "downstreamRefreshTokenHeader": {
                    "type": "string",
                    "description": "The downstream refresh token header.\n"
                },
                "downstreamSessionIdHeader": {
                    "type": "string",
                    "description": "The downstream session id header.\n"
                },
                "downstreamUserInfoHeader": {
                    "type": "string",
                    "description": "The downstream user info header.\n"
                },
                "downstreamUserInfoJwtHeader": {
                    "type": "string",
                    "description": "The downstream user info JWT header (in case the user info returns a JWT response).\n"
                },
                "dpopProofLifetime": {
                    "type": "number",
                    "description": "Specifies the lifetime in seconds of the DPoP proof. It determines how long the same proof can be used after creation. The creation time is determined by the nonce creation time if a nonce is used, and the iat claim otherwise.\n"
                },
                "dpopUseNonce": {
                    "type": "boolean",
                    "description": "Specifies whether to challenge the client with a nonce value for DPoP proof. When enabled it will also be used to calculate the DPoP proof lifetime.\n"
                },
                "enableHsSignatures": {
                    "type": "boolean",
                    "description": "Enable shared secret, for example, HS256, signatures (when disabled they will not be accepted).\n"
                },
                "endSessionEndpoint": {
                    "type": "string",
                    "description": "The end session endpoint. If set it overrides the value in `end_session_endpoint` returned by the discovery endpoint.\n"
                },
                "exposeErrorCode": {
                    "type": "boolean",
                    "description": "Specifies whether to expose the error code header, as defined in RFC 6750. If an authorization request fails, this header is sent in the response. Set to `false` to disable.\n"
                },
                "extraJwksUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "JWKS URIs whose public keys are trusted (in addition to the keys found with the discovery).\n"
                },
                "forbiddenDestroySession": {
                    "type": "boolean",
                    "description": "Destroy any active session for the forbidden requests.\n"
                },
                "forbiddenErrorMessage": {
                    "type": "string",
                    "description": "The error message for the forbidden requests (when not using the redirection).\n"
                },
                "forbiddenRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client on forbidden requests.\n"
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the groups. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "groupsRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups (`groups_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "Remove the credentials used for authentication from the request. If multiple credentials are sent with the same request, the plugin will remove those that were used for successful authentication.\n"
                },
                "httpProxy": {
                    "type": "string",
                    "description": "The HTTP proxy.\n"
                },
                "httpProxyAuthorization": {
                    "type": "string",
                    "description": "The HTTP proxy authorization.\n"
                },
                "httpVersion": {
                    "type": "number",
                    "description": "The HTTP version used for the requests by this plugin: - `1.1`: HTTP 1.1 (the default) - `1.0`: HTTP 1.0.\n"
                },
                "httpsProxy": {
                    "type": "string",
                    "description": "The HTTPS proxy.\n"
                },
                "httpsProxyAuthorization": {
                    "type": "string",
                    "description": "The HTTPS proxy authorization.\n"
                },
                "idTokenParamName": {
                    "type": "string",
                    "description": "The name of the parameter used to pass the id token.\n"
                },
                "idTokenParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the id token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.\n"
                },
                "ignoreSignatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Skip the token signature verification on certain grants: - `password`: OAuth password grant - `client_credentials`: OAuth client credentials grant - `authorization_code`: authorization code flow - `refresh_token`: OAuth refresh token grant - `session`: session cookie authentication - `introspection`: OAuth introspection - `userinfo`: OpenID Connect user info endpoint authentication.\n"
                },
                "introspectJwtTokens": {
                    "type": "boolean",
                    "description": "Specifies whether to introspect the JWT access tokens (can be used to check for revocations).\n"
                },
                "introspectionAccept": {
                    "type": "string",
                    "description": "The value of `Accept` header for introspection requests: - `application/json`: introspection response as JSON - `application/token-introspection+jwt`: introspection response as JWT (from the current IETF draft document) - `application/jwt`: introspection response as JWT (from the obsolete IETF draft document). must be one of [\"application/json\", \"application/token-introspection+jwt\", \"application/jwt\"]\n"
                },
                "introspectionCheckActive": {
                    "type": "boolean",
                    "description": "Check that the introspection response has an `active` claim with a value of `true`.\n"
                },
                "introspectionEndpoint": {
                    "type": "string",
                    "description": "The introspection endpoint. If set it overrides the value in `introspection_endpoint` returned by the discovery endpoint.\n"
                },
                "introspectionEndpointAuthMethod": {
                    "type": "string",
                    "description": "The introspection endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client*secret*basic\", \"client*secret*post\", \"client*secret*jwt\", \"private*key*jwt\", \"tls*client*auth\", \"self*signed*tls*client*auth\", \"none\"]\n"
                },
                "introspectionHeadersClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra headers passed from the client to the introspection endpoint.\n"
                },
                "introspectionHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the introspection endpoint.\n"
                },
                "introspectionHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the introspection endpoint.\n"
                },
                "introspectionHint": {
                    "type": "string",
                    "description": "Introspection hint parameter value passed to the introspection endpoint.\n"
                },
                "introspectionPostArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post arguments passed from the client to the introspection endpoint.\n"
                },
                "introspectionPostArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument names passed to the introspection endpoint.\n"
                },
                "introspectionPostArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument values passed to the introspection endpoint.\n"
                },
                "introspectionTokenParamName": {
                    "type": "string",
                    "description": "Designate token's parameter name for introspection.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The discovery endpoint (or the issuer identifier). When there is no discovery endpoint, please also configure `config.using_pseudo_issuer=true`.\n"
                },
                "issuersAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The issuers allowed to be present in the tokens (`iss` claim).\n"
                },
                "jwtSessionClaim": {
                    "type": "string",
                    "description": "The claim to match against the JWT session cookie.\n"
                },
                "jwtSessionCookie": {
                    "type": "string",
                    "description": "The name of the JWT session cookie.\n"
                },
                "keepalive": {
                    "type": "boolean",
                    "description": "Use keepalive with the HTTP client.\n"
                },
                "leeway": {
                    "type": "number",
                    "description": "Defines leeway time (in seconds) for `auth_time`, `exp`, `iat`, and `nbf` claims\n"
                },
                "loginAction": {
                    "type": "string",
                    "description": "What to do after successful login: - `upstream`: proxy request to upstream service - `response`: terminate request with a response - `redirect`: redirect to a different location. must be one of [\"upstream\", \"response\", \"redirect\"]\n"
                },
                "loginMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enable login functionality with specified grants.\n"
                },
                "loginRedirectMode": {
                    "type": "string",
                    "description": "Where to place `login_tokens` when using `redirect` `login_action`: - `query`: place tokens in query string - `fragment`: place tokens in url fragment (not readable by servers). must be one of [\"query\", \"fragment\"]\n"
                },
                "loginRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client when `login_action` is set to `redirect`.\n"
                },
                "loginTokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "What tokens to include in `response` body or `redirect` query string or fragment: - `id_token`: include id token - `access_token`: include access token - `refresh_token`: include refresh token - `tokens`: include the full token endpoint response - `introspection`: include introspection response.\n"
                },
                "logoutMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The request methods that can activate the logout: - `POST`: HTTP POST method - `GET`: HTTP GET method - `DELETE`: HTTP DELETE method.\n"
                },
                "logoutPostArg": {
                    "type": "string",
                    "description": "The request body argument that activates the logout.\n"
                },
                "logoutQueryArg": {
                    "type": "string",
                    "description": "The request query argument that activates the logout.\n"
                },
                "logoutRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client after the logout.\n"
                },
                "logoutRevoke": {
                    "type": "boolean",
                    "description": "Revoke tokens as part of the logout.\n"
                },
                "logoutRevokeAccessToken": {
                    "type": "boolean",
                    "description": "Revoke the access token as part of the logout. Requires `logout_revoke` to be set to `true`.\n"
                },
                "logoutRevokeRefreshToken": {
                    "type": "boolean",
                    "description": "Revoke the refresh token as part of the logout. Requires `logout_revoke` to be set to `true`.\n"
                },
                "logoutUriSuffix": {
                    "type": "string",
                    "description": "The request URI suffix that activates the logout.\n"
                },
                "maxAge": {
                    "type": "number",
                    "description": "The maximum age (in seconds) compared to the `auth_time` claim.\n"
                },
                "mtlsIntrospectionEndpoint": {
                    "type": "string",
                    "description": "Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.\n"
                },
                "mtlsRevocationEndpoint": {
                    "type": "string",
                    "description": "Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.\n"
                },
                "mtlsTokenEndpoint": {
                    "type": "string",
                    "description": "Alias for the token endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.\n"
                },
                "noProxy": {
                    "type": "string",
                    "description": "Do not use proxy with these hosts.\n"
                },
                "passwordParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the username and password: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.\n"
                },
                "preserveQueryArgs": {
                    "type": "boolean",
                    "description": "With this parameter, you can preserve request query arguments even when doing authorization code flow.\n"
                },
                "proofOfPossessionAuthMethodsValidation": {
                    "type": "boolean",
                    "description": "If set to true, only the auth_methods that are compatible with Proof of Possession (PoP) can be configured when PoP is enabled. If set to false, all auth_methods will be configurable and PoP checks will be silently skipped for those auth_methods that are not compatible with PoP.\n"
                },
                "proofOfPossessionDpop": {
                    "type": "string",
                    "description": "Enable Demonstrating Proof-of-Possession (DPoP). If set to strict, all request are verified despite the presence of the DPoP key claim (cnf.jkt). If set to optional, only tokens bound with DPoP's key are verified with the proof. must be one of [\"off\", \"strict\", \"optional\"]\n"
                },
                "proofOfPossessionMtls": {
                    "type": "string",
                    "description": "Enable mtls proof of possession. If set to strict, all tokens (from supported auth_methods: bearer, introspection, and session granted with bearer or introspection) are verified, if set to optional, only tokens that contain the certificate hash claim are verified. If the verification fails, the request will be rejected with 401. must be one of [\"off\", \"strict\", \"optional\"]\n"
                },
                "pushedAuthorizationRequestEndpoint": {
                    "type": "string",
                    "description": "The pushed authorization endpoint. If set it overrides the value in `pushed_authorization_request_endpoint` returned by the discovery endpoint.\n"
                },
                "pushedAuthorizationRequestEndpointAuthMethod": {
                    "type": "string",
                    "description": "The pushed authorization request endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\", \"none\"]\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The redirect URI passed to the authorization and token endpoints.\n"
                },
                "rediscoveryLifetime": {
                    "type": "number",
                    "description": "Specifies how long (in seconds) the plugin waits between discovery attempts. Discovery is still triggered on an as-needed basis.\n"
                },
                "refreshTokenParamName": {
                    "type": "string",
                    "description": "The name of the parameter used to pass the refresh token.\n"
                },
                "refreshTokenParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the refresh token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.\n"
                },
                "refreshTokens": {
                    "type": "boolean",
                    "description": "Specifies whether the plugin should try to refresh (soon to be) expired access tokens if the plugin has a `refresh_token` available.\n"
                },
                "requireProofKeyForCodeExchange": {
                    "type": "boolean",
                    "description": "Forcibly enable or disable the proof key for code exchange. When not set the value is determined through the discovery using the value of `code_challenge_methods_supported`, and enabled automatically (in case the `code_challenge_methods_supported` is missing, the PKCE will not be enabled).\n"
                },
                "requirePushedAuthorizationRequests": {
                    "type": "boolean",
                    "description": "Forcibly enable or disable the pushed authorization requests. When not set the value is determined through the discovery using the value of `require_pushed_authorization_requests` (which defaults to `false`).\n"
                },
                "requireSignedRequestObject": {
                    "type": "boolean",
                    "description": "Forcibly enable or disable the usage of signed request object on authorization or pushed authorization endpoint. When not set the value is determined through the discovery using the value of `require_signed_request_object`, and enabled automatically (in case the `require_signed_request_object` is missing, the feature will not be enabled).\n"
                },
                "resolveDistributedClaims": {
                    "type": "boolean",
                    "description": "Distributed claims are represented by the `_claim_names` and `_claim_sources` members of the JSON object containing the claims. If this parameter is set to `true`, the plugin explicitly resolves these distributed claims.\n"
                },
                "responseMode": {
                    "type": "string",
                    "description": "Response mode passed to the authorization endpoint: - `query`: for parameters in query string - `form_post`: for parameters in request body - `fragment`: for parameters in uri fragment (rarely useful as the plugin itself cannot read it) - `query.jwt`, `form_post.jwt`, `fragment.jwt`: similar to `query`, `form_post` and `fragment` but the parameters are encoded in a JWT - `jwt`: shortcut that indicates the default encoding for the requested response type. must be one of [\"query\", \"form_post\", \"fragment\", \"query.jwt\", \"form_post.jwt\", \"fragment.jwt\", \"jwt\"]\n"
                },
                "responseTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The response type passed to the authorization endpoint.\n"
                },
                "reverify": {
                    "type": "boolean",
                    "description": "Specifies whether to always verify tokens stored in the session.\n"
                },
                "revocationEndpoint": {
                    "type": "string",
                    "description": "The revocation endpoint. If set it overrides the value in `revocation_endpoint` returned by the discovery endpoint.\n"
                },
                "revocationEndpointAuthMethod": {
                    "type": "string",
                    "description": "The revocation endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\", \"none\"]\n"
                },
                "revocationTokenParamName": {
                    "type": "string",
                    "description": "Designate token's parameter name for revocation.\n"
                },
                "rolesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the roles. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "rolesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles (`roles_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "runOnPreflight": {
                    "type": "boolean",
                    "description": "Specifies whether to run this plugin on pre-flight (`OPTIONS`) requests.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scopes passed to the authorization and token endpoints.\n"
                },
                "scopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the scopes. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "scopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scopes (`scopes_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "searchUserInfo": {
                    "type": "boolean",
                    "description": "Specify whether to use the user info endpoint to get additional claims for consumer mapping, credential mapping, authenticated groups, and upstream and downstream headers.\n"
                },
                "sessionAbsoluteTimeout": {
                    "type": "number",
                    "description": "Limits how long the session can be renewed in seconds, until re-authentication is required. 0 disables the checks.\n"
                },
                "sessionAudience": {
                    "type": "string",
                    "description": "The session audience, which is the intended target application. For example `\"my-application\"`.\n"
                },
                "sessionCookieDomain": {
                    "type": "string",
                    "description": "The session cookie Domain flag.\n"
                },
                "sessionCookieHttpOnly": {
                    "type": "boolean",
                    "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.\n"
                },
                "sessionCookieName": {
                    "type": "string",
                    "description": "The session cookie name.\n"
                },
                "sessionCookiePath": {
                    "type": "string",
                    "description": "The session cookie Path flag.\n"
                },
                "sessionCookieSameSite": {
                    "type": "string",
                    "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of [\"Strict\", \"Lax\", \"None\", \"Default\"]\n"
                },
                "sessionCookieSecure": {
                    "type": "boolean",
                    "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.\n"
                },
                "sessionEnforceSameSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, audiences are forced to share the same subject.\n"
                },
                "sessionHashStorageKey": {
                    "type": "boolean",
                    "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.\n"
                },
                "sessionHashSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.\n"
                },
                "sessionIdlingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the session can be inactive until it is considered invalid in seconds. 0 disables the checks and touching.\n"
                },
                "sessionMemcachedHost": {
                    "type": "string",
                    "description": "The memcached host.\n"
                },
                "sessionMemcachedPort": {
                    "type": "integer",
                    "description": "The memcached port.\n"
                },
                "sessionMemcachedPrefix": {
                    "type": "string",
                    "description": "The memcached session key prefix.\n"
                },
                "sessionMemcachedSocket": {
                    "type": "string",
                    "description": "The memcached unix socket path.\n"
                },
                "sessionRedisClusterMaxRedirections": {
                    "type": "integer",
                    "description": "The Redis cluster maximum redirects.\n"
                },
                "sessionRedisClusterNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConfigSessionRedisClusterNode:GatewayPluginOpenidConnectConfigSessionRedisClusterNode"
                    },
                    "description": "The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.\n"
                },
                "sessionRedisConnectTimeout": {
                    "type": "integer",
                    "description": "Session redis connection timeout in milliseconds.\n"
                },
                "sessionRedisHost": {
                    "type": "string",
                    "description": "The Redis host.\n"
                },
                "sessionRedisPassword": {
                    "type": "string",
                    "description": "Password to use for Redis connection when the `redis` session storage is defined. If undefined, no AUTH commands are sent to Redis.\n"
                },
                "sessionRedisPort": {
                    "type": "integer",
                    "description": "The Redis port.\n"
                },
                "sessionRedisPrefix": {
                    "type": "string",
                    "description": "The Redis session key prefix.\n"
                },
                "sessionRedisReadTimeout": {
                    "type": "integer",
                    "description": "Session redis read timeout in milliseconds.\n"
                },
                "sessionRedisSendTimeout": {
                    "type": "integer",
                    "description": "Session redis send timeout in milliseconds.\n"
                },
                "sessionRedisServerName": {
                    "type": "string",
                    "description": "The SNI used for connecting the Redis server.\n"
                },
                "sessionRedisSocket": {
                    "type": "string",
                    "description": "The Redis unix socket path.\n"
                },
                "sessionRedisSsl": {
                    "type": "boolean",
                    "description": "Use SSL/TLS for Redis connection.\n"
                },
                "sessionRedisSslVerify": {
                    "type": "boolean",
                    "description": "Verify identity provider server certificate.\n"
                },
                "sessionRedisUsername": {
                    "type": "string",
                    "description": "Username to use for Redis connection when the `redis` session storage is defined and ACL authentication is desired. If undefined, ACL authentication will not be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\n"
                },
                "sessionRemember": {
                    "type": "boolean",
                    "description": "Enables or disables persistent sessions.\n"
                },
                "sessionRememberAbsoluteTimeout": {
                    "type": "number",
                    "description": "Limits how long the persistent session can be renewed in seconds, until re-authentication is required. 0 disables the checks.\n"
                },
                "sessionRememberCookieName": {
                    "type": "string",
                    "description": "Persistent session cookie name. Use with the `remember` configuration parameter.\n"
                },
                "sessionRememberRollingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the persistent session is considered valid in seconds. 0 disables the checks and rolling.\n"
                },
                "sessionRequestHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of headers to send to upstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ \"id\", \"timeout\" ]` will set Session-Id and Session-Timeout request headers.\n"
                },
                "sessionResponseHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of headers to send to downstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ \"id\", \"timeout\" ]` will set Session-Id and Session-Timeout response headers.\n"
                },
                "sessionRollingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the session can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.\n"
                },
                "sessionSecret": {
                    "type": "string",
                    "description": "The session secret.\n"
                },
                "sessionStorage": {
                    "type": "string",
                    "description": "The session storage for session data: - `cookie`: stores session data with the session cookie (the session cannot be invalidated or revoked without changing session secret, but is stateless, and doesn't require a database) - `memcache`: stores session data in memcached - `redis`: stores session data in Redis. must be one of [\"cookie\", \"memcache\", \"memcached\", \"redis\"]\n"
                },
                "sessionStoreMetadata": {
                    "type": "boolean",
                    "description": "Configures whether or not session metadata should be stored. This metadata includes information about the active sessions for a specific audience belonging to a specific subject.\n"
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "Verify identity provider server certificate. If set to `true`, the plugin uses the CA certificate set in the `kong.conf` config parameter `lua_ssl_trusted_certificate`.\n"
                },
                "timeout": {
                    "type": "number",
                    "description": "Network IO timeout in milliseconds.\n"
                },
                "tlsClientAuthCertId": {
                    "type": "string",
                    "description": "ID of the Certificate entity representing the client certificate to use for mTLS client authentication for connections between Kong and the Auth Server.\n"
                },
                "tlsClientAuthSslVerify": {
                    "type": "boolean",
                    "description": "Verify identity provider server certificate during mTLS client authentication.\n"
                },
                "tokenCacheKeyIncludeScope": {
                    "type": "boolean",
                    "description": "Include the scope in the token cache key, so token with different scopes are considered diffrent tokens.\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint. If set it overrides the value in `token_endpoint` returned by the discovery endpoint.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "The token endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\", \"none\"]\n"
                },
                "tokenExchangeEndpoint": {
                    "type": "string",
                    "description": "The token exchange endpoint.\n"
                },
                "tokenHeadersClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra headers passed from the client to the token endpoint.\n"
                },
                "tokenHeadersGrants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enable the sending of the token endpoint response headers only with certain grants: - `password`: with OAuth password grant - `client_credentials`: with OAuth client credentials grant - `authorization_code`: with authorization code flow - `refresh_token` with refresh token grant.\n"
                },
                "tokenHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the token endpoint.\n"
                },
                "tokenHeadersPrefix": {
                    "type": "string",
                    "description": "Add a prefix to the token endpoint response headers before forwarding them to the downstream client.\n"
                },
                "tokenHeadersReplays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of token endpoint response headers to forward to the downstream client.\n"
                },
                "tokenHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the token endpoint.\n"
                },
                "tokenPostArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pass extra arguments from the client to the OpenID-Connect plugin. If arguments exist, the client can pass them using: - Query parameters - Request Body - Request Header  This parameter can be used with `scope` values, like this:  `config.token_post_args_client=scope`  In this case, the token would take the `scope` value from the query parameter or from the request body or from the header and send it to the token endpoint.\n"
                },
                "tokenPostArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument names passed to the token endpoint.\n"
                },
                "tokenPostArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument values passed to the token endpoint.\n"
                },
                "unauthorizedDestroySession": {
                    "type": "boolean",
                    "description": "Destroy any active session for the unauthorized requests.\n"
                },
                "unauthorizedErrorMessage": {
                    "type": "string",
                    "description": "The error message for the unauthorized requests (when not using the redirection).\n"
                },
                "unauthorizedRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client on unauthorized requests.\n"
                },
                "unexpectedRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client when unexpected errors happen with the requests.\n"
                },
                "upstreamAccessTokenHeader": {
                    "type": "string",
                    "description": "The upstream access token header.\n"
                },
                "upstreamAccessTokenJwkHeader": {
                    "type": "string",
                    "description": "The upstream access token JWK header.\n"
                },
                "upstreamHeadersClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The upstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "upstreamHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The upstream header names for the claim values.\n"
                },
                "upstreamIdTokenHeader": {
                    "type": "string",
                    "description": "The upstream id token header.\n"
                },
                "upstreamIdTokenJwkHeader": {
                    "type": "string",
                    "description": "The upstream id token JWK header.\n"
                },
                "upstreamIntrospectionHeader": {
                    "type": "string",
                    "description": "The upstream introspection header.\n"
                },
                "upstreamIntrospectionJwtHeader": {
                    "type": "string",
                    "description": "The upstream introspection JWT header.\n"
                },
                "upstreamRefreshTokenHeader": {
                    "type": "string",
                    "description": "The upstream refresh token header.\n"
                },
                "upstreamSessionIdHeader": {
                    "type": "string",
                    "description": "The upstream session id header.\n"
                },
                "upstreamUserInfoHeader": {
                    "type": "string",
                    "description": "The upstream user info header.\n"
                },
                "upstreamUserInfoJwtHeader": {
                    "type": "string",
                    "description": "The upstream user info JWT header (in case the user info returns a JWT response).\n"
                },
                "userinfoAccept": {
                    "type": "string",
                    "description": "The value of `Accept` header for user info requests: - `application/json`: user info response as JSON - `application/jwt`: user info response as JWT (from the obsolete IETF draft document). must be one of [\"application/json\", \"application/jwt\"]\n"
                },
                "userinfoEndpoint": {
                    "type": "string",
                    "description": "The user info endpoint. If set it overrides the value in `userinfo_endpoint` returned by the discovery endpoint.\n"
                },
                "userinfoHeadersClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra headers passed from the client to the user info endpoint.\n"
                },
                "userinfoHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the user info endpoint.\n"
                },
                "userinfoHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the user info endpoint.\n"
                },
                "userinfoQueryArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query arguments passed from the client to the user info endpoint.\n"
                },
                "userinfoQueryArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument names passed to the user info endpoint.\n"
                },
                "userinfoQueryArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument values passed to the user info endpoint.\n"
                },
                "usingPseudoIssuer": {
                    "type": "boolean",
                    "description": "If the plugin uses a pseudo issuer. When set to true, the plugin will not discover the configuration from the issuer URL specified with `config.issuer`.\n"
                },
                "verifyClaims": {
                    "type": "boolean",
                    "description": "Verify tokens for standard claims.\n"
                },
                "verifyNonce": {
                    "type": "boolean",
                    "description": "Verify nonce on authorization code flow.\n"
                },
                "verifyParameters": {
                    "type": "boolean",
                    "description": "Verify plugin configuration against discovery.\n"
                },
                "verifySignature": {
                    "type": "boolean",
                    "description": "Verify signature of tokens.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "anonymous",
                        "audienceClaims",
                        "audienceRequireds",
                        "audiences",
                        "authMethods",
                        "authenticatedGroupsClaims",
                        "authorizationCookieDomain",
                        "authorizationCookieHttpOnly",
                        "authorizationCookieName",
                        "authorizationCookiePath",
                        "authorizationCookieSameSite",
                        "authorizationCookieSecure",
                        "authorizationEndpoint",
                        "authorizationQueryArgsClients",
                        "authorizationQueryArgsNames",
                        "authorizationQueryArgsValues",
                        "authorizationRollingTimeout",
                        "bearerTokenCookieName",
                        "bearerTokenParamTypes",
                        "byUsernameIgnoreCase",
                        "cacheIntrospection",
                        "cacheTokenExchange",
                        "cacheTokens",
                        "cacheTokensSalt",
                        "cacheTtl",
                        "cacheTtlMax",
                        "cacheTtlMin",
                        "cacheTtlNeg",
                        "cacheTtlResurrect",
                        "cacheUserInfo",
                        "clientAlgs",
                        "clientArg",
                        "clientAuths",
                        "clientCredentialsParamTypes",
                        "clientIds",
                        "clientJwks",
                        "clientSecrets",
                        "consumerBies",
                        "consumerClaims",
                        "consumerOptional",
                        "credentialClaims",
                        "disableSessions",
                        "discoveryHeadersNames",
                        "discoveryHeadersValues",
                        "displayErrors",
                        "domains",
                        "downstreamAccessTokenHeader",
                        "downstreamAccessTokenJwkHeader",
                        "downstreamHeadersClaims",
                        "downstreamHeadersNames",
                        "downstreamIdTokenHeader",
                        "downstreamIdTokenJwkHeader",
                        "downstreamIntrospectionHeader",
                        "downstreamIntrospectionJwtHeader",
                        "downstreamRefreshTokenHeader",
                        "downstreamSessionIdHeader",
                        "downstreamUserInfoHeader",
                        "downstreamUserInfoJwtHeader",
                        "dpopProofLifetime",
                        "dpopUseNonce",
                        "enableHsSignatures",
                        "endSessionEndpoint",
                        "exposeErrorCode",
                        "extraJwksUris",
                        "forbiddenDestroySession",
                        "forbiddenErrorMessage",
                        "forbiddenRedirectUris",
                        "groupsClaims",
                        "groupsRequireds",
                        "hideCredentials",
                        "httpProxy",
                        "httpProxyAuthorization",
                        "httpVersion",
                        "httpsProxy",
                        "httpsProxyAuthorization",
                        "idTokenParamName",
                        "idTokenParamTypes",
                        "ignoreSignatures",
                        "introspectJwtTokens",
                        "introspectionAccept",
                        "introspectionCheckActive",
                        "introspectionEndpoint",
                        "introspectionEndpointAuthMethod",
                        "introspectionHeadersClients",
                        "introspectionHeadersNames",
                        "introspectionHeadersValues",
                        "introspectionHint",
                        "introspectionPostArgsClients",
                        "introspectionPostArgsNames",
                        "introspectionPostArgsValues",
                        "introspectionTokenParamName",
                        "issuer",
                        "issuersAlloweds",
                        "jwtSessionClaim",
                        "jwtSessionCookie",
                        "keepalive",
                        "leeway",
                        "loginAction",
                        "loginMethods",
                        "loginRedirectMode",
                        "loginRedirectUris",
                        "loginTokens",
                        "logoutMethods",
                        "logoutPostArg",
                        "logoutQueryArg",
                        "logoutRedirectUris",
                        "logoutRevoke",
                        "logoutRevokeAccessToken",
                        "logoutRevokeRefreshToken",
                        "logoutUriSuffix",
                        "maxAge",
                        "mtlsIntrospectionEndpoint",
                        "mtlsRevocationEndpoint",
                        "mtlsTokenEndpoint",
                        "noProxy",
                        "passwordParamTypes",
                        "preserveQueryArgs",
                        "proofOfPossessionAuthMethodsValidation",
                        "proofOfPossessionDpop",
                        "proofOfPossessionMtls",
                        "pushedAuthorizationRequestEndpoint",
                        "pushedAuthorizationRequestEndpointAuthMethod",
                        "redirectUris",
                        "rediscoveryLifetime",
                        "refreshTokenParamName",
                        "refreshTokenParamTypes",
                        "refreshTokens",
                        "requireProofKeyForCodeExchange",
                        "requirePushedAuthorizationRequests",
                        "requireSignedRequestObject",
                        "resolveDistributedClaims",
                        "responseMode",
                        "responseTypes",
                        "reverify",
                        "revocationEndpoint",
                        "revocationEndpointAuthMethod",
                        "revocationTokenParamName",
                        "rolesClaims",
                        "rolesRequireds",
                        "runOnPreflight",
                        "scopes",
                        "scopesClaims",
                        "scopesRequireds",
                        "searchUserInfo",
                        "sessionAbsoluteTimeout",
                        "sessionAudience",
                        "sessionCookieDomain",
                        "sessionCookieHttpOnly",
                        "sessionCookieName",
                        "sessionCookiePath",
                        "sessionCookieSameSite",
                        "sessionCookieSecure",
                        "sessionEnforceSameSubject",
                        "sessionHashStorageKey",
                        "sessionHashSubject",
                        "sessionIdlingTimeout",
                        "sessionMemcachedHost",
                        "sessionMemcachedPort",
                        "sessionMemcachedPrefix",
                        "sessionMemcachedSocket",
                        "sessionRedisClusterMaxRedirections",
                        "sessionRedisClusterNodes",
                        "sessionRedisConnectTimeout",
                        "sessionRedisHost",
                        "sessionRedisPassword",
                        "sessionRedisPort",
                        "sessionRedisPrefix",
                        "sessionRedisReadTimeout",
                        "sessionRedisSendTimeout",
                        "sessionRedisServerName",
                        "sessionRedisSocket",
                        "sessionRedisSsl",
                        "sessionRedisSslVerify",
                        "sessionRedisUsername",
                        "sessionRemember",
                        "sessionRememberAbsoluteTimeout",
                        "sessionRememberCookieName",
                        "sessionRememberRollingTimeout",
                        "sessionRequestHeaders",
                        "sessionResponseHeaders",
                        "sessionRollingTimeout",
                        "sessionSecret",
                        "sessionStorage",
                        "sessionStoreMetadata",
                        "sslVerify",
                        "timeout",
                        "tlsClientAuthCertId",
                        "tlsClientAuthSslVerify",
                        "tokenCacheKeyIncludeScope",
                        "tokenEndpoint",
                        "tokenEndpointAuthMethod",
                        "tokenExchangeEndpoint",
                        "tokenHeadersClients",
                        "tokenHeadersGrants",
                        "tokenHeadersNames",
                        "tokenHeadersPrefix",
                        "tokenHeadersReplays",
                        "tokenHeadersValues",
                        "tokenPostArgsClients",
                        "tokenPostArgsNames",
                        "tokenPostArgsValues",
                        "unauthorizedDestroySession",
                        "unauthorizedErrorMessage",
                        "unauthorizedRedirectUris",
                        "unexpectedRedirectUris",
                        "upstreamAccessTokenHeader",
                        "upstreamAccessTokenJwkHeader",
                        "upstreamHeadersClaims",
                        "upstreamHeadersNames",
                        "upstreamIdTokenHeader",
                        "upstreamIdTokenJwkHeader",
                        "upstreamIntrospectionHeader",
                        "upstreamIntrospectionJwtHeader",
                        "upstreamRefreshTokenHeader",
                        "upstreamSessionIdHeader",
                        "upstreamUserInfoHeader",
                        "upstreamUserInfoJwtHeader",
                        "userinfoAccept",
                        "userinfoEndpoint",
                        "userinfoHeadersClients",
                        "userinfoHeadersNames",
                        "userinfoHeadersValues",
                        "userinfoQueryArgsClients",
                        "userinfoQueryArgsNames",
                        "userinfoQueryArgsValues",
                        "usingPseudoIssuer",
                        "verifyClaims",
                        "verifyNonce",
                        "verifyParameters",
                        "verifySignature"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpenidConnectConfigClientJwk:GatewayPluginOpenidConnectConfigClientJwk": {
            "properties": {
                "alg": {
                    "type": "string"
                },
                "crv": {
                    "type": "string"
                },
                "d": {
                    "type": "string"
                },
                "dp": {
                    "type": "string"
                },
                "dq": {
                    "type": "string"
                },
                "e": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "k": {
                    "type": "string"
                },
                "keyOps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kid": {
                    "type": "string"
                },
                "kty": {
                    "type": "string"
                },
                "n": {
                    "type": "string"
                },
                "oth": {
                    "type": "string"
                },
                "p": {
                    "type": "string"
                },
                "q": {
                    "type": "string"
                },
                "qi": {
                    "type": "string"
                },
                "r": {
                    "type": "string"
                },
                "t": {
                    "type": "string"
                },
                "use": {
                    "type": "string"
                },
                "x": {
                    "type": "string"
                },
                "x5cs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "x5t": {
                    "type": "string"
                },
                "x5tNumberS256": {
                    "type": "string"
                },
                "x5u": {
                    "type": "string"
                },
                "y": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alg",
                        "crv",
                        "d",
                        "dp",
                        "dq",
                        "e",
                        "issuer",
                        "k",
                        "keyOps",
                        "kid",
                        "kty",
                        "n",
                        "oth",
                        "p",
                        "q",
                        "qi",
                        "r",
                        "t",
                        "use",
                        "x",
                        "x5cs",
                        "x5t",
                        "x5tNumberS256",
                        "x5u",
                        "y"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpenidConnectConfigSessionRedisClusterNode:GatewayPluginOpenidConnectConfigSessionRedisClusterNode": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "port"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpenidConnectConsumer:GatewayPluginOpenidConnectConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpenidConnectConsumerGroup:GatewayPluginOpenidConnectConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpenidConnectRoute:GatewayPluginOpenidConnectRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpenidConnectService:GatewayPluginOpenidConnectService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpentelemetryConfig:GatewayPluginOpentelemetryConfig": {
            "properties": {
                "batchFlushDelay": {
                    "type": "integer",
                    "description": "The delay, in seconds, between two consecutive batches.\n"
                },
                "batchSpanCount": {
                    "type": "integer",
                    "description": "The number of spans to be sent in a single batch.\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.\n"
                },
                "headerType": {
                    "type": "string",
                    "description": "must be one of [\"preserve\", \"ignore\", \"b3\", \"b3-single\", \"w3c\", \"jaeger\", \"ot\", \"aws\", \"gcp\", \"datadog\"]\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom headers to be added in the HTTP request sent to the OTLP server. This setting is useful for adding the authentication headers (token) for the APM backend.\n"
                },
                "httpResponseHeaderForTraceid": {
                    "type": "string"
                },
                "propagation": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConfigPropagation:GatewayPluginOpentelemetryConfigPropagation"
                },
                "queue": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConfigQueue:GatewayPluginOpentelemetryConfigQueue"
                },
                "readTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "resourceAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "samplingRate": {
                    "type": "number",
                    "description": "Tracing sampling rate for configuring the probability-based sampler. When set, this value supersedes the global `tracing_sampling_rate` setting from kong.conf.\n"
                },
                "sendTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "batchFlushDelay",
                        "batchSpanCount",
                        "connectTimeout",
                        "endpoint",
                        "headerType",
                        "headers",
                        "httpResponseHeaderForTraceid",
                        "propagation",
                        "queue",
                        "readTimeout",
                        "resourceAttributes",
                        "samplingRate",
                        "sendTimeout"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpentelemetryConfigPropagation:GatewayPluginOpentelemetryConfigPropagation": {
            "properties": {
                "clears": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.\n"
                },
                "defaultFormat": {
                    "type": "string",
                    "description": "The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`. Not Null; must be one of [\"b3\", \"gcp\", \"b3-single\", \"jaeger\", \"aws\", \"ot\", \"w3c\", \"datadog\"]\n"
                },
                "extracts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.\n"
                },
                "injects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clears",
                        "defaultFormat",
                        "extracts",
                        "injects"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpentelemetryConfigQueue:GatewayPluginOpentelemetryConfigQueue": {
            "properties": {
                "initialRetryDelay": {
                    "type": "number",
                    "description": "Time in seconds before the initial retry is made for a failing batch.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be processed at a time.\n"
                },
                "maxBytes": {
                    "type": "integer",
                    "description": "Maximum number of bytes that can be waiting on a queue, requires string content.\n"
                },
                "maxCoalescingDelay": {
                    "type": "number",
                    "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.\n"
                },
                "maxEntries": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be waiting on the queue.\n"
                },
                "maxRetryDelay": {
                    "type": "number",
                    "description": "Maximum time in seconds between retries, caps exponential backoff.\n"
                },
                "maxRetryTime": {
                    "type": "number",
                    "description": "Time in seconds before the queue gives up calling a failed handler for a batch.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "initialRetryDelay",
                        "maxBatchSize",
                        "maxBytes",
                        "maxCoalescingDelay",
                        "maxEntries",
                        "maxRetryDelay",
                        "maxRetryTime"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpentelemetryConsumer:GatewayPluginOpentelemetryConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpentelemetryConsumerGroup:GatewayPluginOpentelemetryConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpentelemetryRoute:GatewayPluginOpentelemetryRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginOpentelemetryService:GatewayPluginOpentelemetryService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPostFunctionConfig:GatewayPluginPostFunctionConfig": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bodyFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headerFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rewrites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsClientFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsCloses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsHandshakes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsUpstreamFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accesses",
                        "bodyFilters",
                        "certificates",
                        "headerFilters",
                        "logs",
                        "rewrites",
                        "wsClientFrames",
                        "wsCloses",
                        "wsHandshakes",
                        "wsUpstreamFrames"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPostFunctionConsumer:GatewayPluginPostFunctionConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPostFunctionConsumerGroup:GatewayPluginPostFunctionConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPostFunctionRoute:GatewayPluginPostFunctionRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPostFunctionService:GatewayPluginPostFunctionService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPreFunctionConfig:GatewayPluginPreFunctionConfig": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bodyFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headerFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rewrites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsClientFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsCloses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsHandshakes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsUpstreamFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accesses",
                        "bodyFilters",
                        "certificates",
                        "headerFilters",
                        "logs",
                        "rewrites",
                        "wsClientFrames",
                        "wsCloses",
                        "wsHandshakes",
                        "wsUpstreamFrames"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPreFunctionConsumer:GatewayPluginPreFunctionConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPreFunctionConsumerGroup:GatewayPluginPreFunctionConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPreFunctionRoute:GatewayPluginPreFunctionRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPreFunctionService:GatewayPluginPreFunctionService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPrometheusConfig:GatewayPluginPrometheusConfig": {
            "properties": {
                "bandwidthMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if bandwidth metrics should be collected. If enabled, `bandwidth_bytes` and `stream_sessions_total` metrics will be exported.\n"
                },
                "latencyMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if latency metrics should be collected. If enabled, `kong_latency_ms`, `upstream_latency_ms` and `request_latency_ms` metrics will be exported.\n"
                },
                "perConsumer": {
                    "type": "boolean",
                    "description": "A boolean value that determines if per-consumer metrics should be collected. If enabled, the `kong_http_requests_total` and `kong_bandwidth_bytes` metrics fill in the consumer label when available.\n"
                },
                "statusCodeMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if status code metrics should be collected. If enabled, `http_requests_total`, `stream_sessions_total` metrics will be exported.\n"
                },
                "upstreamHealthMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if upstream metrics should be collected. If enabled, `upstream_target_health` metric will be exported.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bandwidthMetrics",
                        "latencyMetrics",
                        "perConsumer",
                        "statusCodeMetrics",
                        "upstreamHealthMetrics"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPrometheusConsumer:GatewayPluginPrometheusConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPrometheusConsumerGroup:GatewayPluginPrometheusConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPrometheusRoute:GatewayPluginPrometheusRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginPrometheusService:GatewayPluginPrometheusService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginProxyCacheConfig:GatewayPluginProxyCacheConfig": {
            "properties": {
                "cacheControl": {
                    "type": "boolean",
                    "description": "When enabled, respect the Cache-Control behaviors defined in RFC7234.\n"
                },
                "cacheTtl": {
                    "type": "integer",
                    "description": "TTL, in seconds, of cache entities.\n"
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value.\n"
                },
                "ignoreUriCase": {
                    "type": "boolean"
                },
                "memory": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConfigMemory:GatewayPluginProxyCacheConfigMemory"
                },
                "requestMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Downstream request methods considered cacheable.\n"
                },
                "responseCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Upstream response status code considered cacheable.\n"
                },
                "responseHeaders": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConfigResponseHeaders:GatewayPluginProxyCacheConfigResponseHeaders",
                    "description": "Caching related diagnostic headers that should be included in cached responses\n"
                },
                "storageTtl": {
                    "type": "integer",
                    "description": "Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The backing data store in which to hold cache entities. must be one of [\"memory\"]\n"
                },
                "varyHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.\n"
                },
                "varyQueryParams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "cacheControl",
                        "cacheTtl",
                        "contentTypes",
                        "ignoreUriCase",
                        "memory",
                        "requestMethods",
                        "responseCodes",
                        "responseHeaders",
                        "storageTtl",
                        "strategy",
                        "varyHeaders",
                        "varyQueryParams"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginProxyCacheConfigMemory:GatewayPluginProxyCacheConfigMemory": {
            "properties": {
                "dictionaryName": {
                    "type": "string",
                    "description": "The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dictionaryName"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginProxyCacheConfigResponseHeaders:GatewayPluginProxyCacheConfigResponseHeaders": {
            "properties": {
                "age": {
                    "type": "boolean"
                },
                "xCacheKey": {
                    "type": "boolean"
                },
                "xCacheStatus": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "age",
                        "xCacheKey",
                        "xCacheStatus"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginProxyCacheConsumer:GatewayPluginProxyCacheConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginProxyCacheConsumerGroup:GatewayPluginProxyCacheConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginProxyCacheRoute:GatewayPluginProxyCacheRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginProxyCacheService:GatewayPluginProxyCacheService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingAdvancedConfig:GatewayPluginRateLimitingAdvancedConfig": {
            "properties": {
                "consumerGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of consumer groups allowed to override the rate limiting settings for the given Route or Service. Required if `enforce_consumer_groups` is set to `true`.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "The shared dictionary where counters are stored. When the plugin is configured to synchronize counter data externally (that is `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't `-1`), this dictionary serves as a buffer to populate counters in the data store on each synchronization cycle.\n"
                },
                "disablePenalty": {
                    "type": "boolean",
                    "description": "If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type.\n"
                },
                "enforceConsumerGroups": {
                    "type": "boolean",
                    "description": "Determines if consumer groups are allowed to override the rate limiting settings for the given Route or Service. Flipping `enforce_consumer_groups` from `true` to `false` disables the group override, but does not clear the list of consumer groups. You can then flip `enforce_consumer_groups` to `true` to re-enforce the groups.\n"
                },
                "errorCode": {
                    "type": "number",
                    "description": "Set a custom error code to return when the rate limit is exceeded.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Set a custom error message to return when the rate limit is exceeded.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "A string representing an HTTP header name.\n"
                },
                "hideClientHeaders": {
                    "type": "boolean",
                    "description": "Optionally hide informative response headers that would otherwise provide information about the current status of limits and counters.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. must be one of [\"ip\", \"credential\", \"consumer\", \"service\", \"header\", \"path\", \"consumer-group\"]\n"
                },
                "limits": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "One or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The rate limiting library namespace to use for this plugin instance. Counter data and sync configuration is isolated in each namespace. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `window_size`, `dictionary_name`, need to be the same.\n"
                },
                "path": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "redis": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConfigRedis:GatewayPluginRateLimitingAdvancedConfigRedis"
                },
                "retryAfterJitterMax": {
                    "type": "number",
                    "description": "The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After` header of denied requests (status = `429`) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is `0`; in this case, the `Retry-After` header is equal to the `RateLimit-Reset` header.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`. must be one of [\"cluster\", \"redis\", \"local\"]\n"
                },
                "syncRate": {
                    "type": "number",
                    "description": "How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 will sync the counters in the specified number of seconds. The minimum allowed interval is 0.02 seconds (20ms).\n"
                },
                "windowSizes": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "One or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.\n"
                },
                "windowType": {
                    "type": "string",
                    "description": "Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters. must be one of [\"fixed\", \"sliding\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "consumerGroups",
                        "dictionaryName",
                        "disablePenalty",
                        "enforceConsumerGroups",
                        "errorCode",
                        "errorMessage",
                        "headerName",
                        "hideClientHeaders",
                        "identifier",
                        "limits",
                        "namespace",
                        "path",
                        "redis",
                        "retryAfterJitterMax",
                        "strategy",
                        "syncRate",
                        "windowSizes",
                        "windowType"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingAdvancedConfigRedis:GatewayPluginRateLimitingAdvancedConfigRedis": {
            "properties": {
                "clusterAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Cluster. Each string element must be a hostname. The minimum length of the array is 1 element.\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "database": {
                    "type": "integer",
                    "description": "Database to use for the Redis connection when using the `redis` strategy\n"
                },
                "host": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "keepaliveBacklog": {
                    "type": "integer",
                    "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.\n"
                },
                "keepalivePoolSize": {
                    "type": "integer",
                    "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "readTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "sendTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "sentinelAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Sentinel addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. Each string element must be a hostname. The minimum length of the array is 1 element.\n"
                },
                "sentinelMaster": {
                    "type": "string",
                    "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.\n"
                },
                "sentinelPassword": {
                    "type": "string",
                    "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.\n"
                },
                "sentinelRole": {
                    "type": "string",
                    "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. must be one of [\"master\", \"slave\", \"any\"]\n"
                },
                "sentinelUsername": {
                    "type": "string",
                    "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "A string representing an SNI (server name indication) value for TLS.\n"
                },
                "ssl": {
                    "type": "boolean",
                    "description": "If set to true, uses SSL to connect to Redis.\n"
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterAddresses",
                        "connectTimeout",
                        "database",
                        "host",
                        "keepaliveBacklog",
                        "keepalivePoolSize",
                        "password",
                        "port",
                        "readTimeout",
                        "sendTimeout",
                        "sentinelAddresses",
                        "sentinelMaster",
                        "sentinelPassword",
                        "sentinelRole",
                        "sentinelUsername",
                        "serverName",
                        "ssl",
                        "sslVerify",
                        "timeout",
                        "username"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingAdvancedConsumer:GatewayPluginRateLimitingAdvancedConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingAdvancedConsumerGroup:GatewayPluginRateLimitingAdvancedConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingAdvancedRoute:GatewayPluginRateLimitingAdvancedRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingAdvancedService:GatewayPluginRateLimitingAdvancedService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingConfig:GatewayPluginRateLimitingConfig": {
            "properties": {
                "day": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per day.\n"
                },
                "errorCode": {
                    "type": "number",
                    "description": "Set a custom error code to return when the rate limit is exceeded.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Set a custom error message to return when the rate limit is exceeded.\n"
                },
                "faultTolerant": {
                    "type": "boolean",
                    "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "A string representing an HTTP header name.\n"
                },
                "hideClientHeaders": {
                    "type": "boolean",
                    "description": "Optionally hide informative response headers.\n"
                },
                "hour": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per hour.\n"
                },
                "limitBy": {
                    "type": "string",
                    "description": "The entity that is used when aggregating the limits. must be one of [\"consumer\", \"credential\", \"ip\", \"service\", \"header\", \"path\", \"consumer-group\"]\n"
                },
                "minute": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per minute.\n"
                },
                "month": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per month.\n"
                },
                "path": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The rate-limiting policies to use for retrieving and incrementing the limits. must be one of [\"local\", \"cluster\", \"redis\"]\n"
                },
                "redis": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConfigRedis:GatewayPluginRateLimitingConfigRedis",
                    "description": "Redis configuration\n"
                },
                "second": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per second.\n"
                },
                "syncRate": {
                    "type": "number",
                    "description": "How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.\n"
                },
                "year": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per year.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "day",
                        "errorCode",
                        "errorMessage",
                        "faultTolerant",
                        "headerName",
                        "hideClientHeaders",
                        "hour",
                        "limitBy",
                        "minute",
                        "month",
                        "path",
                        "policy",
                        "redis",
                        "second",
                        "syncRate",
                        "year"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingConfigRedis:GatewayPluginRateLimitingConfigRedis": {
            "properties": {
                "database": {
                    "type": "integer",
                    "description": "Database to use for the Redis connection when using the `redis` strategy\n"
                },
                "host": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "A string representing an SNI (server name indication) value for TLS.\n"
                },
                "ssl": {
                    "type": "boolean",
                    "description": "If set to true, uses SSL to connect to Redis.\n"
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "database",
                        "host",
                        "password",
                        "port",
                        "serverName",
                        "ssl",
                        "sslVerify",
                        "timeout",
                        "username"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingConsumer:GatewayPluginRateLimitingConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingConsumerGroup:GatewayPluginRateLimitingConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingRoute:GatewayPluginRateLimitingRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRateLimitingService:GatewayPluginRateLimitingService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTerminationConfig:GatewayPluginRequestTerminationConfig": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The raw response body to send. This is mutually exclusive with the `config.message` field.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "Content type of the raw response configured with `config.body`.\n"
                },
                "echo": {
                    "type": "boolean",
                    "description": "When set, the plugin will echo a copy of the request back to the client. The main usecase for this is debugging. It can be combined with `trigger` in order to debug requests on live systems without disturbing real traffic.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to send, if using the default response generator.\n"
                },
                "statusCode": {
                    "type": "integer",
                    "description": "The response code to send. Must be an integer between 100 and 599.\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "A string representing an HTTP header name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "contentType",
                        "echo",
                        "message",
                        "statusCode",
                        "trigger"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTerminationConsumer:GatewayPluginRequestTerminationConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTerminationConsumerGroup:GatewayPluginRequestTerminationConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTerminationRoute:GatewayPluginRequestTerminationRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTerminationService:GatewayPluginRequestTerminationService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConfig:GatewayPluginRequestTransformerAdvancedConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfigAdd:GatewayPluginRequestTransformerAdvancedConfigAdd"
                },
                "allow": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfigAllow:GatewayPluginRequestTransformerAdvancedConfigAllow"
                },
                "append": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfigAppend:GatewayPluginRequestTransformerAdvancedConfigAppend"
                },
                "dotsInKeys": {
                    "type": "boolean",
                    "description": "Specify whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects.  See Arrays and nested objects.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.\n"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfigRemove:GatewayPluginRequestTransformerAdvancedConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfigRename:GatewayPluginRequestTransformerAdvancedConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfigReplace:GatewayPluginRequestTransformerAdvancedConfigReplace"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "add",
                        "allow",
                        "append",
                        "dotsInKeys",
                        "httpMethod",
                        "remove",
                        "rename",
                        "replace"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConfigAdd:GatewayPluginRequestTransformerAdvancedConfigAdd": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "jsonTypes",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConfigAllow:GatewayPluginRequestTransformerAdvancedConfigAllow": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConfigAppend:GatewayPluginRequestTransformerAdvancedConfigAppend": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "jsonTypes",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConfigRemove:GatewayPluginRequestTransformerAdvancedConfigRemove": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConfigRename:GatewayPluginRequestTransformerAdvancedConfigRename": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConfigReplace:GatewayPluginRequestTransformerAdvancedConfigReplace": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "jsonTypes",
                        "querystrings",
                        "uri"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConsumer:GatewayPluginRequestTransformerAdvancedConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedConsumerGroup:GatewayPluginRequestTransformerAdvancedConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedRoute:GatewayPluginRequestTransformerAdvancedRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerAdvancedService:GatewayPluginRequestTransformerAdvancedService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConfig:GatewayPluginRequestTransformerConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfigAdd:GatewayPluginRequestTransformerConfigAdd"
                },
                "append": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfigAppend:GatewayPluginRequestTransformerConfigAppend"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.\n"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfigRemove:GatewayPluginRequestTransformerConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfigRename:GatewayPluginRequestTransformerConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfigReplace:GatewayPluginRequestTransformerConfigReplace"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "add",
                        "append",
                        "httpMethod",
                        "remove",
                        "rename",
                        "replace"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConfigAdd:GatewayPluginRequestTransformerConfigAdd": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConfigAppend:GatewayPluginRequestTransformerConfigAppend": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConfigRemove:GatewayPluginRequestTransformerConfigRemove": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConfigRename:GatewayPluginRequestTransformerConfigRename": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "querystrings"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConfigReplace:GatewayPluginRequestTransformerConfigReplace": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bodies",
                        "headers",
                        "querystrings",
                        "uri"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConsumer:GatewayPluginRequestTransformerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerConsumerGroup:GatewayPluginRequestTransformerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerRoute:GatewayPluginRequestTransformerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginRequestTransformerService:GatewayPluginRequestTransformerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfig:GatewayPluginResponseTransformerAdvancedConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfigAdd:GatewayPluginResponseTransformerAdvancedConfigAdd"
                },
                "allow": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfigAllow:GatewayPluginResponseTransformerAdvancedConfigAllow"
                },
                "append": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfigAppend:GatewayPluginResponseTransformerAdvancedConfigAppend"
                },
                "dotsInKeys": {
                    "type": "boolean",
                    "description": "Whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects..\n"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfigRemove:GatewayPluginResponseTransformerAdvancedConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfigRename:GatewayPluginResponseTransformerAdvancedConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfigReplace:GatewayPluginResponseTransformerAdvancedConfigReplace"
                },
                "transform": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfigTransform:GatewayPluginResponseTransformerAdvancedConfigTransform"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "add",
                        "allow",
                        "append",
                        "dotsInKeys",
                        "remove",
                        "rename",
                        "replace",
                        "transform"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfigAdd:GatewayPluginResponseTransformerAdvancedConfigAdd": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "ifStatuses",
                        "jsonTypes",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfigAllow:GatewayPluginResponseTransformerAdvancedConfigAllow": {
            "properties": {
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfigAppend:GatewayPluginResponseTransformerAdvancedConfigAppend": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "ifStatuses",
                        "jsonTypes",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfigRemove:GatewayPluginResponseTransformerAdvancedConfigRemove": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "ifStatuses",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfigRename:GatewayPluginResponseTransformerAdvancedConfigRename": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "ifStatuses"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfigReplace:GatewayPluginResponseTransformerAdvancedConfigReplace": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "String with which to replace the entire response body.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "body",
                        "headers",
                        "ifStatuses",
                        "jsonTypes",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConfigTransform:GatewayPluginResponseTransformerAdvancedConfigTransform": {
            "properties": {
                "functions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "functions",
                        "ifStatuses",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConsumer:GatewayPluginResponseTransformerAdvancedConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedConsumerGroup:GatewayPluginResponseTransformerAdvancedConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedRoute:GatewayPluginResponseTransformerAdvancedRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerAdvancedService:GatewayPluginResponseTransformerAdvancedService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConfig:GatewayPluginResponseTransformerConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfigAdd:GatewayPluginResponseTransformerConfigAdd"
                },
                "append": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfigAppend:GatewayPluginResponseTransformerConfigAppend"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfigRemove:GatewayPluginResponseTransformerConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfigRename:GatewayPluginResponseTransformerConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfigReplace:GatewayPluginResponseTransformerConfigReplace"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "add",
                        "append",
                        "remove",
                        "rename",
                        "replace"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConfigAdd:GatewayPluginResponseTransformerConfigAdd": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSON type names. Specify the types of the JSON values returned when appending\nJSON properties. Each string element can be one of: boolean, number, or string.\n"
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "jsonTypes",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConfigAppend:GatewayPluginResponseTransformerConfigAppend": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSON type names. Specify the types of the JSON values returned when appending\nJSON properties. Each string element can be one of: boolean, number, or string.\n"
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "jsonTypes",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConfigRemove:GatewayPluginResponseTransformerConfigRemove": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConfigRename:GatewayPluginResponseTransformerConfigRename": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConfigReplace:GatewayPluginResponseTransformerConfigReplace": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSON type names. Specify the types of the JSON values returned when appending\nJSON properties. Each string element can be one of: boolean, number, or string.\n"
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "headers",
                        "jsonTypes",
                        "jsons"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConsumer:GatewayPluginResponseTransformerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerConsumerGroup:GatewayPluginResponseTransformerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerRoute:GatewayPluginResponseTransformerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginResponseTransformerService:GatewayPluginResponseTransformerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginSamlConfig:GatewayPluginSamlConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.\n"
                },
                "assertionConsumerPath": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "idpCertificate": {
                    "type": "string",
                    "description": "The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.\n"
                },
                "idpSsoUrl": {
                    "type": "string",
                    "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.\n"
                },
                "nameidFormat": {
                    "type": "string",
                    "description": "The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`. must be one of [\"Unspecified\", \"EmailAddress\", \"Persistent\", \"Transient\"]\n"
                },
                "requestDigestAlgorithm": {
                    "type": "string",
                    "description": "The digest algorithm for Authn requests: - `SHA256` - `SHA1`. must be one of [\"SHA256\", \"SHA1\"]\n"
                },
                "requestSignatureAlgorithm": {
                    "type": "string",
                    "description": "The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of [\"SHA256\", \"SHA384\", \"SHA512\"]\n"
                },
                "requestSigningCertificate": {
                    "type": "string",
                    "description": "The certificate for signing requests.\n"
                },
                "requestSigningKey": {
                    "type": "string",
                    "description": "The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.\n"
                },
                "responseDigestAlgorithm": {
                    "type": "string",
                    "description": "The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`. must be one of [\"SHA256\", \"SHA1\"]\n"
                },
                "responseEncryptionKey": {
                    "type": "string",
                    "description": "The private encryption key required to decrypt encrypted assertions.\n"
                },
                "responseSignatureAlgorithm": {
                    "type": "string",
                    "description": "The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of [\"SHA256\", \"SHA384\", \"SHA512\"]\n"
                },
                "sessionAbsoluteTimeout": {
                    "type": "number",
                    "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.\n"
                },
                "sessionAudience": {
                    "type": "string",
                    "description": "The session audience, for example \"my-application\"\n"
                },
                "sessionCookieDomain": {
                    "type": "string",
                    "description": "The session cookie domain flag.\n"
                },
                "sessionCookieHttpOnly": {
                    "type": "boolean",
                    "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.\n"
                },
                "sessionCookieName": {
                    "type": "string",
                    "description": "The session cookie name.\n"
                },
                "sessionCookiePath": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "sessionCookieSameSite": {
                    "type": "string",
                    "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of [\"Strict\", \"Lax\", \"None\", \"Default\"]\n"
                },
                "sessionCookieSecure": {
                    "type": "boolean",
                    "description": "The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.\n"
                },
                "sessionEnforceSameSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, audiences are forced to share the same subject.\n"
                },
                "sessionHashStorageKey": {
                    "type": "boolean",
                    "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.\n"
                },
                "sessionHashSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.\n"
                },
                "sessionIdlingTimeout": {
                    "type": "number",
                    "description": "The session cookie idle time in seconds.\n"
                },
                "sessionMemcachedHost": {
                    "type": "string",
                    "description": "The memcached host.\n"
                },
                "sessionMemcachedPort": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "sessionMemcachedPrefix": {
                    "type": "string",
                    "description": "The memcached session key prefix.\n"
                },
                "sessionMemcachedSocket": {
                    "type": "string",
                    "description": "The memcached unix socket path.\n"
                },
                "sessionRedisClusterMaxRedirections": {
                    "type": "integer",
                    "description": "The Redis cluster maximum redirects.\n"
                },
                "sessionRedisClusterNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayPluginSamlConfigSessionRedisClusterNode:GatewayPluginSamlConfigSessionRedisClusterNode"
                    },
                    "description": "The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.\n"
                },
                "sessionRedisConnectTimeout": {
                    "type": "integer",
                    "description": "The Redis connection timeout in milliseconds.\n"
                },
                "sessionRedisHost": {
                    "type": "string",
                    "description": "The Redis host IP.\n"
                },
                "sessionRedisPassword": {
                    "type": "string",
                    "description": "Password to use for Redis connection when the `redis` session storage is defined. If undefined, no auth commands are sent to Redis. This value is pulled from\n"
                },
                "sessionRedisPort": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "sessionRedisPrefix": {
                    "type": "string",
                    "description": "The Redis session key prefix.\n"
                },
                "sessionRedisReadTimeout": {
                    "type": "integer",
                    "description": "The Redis read timeout in milliseconds.\n"
                },
                "sessionRedisSendTimeout": {
                    "type": "integer",
                    "description": "The Redis send timeout in milliseconds.\n"
                },
                "sessionRedisServerName": {
                    "type": "string",
                    "description": "The SNI used for connecting to the Redis server.\n"
                },
                "sessionRedisSocket": {
                    "type": "string",
                    "description": "The Redis unix socket path.\n"
                },
                "sessionRedisSsl": {
                    "type": "boolean",
                    "description": "Use SSL/TLS for the Redis connection.\n"
                },
                "sessionRedisSslVerify": {
                    "type": "boolean",
                    "description": "Verify the Redis server certificate.\n"
                },
                "sessionRedisUsername": {
                    "type": "string",
                    "description": "Redis username if the `redis` session storage is defined and ACL authentication is desired.If undefined, ACL authentication will not be performed.  This requires Redis v6.0.0+. The username **cannot** be set to `default`.\n"
                },
                "sessionRemember": {
                    "type": "boolean",
                    "description": "Enables or disables persistent sessions\n"
                },
                "sessionRememberAbsoluteTimeout": {
                    "type": "number",
                    "description": "Persistent session absolute timeout in seconds.\n"
                },
                "sessionRememberCookieName": {
                    "type": "string",
                    "description": "Persistent session cookie name\n"
                },
                "sessionRememberRollingTimeout": {
                    "type": "number",
                    "description": "Persistent session rolling timeout in seconds.\n"
                },
                "sessionRequestHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sessionResponseHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sessionRollingTimeout": {
                    "type": "number",
                    "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.\n"
                },
                "sessionSecret": {
                    "type": "string",
                    "description": "The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.\n"
                },
                "sessionStorage": {
                    "type": "string",
                    "description": "The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis. must be one of [\"cookie\", \"memcache\", \"memcached\", \"redis\"]\n"
                },
                "sessionStoreMetadata": {
                    "type": "boolean",
                    "description": "Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.\n"
                },
                "validateAssertionSignature": {
                    "type": "boolean",
                    "description": "Enable signature validation for SAML responses.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "anonymous",
                        "assertionConsumerPath",
                        "idpCertificate",
                        "idpSsoUrl",
                        "issuer",
                        "nameidFormat",
                        "requestDigestAlgorithm",
                        "requestSignatureAlgorithm",
                        "requestSigningCertificate",
                        "requestSigningKey",
                        "responseDigestAlgorithm",
                        "responseEncryptionKey",
                        "responseSignatureAlgorithm",
                        "sessionAbsoluteTimeout",
                        "sessionAudience",
                        "sessionCookieDomain",
                        "sessionCookieHttpOnly",
                        "sessionCookieName",
                        "sessionCookiePath",
                        "sessionCookieSameSite",
                        "sessionCookieSecure",
                        "sessionEnforceSameSubject",
                        "sessionHashStorageKey",
                        "sessionHashSubject",
                        "sessionIdlingTimeout",
                        "sessionMemcachedHost",
                        "sessionMemcachedPort",
                        "sessionMemcachedPrefix",
                        "sessionMemcachedSocket",
                        "sessionRedisClusterMaxRedirections",
                        "sessionRedisClusterNodes",
                        "sessionRedisConnectTimeout",
                        "sessionRedisHost",
                        "sessionRedisPassword",
                        "sessionRedisPort",
                        "sessionRedisPrefix",
                        "sessionRedisReadTimeout",
                        "sessionRedisSendTimeout",
                        "sessionRedisServerName",
                        "sessionRedisSocket",
                        "sessionRedisSsl",
                        "sessionRedisSslVerify",
                        "sessionRedisUsername",
                        "sessionRemember",
                        "sessionRememberAbsoluteTimeout",
                        "sessionRememberCookieName",
                        "sessionRememberRollingTimeout",
                        "sessionRequestHeaders",
                        "sessionResponseHeaders",
                        "sessionRollingTimeout",
                        "sessionSecret",
                        "sessionStorage",
                        "sessionStoreMetadata",
                        "validateAssertionSignature"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginSamlConfigSessionRedisClusterNode:GatewayPluginSamlConfigSessionRedisClusterNode": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "port"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginSamlConsumer:GatewayPluginSamlConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginSamlConsumerGroup:GatewayPluginSamlConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginSamlRoute:GatewayPluginSamlRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginSamlService:GatewayPluginSamlService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginStatsdConfig:GatewayPluginStatsdConfig": {
            "properties": {
                "allowStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of status code ranges that are allowed to be logged in metrics.\n"
                },
                "consumerIdentifierDefault": {
                    "type": "string",
                    "description": "must be one of [\"consumer*id\", \"custom*id\", \"username\"]\n"
                },
                "flushTimeout": {
                    "type": "number"
                },
                "host": {
                    "type": "string",
                    "description": "The IP address or hostname of StatsD server to send data to.\n"
                },
                "hostnameInPrefix": {
                    "type": "boolean"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayPluginStatsdConfigMetric:GatewayPluginStatsdConfigMetric"
                    },
                    "description": "List of metrics to be logged.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of StatsD server to send data to.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "String to prefix to each metric's name.\n"
                },
                "queue": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdConfigQueue:GatewayPluginStatsdConfigQueue"
                },
                "queueSize": {
                    "type": "integer"
                },
                "retryCount": {
                    "type": "integer"
                },
                "serviceIdentifierDefault": {
                    "type": "string",
                    "description": "must be one of [\"service*id\", \"service*name\", \"service*host\", \"service*name*or*host\"]\n"
                },
                "tagStyle": {
                    "type": "string",
                    "description": "must be one of [\"dogstatsd\", \"influxdb\", \"librato\", \"signalfx\"]\n"
                },
                "udpPacketSize": {
                    "type": "number"
                },
                "useTcp": {
                    "type": "boolean"
                },
                "workspaceIdentifierDefault": {
                    "type": "string",
                    "description": "must be one of [\"workspace*id\", \"workspace*name\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "allowStatusCodes",
                        "consumerIdentifierDefault",
                        "flushTimeout",
                        "host",
                        "hostnameInPrefix",
                        "metrics",
                        "port",
                        "prefix",
                        "queue",
                        "queueSize",
                        "retryCount",
                        "serviceIdentifierDefault",
                        "tagStyle",
                        "udpPacketSize",
                        "useTcp",
                        "workspaceIdentifierDefault"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginStatsdConfigMetric:GatewayPluginStatsdConfigMetric": {
            "properties": {
                "consumerIdentifier": {
                    "type": "string",
                    "description": "Authenticated user detail. must be one of [\"consumer*id\", \"custom*id\", \"username\"]\n"
                },
                "name": {
                    "type": "string",
                    "description": "StatsD metric’s name. Not Null; must be one of [\"kong*latency\", \"latency\", \"request*count\", \"request*per*user\", \"request*size\", \"response*size\", \"status*count\", \"status*count*per*user\", \"unique*users\", \"upstream*latency\", \"status*count*per*workspace\", \"status*count*per*user*per*route\", \"shdict*usage\", \"cache*datastore*hits*total\", \"cache*datastore*misses_total\"]\n"
                },
                "sampleRate": {
                    "type": "number",
                    "description": "Sampling rate\n"
                },
                "serviceIdentifier": {
                    "type": "string",
                    "description": "Service detail. must be one of [\"service*id\", \"service*name\", \"service*host\", \"service*name*or*host\"]\n"
                },
                "statType": {
                    "type": "string",
                    "description": "Determines what sort of event a metric represents. Not Null; must be one of [\"counter\", \"gauge\", \"histogram\", \"meter\", \"set\", \"timer\"]\n"
                },
                "workspaceIdentifier": {
                    "type": "string",
                    "description": "Workspace detail. must be one of [\"workspace*id\", \"workspace*name\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "consumerIdentifier",
                        "name",
                        "sampleRate",
                        "serviceIdentifier",
                        "statType",
                        "workspaceIdentifier"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginStatsdConfigQueue:GatewayPluginStatsdConfigQueue": {
            "properties": {
                "initialRetryDelay": {
                    "type": "number",
                    "description": "Time in seconds before the initial retry is made for a failing batch.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be processed at a time.\n"
                },
                "maxBytes": {
                    "type": "integer",
                    "description": "Maximum number of bytes that can be waiting on a queue, requires string content.\n"
                },
                "maxCoalescingDelay": {
                    "type": "number",
                    "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.\n"
                },
                "maxEntries": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be waiting on the queue.\n"
                },
                "maxRetryDelay": {
                    "type": "number",
                    "description": "Maximum time in seconds between retries, caps exponential backoff.\n"
                },
                "maxRetryTime": {
                    "type": "number",
                    "description": "Time in seconds before the queue gives up calling a failed handler for a batch.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "initialRetryDelay",
                        "maxBatchSize",
                        "maxBytes",
                        "maxCoalescingDelay",
                        "maxEntries",
                        "maxRetryDelay",
                        "maxRetryTime"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginStatsdConsumer:GatewayPluginStatsdConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginStatsdConsumerGroup:GatewayPluginStatsdConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginStatsdRoute:GatewayPluginStatsdRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayPluginStatsdService:GatewayPluginStatsdService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayRouteDestination:GatewayRouteDestination": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "port"
                    ]
                }
            }
        },
        "konnect:index/GatewayRouteService:GatewayRouteService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayRouteSource:GatewayRouteSource": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "ip",
                        "port"
                    ]
                }
            }
        },
        "konnect:index/GatewayServiceClientCertificate:GatewayServiceClientCertificate": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewaySniCertificate:GatewaySniCertificate": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayTargetUpstream:GatewayTargetUpstream": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamClientCertificate:GatewayUpstreamClientCertificate": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamHealthchecks:GatewayUpstreamHealthchecks": {
            "properties": {
                "active": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecksActive:GatewayUpstreamHealthchecksActive"
                },
                "passive": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecksPassive:GatewayUpstreamHealthchecksPassive"
                },
                "threshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "active",
                        "passive",
                        "threshold"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamHealthchecksActive:GatewayUpstreamHealthchecksActive": {
            "properties": {
                "concurrency": {
                    "type": "integer"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "healthy": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecksActiveHealthy:GatewayUpstreamHealthchecksActiveHealthy"
                },
                "httpPath": {
                    "type": "string"
                },
                "httpsSni": {
                    "type": "string"
                },
                "httpsVerifyCertificate": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "number"
                },
                "type": {
                    "type": "string",
                    "description": "must be one of [\"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\"]\n"
                },
                "unhealthy": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecksActiveUnhealthy:GatewayUpstreamHealthchecksActiveUnhealthy"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "concurrency",
                        "headers",
                        "healthy",
                        "httpPath",
                        "httpsSni",
                        "httpsVerifyCertificate",
                        "timeout",
                        "type",
                        "unhealthy"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamHealthchecksActiveHealthy:GatewayUpstreamHealthchecksActiveHealthy": {
            "properties": {
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "interval": {
                    "type": "number"
                },
                "successes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "httpStatuses",
                        "interval",
                        "successes"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamHealthchecksActiveUnhealthy:GatewayUpstreamHealthchecksActiveUnhealthy": {
            "properties": {
                "httpFailures": {
                    "type": "integer"
                },
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "interval": {
                    "type": "number"
                },
                "tcpFailures": {
                    "type": "integer"
                },
                "timeouts": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "httpFailures",
                        "httpStatuses",
                        "interval",
                        "tcpFailures",
                        "timeouts"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamHealthchecksPassive:GatewayUpstreamHealthchecksPassive": {
            "properties": {
                "healthy": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecksPassiveHealthy:GatewayUpstreamHealthchecksPassiveHealthy"
                },
                "type": {
                    "type": "string",
                    "description": "must be one of [\"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\"]\n"
                },
                "unhealthy": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecksPassiveUnhealthy:GatewayUpstreamHealthchecksPassiveUnhealthy"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "healthy",
                        "type",
                        "unhealthy"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamHealthchecksPassiveHealthy:GatewayUpstreamHealthchecksPassiveHealthy": {
            "properties": {
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "successes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "httpStatuses",
                        "successes"
                    ]
                }
            }
        },
        "konnect:index/GatewayUpstreamHealthchecksPassiveUnhealthy:GatewayUpstreamHealthchecksPassiveUnhealthy": {
            "properties": {
                "httpFailures": {
                    "type": "integer"
                },
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tcpFailures": {
                    "type": "integer"
                },
                "timeouts": {
                    "type": "integer"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "httpFailures",
                        "httpStatuses",
                        "tcpFailures",
                        "timeouts"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomFonts:PortalAppearanceCustomFonts": {
            "properties": {
                "base": {
                    "type": "string",
                    "description": "The name of the font to render in the browser. Not Null; must be one of [\"Roboto\", \"Inter\", \"Open Sans\", \"Lato\", \"Slabo 27px\", \"Slabo 13px\", \"Oswald\", \"Source Sans Pro\", \"Montserrat\", \"Raleway\", \"PT Sans\", \"Lora\", \"Roboto Mono\", \"Inconsolata\", \"Source Code Pro\", \"PT Mono\", \"Ubuntu Mono\", \"IBM Plex Mono\"]\n"
                },
                "code": {
                    "type": "string",
                    "description": "The name of the font to render in the browser. Not Null; must be one of [\"Roboto\", \"Inter\", \"Open Sans\", \"Lato\", \"Slabo 27px\", \"Slabo 13px\", \"Oswald\", \"Source Sans Pro\", \"Montserrat\", \"Raleway\", \"PT Sans\", \"Lora\", \"Roboto Mono\", \"Inconsolata\", \"Source Code Pro\", \"PT Mono\", \"Ubuntu Mono\", \"IBM Plex Mono\"]\n"
                },
                "headings": {
                    "type": "string",
                    "description": "The name of the font to render in the browser. Not Null; must be one of [\"Roboto\", \"Inter\", \"Open Sans\", \"Lato\", \"Slabo 27px\", \"Slabo 13px\", \"Oswald\", \"Source Sans Pro\", \"Montserrat\", \"Raleway\", \"PT Sans\", \"Lora\", \"Roboto Mono\", \"Inconsolata\", \"Source Code Pro\", \"PT Mono\", \"Ubuntu Mono\", \"IBM Plex Mono\"]\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "base",
                        "code",
                        "headings"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomTheme:PortalAppearanceCustomTheme": {
            "properties": {
                "colors": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColors:PortalAppearanceCustomThemeColors",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "colors"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColors:PortalAppearanceCustomThemeColors": {
            "properties": {
                "button": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsButton:PortalAppearanceCustomThemeColorsButton",
                    "description": "Not Null\n"
                },
                "section": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSection:PortalAppearanceCustomThemeColorsSection",
                    "description": "Not Null\n"
                },
                "text": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsText:PortalAppearanceCustomThemeColorsText",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "button",
                        "section",
                        "text"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsButton:PortalAppearanceCustomThemeColorsButton": {
            "properties": {
                "primaryFill": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsButtonPrimaryFill:PortalAppearanceCustomThemeColorsButtonPrimaryFill",
                    "description": "Not Null\n"
                },
                "primaryText": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsButtonPrimaryText:PortalAppearanceCustomThemeColorsButtonPrimaryText",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "primaryFill",
                        "primaryText"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsButtonPrimaryFill:PortalAppearanceCustomThemeColorsButtonPrimaryFill": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsButtonPrimaryText:PortalAppearanceCustomThemeColorsButtonPrimaryText": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSection:PortalAppearanceCustomThemeColorsSection": {
            "properties": {
                "accent": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSectionAccent:PortalAppearanceCustomThemeColorsSectionAccent",
                    "description": "Not Null\n"
                },
                "body": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSectionBody:PortalAppearanceCustomThemeColorsSectionBody",
                    "description": "Not Null\n"
                },
                "footer": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSectionFooter:PortalAppearanceCustomThemeColorsSectionFooter",
                    "description": "Not Null\n"
                },
                "header": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSectionHeader:PortalAppearanceCustomThemeColorsSectionHeader",
                    "description": "Not Null\n"
                },
                "hero": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSectionHero:PortalAppearanceCustomThemeColorsSectionHero",
                    "description": "Not Null\n"
                },
                "stroke": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSectionStroke:PortalAppearanceCustomThemeColorsSectionStroke",
                    "description": "Not Null\n"
                },
                "tertiary": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsSectionTertiary:PortalAppearanceCustomThemeColorsSectionTertiary",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accent",
                        "body",
                        "footer",
                        "header",
                        "hero",
                        "stroke",
                        "tertiary"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSectionAccent:PortalAppearanceCustomThemeColorsSectionAccent": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSectionBody:PortalAppearanceCustomThemeColorsSectionBody": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSectionFooter:PortalAppearanceCustomThemeColorsSectionFooter": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSectionHeader:PortalAppearanceCustomThemeColorsSectionHeader": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSectionHero:PortalAppearanceCustomThemeColorsSectionHero": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSectionStroke:PortalAppearanceCustomThemeColorsSectionStroke": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsSectionTertiary:PortalAppearanceCustomThemeColorsSectionTertiary": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsText:PortalAppearanceCustomThemeColorsText": {
            "properties": {
                "accent": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextAccent:PortalAppearanceCustomThemeColorsTextAccent",
                    "description": "Not Null\n"
                },
                "footer": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextFooter:PortalAppearanceCustomThemeColorsTextFooter",
                    "description": "Not Null\n"
                },
                "header": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextHeader:PortalAppearanceCustomThemeColorsTextHeader",
                    "description": "Not Null\n"
                },
                "headings": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextHeadings:PortalAppearanceCustomThemeColorsTextHeadings",
                    "description": "Not Null\n"
                },
                "hero": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextHero:PortalAppearanceCustomThemeColorsTextHero",
                    "description": "Not Null\n"
                },
                "link": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextLink:PortalAppearanceCustomThemeColorsTextLink",
                    "description": "Not Null\n"
                },
                "primary": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextPrimary:PortalAppearanceCustomThemeColorsTextPrimary",
                    "description": "Not Null\n"
                },
                "secondary": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomThemeColorsTextSecondary:PortalAppearanceCustomThemeColorsTextSecondary",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "accent",
                        "footer",
                        "header",
                        "headings",
                        "hero",
                        "link",
                        "primary",
                        "secondary"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextAccent:PortalAppearanceCustomThemeColorsTextAccent": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextFooter:PortalAppearanceCustomThemeColorsTextFooter": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextHeader:PortalAppearanceCustomThemeColorsTextHeader": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextHeadings:PortalAppearanceCustomThemeColorsTextHeadings": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextHero:PortalAppearanceCustomThemeColorsTextHero": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextLink:PortalAppearanceCustomThemeColorsTextLink": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextPrimary:PortalAppearanceCustomThemeColorsTextPrimary": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceCustomThemeColorsTextSecondary:PortalAppearanceCustomThemeColorsTextSecondary": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "description",
                        "value"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceImages:PortalAppearanceImages": {
            "properties": {
                "catalogCover": {
                    "$ref": "#/types/konnect:index/PortalAppearanceImagesCatalogCover:PortalAppearanceImagesCatalogCover",
                    "description": "The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data*URLs.\n"
                },
                "favicon": {
                    "$ref": "#/types/konnect:index/PortalAppearanceImagesFavicon:PortalAppearanceImagesFavicon",
                    "description": "The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data_URLs.\n"
                },
                "logo": {
                    "$ref": "#/types/konnect:index/PortalAppearanceImagesLogo:PortalAppearanceImagesLogo",
                    "description": "The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data_URLs.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "catalogCover",
                        "favicon",
                        "logo"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceImagesCatalogCover:PortalAppearanceImagesCatalogCover": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null\n"
                },
                "filename": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "data",
                        "filename"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceImagesFavicon:PortalAppearanceImagesFavicon": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null\n"
                },
                "filename": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "data",
                        "filename"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceImagesLogo:PortalAppearanceImagesLogo": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null\n"
                },
                "filename": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "data",
                        "filename"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceText:PortalAppearanceText": {
            "properties": {
                "catalog": {
                    "$ref": "#/types/konnect:index/PortalAppearanceTextCatalog:PortalAppearanceTextCatalog",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "catalog"
                    ]
                }
            }
        },
        "konnect:index/PortalAppearanceTextCatalog:PortalAppearanceTextCatalog": {
            "properties": {
                "primaryHeader": {
                    "type": "string",
                    "description": "Not Null\n"
                },
                "welcomeMessage": {
                    "type": "string",
                    "description": "Not Null\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "primaryHeader",
                        "welcomeMessage"
                    ]
                }
            }
        },
        "konnect:index/PortalAuthOidcClaimMappings:PortalAuthOidcClaimMappings": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "konnect:index/PortalAuthOidcConfig:PortalAuthOidcConfig": {
            "properties": {
                "claimMappings": {
                    "$ref": "#/types/konnect:index/PortalAuthOidcConfigClaimMappings:PortalAuthOidcConfigClaimMappings",
                    "description": "Mappings from a portal developer atribute to an Identity Provider claim.\n"
                },
                "clientId": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "claimMappings",
                        "clientId",
                        "issuer",
                        "scopes"
                    ]
                }
            }
        },
        "konnect:index/PortalAuthOidcConfigClaimMappings:PortalAuthOidcConfigClaimMappings": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "email",
                        "groups",
                        "name"
                    ]
                }
            }
        },
        "konnect:index/PortalProductVersionAuthStrategy:PortalProductVersionAuthStrategy": {
            "properties": {
                "clientCredentials": {
                    "$ref": "#/types/konnect:index/PortalProductVersionAuthStrategyClientCredentials:PortalProductVersionAuthStrategyClientCredentials",
                    "description": "Client Credential Auth strategy that the application uses.\n"
                },
                "keyAuth": {
                    "$ref": "#/types/konnect:index/PortalProductVersionAuthStrategyKeyAuth:PortalProductVersionAuthStrategyKeyAuth",
                    "description": "KeyAuth Auth strategy that the application uses.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clientCredentials",
                        "keyAuth"
                    ]
                }
            }
        },
        "konnect:index/PortalProductVersionAuthStrategyClientCredentials:PortalProductVersionAuthStrategyClientCredentials": {
            "properties": {
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "credentialType": {
                    "type": "string",
                    "description": "must be one of [\"client*credentials\", \"self*managed*client*credentials\"]\n"
                },
                "id": {
                    "type": "string",
                    "description": "The Application Auth Strategy ID.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "authMethods",
                        "credentialType",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "konnect:index/PortalProductVersionAuthStrategyKeyAuth:PortalProductVersionAuthStrategyKeyAuth": {
            "properties": {
                "credentialType": {
                    "type": "string",
                    "description": "must be one of [\"key_auth\"]\n"
                },
                "id": {
                    "type": "string",
                    "description": "The Application Auth Strategy ID.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "credentialType",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "konnect:index/ServerlessCloudGatewayControlPlane:ServerlessCloudGatewayControlPlane": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the serverless cloud gateway CP. Requires replacement if changed.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix of the serverless cloud gateway CP. Requires replacement if changed.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The control plane region. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\"]\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "prefix",
                "region"
            ]
        },
        "konnect:index/getApiProductDocumentMetadata:getApiProductDocumentMetadata": {
            "type": "object"
        },
        "konnect:index/getApiProductPortal:getApiProductPortal": {
            "properties": {
                "portalId": {
                    "type": "string"
                },
                "portalName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "portalId",
                "portalName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApiProductVersionGatewayService:getApiProductVersionGatewayService": {
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The identifier of the control plane that the gateway service resides in\n"
                },
                "id": {
                    "type": "string",
                    "description": "The identifier of a gateway service associated with the version of the API product.\n"
                },
                "runtimeGroupId": {
                    "type": "string",
                    "description": "This field is deprecated, please use `control_plane_id` instead. The identifier of the control plane that the gateway service resides in\n"
                }
            },
            "type": "object",
            "required": [
                "controlPlaneId",
                "id",
                "runtimeGroupId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApiProductVersionPortal:getApiProductVersionPortal": {
            "properties": {
                "applicationRegistrationEnabled": {
                    "type": "boolean"
                },
                "authStrategies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getApiProductVersionPortalAuthStrategy:getApiProductVersionPortalAuthStrategy"
                    }
                },
                "autoApproveRegistration": {
                    "type": "boolean"
                },
                "deprecated": {
                    "type": "boolean"
                },
                "portalId": {
                    "type": "string"
                },
                "portalName": {
                    "type": "string"
                },
                "portalProductVersionId": {
                    "type": "string"
                },
                "publishStatus": {
                    "type": "string",
                    "description": "must be one of [\"published\", \"unpublished\"]\n"
                }
            },
            "type": "object",
            "required": [
                "applicationRegistrationEnabled",
                "authStrategies",
                "autoApproveRegistration",
                "deprecated",
                "portalId",
                "portalName",
                "portalProductVersionId",
                "publishStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApiProductVersionPortalAuthStrategy:getApiProductVersionPortalAuthStrategy": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyKeyAuth:getApplicationAuthStrategyKeyAuth": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "At least one published product version is using this auth strategy.\n"
                },
                "configs": {
                    "$ref": "#/types/konnect:index/getApplicationAuthStrategyKeyAuthConfigs:getApplicationAuthStrategyKeyAuthConfigs",
                    "description": "JSON-B object containing the configuration for the Key Auth strategy\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "dcrProvider": {
                    "$ref": "#/types/konnect:index/getApplicationAuthStrategyKeyAuthDcrProvider:getApplicationAuthStrategyKeyAuthDcrProvider"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.\n"
                },
                "strategyType": {
                    "type": "string",
                    "description": "must be one of [\"key_auth\"]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "configs",
                "createdAt",
                "dcrProvider",
                "displayName",
                "id",
                "name",
                "strategyType",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyKeyAuthConfigs:getApplicationAuthStrategyKeyAuthConfigs": {
            "properties": {
                "keyAuth": {
                    "$ref": "#/types/konnect:index/getApplicationAuthStrategyKeyAuthConfigsKeyAuth:getApplicationAuthStrategyKeyAuthConfigsKeyAuth",
                    "description": "The most basic mode to configure an Application Auth Strategy for an API Product Version. \nUsing this mode will allow developers to generate API keys that will authenticate their application requests. \nOnce authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.\n"
                }
            },
            "type": "object",
            "required": [
                "keyAuth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyKeyAuthConfigsKeyAuth:getApplicationAuthStrategyKeyAuthConfigsKeyAuth": {
            "properties": {
                "keyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of the headers containing the API key. You can specify multiple header names.\n"
                }
            },
            "type": "object",
            "required": [
                "keyNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyKeyAuthDcrProvider:getApplicationAuthStrategyKeyAuthDcrProvider": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "providerType": {
                    "type": "string",
                    "description": "The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of [\"auth0\", \"azureAd\", \"curity\", \"okta\", \"http\"]\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "id",
                "name",
                "providerType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyOpenidConnect:getApplicationAuthStrategyOpenidConnect": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "At least one published product version is using this auth strategy.\n"
                },
                "configs": {
                    "$ref": "#/types/konnect:index/getApplicationAuthStrategyOpenidConnectConfigs:getApplicationAuthStrategyOpenidConnectConfigs",
                    "description": "JSON-B object containing the configuration for the OIDC strategy\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "dcrProvider": {
                    "$ref": "#/types/konnect:index/getApplicationAuthStrategyOpenidConnectDcrProvider:getApplicationAuthStrategyOpenidConnectDcrProvider"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.\n"
                },
                "strategyType": {
                    "type": "string",
                    "description": "must be one of [\"openid_connect\"]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "type": "object",
            "required": [
                "active",
                "configs",
                "createdAt",
                "dcrProvider",
                "displayName",
                "id",
                "name",
                "strategyType",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyOpenidConnectConfigs:getApplicationAuthStrategyOpenidConnectConfigs": {
            "properties": {
                "openidConnect": {
                    "$ref": "#/types/konnect:index/getApplicationAuthStrategyOpenidConnectConfigsOpenidConnect:getApplicationAuthStrategyOpenidConnectConfigsOpenidConnect",
                    "description": "A more advanced mode to configure an API Product Version’s Application Auth Strategy. \nUsing this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests. \nOnce authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy. \nAn OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.\n"
                }
            },
            "type": "object",
            "required": [
                "openidConnect"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyOpenidConnectConfigsOpenidConnect:getApplicationAuthStrategyOpenidConnectConfigsOpenidConnect": {
            "properties": {
                "additionalProperties": {
                    "type": "string",
                    "description": "Parsed as JSON.\n"
                },
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "credentialClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "issuer": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "additionalProperties",
                "authMethods",
                "credentialClaims",
                "issuer",
                "scopes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getApplicationAuthStrategyOpenidConnectDcrProvider:getApplicationAuthStrategyOpenidConnectDcrProvider": {
            "properties": {
                "displayName": {
                    "type": "string",
                    "description": "The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "providerType": {
                    "type": "string",
                    "description": "The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of [\"auth0\", \"azureAd\", \"curity\", \"okta\", \"http\"]\n"
                }
            },
            "type": "object",
            "required": [
                "displayName",
                "id",
                "name",
                "providerType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroup:getCloudGatewayConfigurationDataplaneGroup": {
            "properties": {
                "autoscale": {
                    "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroupAutoscale:getCloudGatewayConfigurationDataplaneGroupAutoscale"
                },
                "cloudGatewayNetworkId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of data-plane group creation date.\n"
                },
                "egressIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of egress IP addresses for the network that this data-plane group runs on.\n"
                },
                "id": {
                    "type": "string",
                    "description": "ID of the data-plane group that represents a deployment target for a set of data-planes.\n"
                },
                "privateIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of private IP addresses of the internal load balancer that proxies traffic to this data-plane group.\n"
                },
                "provider": {
                    "type": "string",
                    "description": "Name of cloud provider. must be one of [\"aws\"]\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region ID for cloud provider region.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the data-plane group. must be one of [\"created\", \"initializing\", \"ready\", \"terminating\", \"terminated\"]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of data-plane group update date.\n"
                }
            },
            "type": "object",
            "required": [
                "autoscale",
                "cloudGatewayNetworkId",
                "createdAt",
                "egressIpAddresses",
                "id",
                "privateIpAddresses",
                "provider",
                "region",
                "state",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroupAutoscale:getCloudGatewayConfigurationDataplaneGroupAutoscale": {
            "properties": {
                "configurationDataPlaneGroupAutoscaleAutopilot": {
                    "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot",
                    "description": "Object that describes the autopilot autoscaling strategy.\n"
                },
                "configurationDataPlaneGroupAutoscaleStatic": {
                    "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic",
                    "description": "Object that describes the static autoscaling strategy.\n"
                }
            },
            "type": "object",
            "required": [
                "configurationDataPlaneGroupAutoscaleAutopilot",
                "configurationDataPlaneGroupAutoscaleStatic"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot": {
            "properties": {
                "baseRps": {
                    "type": "integer",
                    "description": "Base number of requests per second that the deployment target should support.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "must be one of [\"autopilot\"]\n"
                },
                "maxRps": {
                    "type": "integer",
                    "description": "Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.\n"
                }
            },
            "type": "object",
            "required": [
                "baseRps",
                "kind",
                "maxRps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:getCloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStatic": {
            "properties": {
                "instanceType": {
                    "type": "string",
                    "description": "Instance type name to indicate capacity. must be one of [\"small\", \"medium\", \"large\"]\n"
                },
                "kind": {
                    "type": "string",
                    "description": "must be one of [\"static\"]\n"
                },
                "requestedInstances": {
                    "type": "integer",
                    "description": "Number of data-planes the deployment target will contain.\n"
                }
            },
            "type": "object",
            "required": [
                "instanceType",
                "kind",
                "requestedInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroupConfig:getCloudGatewayConfigurationDataplaneGroupConfig": {
            "properties": {
                "autoscale": {
                    "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroupConfigAutoscale:getCloudGatewayConfigurationDataplaneGroupConfigAutoscale"
                },
                "cloudGatewayNetworkId": {
                    "type": "string"
                },
                "provider": {
                    "type": "string",
                    "description": "Name of cloud provider. must be one of [\"aws\"]\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region ID for cloud provider region.\n"
                }
            },
            "type": "object",
            "required": [
                "autoscale",
                "cloudGatewayNetworkId",
                "provider",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroupConfigAutoscale:getCloudGatewayConfigurationDataplaneGroupConfigAutoscale": {
            "properties": {
                "configurationDataPlaneGroupAutoscaleAutopilot": {
                    "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot",
                    "description": "Object that describes the autopilot autoscaling strategy.\n"
                },
                "configurationDataPlaneGroupAutoscaleStatic": {
                    "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic",
                    "description": "Object that describes the static autoscaling strategy.\n"
                }
            },
            "type": "object",
            "required": [
                "configurationDataPlaneGroupAutoscaleAutopilot",
                "configurationDataPlaneGroupAutoscaleStatic"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot:getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilot": {
            "properties": {
                "baseRps": {
                    "type": "integer",
                    "description": "Base number of requests per second that the deployment target should support.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "must be one of [\"autopilot\"]\n"
                },
                "maxRps": {
                    "type": "integer",
                    "description": "Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.\n"
                }
            },
            "type": "object",
            "required": [
                "baseRps",
                "kind",
                "maxRps"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic:getCloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStatic": {
            "properties": {
                "instanceType": {
                    "type": "string",
                    "description": "Instance type name to indicate capacity. must be one of [\"small\", \"medium\", \"large\"]\n"
                },
                "kind": {
                    "type": "string",
                    "description": "must be one of [\"static\"]\n"
                },
                "requestedInstances": {
                    "type": "integer",
                    "description": "Number of data-planes the deployment target will contain.\n"
                }
            },
            "type": "object",
            "required": [
                "instanceType",
                "kind",
                "requestedInstances"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayCustomDomainStateMetadata:getCloudGatewayCustomDomainStateMetadata": {
            "properties": {
                "reason": {
                    "type": "string",
                    "description": "Reason why the custom domain may be in an erroneous state, reported from backing infrastructure.\n"
                },
                "reportedStatus": {
                    "type": "string",
                    "description": "Reported status of the custom domain from backing infrastructure.\n"
                }
            },
            "type": "object",
            "required": [
                "reason",
                "reportedStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayNetworkFirewall:getCloudGatewayNetworkFirewall": {
            "properties": {
                "allowedCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed CIDR blocks to access a network.\n"
                },
                "deniedCidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of denied CIDR blocks to access a network.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedCidrBlocks",
                "deniedCidrBlocks"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayNetworkProviderMetadata:getCloudGatewayNetworkProviderMetadata": {
            "properties": {
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "vpcId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "subnetIds",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayProviderAccountListData:getCloudGatewayProviderAccountListData": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of provider account creation date.\n"
                },
                "id": {
                    "type": "string"
                },
                "provider": {
                    "type": "string",
                    "description": "Name of cloud provider. must be one of [\"aws\"]\n"
                },
                "providerAccountId": {
                    "type": "string",
                    "description": "ID of the cloud provider account.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of provider account update date.\n"
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "id",
                "provider",
                "providerAccountId",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayProviderAccountListMeta:getCloudGatewayProviderAccountListMeta": {
            "properties": {
                "page": {
                    "$ref": "#/types/konnect:index/getCloudGatewayProviderAccountListMetaPage:getCloudGatewayProviderAccountListMetaPage",
                    "description": "Contains pagination query parameters and the total number of objects returned.\n"
                }
            },
            "type": "object",
            "required": [
                "page"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayProviderAccountListMetaPage:getCloudGatewayProviderAccountListMetaPage": {
            "properties": {
                "number": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "number",
                "size",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayTransitGatewayDnsConfig:getCloudGatewayTransitGatewayDnsConfig": {
            "properties": {
                "domainProxyLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Internal domain names to proxy for DNS resolution from the listed remote DNS server IP addresses,\nfor a transit gateway.\n"
                },
                "remoteDnsServerIpAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remote DNS Server IP Addresses to connect to for resolving internal DNS via a transit gateway.\n"
                }
            },
            "type": "object",
            "required": [
                "domainProxyLists",
                "remoteDnsServerIpAddresses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayTransitGatewayTransitGatewayAttachmentConfig:getCloudGatewayTransitGatewayTransitGatewayAttachmentConfig": {
            "properties": {
                "awsTransitGatewayAttachmentConfig": {
                    "$ref": "#/types/konnect:index/getCloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig:getCloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig"
                }
            },
            "type": "object",
            "required": [
                "awsTransitGatewayAttachmentConfig"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getCloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig:getCloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfig": {
            "properties": {
                "kind": {
                    "type": "string",
                    "description": "must be one of [\"aws-transit-gateway-attachment\"]\n"
                },
                "ramShareArn": {
                    "type": "string",
                    "description": "Resource Share ARN to verify request to create transit gateway attachment.\n"
                },
                "transitGatewayId": {
                    "type": "string",
                    "description": "AWS Transit Gateway ID to create attachment to.\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "ramShareArn",
                "transitGatewayId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayAclConsumer:getGatewayAclConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayBasicAuthConsumer:getGatewayBasicAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayControlPlaneConfig:getGatewayControlPlaneConfig": {
            "properties": {
                "controlPlaneEndpoint": {
                    "type": "string",
                    "description": "Control Plane Endpoint.\n"
                },
                "telemetryEndpoint": {
                    "type": "string",
                    "description": "Telemetry Endpoint.\n"
                }
            },
            "type": "object",
            "required": [
                "controlPlaneEndpoint",
                "telemetryEndpoint"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayHmacAuthConsumer:getGatewayHmacAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayJwtConsumer:getGatewayJwtConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayKeyAuthConsumer:getGatewayKeyAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayKeyPem:getGatewayKeyPem": {
            "properties": {
                "privateKey": {
                    "type": "string"
                },
                "publicKey": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "privateKey",
                "publicKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayKeySet:getGatewayKeySet": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAclConfig:getGatewayPluginAclConfig": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "hideGroupsHeader": {
                    "type": "boolean",
                    "description": "If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.\n"
                },
                "includeConsumerGroups": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "allows",
                "denies",
                "hideGroupsHeader",
                "includeConsumerGroups"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAclConsumer:getGatewayPluginAclConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAclConsumerGroup:getGatewayPluginAclConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAclRoute:getGatewayPluginAclRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAclService:getGatewayPluginAclService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorConfig:getGatewayPluginAiPromptDecoratorConfig": {
            "properties": {
                "prompts": {
                    "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorConfigPrompts:getGatewayPluginAiPromptDecoratorConfigPrompts"
                }
            },
            "type": "object",
            "required": [
                "prompts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorConfigPrompts:getGatewayPluginAiPromptDecoratorConfigPrompts": {
            "properties": {
                "appends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorConfigPromptsAppend:getGatewayPluginAiPromptDecoratorConfigPromptsAppend"
                    },
                    "description": "Insert chat messages at the end of the chat message array. This array preserves exact order when adding messages.\n"
                },
                "prepends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorConfigPromptsPrepend:getGatewayPluginAiPromptDecoratorConfigPromptsPrepend"
                    },
                    "description": "Insert chat messages at the beginning of the chat message array. This array preserves exact order when adding messages.\n"
                }
            },
            "type": "object",
            "required": [
                "appends",
                "prepends"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorConfigPromptsAppend:getGatewayPluginAiPromptDecoratorConfigPromptsAppend": {
            "properties": {
                "content": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "must be one of [\"system\", \"assistant\", \"user\"]\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorConfigPromptsPrepend:getGatewayPluginAiPromptDecoratorConfigPromptsPrepend": {
            "properties": {
                "content": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "description": "must be one of [\"system\", \"assistant\", \"user\"]\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "role"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorConsumer:getGatewayPluginAiPromptDecoratorConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorConsumerGroup:getGatewayPluginAiPromptDecoratorConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorRoute:getGatewayPluginAiPromptDecoratorRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecoratorService:getGatewayPluginAiPromptDecoratorService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptGuardConfig:getGatewayPluginAiPromptGuardConfig": {
            "properties": {
                "allowAllConversationHistory": {
                    "type": "boolean",
                    "description": "If true, will ignore all previous chat prompts from the conversation history.\n"
                },
                "allowPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of valid regex patterns, or valid questions from the 'user' role in chat.\n"
                },
                "denyPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of invalid regex patterns, or invalid questions from the 'user' role in chat.\n"
                }
            },
            "type": "object",
            "required": [
                "allowAllConversationHistory",
                "allowPatterns",
                "denyPatterns"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptGuardConsumer:getGatewayPluginAiPromptGuardConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptGuardConsumerGroup:getGatewayPluginAiPromptGuardConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptGuardRoute:getGatewayPluginAiPromptGuardRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptGuardService:getGatewayPluginAiPromptGuardService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptTemplateConfig:getGatewayPluginAiPromptTemplateConfig": {
            "properties": {
                "allowUntemplatedRequests": {
                    "type": "boolean",
                    "description": "Set true to allow requests that don't call or match any template.\n"
                },
                "logOriginalRequest": {
                    "type": "boolean",
                    "description": "Set true to add the original request to the Kong log plugin(s) output.\n"
                },
                "templates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptTemplateConfigTemplate:getGatewayPluginAiPromptTemplateConfigTemplate"
                    },
                    "description": "Array of templates available to the request context.\n"
                }
            },
            "type": "object",
            "required": [
                "allowUntemplatedRequests",
                "logOriginalRequest",
                "templates"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptTemplateConfigTemplate:getGatewayPluginAiPromptTemplateConfigTemplate": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Unique name for the template, can be called with `{template://NAME}`\n"
                },
                "template": {
                    "type": "string",
                    "description": "Template string for this request, supports mustache-style `{{\"{{\"}}placeholders{{\"}}\"}}`\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "template"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptTemplateConsumer:getGatewayPluginAiPromptTemplateConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptTemplateConsumerGroup:getGatewayPluginAiPromptTemplateConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptTemplateRoute:getGatewayPluginAiPromptTemplateRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiPromptTemplateService:getGatewayPluginAiPromptTemplateService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyConfig:getGatewayPluginAiProxyConfig": {
            "properties": {
                "auth": {
                    "$ref": "#/types/konnect:index/getGatewayPluginAiProxyConfigAuth:getGatewayPluginAiProxyConfigAuth"
                },
                "logging": {
                    "$ref": "#/types/konnect:index/getGatewayPluginAiProxyConfigLogging:getGatewayPluginAiProxyConfigLogging"
                },
                "model": {
                    "$ref": "#/types/konnect:index/getGatewayPluginAiProxyConfigModel:getGatewayPluginAiProxyConfigModel"
                },
                "responseStreaming": {
                    "type": "string",
                    "description": "Whether to 'optionally allow', 'deny', or 'always' (force) the streaming of answers via server sent events. must be one of [\"allow\", \"deny\", \"always\"]\n"
                },
                "routeType": {
                    "type": "string",
                    "description": "The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation. must be one of [\"llm/v1/chat\", \"llm/v1/completions\", \"preserve\"]\n"
                }
            },
            "type": "object",
            "required": [
                "auth",
                "logging",
                "model",
                "responseStreaming",
                "routeType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyConfigAuth:getGatewayPluginAiProxyConfigAuth": {
            "properties": {
                "azureClientId": {
                    "type": "string",
                    "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.\n"
                },
                "azureClientSecret": {
                    "type": "string",
                    "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.\n"
                },
                "azureTenantId": {
                    "type": "string",
                    "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.\n"
                },
                "azureUseManagedIdentity": {
                    "type": "boolean",
                    "description": "Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "If AI model requires authentication via Authorization or API key header, specify its name here.\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.\n"
                },
                "paramLocation": {
                    "type": "string",
                    "description": "Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body. must be one of [\"query\", \"body\"]\n"
                },
                "paramName": {
                    "type": "string",
                    "description": "If AI model requires authentication via query parameter, specify its name here.\n"
                },
                "paramValue": {
                    "type": "string",
                    "description": "Specify the full parameter value for 'param_name'.\n"
                }
            },
            "type": "object",
            "required": [
                "azureClientId",
                "azureClientSecret",
                "azureTenantId",
                "azureUseManagedIdentity",
                "headerName",
                "headerValue",
                "paramLocation",
                "paramName",
                "paramValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyConfigLogging:getGatewayPluginAiProxyConfigLogging": {
            "properties": {
                "logPayloads": {
                    "type": "boolean",
                    "description": "If enabled, will log the request and response body into the Kong log plugin(s) output.\n"
                },
                "logStatistics": {
                    "type": "boolean",
                    "description": "If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.\n"
                }
            },
            "type": "object",
            "required": [
                "logPayloads",
                "logStatistics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyConfigModel:getGatewayPluginAiProxyConfigModel": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Model name to execute.\n"
                },
                "options": {
                    "$ref": "#/types/konnect:index/getGatewayPluginAiProxyConfigModelOptions:getGatewayPluginAiProxyConfigModelOptions",
                    "description": "Key/value settings for the model\n"
                },
                "provider": {
                    "type": "string",
                    "description": "AI provider request format - Kong translates requests to and from the specified backend compatible formats. must be one of [\"openai\", \"azure\", \"anthropic\", \"cohere\", \"mistral\", \"llama2\"]\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "options",
                "provider"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyConfigModelOptions:getGatewayPluginAiProxyConfigModelOptions": {
            "properties": {
                "anthropicVersion": {
                    "type": "string",
                    "description": "Defines the schema/API version, if using Anthropic provider.\n"
                },
                "azureApiVersion": {
                    "type": "string",
                    "description": "'api-version' for Azure OpenAI instances.\n"
                },
                "azureDeploymentId": {
                    "type": "string",
                    "description": "Deployment ID for Azure OpenAI instances.\n"
                },
                "azureInstance": {
                    "type": "string",
                    "description": "Instance name for Azure OpenAI hosted models.\n"
                },
                "llama2Format": {
                    "type": "string",
                    "description": "If using llama2 provider, select the upstream message format. must be one of [\"raw\", \"openai\", \"ollama\"]\n"
                },
                "maxTokens": {
                    "type": "integer",
                    "description": "Defines the max_tokens, if using chat or completion models.\n"
                },
                "mistralFormat": {
                    "type": "string",
                    "description": "If using mistral provider, select the upstream message format. must be one of [\"openai\", \"ollama\"]\n"
                },
                "temperature": {
                    "type": "number",
                    "description": "Defines the matching temperature, if using chat or completion models.\n"
                },
                "topK": {
                    "type": "integer",
                    "description": "Defines the top-k most likely tokens, if supported.\n"
                },
                "topP": {
                    "type": "number",
                    "description": "Defines the top-p probability mass, if supported.\n"
                },
                "upstreamPath": {
                    "type": "string",
                    "description": "Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.\n"
                },
                "upstreamUrl": {
                    "type": "string",
                    "description": "Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.\n"
                }
            },
            "type": "object",
            "required": [
                "anthropicVersion",
                "azureApiVersion",
                "azureDeploymentId",
                "azureInstance",
                "llama2Format",
                "maxTokens",
                "mistralFormat",
                "temperature",
                "topK",
                "topP",
                "upstreamPath",
                "upstreamUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyConsumer:getGatewayPluginAiProxyConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyConsumerGroup:getGatewayPluginAiProxyConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyRoute:getGatewayPluginAiProxyRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAiProxyService:getGatewayPluginAiProxyService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAwsLambdaConfig:getGatewayPluginAwsLambdaConfig": {
            "properties": {
                "awsAssumeRoleArn": {
                    "type": "string",
                    "description": "The target AWS IAM role ARN used to invoke the Lambda function.\n"
                },
                "awsImdsProtocolVersion": {
                    "type": "string",
                    "description": "Identifier to select the IMDS protocol version to use: `v1` or `v2`. must be one of [\"v1\", \"v2\"]\n"
                },
                "awsKey": {
                    "type": "string",
                    "description": "The AWS key credential to be used when invoking the function.\n"
                },
                "awsRegion": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "awsRoleSessionName": {
                    "type": "string",
                    "description": "The identifier of the assumed role session.\n"
                },
                "awsSecret": {
                    "type": "string",
                    "description": "The AWS secret credential to be used when invoking the function.\n"
                },
                "awsgatewayCompatible": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the plugin should wrap requests into the Amazon API gateway.\n"
                },
                "base64EncodeBody": {
                    "type": "boolean",
                    "description": "An optional value that Base64-encodes the request body.\n"
                },
                "disableHttps": {
                    "type": "boolean"
                },
                "forwardRequestBody": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the request body is sent in the request_body field of the JSON-encoded request. If the body arguments can be parsed, they are sent in the separate request_body_args field of the request.\n"
                },
                "forwardRequestHeaders": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the original HTTP request headers are sent as a map in the request_headers field of the JSON-encoded request.\n"
                },
                "forwardRequestMethod": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the original HTTP request method verb is sent in the request_method field of the JSON-encoded request.\n"
                },
                "forwardRequestUri": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the original HTTP request URI is sent in the request_uri field of the JSON-encoded request.\n"
                },
                "functionName": {
                    "type": "string",
                    "description": "The AWS Lambda function to invoke. Both function name and function ARN (including partial) are supported.\n"
                },
                "host": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "invocationType": {
                    "type": "string",
                    "description": "The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun. must be one of [\"RequestResponse\", \"Event\", \"DryRun\"]\n"
                },
                "isProxyIntegration": {
                    "type": "boolean",
                    "description": "An optional value that defines whether the response format to receive from the Lambda to this format.\n"
                },
                "keepalive": {
                    "type": "number",
                    "description": "An optional value in milliseconds that defines how long an idle connection lives before being closed.\n"
                },
                "logType": {
                    "type": "string",
                    "description": "The LogType to use when invoking the function. By default, None and Tail are supported. must be one of [\"Tail\", \"None\"]\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "proxyUrl": {
                    "type": "string",
                    "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.\n"
                },
                "qualifier": {
                    "type": "string",
                    "description": "The qualifier to use when invoking the function.\n"
                },
                "skipLargeBodies": {
                    "type": "boolean",
                    "description": "An optional value that defines whether Kong should send large bodies that are buffered to disk\n"
                },
                "timeout": {
                    "type": "number",
                    "description": "An optional timeout in milliseconds when invoking the function.\n"
                },
                "unhandledStatus": {
                    "type": "integer",
                    "description": "The response status code to use (instead of the default 200, 202, or 204) in the case of an Unhandled Function Error.\n"
                }
            },
            "type": "object",
            "required": [
                "awsAssumeRoleArn",
                "awsImdsProtocolVersion",
                "awsKey",
                "awsRegion",
                "awsRoleSessionName",
                "awsSecret",
                "awsgatewayCompatible",
                "base64EncodeBody",
                "disableHttps",
                "forwardRequestBody",
                "forwardRequestHeaders",
                "forwardRequestMethod",
                "forwardRequestUri",
                "functionName",
                "host",
                "invocationType",
                "isProxyIntegration",
                "keepalive",
                "logType",
                "port",
                "proxyUrl",
                "qualifier",
                "skipLargeBodies",
                "timeout",
                "unhandledStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAwsLambdaConsumer:getGatewayPluginAwsLambdaConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAwsLambdaConsumerGroup:getGatewayPluginAwsLambdaConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAwsLambdaRoute:getGatewayPluginAwsLambdaRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginAwsLambdaService:getGatewayPluginAwsLambdaService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginBasicAuthConfig:getGatewayPluginBasicAuthConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (Consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`. Please note that this value must refer to the Consumer `id` or `username` attribute, and **not** its `custom_id`.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin will strip the credential from the request (i.e. the `Authorization` header) before proxying it.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.\n"
                }
            },
            "type": "object",
            "required": [
                "anonymous",
                "hideCredentials",
                "realm"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginBasicAuthConsumer:getGatewayPluginBasicAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginBasicAuthConsumerGroup:getGatewayPluginBasicAuthConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginBasicAuthRoute:getGatewayPluginBasicAuthRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginBasicAuthService:getGatewayPluginBasicAuthService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorrelationIdConfig:getGatewayPluginCorrelationIdConfig": {
            "properties": {
                "echoDownstream": {
                    "type": "boolean",
                    "description": "Whether to echo the header back to downstream (the client).\n"
                },
                "generator": {
                    "type": "string",
                    "description": "The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See Generators. must be one of [\"uuid\", \"uuid#counter\", \"tracker\"]\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "The HTTP header name to use for the correlation ID.\n"
                }
            },
            "type": "object",
            "required": [
                "echoDownstream",
                "generator",
                "headerName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorrelationIdConsumer:getGatewayPluginCorrelationIdConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorrelationIdConsumerGroup:getGatewayPluginCorrelationIdConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorrelationIdRoute:getGatewayPluginCorrelationIdRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorrelationIdService:getGatewayPluginCorrelationIdService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorsConfig:getGatewayPluginCorsConfig": {
            "properties": {
                "credentials": {
                    "type": "boolean",
                    "description": "Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.\n"
                },
                "exposedHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value for the `Access-Control-Allow-Headers` header.\n"
                },
                "maxAge": {
                    "type": "number",
                    "description": "Indicates how long the results of the preflight request can be cached, in `seconds`.\n"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'\n"
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.\n"
                },
                "preflightContinue": {
                    "type": "boolean",
                    "description": "A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.\n"
                },
                "privateNetwork": {
                    "type": "boolean",
                    "description": "Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "exposedHeaders",
                "headers",
                "maxAge",
                "methods",
                "origins",
                "preflightContinue",
                "privateNetwork"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorsConsumer:getGatewayPluginCorsConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorsConsumerGroup:getGatewayPluginCorsConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorsRoute:getGatewayPluginCorsRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginCorsService:getGatewayPluginCorsService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginExitTransformerConfig:getGatewayPluginExitTransformerConfig": {
            "properties": {
                "functions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "handleUnexpected": {
                    "type": "boolean",
                    "description": "Determines whether to handle unexpected errors by transforming their responses.\n"
                },
                "handleUnknown": {
                    "type": "boolean",
                    "description": "Determines whether to handle unknown status codes by transforming their responses.\n"
                }
            },
            "type": "object",
            "required": [
                "functions",
                "handleUnexpected",
                "handleUnknown"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginExitTransformerConsumer:getGatewayPluginExitTransformerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginExitTransformerConsumerGroup:getGatewayPluginExitTransformerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginExitTransformerRoute:getGatewayPluginExitTransformerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginExitTransformerService:getGatewayPluginExitTransformerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginFileLogConfig:getGatewayPluginFileLogConfig": {
            "properties": {
                "customFieldsByLua": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Lua code as a key-value map\n"
                },
                "path": {
                    "type": "string",
                    "description": "The file path of the output log file. The plugin creates the log file if it doesn't exist yet.\n"
                },
                "reopen": {
                    "type": "boolean",
                    "description": "Determines whether the log file is closed and reopened on every request.\n"
                }
            },
            "type": "object",
            "required": [
                "customFieldsByLua",
                "path",
                "reopen"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginFileLogConsumer:getGatewayPluginFileLogConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginFileLogConsumerGroup:getGatewayPluginFileLogConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginFileLogRoute:getGatewayPluginFileLogRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginFileLogService:getGatewayPluginFileLogService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginIpRestrictionConfig:getGatewayPluginIpRestrictionConfig": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs or CIDR ranges to allow. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IPs or CIDR ranges to deny. One of `config.allow` or `config.deny` must be specified.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to send as a response body to rejected requests.\n"
                },
                "status": {
                    "type": "number",
                    "description": "The HTTP status of the requests that will be rejected by the plugin.\n"
                }
            },
            "type": "object",
            "required": [
                "allows",
                "denies",
                "message",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginIpRestrictionConsumer:getGatewayPluginIpRestrictionConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginIpRestrictionConsumerGroup:getGatewayPluginIpRestrictionConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginIpRestrictionRoute:getGatewayPluginIpRestrictionRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginIpRestrictionService:getGatewayPluginIpRestrictionService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJqConfig:getGatewayPluginJqConfig": {
            "properties": {
                "requestIfMediaTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "requestJqProgram": {
                    "type": "string"
                },
                "requestJqProgramOptions": {
                    "$ref": "#/types/konnect:index/getGatewayPluginJqConfigRequestJqProgramOptions:getGatewayPluginJqConfigRequestJqProgramOptions"
                },
                "responseIfMediaTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "responseIfStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "responseJqProgram": {
                    "type": "string"
                },
                "responseJqProgramOptions": {
                    "$ref": "#/types/konnect:index/getGatewayPluginJqConfigResponseJqProgramOptions:getGatewayPluginJqConfigResponseJqProgramOptions"
                }
            },
            "type": "object",
            "required": [
                "requestIfMediaTypes",
                "requestJqProgram",
                "requestJqProgramOptions",
                "responseIfMediaTypes",
                "responseIfStatusCodes",
                "responseJqProgram",
                "responseJqProgramOptions"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJqConfigRequestJqProgramOptions:getGatewayPluginJqConfigRequestJqProgramOptions": {
            "properties": {
                "asciiOutput": {
                    "type": "boolean"
                },
                "compactOutput": {
                    "type": "boolean"
                },
                "joinOutput": {
                    "type": "boolean"
                },
                "rawOutput": {
                    "type": "boolean"
                },
                "sortKeys": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "asciiOutput",
                "compactOutput",
                "joinOutput",
                "rawOutput",
                "sortKeys"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJqConfigResponseJqProgramOptions:getGatewayPluginJqConfigResponseJqProgramOptions": {
            "properties": {
                "asciiOutput": {
                    "type": "boolean"
                },
                "compactOutput": {
                    "type": "boolean"
                },
                "joinOutput": {
                    "type": "boolean"
                },
                "rawOutput": {
                    "type": "boolean"
                },
                "sortKeys": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "asciiOutput",
                "compactOutput",
                "joinOutput",
                "rawOutput",
                "sortKeys"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJqConsumer:getGatewayPluginJqConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJqConsumerGroup:getGatewayPluginJqConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJqRoute:getGatewayPluginJqRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJqService:getGatewayPluginJqService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtConfig:getGatewayPluginJwtConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.\n"
                },
                "claimsToVerifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of registered claims (according to RFC 7519) that Kong can verify as well. Accepted values: one of exp or nbf.\n"
                },
                "cookieNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of cookie names that Kong will inspect to retrieve JWTs.\n"
                },
                "headerNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of HTTP header names that Kong will inspect to retrieve JWTs.\n"
                },
                "keyClaimName": {
                    "type": "string",
                    "description": "The name of the claim in which the key identifying the secret must be passed. The plugin will attempt to read this claim from the JWT payload and the header, in that order.\n"
                },
                "maximumExpiration": {
                    "type": "number",
                    "description": "A value between 0 and 31536000 (365 days) limiting the lifetime of the JWT to maximum_expiration seconds in the future.\n"
                },
                "runOnPreflight": {
                    "type": "boolean",
                    "description": "A boolean value that indicates whether the plugin should run (and try to authenticate) on OPTIONS preflight requests. If set to false, then OPTIONS requests will always be allowed.\n"
                },
                "secretIsBase64": {
                    "type": "boolean",
                    "description": "If true, the plugin assumes the credential’s secret to be base64 encoded. You will need to create a base64-encoded secret for your Consumer, and sign your JWT with the original secret.\n"
                },
                "uriParamNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of querystring parameters that Kong will inspect to retrieve JWTs.\n"
                }
            },
            "type": "object",
            "required": [
                "anonymous",
                "claimsToVerifies",
                "cookieNames",
                "headerNames",
                "keyClaimName",
                "maximumExpiration",
                "runOnPreflight",
                "secretIsBase64",
                "uriParamNames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtConsumer:getGatewayPluginJwtConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtConsumerGroup:getGatewayPluginJwtConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtRoute:getGatewayPluginJwtRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtService:getGatewayPluginJwtService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtSignerConfig:getGatewayPluginJwtSignerConfig": {
            "properties": {
                "accessTokenConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to apply an access token to a Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of alues. Valid values are `id`, `username`, and `custom_id`.\n"
                },
                "accessTokenConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (for example, `sub` or `username`) in an access token to Kong consumer entity.\n"
                },
                "accessTokenIntrospectionAuthorization": {
                    "type": "string",
                    "description": "If the introspection endpoint requires client authentication (client being the JWT Signer plugin), you can specify the `Authorization` header's value with this configuration parameter.\n"
                },
                "accessTokenIntrospectionBodyArgs": {
                    "type": "string",
                    "description": "This parameter allows you to pass URL encoded request body arguments. For example: `resource=` or `a=1\u0026b=\u0026c`.\n"
                },
                "accessTokenIntrospectionConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to do access token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values.\n"
                },
                "accessTokenIntrospectionConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in access token introspection results to the Kong consumer entity.\n"
                },
                "accessTokenIntrospectionEndpoint": {
                    "type": "string",
                    "description": "When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter.\n"
                },
                "accessTokenIntrospectionHint": {
                    "type": "string",
                    "description": "If you need to give `hint` parameter when introspecting an access token, use this parameter to specify the value. By default, the plugin sends `hint=access_token`.\n"
                },
                "accessTokenIntrospectionJwtClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If your introspection endpoint returns an access token in one of the keys (or claims) within the introspection results (`JSON`). If the key cannot be found, the plugin responds with `401 Unauthorized`. Also if the key is found but cannot be decoded as JWT, it also responds with `401 Unauthorized`.\n"
                },
                "accessTokenIntrospectionLeeway": {
                    "type": "number",
                    "description": "Adjusts clock skew between the token issuer introspection results and Kong. The value is added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time in seconds. You can disable access token introspection `expiry` verification altogether with `config.verify_access_token_introspection_expiry`.\n"
                },
                "accessTokenIntrospectionScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the claim/property in access token introspection results (`JSON`) to be verified against values of `config.access_token_introspection_scopes_required`. This supports nested claims. For example, with Keycloak you could use `[ \"realm_access\", \"roles\" ]`, hich can be given as `realm_access,roles` (form post). If the claim is not found in access token introspection results, and you have specified `config.access_token_introspection_scopes_required`, the plugin responds with `403 Forbidden`.\n"
                },
                "accessTokenIntrospectionScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.access_token_introspection_scopes_claim`.\n"
                },
                "accessTokenIntrospectionTimeout": {
                    "type": "number",
                    "description": "Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on access token introspection.\n"
                },
                "accessTokenIssuer": {
                    "type": "string",
                    "description": "The `iss` claim of a signed or re-signed access token is set to this value. Original `iss` claim of the incoming token (possibly introspected) is stored in `original_iss` claim of the newly signed access token.\n"
                },
                "accessTokenJwksUri": {
                    "type": "string",
                    "description": "Specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the access token.\n"
                },
                "accessTokenJwksUriClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.\n"
                },
                "accessTokenJwksUriClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_username`\n"
                },
                "accessTokenJwksUriClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_password`\n"
                },
                "accessTokenJwksUriRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `access_token_jwks_uri`. The default value 0 means no auto-rotation.\n"
                },
                "accessTokenKeyset": {
                    "type": "string",
                    "description": "The name of the keyset containing signing keys.\n"
                },
                "accessTokenKeysetClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `access_token_keyset` is an https uri that requires mTLS Auth.\n"
                },
                "accessTokenKeysetClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_username`\n"
                },
                "accessTokenKeysetClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_password`\n"
                },
                "accessTokenKeysetRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `access_token_keyset`. The default value 0 means no auto-rotation.\n"
                },
                "accessTokenLeeway": {
                    "type": "number",
                    "description": "Adjusts clock skew between the token issuer and Kong. The value is added to the token's `exp` claim before checking token expiry against Kong servers' current time in seconds. You can disable access token `expiry` verification altogether with `config.verify_access_token_expiry`.\n"
                },
                "accessTokenOptional": {
                    "type": "boolean",
                    "description": "If an access token is not provided or no `config.access_token_request_header` is specified, the plugin cannot verify the access token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Use this parameter to allow the request to proceed even when there is no token to check. If the token is provided, then this parameter has no effect\n"
                },
                "accessTokenRequestHeader": {
                    "type": "string",
                    "description": "This parameter tells the name of the header where to look for the access token.\n"
                },
                "accessTokenScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the claim in an access token to verify against values of `config.access_token_scopes_required`.\n"
                },
                "accessTokenScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the required values (or scopes) that are checked by a claim specified by `config.access_token_scopes_claim`.\n"
                },
                "accessTokenSigningAlgorithm": {
                    "type": "string",
                    "description": "When this plugin sets the upstream header as specified with `config.access_token_upstream_header`, re-signs the original access token using the private keys of the JWT Signer plugin. Specify the algorithm that is used to sign the token. The `config.access_token_issuer` specifies which `keyset` is used to sign the new token issued by Kong using the specified signing algorithm. must be one of [\"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"EdDSA\"]\n"
                },
                "accessTokenUpstreamHeader": {
                    "type": "string",
                    "description": "Removes the `config.access_token_request_header` from the request after reading its value. With `config.access_token_upstream_header`, you can specify the upstream header where the plugin adds the Kong signed token. If you don't specify a value, such as use `null` or `\"\"` (empty string), the plugin does not even try to sign or re-sign the token.\n"
                },
                "accessTokenUpstreamLeeway": {
                    "type": "number",
                    "description": "If you want to add or subtract (using a negative value) expiry time (in seconds) of the original access token, you can specify a value that is added to the original access token's `exp` claim.\n"
                },
                "addAccessTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "addChannelTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "addClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Add customized claims to both tokens if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "cacheAccessTokenIntrospection": {
                    "type": "boolean",
                    "description": "Whether to cache access token introspection results.\n"
                },
                "cacheChannelTokenIntrospection": {
                    "type": "boolean",
                    "description": "Whether to cache channel token introspection results.\n"
                },
                "channelTokenConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to do channel token to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of valid values: `id`, `username`, and `custom_id`.\n"
                },
                "channelTokenConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter. Kong consumers have an `id`, a `username`, and a `custom_id`. If this parameter is enabled but the mapping fails, such as when there's a non-existent Kong consumer, the plugin responds with `403 Forbidden`.\n"
                },
                "channelTokenIntrospectionAuthorization": {
                    "type": "string",
                    "description": "When using `opaque` channel tokens, and you want to turn on channel token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise the plugin will not try introspection, and instead returns `401 Unauthorized` when using opaque channel tokens.\n"
                },
                "channelTokenIntrospectionBodyArgs": {
                    "type": "string",
                    "description": "If you need to pass additional body arguments to introspection endpoint when the plugin introspects the opaque channel token, you can use this config parameter to specify them. You should URL encode the value. For example: `resource=` or `a=1\u0026b=\u0026c`.\n"
                },
                "channelTokenIntrospectionConsumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When the plugin tries to do channel token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values. Valid values are `id`, `username` and `custom_id`.\n"
                },
                "channelTokenIntrospectionConsumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in channel token introspection results to Kong consumer entity\n"
                },
                "channelTokenIntrospectionEndpoint": {
                    "type": "string",
                    "description": "When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise, the plugin does not try introspection and returns `401 Unauthorized` instead.\n"
                },
                "channelTokenIntrospectionHint": {
                    "type": "string",
                    "description": "If you need to give `hint` parameter when introspecting a channel token, you can use this parameter to specify the value of such parameter. By default, a `hint` isn't sent with channel token introspection.\n"
                },
                "channelTokenIntrospectionJwtClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "If your introspection endpoint returns a channel token in one of the keys (or claims) in the introspection results (`JSON`), the plugin can use that value instead of the introspection results when doing expiry verification and signing of the new token issued by Kong.\n"
                },
                "channelTokenIntrospectionLeeway": {
                    "type": "number",
                    "description": "You can use this parameter to adjust clock skew between the token issuer introspection results and Kong. The value will be added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time (in seconds). You can disable channel token introspection `expiry` verification altogether with `config.verify_channel_token_introspection_expiry`.\n"
                },
                "channelTokenIntrospectionScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Use this parameter to specify the claim/property in channel token introspection results (`JSON`) to be verified against values of `config.channel_token_introspection_scopes_required`. This supports nested claims.\n"
                },
                "channelTokenIntrospectionScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Use this parameter to specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.channel_token_introspection_scopes_claim`.\n"
                },
                "channelTokenIntrospectionTimeout": {
                    "type": "number",
                    "description": "Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on channel token introspection.\n"
                },
                "channelTokenIssuer": {
                    "type": "string",
                    "description": "The `iss` claim of the re-signed channel token is set to this value, which is `kong` by default. The original `iss` claim of the incoming token (possibly introspected) is stored in the `original_iss` claim of the newly signed channel token.\n"
                },
                "channelTokenJwksUri": {
                    "type": "string",
                    "description": "If you want to use `config.verify_channel_token_signature`, you must specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the channel token. If you don't specify a URI and you pass a JWT token to the plugin, then the plugin responds with `401 Unauthorized`.\n"
                },
                "channelTokenJwksUriClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.\n"
                },
                "channelTokenJwksUriClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_username`\n"
                },
                "channelTokenJwksUriClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_password`\n"
                },
                "channelTokenJwksUriRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `channel_token_jwks_uri`. The default value 0 means no auto-rotation.\n"
                },
                "channelTokenKeyset": {
                    "type": "string",
                    "description": "The name of the keyset containing signing keys.\n"
                },
                "channelTokenKeysetClientCertificate": {
                    "type": "string",
                    "description": "The client certificate that will be used to authenticate Kong if `channel_token_keyset` is an https uri that requires mTLS Auth.\n"
                },
                "channelTokenKeysetClientPassword": {
                    "type": "string",
                    "description": "The client password that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_username`\n"
                },
                "channelTokenKeysetClientUsername": {
                    "type": "string",
                    "description": "The client username that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_password`\n"
                },
                "channelTokenKeysetRotatePeriod": {
                    "type": "number",
                    "description": "Specify the period (in seconds) to auto-rotate the jwks for `channel_token_keyset`. The default value 0 means no auto-rotation.\n"
                },
                "channelTokenLeeway": {
                    "type": "number",
                    "description": "Adjusts clock skew between the token issuer and Kong. The value will be added to token's `exp` claim before checking token expiry against Kong servers current time in seconds. You can disable channel token `expiry` verification altogether with `config.verify_channel_token_expiry`.\n"
                },
                "channelTokenOptional": {
                    "type": "boolean",
                    "description": "If a channel token is not provided or no `config.channel_token_request_header` is specified, the plugin cannot verify the channel token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Enable this parameter to allow the request to proceed even when there is no channel token to check. If the channel token is provided, then this parameter has no effect\n"
                },
                "channelTokenRequestHeader": {
                    "type": "string",
                    "description": "This parameter tells the name of the header where to look for the channel token. If you don't want to do anything with the channel token, then you can set this to `null` or `\"\"` (empty string).\n"
                },
                "channelTokenScopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the claim in a channel token to verify against values of `config.channel_token_scopes_required`. This supports nested claims.\n"
                },
                "channelTokenScopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specify the required values (or scopes) that are checked by a claim specified by `config.channel_token_scopes_claim`.\n"
                },
                "channelTokenSigningAlgorithm": {
                    "type": "string",
                    "description": "When this plugin sets the upstream header as specified with `config.channel_token_upstream_header`, it also re-signs the original channel token using private keys of this plugin. Specify the algorithm that is used to sign the token. must be one of [\"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"EdDSA\"]\n"
                },
                "channelTokenUpstreamHeader": {
                    "type": "string",
                    "description": "This plugin removes the `config.channel_token_request_header` from the request after reading its value.\n"
                },
                "channelTokenUpstreamLeeway": {
                    "type": "number",
                    "description": "If you want to add or perhaps subtract (using negative value) expiry time of the original channel token, you can specify a value that is added to the original channel token's `exp` claim.\n"
                },
                "enableAccessTokenIntrospection": {
                    "type": "boolean",
                    "description": "If you don't want to support opaque access tokens, change this configuration parameter to `false` to disable introspection.\n"
                },
                "enableChannelTokenIntrospection": {
                    "type": "boolean",
                    "description": "If you don't want to support opaque channel tokens, disable introspection by changing this configuration parameter to `false`.\n"
                },
                "enableHsSignatures": {
                    "type": "boolean",
                    "description": "Tokens signed with HMAC algorithms such as `HS256`, `HS384`, or `HS512` are not accepted by default. If you need to accept such tokens for verification, enable this setting.\n"
                },
                "enableInstrumentation": {
                    "type": "boolean",
                    "description": "Writes log entries with some added information using `ngx.CRIT` (CRITICAL) level.\n"
                },
                "originalAccessTokenUpstreamHeader": {
                    "type": "string",
                    "description": "The HTTP header name used to store the original access token.\n"
                },
                "originalChannelTokenUpstreamHeader": {
                    "type": "string",
                    "description": "The HTTP header name used to store the original channel token.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "When authentication or authorization fails, or there is an unexpected error, the plugin sends an `WWW-Authenticate` header with the `realm` attribute value.\n"
                },
                "removeAccessTokenClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "remove claims. It should be an array, and each element is a claim key string.\n"
                },
                "removeChannelTokenClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "remove claims. It should be an array, and each element is a claim key string.\n"
                },
                "setAccessTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "setChannelTokenClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "setClaims": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Set customized claims to both tokens. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.\n"
                },
                "trustAccessTokenIntrospection": {
                    "type": "boolean",
                    "description": "Use this parameter to enable and disable further checks on a payload before the new token is signed. If you set this to `true`, the expiry or scopes are not checked on a payload.\n"
                },
                "trustChannelTokenIntrospection": {
                    "type": "boolean",
                    "description": "Providing an opaque channel token for plugin introspection, and verifying expiry and scopes on introspection results may make further payload checks unnecessary before the plugin signs a new token. This also applies when using a JWT token with introspection JSON as per config.channel_token_introspection_jwt_claim. Use this parameter to manage additional payload checks before signing a new token. With true (default), payload's expiry or scopes aren't checked.\n"
                },
                "verifyAccessTokenExpiry": {
                    "type": "boolean",
                    "description": "Quickly turn access token expiry verification off and on as needed.\n"
                },
                "verifyAccessTokenIntrospectionExpiry": {
                    "type": "boolean",
                    "description": "Quickly turn access token introspection expiry verification off and on as needed.\n"
                },
                "verifyAccessTokenIntrospectionScopes": {
                    "type": "boolean",
                    "description": "Quickly turn off and on the access token introspection scopes verification, specified with `config.access_token_introspection_scopes_required`.\n"
                },
                "verifyAccessTokenScopes": {
                    "type": "boolean",
                    "description": "Quickly turn off and on the access token required scopes verification, specified with `config.access_token_scopes_required`.\n"
                },
                "verifyAccessTokenSignature": {
                    "type": "boolean",
                    "description": "Quickly turn access token signature verification off and on as needed.\n"
                },
                "verifyChannelTokenExpiry": {
                    "type": "boolean"
                },
                "verifyChannelTokenIntrospectionExpiry": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token introspection expiry verification.\n"
                },
                "verifyChannelTokenIntrospectionScopes": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token introspection scopes verification specified with `config.channel_token_introspection_scopes_required`.\n"
                },
                "verifyChannelTokenScopes": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token required scopes verification specified with `config.channel_token_scopes_required`.\n"
                },
                "verifyChannelTokenSignature": {
                    "type": "boolean",
                    "description": "Quickly turn on/off the channel token signature verification.\n"
                }
            },
            "type": "object",
            "required": [
                "accessTokenConsumerBies",
                "accessTokenConsumerClaims",
                "accessTokenIntrospectionAuthorization",
                "accessTokenIntrospectionBodyArgs",
                "accessTokenIntrospectionConsumerBies",
                "accessTokenIntrospectionConsumerClaims",
                "accessTokenIntrospectionEndpoint",
                "accessTokenIntrospectionHint",
                "accessTokenIntrospectionJwtClaims",
                "accessTokenIntrospectionLeeway",
                "accessTokenIntrospectionScopesClaims",
                "accessTokenIntrospectionScopesRequireds",
                "accessTokenIntrospectionTimeout",
                "accessTokenIssuer",
                "accessTokenJwksUri",
                "accessTokenJwksUriClientCertificate",
                "accessTokenJwksUriClientPassword",
                "accessTokenJwksUriClientUsername",
                "accessTokenJwksUriRotatePeriod",
                "accessTokenKeyset",
                "accessTokenKeysetClientCertificate",
                "accessTokenKeysetClientPassword",
                "accessTokenKeysetClientUsername",
                "accessTokenKeysetRotatePeriod",
                "accessTokenLeeway",
                "accessTokenOptional",
                "accessTokenRequestHeader",
                "accessTokenScopesClaims",
                "accessTokenScopesRequireds",
                "accessTokenSigningAlgorithm",
                "accessTokenUpstreamHeader",
                "accessTokenUpstreamLeeway",
                "addAccessTokenClaims",
                "addChannelTokenClaims",
                "addClaims",
                "cacheAccessTokenIntrospection",
                "cacheChannelTokenIntrospection",
                "channelTokenConsumerBies",
                "channelTokenConsumerClaims",
                "channelTokenIntrospectionAuthorization",
                "channelTokenIntrospectionBodyArgs",
                "channelTokenIntrospectionConsumerBies",
                "channelTokenIntrospectionConsumerClaims",
                "channelTokenIntrospectionEndpoint",
                "channelTokenIntrospectionHint",
                "channelTokenIntrospectionJwtClaims",
                "channelTokenIntrospectionLeeway",
                "channelTokenIntrospectionScopesClaims",
                "channelTokenIntrospectionScopesRequireds",
                "channelTokenIntrospectionTimeout",
                "channelTokenIssuer",
                "channelTokenJwksUri",
                "channelTokenJwksUriClientCertificate",
                "channelTokenJwksUriClientPassword",
                "channelTokenJwksUriClientUsername",
                "channelTokenJwksUriRotatePeriod",
                "channelTokenKeyset",
                "channelTokenKeysetClientCertificate",
                "channelTokenKeysetClientPassword",
                "channelTokenKeysetClientUsername",
                "channelTokenKeysetRotatePeriod",
                "channelTokenLeeway",
                "channelTokenOptional",
                "channelTokenRequestHeader",
                "channelTokenScopesClaims",
                "channelTokenScopesRequireds",
                "channelTokenSigningAlgorithm",
                "channelTokenUpstreamHeader",
                "channelTokenUpstreamLeeway",
                "enableAccessTokenIntrospection",
                "enableChannelTokenIntrospection",
                "enableHsSignatures",
                "enableInstrumentation",
                "originalAccessTokenUpstreamHeader",
                "originalChannelTokenUpstreamHeader",
                "realm",
                "removeAccessTokenClaims",
                "removeChannelTokenClaims",
                "setAccessTokenClaims",
                "setChannelTokenClaims",
                "setClaims",
                "trustAccessTokenIntrospection",
                "trustChannelTokenIntrospection",
                "verifyAccessTokenExpiry",
                "verifyAccessTokenIntrospectionExpiry",
                "verifyAccessTokenIntrospectionScopes",
                "verifyAccessTokenScopes",
                "verifyAccessTokenSignature",
                "verifyChannelTokenExpiry",
                "verifyChannelTokenIntrospectionExpiry",
                "verifyChannelTokenIntrospectionScopes",
                "verifyChannelTokenScopes",
                "verifyChannelTokenSignature"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtSignerConsumer:getGatewayPluginJwtSignerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtSignerConsumerGroup:getGatewayPluginJwtSignerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtSignerRoute:getGatewayPluginJwtSignerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginJwtSignerService:getGatewayPluginJwtSignerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginKeyAuthConfig:getGatewayPluginKeyAuthConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request.\n"
                },
                "keyInBody": {
                    "type": "boolean",
                    "description": "If enabled, the plugin reads the request body. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.\n"
                },
                "keyInHeader": {
                    "type": "boolean",
                    "description": "If enabled (default), the plugin reads the request header and tries to find the key in it.\n"
                },
                "keyInQuery": {
                    "type": "boolean",
                    "description": "If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.\n"
                },
                "keyNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describes an array of parameter names where the plugin will look for a key. The key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.\n"
                },
                "realm": {
                    "type": "string",
                    "description": "When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.\n"
                },
                "runOnPreflight": {
                    "type": "boolean",
                    "description": "A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.\n"
                }
            },
            "type": "object",
            "required": [
                "anonymous",
                "hideCredentials",
                "keyInBody",
                "keyInHeader",
                "keyInQuery",
                "keyNames",
                "realm",
                "runOnPreflight"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginKeyAuthConsumer:getGatewayPluginKeyAuthConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginKeyAuthConsumerGroup:getGatewayPluginKeyAuthConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginKeyAuthRoute:getGatewayPluginKeyAuthRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginKeyAuthService:getGatewayPluginKeyAuthService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOauth2Config:getGatewayPluginOauth2Config": {
            "properties": {
                "acceptHttpIfAlreadyTerminated": {
                    "type": "boolean",
                    "description": "Accepts HTTPs requests that have already been terminated by a proxy or load balancer.\n"
                },
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.\n"
                },
                "authHeaderName": {
                    "type": "string",
                    "description": "The name of the header that is supposed to carry the access token.\n"
                },
                "enableAuthorizationCode": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).\n"
                },
                "enableClientCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).\n"
                },
                "enableImplicitGrant": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).\n"
                },
                "enablePasswordGrant": {
                    "type": "boolean",
                    "description": "An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).\n"
                },
                "globalCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value that allows using the same OAuth credentials generated by the plugin with any other service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service.\n"
                },
                "mandatoryScope": {
                    "type": "boolean",
                    "description": "An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.\n"
                },
                "persistentRefreshToken": {
                    "type": "boolean"
                },
                "pkce": {
                    "type": "string",
                    "description": "Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin. must be one of [\"none\", \"lax\", \"strict\"]\n"
                },
                "provisionKey": {
                    "type": "string",
                    "description": "The unique key the plugin has generated when it has been added to the Service.\n"
                },
                "refreshTokenTtl": {
                    "type": "number",
                    "description": "Time-to-live value for data\n"
                },
                "reuseRefreshToken": {
                    "type": "boolean",
                    "description": "An optional boolean value that indicates whether an OAuth refresh token is reused when refreshing an access token.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Describes an array of scope names that will be available to the end user. If `mandatory_scope` is set to `true`, then `scopes` are required.\n"
                },
                "tokenExpiration": {
                    "type": "number",
                    "description": "An optional integer value telling the plugin how many seconds a token should last, after which the client will need to refresh the token. Set to `0` to disable the expiration.\n"
                }
            },
            "type": "object",
            "required": [
                "acceptHttpIfAlreadyTerminated",
                "anonymous",
                "authHeaderName",
                "enableAuthorizationCode",
                "enableClientCredentials",
                "enableImplicitGrant",
                "enablePasswordGrant",
                "globalCredentials",
                "hideCredentials",
                "mandatoryScope",
                "persistentRefreshToken",
                "pkce",
                "provisionKey",
                "refreshTokenTtl",
                "reuseRefreshToken",
                "scopes",
                "tokenExpiration"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOauth2Consumer:getGatewayPluginOauth2Consumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOauth2ConsumerGroup:getGatewayPluginOauth2ConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOauth2Route:getGatewayPluginOauth2Route": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOauth2Service:getGatewayPluginOauth2Service": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpenidConnectConfig:getGatewayPluginOpenidConnectConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value that functions as an “anonymous” consumer if authentication fails. If empty (default null), requests that fail authentication will return a `4xx` HTTP status code. This value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.\n"
                },
                "audienceClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the audience. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "audienceRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The audiences (`audience_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "audiences": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The audience passed to the authorization endpoint.\n"
                },
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Types of credentials/grants to enable.\n"
                },
                "authenticatedGroupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains authenticated groups. This setting can be used together with ACL plugin, but it also enables IdP managed groups with other applications and integrations. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "authorizationCookieDomain": {
                    "type": "string",
                    "description": "The authorization cookie Domain flag.\n"
                },
                "authorizationCookieHttpOnly": {
                    "type": "boolean",
                    "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.\n"
                },
                "authorizationCookieName": {
                    "type": "string",
                    "description": "The authorization cookie name.\n"
                },
                "authorizationCookiePath": {
                    "type": "string",
                    "description": "The authorization cookie Path flag.\n"
                },
                "authorizationCookieSameSite": {
                    "type": "string",
                    "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of [\"Strict\", \"Lax\", \"None\", \"Default\"]\n"
                },
                "authorizationCookieSecure": {
                    "type": "boolean",
                    "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.\n"
                },
                "authorizationEndpoint": {
                    "type": "string",
                    "description": "The authorization endpoint. If set it overrides the value in `authorization_endpoint` returned by the discovery endpoint.\n"
                },
                "authorizationQueryArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query arguments passed from the client to the authorization endpoint.\n"
                },
                "authorizationQueryArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument names passed to the authorization endpoint.\n"
                },
                "authorizationQueryArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument values passed to the authorization endpoint.\n"
                },
                "authorizationRollingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the session used for the authorization code flow can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.\n"
                },
                "bearerTokenCookieName": {
                    "type": "string",
                    "description": "The name of the cookie in which the bearer token is passed.\n"
                },
                "bearerTokenParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the bearer token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body - `cookie`: search the HTTP request cookies specified with `config.bearer_token_cookie_name`.\n"
                },
                "byUsernameIgnoreCase": {
                    "type": "boolean",
                    "description": "If `consumer_by` is set to `username`, specify whether `username` can match consumers case-insensitively.\n"
                },
                "cacheIntrospection": {
                    "type": "boolean",
                    "description": "Cache the introspection endpoint requests.\n"
                },
                "cacheTokenExchange": {
                    "type": "boolean",
                    "description": "Cache the token exchange endpoint requests.\n"
                },
                "cacheTokens": {
                    "type": "boolean",
                    "description": "Cache the token endpoint requests.\n"
                },
                "cacheTokensSalt": {
                    "type": "string",
                    "description": "Salt used for generating the cache key that is used for caching the token endpoint requests.\n"
                },
                "cacheTtl": {
                    "type": "number",
                    "description": "The default cache ttl in seconds that is used in case the cached object does not specify the expiry.\n"
                },
                "cacheTtlMax": {
                    "type": "number",
                    "description": "The maximum cache ttl in seconds (enforced).\n"
                },
                "cacheTtlMin": {
                    "type": "number",
                    "description": "The minimum cache ttl in seconds (enforced).\n"
                },
                "cacheTtlNeg": {
                    "type": "number",
                    "description": "The negative cache ttl in seconds.\n"
                },
                "cacheTtlResurrect": {
                    "type": "number",
                    "description": "The resurrection ttl in seconds.\n"
                },
                "cacheUserInfo": {
                    "type": "boolean",
                    "description": "Cache the user info requests.\n"
                },
                "clientAlgs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The algorithm to use for client_secret_jwt (only HS***) or private_key_jwt authentication.\n"
                },
                "clientArg": {
                    "type": "string",
                    "description": "The client to use for this request (the selection is made with a request parameter with the same name).\n"
                },
                "clientAuths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The default OpenID Connect client authentication method is 'client_secret_basic' (using 'Authorization: Basic' header), 'client_secret_post' (credentials in body), 'client_secret_jwt' (signed client assertion in body), 'private_key_jwt' (private key-signed assertion), 'tls_client_auth' (client certificate), 'self_signed_tls_client_auth' (self-signed client certificate), and 'none' (no authentication).\n"
                },
                "clientCredentialsParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the client credentials: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search from the HTTP request body.\n"
                },
                "clientIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The client id(s) that the plugin uses when it calls authenticated endpoints on the identity provider.\n"
                },
                "clientJwks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpenidConnectConfigClientJwk:getGatewayPluginOpenidConnectConfigClientJwk"
                    },
                    "description": "The JWK used for the private_key_jwt authentication.\n"
                },
                "clientSecrets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The client secret.\n"
                },
                "consumerBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Consumer fields used for mapping: - `id`: try to find the matching Consumer by `id` - `username`: try to find the matching Consumer by `username` - `custom_id`: try to find the matching Consumer by `custom_id`.\n"
                },
                "consumerClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim used for consumer mapping. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "consumerOptional": {
                    "type": "boolean",
                    "description": "Do not terminate the request if consumer mapping fails.\n"
                },
                "credentialClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim used to derive virtual credentials (e.g. to be consumed by the rate-limiting plugin), in case the consumer mapping is not used. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "disableSessions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Disable issuing the session cookie with the specified grants.\n"
                },
                "discoveryHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the discovery endpoint.\n"
                },
                "discoveryHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the discovery endpoint.\n"
                },
                "displayErrors": {
                    "type": "boolean",
                    "description": "Display errors on failure responses.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The allowed values for the `hd` claim.\n"
                },
                "downstreamAccessTokenHeader": {
                    "type": "string",
                    "description": "The downstream access token header.\n"
                },
                "downstreamAccessTokenJwkHeader": {
                    "type": "string",
                    "description": "The downstream access token JWK header.\n"
                },
                "downstreamHeadersClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The downstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "downstreamHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The downstream header names for the claim values.\n"
                },
                "downstreamIdTokenHeader": {
                    "type": "string",
                    "description": "The downstream id token header.\n"
                },
                "downstreamIdTokenJwkHeader": {
                    "type": "string",
                    "description": "The downstream id token JWK header.\n"
                },
                "downstreamIntrospectionHeader": {
                    "type": "string",
                    "description": "The downstream introspection header.\n"
                },
                "downstreamIntrospectionJwtHeader": {
                    "type": "string",
                    "description": "The downstream introspection JWT header.\n"
                },
                "downstreamRefreshTokenHeader": {
                    "type": "string",
                    "description": "The downstream refresh token header.\n"
                },
                "downstreamSessionIdHeader": {
                    "type": "string",
                    "description": "The downstream session id header.\n"
                },
                "downstreamUserInfoHeader": {
                    "type": "string",
                    "description": "The downstream user info header.\n"
                },
                "downstreamUserInfoJwtHeader": {
                    "type": "string",
                    "description": "The downstream user info JWT header (in case the user info returns a JWT response).\n"
                },
                "dpopProofLifetime": {
                    "type": "number",
                    "description": "Specifies the lifetime in seconds of the DPoP proof. It determines how long the same proof can be used after creation. The creation time is determined by the nonce creation time if a nonce is used, and the iat claim otherwise.\n"
                },
                "dpopUseNonce": {
                    "type": "boolean",
                    "description": "Specifies whether to challenge the client with a nonce value for DPoP proof. When enabled it will also be used to calculate the DPoP proof lifetime.\n"
                },
                "enableHsSignatures": {
                    "type": "boolean",
                    "description": "Enable shared secret, for example, HS256, signatures (when disabled they will not be accepted).\n"
                },
                "endSessionEndpoint": {
                    "type": "string",
                    "description": "The end session endpoint. If set it overrides the value in `end_session_endpoint` returned by the discovery endpoint.\n"
                },
                "exposeErrorCode": {
                    "type": "boolean",
                    "description": "Specifies whether to expose the error code header, as defined in RFC 6750. If an authorization request fails, this header is sent in the response. Set to `false` to disable.\n"
                },
                "extraJwksUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "JWKS URIs whose public keys are trusted (in addition to the keys found with the discovery).\n"
                },
                "forbiddenDestroySession": {
                    "type": "boolean",
                    "description": "Destroy any active session for the forbidden requests.\n"
                },
                "forbiddenErrorMessage": {
                    "type": "string",
                    "description": "The error message for the forbidden requests (when not using the redirection).\n"
                },
                "forbiddenRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client on forbidden requests.\n"
                },
                "groupsClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the groups. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "groupsRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The groups (`groups_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "hideCredentials": {
                    "type": "boolean",
                    "description": "Remove the credentials used for authentication from the request. If multiple credentials are sent with the same request, the plugin will remove those that were used for successful authentication.\n"
                },
                "httpProxy": {
                    "type": "string",
                    "description": "The HTTP proxy.\n"
                },
                "httpProxyAuthorization": {
                    "type": "string",
                    "description": "The HTTP proxy authorization.\n"
                },
                "httpVersion": {
                    "type": "number",
                    "description": "The HTTP version used for the requests by this plugin: - `1.1`: HTTP 1.1 (the default) - `1.0`: HTTP 1.0.\n"
                },
                "httpsProxy": {
                    "type": "string",
                    "description": "The HTTPS proxy.\n"
                },
                "httpsProxyAuthorization": {
                    "type": "string",
                    "description": "The HTTPS proxy authorization.\n"
                },
                "idTokenParamName": {
                    "type": "string",
                    "description": "The name of the parameter used to pass the id token.\n"
                },
                "idTokenParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the id token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.\n"
                },
                "ignoreSignatures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Skip the token signature verification on certain grants: - `password`: OAuth password grant - `client_credentials`: OAuth client credentials grant - `authorization_code`: authorization code flow - `refresh_token`: OAuth refresh token grant - `session`: session cookie authentication - `introspection`: OAuth introspection - `userinfo`: OpenID Connect user info endpoint authentication.\n"
                },
                "introspectJwtTokens": {
                    "type": "boolean",
                    "description": "Specifies whether to introspect the JWT access tokens (can be used to check for revocations).\n"
                },
                "introspectionAccept": {
                    "type": "string",
                    "description": "The value of `Accept` header for introspection requests: - `application/json`: introspection response as JSON - `application/token-introspection+jwt`: introspection response as JWT (from the current IETF draft document) - `application/jwt`: introspection response as JWT (from the obsolete IETF draft document). must be one of [\"application/json\", \"application/token-introspection+jwt\", \"application/jwt\"]\n"
                },
                "introspectionCheckActive": {
                    "type": "boolean",
                    "description": "Check that the introspection response has an `active` claim with a value of `true`.\n"
                },
                "introspectionEndpoint": {
                    "type": "string",
                    "description": "The introspection endpoint. If set it overrides the value in `introspection_endpoint` returned by the discovery endpoint.\n"
                },
                "introspectionEndpointAuthMethod": {
                    "type": "string",
                    "description": "The introspection endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\", \"none\"]\n"
                },
                "introspectionHeadersClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra headers passed from the client to the introspection endpoint.\n"
                },
                "introspectionHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the introspection endpoint.\n"
                },
                "introspectionHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the introspection endpoint.\n"
                },
                "introspectionHint": {
                    "type": "string",
                    "description": "Introspection hint parameter value passed to the introspection endpoint.\n"
                },
                "introspectionPostArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post arguments passed from the client to the introspection endpoint.\n"
                },
                "introspectionPostArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument names passed to the introspection endpoint.\n"
                },
                "introspectionPostArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument values passed to the introspection endpoint.\n"
                },
                "introspectionTokenParamName": {
                    "type": "string",
                    "description": "Designate token's parameter name for introspection.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The discovery endpoint (or the issuer identifier). When there is no discovery endpoint, please also configure `config.using_pseudo_issuer=true`.\n"
                },
                "issuersAlloweds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The issuers allowed to be present in the tokens (`iss` claim).\n"
                },
                "jwtSessionClaim": {
                    "type": "string",
                    "description": "The claim to match against the JWT session cookie.\n"
                },
                "jwtSessionCookie": {
                    "type": "string",
                    "description": "The name of the JWT session cookie.\n"
                },
                "keepalive": {
                    "type": "boolean",
                    "description": "Use keepalive with the HTTP client.\n"
                },
                "leeway": {
                    "type": "number",
                    "description": "Defines leeway time (in seconds) for `auth_time`, `exp`, `iat`, and `nbf` claims\n"
                },
                "loginAction": {
                    "type": "string",
                    "description": "What to do after successful login: - `upstream`: proxy request to upstream service - `response`: terminate request with a response - `redirect`: redirect to a different location. must be one of [\"upstream\", \"response\", \"redirect\"]\n"
                },
                "loginMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enable login functionality with specified grants.\n"
                },
                "loginRedirectMode": {
                    "type": "string",
                    "description": "Where to place `login_tokens` when using `redirect` `login_action`: - `query`: place tokens in query string - `fragment`: place tokens in url fragment (not readable by servers). must be one of [\"query\", \"fragment\"]\n"
                },
                "loginRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client when `login_action` is set to `redirect`.\n"
                },
                "loginTokens": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "What tokens to include in `response` body or `redirect` query string or fragment: - `id_token`: include id token - `access_token`: include access token - `refresh_token`: include refresh token - `tokens`: include the full token endpoint response - `introspection`: include introspection response.\n"
                },
                "logoutMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The request methods that can activate the logout: - `POST`: HTTP POST method - `GET`: HTTP GET method - `DELETE`: HTTP DELETE method.\n"
                },
                "logoutPostArg": {
                    "type": "string",
                    "description": "The request body argument that activates the logout.\n"
                },
                "logoutQueryArg": {
                    "type": "string",
                    "description": "The request query argument that activates the logout.\n"
                },
                "logoutRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client after the logout.\n"
                },
                "logoutRevoke": {
                    "type": "boolean",
                    "description": "Revoke tokens as part of the logout.\n\nFor more granular token revocation, you can also adjust the `logout_revoke_access_token` and `logout_revoke_refresh_token` parameters.\n"
                },
                "logoutRevokeAccessToken": {
                    "type": "boolean",
                    "description": "Revoke the access token as part of the logout. Requires `logout_revoke` to be set to `true`.\n"
                },
                "logoutRevokeRefreshToken": {
                    "type": "boolean",
                    "description": "Revoke the refresh token as part of the logout. Requires `logout_revoke` to be set to `true`.\n"
                },
                "logoutUriSuffix": {
                    "type": "string",
                    "description": "The request URI suffix that activates the logout.\n"
                },
                "maxAge": {
                    "type": "number",
                    "description": "The maximum age (in seconds) compared to the `auth_time` claim.\n"
                },
                "mtlsIntrospectionEndpoint": {
                    "type": "string",
                    "description": "Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.\n"
                },
                "mtlsRevocationEndpoint": {
                    "type": "string",
                    "description": "Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.\n"
                },
                "mtlsTokenEndpoint": {
                    "type": "string",
                    "description": "Alias for the token endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.\n"
                },
                "noProxy": {
                    "type": "string",
                    "description": "Do not use proxy with these hosts.\n"
                },
                "passwordParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the username and password: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.\n"
                },
                "preserveQueryArgs": {
                    "type": "boolean",
                    "description": "With this parameter, you can preserve request query arguments even when doing authorization code flow.\n"
                },
                "proofOfPossessionAuthMethodsValidation": {
                    "type": "boolean",
                    "description": "If set to true, only the auth_methods that are compatible with Proof of Possession (PoP) can be configured when PoP is enabled. If set to false, all auth_methods will be configurable and PoP checks will be silently skipped for those auth_methods that are not compatible with PoP.\n"
                },
                "proofOfPossessionDpop": {
                    "type": "string",
                    "description": "Enable Demonstrating Proof-of-Possession (DPoP). If set to strict, all request are verified despite the presence of the DPoP key claim (cnf.jkt). If set to optional, only tokens bound with DPoP's key are verified with the proof. must be one of [\"off\", \"strict\", \"optional\"]\n"
                },
                "proofOfPossessionMtls": {
                    "type": "string",
                    "description": "Enable mtls proof of possession. If set to strict, all tokens (from supported auth_methods: bearer, introspection, and session granted with bearer or introspection) are verified, if set to optional, only tokens that contain the certificate hash claim are verified. If the verification fails, the request will be rejected with 401. must be one of [\"off\", \"strict\", \"optional\"]\n"
                },
                "pushedAuthorizationRequestEndpoint": {
                    "type": "string",
                    "description": "The pushed authorization endpoint. If set it overrides the value in `pushed_authorization_request_endpoint` returned by the discovery endpoint.\n"
                },
                "pushedAuthorizationRequestEndpointAuthMethod": {
                    "type": "string",
                    "description": "The pushed authorization request endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\", \"none\"]\n"
                },
                "redirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The redirect URI passed to the authorization and token endpoints.\n"
                },
                "rediscoveryLifetime": {
                    "type": "number",
                    "description": "Specifies how long (in seconds) the plugin waits between discovery attempts. Discovery is still triggered on an as-needed basis.\n"
                },
                "refreshTokenParamName": {
                    "type": "string",
                    "description": "The name of the parameter used to pass the refresh token.\n"
                },
                "refreshTokenParamTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to look for the refresh token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.\n"
                },
                "refreshTokens": {
                    "type": "boolean",
                    "description": "Specifies whether the plugin should try to refresh (soon to be) expired access tokens if the plugin has a `refresh_token` available.\n"
                },
                "requireProofKeyForCodeExchange": {
                    "type": "boolean",
                    "description": "Forcibly enable or disable the proof key for code exchange. When not set the value is determined through the discovery using the value of `code_challenge_methods_supported`, and enabled automatically (in case the `code_challenge_methods_supported` is missing, the PKCE will not be enabled).\n"
                },
                "requirePushedAuthorizationRequests": {
                    "type": "boolean",
                    "description": "Forcibly enable or disable the pushed authorization requests. When not set the value is determined through the discovery using the value of `require_pushed_authorization_requests` (which defaults to `false`).\n"
                },
                "requireSignedRequestObject": {
                    "type": "boolean",
                    "description": "Forcibly enable or disable the usage of signed request object on authorization or pushed authorization endpoint. When not set the value is determined through the discovery using the value of `require_signed_request_object`, and enabled automatically (in case the `require_signed_request_object` is missing, the feature will not be enabled).\n"
                },
                "resolveDistributedClaims": {
                    "type": "boolean",
                    "description": "Distributed claims are represented by the `_claim_names` and `_claim_sources` members of the JSON object containing the claims. If this parameter is set to `true`, the plugin explicitly resolves these distributed claims.\n"
                },
                "responseMode": {
                    "type": "string",
                    "description": "Response mode passed to the authorization endpoint: - `query`: for parameters in query string - `form_post`: for parameters in request body - `fragment`: for parameters in uri fragment (rarely useful as the plugin itself cannot read it) - `query.jwt`, `form_post.jwt`, `fragment.jwt`: similar to `query`, `form_post` and `fragment` but the parameters are encoded in a JWT - `jwt`: shortcut that indicates the default encoding for the requested response type. must be one of [\"query\", \"form_post\", \"fragment\", \"query.jwt\", \"form_post.jwt\", \"fragment.jwt\", \"jwt\"]\n"
                },
                "responseTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The response type passed to the authorization endpoint.\n"
                },
                "reverify": {
                    "type": "boolean",
                    "description": "Specifies whether to always verify tokens stored in the session.\n"
                },
                "revocationEndpoint": {
                    "type": "string",
                    "description": "The revocation endpoint. If set it overrides the value in `revocation_endpoint` returned by the discovery endpoint.\n"
                },
                "revocationEndpointAuthMethod": {
                    "type": "string",
                    "description": "The revocation endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\", \"none\"]\n"
                },
                "revocationTokenParamName": {
                    "type": "string",
                    "description": "Designate token's parameter name for revocation.\n"
                },
                "rolesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the roles. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "rolesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The roles (`roles_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "runOnPreflight": {
                    "type": "boolean",
                    "description": "Specifies whether to run this plugin on pre-flight (`OPTIONS`) requests.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scopes passed to the authorization and token endpoints.\n"
                },
                "scopesClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The claim that contains the scopes. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "scopesRequireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The scopes (`scopes_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n"
                },
                "searchUserInfo": {
                    "type": "boolean",
                    "description": "Specify whether to use the user info endpoint to get additional claims for consumer mapping, credential mapping, authenticated groups, and upstream and downstream headers.\n"
                },
                "sessionAbsoluteTimeout": {
                    "type": "number",
                    "description": "Limits how long the session can be renewed in seconds, until re-authentication is required. 0 disables the checks.\n"
                },
                "sessionAudience": {
                    "type": "string",
                    "description": "The session audience, which is the intended target application. For example `\"my-application\"`.\n"
                },
                "sessionCookieDomain": {
                    "type": "string",
                    "description": "The session cookie Domain flag.\n"
                },
                "sessionCookieHttpOnly": {
                    "type": "boolean",
                    "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.\n"
                },
                "sessionCookieName": {
                    "type": "string",
                    "description": "The session cookie name.\n"
                },
                "sessionCookiePath": {
                    "type": "string",
                    "description": "The session cookie Path flag.\n"
                },
                "sessionCookieSameSite": {
                    "type": "string",
                    "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of [\"Strict\", \"Lax\", \"None\", \"Default\"]\n"
                },
                "sessionCookieSecure": {
                    "type": "boolean",
                    "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.\n"
                },
                "sessionEnforceSameSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, audiences are forced to share the same subject.\n"
                },
                "sessionHashStorageKey": {
                    "type": "boolean",
                    "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.\n"
                },
                "sessionHashSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.\n"
                },
                "sessionIdlingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the session can be inactive until it is considered invalid in seconds. 0 disables the checks and touching.\n"
                },
                "sessionMemcachedHost": {
                    "type": "string",
                    "description": "The memcached host.\n"
                },
                "sessionMemcachedPort": {
                    "type": "integer",
                    "description": "The memcached port.\n"
                },
                "sessionMemcachedPrefix": {
                    "type": "string",
                    "description": "The memcached session key prefix.\n"
                },
                "sessionMemcachedSocket": {
                    "type": "string",
                    "description": "The memcached unix socket path.\n"
                },
                "sessionRedisClusterMaxRedirections": {
                    "type": "integer",
                    "description": "The Redis cluster maximum redirects.\n"
                },
                "sessionRedisClusterNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpenidConnectConfigSessionRedisClusterNode:getGatewayPluginOpenidConnectConfigSessionRedisClusterNode"
                    },
                    "description": "The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.\n"
                },
                "sessionRedisConnectTimeout": {
                    "type": "integer",
                    "description": "Session redis connection timeout in milliseconds.\n"
                },
                "sessionRedisHost": {
                    "type": "string",
                    "description": "The Redis host.\n"
                },
                "sessionRedisPassword": {
                    "type": "string",
                    "description": "Password to use for Redis connection when the `redis` session storage is defined. If undefined, no AUTH commands are sent to Redis.\n"
                },
                "sessionRedisPort": {
                    "type": "integer",
                    "description": "The Redis port.\n"
                },
                "sessionRedisPrefix": {
                    "type": "string",
                    "description": "The Redis session key prefix.\n"
                },
                "sessionRedisReadTimeout": {
                    "type": "integer",
                    "description": "Session redis read timeout in milliseconds.\n"
                },
                "sessionRedisSendTimeout": {
                    "type": "integer",
                    "description": "Session redis send timeout in milliseconds.\n"
                },
                "sessionRedisServerName": {
                    "type": "string",
                    "description": "The SNI used for connecting the Redis server.\n"
                },
                "sessionRedisSocket": {
                    "type": "string",
                    "description": "The Redis unix socket path.\n"
                },
                "sessionRedisSsl": {
                    "type": "boolean",
                    "description": "Use SSL/TLS for Redis connection.\n"
                },
                "sessionRedisSslVerify": {
                    "type": "boolean",
                    "description": "Verify identity provider server certificate.\n"
                },
                "sessionRedisUsername": {
                    "type": "string",
                    "description": "Username to use for Redis connection when the `redis` session storage is defined and ACL authentication is desired. If undefined, ACL authentication will not be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\n"
                },
                "sessionRemember": {
                    "type": "boolean",
                    "description": "Enables or disables persistent sessions.\n"
                },
                "sessionRememberAbsoluteTimeout": {
                    "type": "number",
                    "description": "Limits how long the persistent session can be renewed in seconds, until re-authentication is required. 0 disables the checks.\n"
                },
                "sessionRememberCookieName": {
                    "type": "string",
                    "description": "Persistent session cookie name. Use with the `remember` configuration parameter.\n"
                },
                "sessionRememberRollingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the persistent session is considered valid in seconds. 0 disables the checks and rolling.\n"
                },
                "sessionRequestHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of headers to send to upstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ \"id\", \"timeout\" ]` will set Session-Id and Session-Timeout request headers.\n"
                },
                "sessionResponseHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Set of headers to send to downstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ \"id\", \"timeout\" ]` will set Session-Id and Session-Timeout response headers.\n"
                },
                "sessionRollingTimeout": {
                    "type": "number",
                    "description": "Specifies how long the session can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.\n"
                },
                "sessionSecret": {
                    "type": "string",
                    "description": "The session secret.\n"
                },
                "sessionStorage": {
                    "type": "string",
                    "description": "The session storage for session data: - `cookie`: stores session data with the session cookie (the session cannot be invalidated or revoked without changing session secret, but is stateless, and doesn't require a database) - `memcache`: stores session data in memcached - `redis`: stores session data in Redis. must be one of [\"cookie\", \"memcache\", \"memcached\", \"redis\"]\n"
                },
                "sessionStoreMetadata": {
                    "type": "boolean",
                    "description": "Configures whether or not session metadata should be stored. This metadata includes information about the active sessions for a specific audience belonging to a specific subject.\n"
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "Verify identity provider server certificate. If set to `true`, the plugin uses the CA certificate set in the `kong.conf` config parameter `lua_ssl_trusted_certificate`.\n"
                },
                "timeout": {
                    "type": "number",
                    "description": "Network IO timeout in milliseconds.\n"
                },
                "tlsClientAuthCertId": {
                    "type": "string",
                    "description": "ID of the Certificate entity representing the client certificate to use for mTLS client authentication for connections between Kong and the Auth Server.\n"
                },
                "tlsClientAuthSslVerify": {
                    "type": "boolean",
                    "description": "Verify identity provider server certificate during mTLS client authentication.\n"
                },
                "tokenCacheKeyIncludeScope": {
                    "type": "boolean",
                    "description": "Include the scope in the token cache key, so token with different scopes are considered diffrent tokens.\n"
                },
                "tokenEndpoint": {
                    "type": "string",
                    "description": "The token endpoint. If set it overrides the value in `token_endpoint` returned by the discovery endpoint.\n"
                },
                "tokenEndpointAuthMethod": {
                    "type": "string",
                    "description": "The token endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of [\"client_secret_basic\", \"client_secret_post\", \"client_secret_jwt\", \"private_key_jwt\", \"tls_client_auth\", \"self_signed_tls_client_auth\", \"none\"]\n"
                },
                "tokenExchangeEndpoint": {
                    "type": "string",
                    "description": "The token exchange endpoint.\n"
                },
                "tokenHeadersClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra headers passed from the client to the token endpoint.\n"
                },
                "tokenHeadersGrants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Enable the sending of the token endpoint response headers only with certain grants: - `password`: with OAuth password grant - `client_credentials`: with OAuth client credentials grant - `authorization_code`: with authorization code flow - `refresh_token` with refresh token grant.\n"
                },
                "tokenHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the token endpoint.\n"
                },
                "tokenHeadersPrefix": {
                    "type": "string",
                    "description": "Add a prefix to the token endpoint response headers before forwarding them to the downstream client.\n"
                },
                "tokenHeadersReplays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The names of token endpoint response headers to forward to the downstream client.\n"
                },
                "tokenHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the token endpoint.\n"
                },
                "tokenPostArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Pass extra arguments from the client to the OpenID-Connect plugin. If arguments exist, the client can pass them using: - Query parameters - Request Body - Request Header  This parameter can be used with `scope` values, like this:  `config.token_post_args_client=scope`  In this case, the token would take the `scope` value from the query parameter or from the request body or from the header and send it to the token endpoint.\n"
                },
                "tokenPostArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument names passed to the token endpoint.\n"
                },
                "tokenPostArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra post argument values passed to the token endpoint.\n"
                },
                "unauthorizedDestroySession": {
                    "type": "boolean",
                    "description": "Destroy any active session for the unauthorized requests.\n"
                },
                "unauthorizedErrorMessage": {
                    "type": "string",
                    "description": "The error message for the unauthorized requests (when not using the redirection).\n"
                },
                "unauthorizedRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client on unauthorized requests.\n"
                },
                "unexpectedRedirectUris": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Where to redirect the client when unexpected errors happen with the requests.\n"
                },
                "upstreamAccessTokenHeader": {
                    "type": "string",
                    "description": "The upstream access token header.\n"
                },
                "upstreamAccessTokenJwkHeader": {
                    "type": "string",
                    "description": "The upstream access token JWK header.\n"
                },
                "upstreamHeadersClaims": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The upstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.\n"
                },
                "upstreamHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The upstream header names for the claim values.\n"
                },
                "upstreamIdTokenHeader": {
                    "type": "string",
                    "description": "The upstream id token header.\n"
                },
                "upstreamIdTokenJwkHeader": {
                    "type": "string",
                    "description": "The upstream id token JWK header.\n"
                },
                "upstreamIntrospectionHeader": {
                    "type": "string",
                    "description": "The upstream introspection header.\n"
                },
                "upstreamIntrospectionJwtHeader": {
                    "type": "string",
                    "description": "The upstream introspection JWT header.\n"
                },
                "upstreamRefreshTokenHeader": {
                    "type": "string",
                    "description": "The upstream refresh token header.\n"
                },
                "upstreamSessionIdHeader": {
                    "type": "string",
                    "description": "The upstream session id header.\n"
                },
                "upstreamUserInfoHeader": {
                    "type": "string",
                    "description": "The upstream user info header.\n"
                },
                "upstreamUserInfoJwtHeader": {
                    "type": "string",
                    "description": "The upstream user info JWT header (in case the user info returns a JWT response).\n"
                },
                "userinfoAccept": {
                    "type": "string",
                    "description": "The value of `Accept` header for user info requests: - `application/json`: user info response as JSON - `application/jwt`: user info response as JWT (from the obsolete IETF draft document). must be one of [\"application/json\", \"application/jwt\"]\n"
                },
                "userinfoEndpoint": {
                    "type": "string",
                    "description": "The user info endpoint. If set it overrides the value in `userinfo_endpoint` returned by the discovery endpoint.\n"
                },
                "userinfoHeadersClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra headers passed from the client to the user info endpoint.\n"
                },
                "userinfoHeadersNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header names passed to the user info endpoint.\n"
                },
                "userinfoHeadersValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra header values passed to the user info endpoint.\n"
                },
                "userinfoQueryArgsClients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query arguments passed from the client to the user info endpoint.\n"
                },
                "userinfoQueryArgsNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument names passed to the user info endpoint.\n"
                },
                "userinfoQueryArgsValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra query argument values passed to the user info endpoint.\n"
                },
                "usingPseudoIssuer": {
                    "type": "boolean",
                    "description": "If the plugin uses a pseudo issuer. When set to true, the plugin will not discover the configuration from the issuer URL specified with `config.issuer`.\n"
                },
                "verifyClaims": {
                    "type": "boolean",
                    "description": "Verify tokens for standard claims.\n"
                },
                "verifyNonce": {
                    "type": "boolean",
                    "description": "Verify nonce on authorization code flow.\n"
                },
                "verifyParameters": {
                    "type": "boolean",
                    "description": "Verify plugin configuration against discovery.\n"
                },
                "verifySignature": {
                    "type": "boolean",
                    "description": "Verify signature of tokens.\n"
                }
            },
            "type": "object",
            "required": [
                "anonymous",
                "audiences",
                "audienceClaims",
                "audienceRequireds",
                "authMethods",
                "authenticatedGroupsClaims",
                "authorizationCookieDomain",
                "authorizationCookieHttpOnly",
                "authorizationCookieName",
                "authorizationCookiePath",
                "authorizationCookieSameSite",
                "authorizationCookieSecure",
                "authorizationEndpoint",
                "authorizationQueryArgsClients",
                "authorizationQueryArgsNames",
                "authorizationQueryArgsValues",
                "authorizationRollingTimeout",
                "bearerTokenCookieName",
                "bearerTokenParamTypes",
                "byUsernameIgnoreCase",
                "cacheIntrospection",
                "cacheTokenExchange",
                "cacheTokens",
                "cacheTokensSalt",
                "cacheTtl",
                "cacheTtlMax",
                "cacheTtlMin",
                "cacheTtlNeg",
                "cacheTtlResurrect",
                "cacheUserInfo",
                "clientAlgs",
                "clientArg",
                "clientAuths",
                "clientCredentialsParamTypes",
                "clientIds",
                "clientJwks",
                "clientSecrets",
                "consumerBies",
                "consumerClaims",
                "consumerOptional",
                "credentialClaims",
                "disableSessions",
                "discoveryHeadersNames",
                "discoveryHeadersValues",
                "displayErrors",
                "domains",
                "downstreamAccessTokenHeader",
                "downstreamAccessTokenJwkHeader",
                "downstreamHeadersClaims",
                "downstreamHeadersNames",
                "downstreamIdTokenHeader",
                "downstreamIdTokenJwkHeader",
                "downstreamIntrospectionHeader",
                "downstreamIntrospectionJwtHeader",
                "downstreamRefreshTokenHeader",
                "downstreamSessionIdHeader",
                "downstreamUserInfoHeader",
                "downstreamUserInfoJwtHeader",
                "dpopProofLifetime",
                "dpopUseNonce",
                "enableHsSignatures",
                "endSessionEndpoint",
                "exposeErrorCode",
                "extraJwksUris",
                "forbiddenDestroySession",
                "forbiddenErrorMessage",
                "forbiddenRedirectUris",
                "groupsClaims",
                "groupsRequireds",
                "hideCredentials",
                "httpProxy",
                "httpProxyAuthorization",
                "httpVersion",
                "httpsProxy",
                "httpsProxyAuthorization",
                "idTokenParamName",
                "idTokenParamTypes",
                "ignoreSignatures",
                "introspectJwtTokens",
                "introspectionAccept",
                "introspectionCheckActive",
                "introspectionEndpoint",
                "introspectionEndpointAuthMethod",
                "introspectionHeadersClients",
                "introspectionHeadersNames",
                "introspectionHeadersValues",
                "introspectionHint",
                "introspectionPostArgsClients",
                "introspectionPostArgsNames",
                "introspectionPostArgsValues",
                "introspectionTokenParamName",
                "issuer",
                "issuersAlloweds",
                "jwtSessionClaim",
                "jwtSessionCookie",
                "keepalive",
                "leeway",
                "loginAction",
                "loginMethods",
                "loginRedirectMode",
                "loginRedirectUris",
                "loginTokens",
                "logoutMethods",
                "logoutPostArg",
                "logoutQueryArg",
                "logoutRedirectUris",
                "logoutRevoke",
                "logoutRevokeAccessToken",
                "logoutRevokeRefreshToken",
                "logoutUriSuffix",
                "maxAge",
                "mtlsIntrospectionEndpoint",
                "mtlsRevocationEndpoint",
                "mtlsTokenEndpoint",
                "noProxy",
                "passwordParamTypes",
                "preserveQueryArgs",
                "proofOfPossessionAuthMethodsValidation",
                "proofOfPossessionDpop",
                "proofOfPossessionMtls",
                "pushedAuthorizationRequestEndpoint",
                "pushedAuthorizationRequestEndpointAuthMethod",
                "redirectUris",
                "rediscoveryLifetime",
                "refreshTokenParamName",
                "refreshTokenParamTypes",
                "refreshTokens",
                "requireProofKeyForCodeExchange",
                "requirePushedAuthorizationRequests",
                "requireSignedRequestObject",
                "resolveDistributedClaims",
                "responseMode",
                "responseTypes",
                "reverify",
                "revocationEndpoint",
                "revocationEndpointAuthMethod",
                "revocationTokenParamName",
                "rolesClaims",
                "rolesRequireds",
                "runOnPreflight",
                "scopes",
                "scopesClaims",
                "scopesRequireds",
                "searchUserInfo",
                "sessionAbsoluteTimeout",
                "sessionAudience",
                "sessionCookieDomain",
                "sessionCookieHttpOnly",
                "sessionCookieName",
                "sessionCookiePath",
                "sessionCookieSameSite",
                "sessionCookieSecure",
                "sessionEnforceSameSubject",
                "sessionHashStorageKey",
                "sessionHashSubject",
                "sessionIdlingTimeout",
                "sessionMemcachedHost",
                "sessionMemcachedPort",
                "sessionMemcachedPrefix",
                "sessionMemcachedSocket",
                "sessionRedisClusterMaxRedirections",
                "sessionRedisClusterNodes",
                "sessionRedisConnectTimeout",
                "sessionRedisHost",
                "sessionRedisPassword",
                "sessionRedisPort",
                "sessionRedisPrefix",
                "sessionRedisReadTimeout",
                "sessionRedisSendTimeout",
                "sessionRedisServerName",
                "sessionRedisSocket",
                "sessionRedisSsl",
                "sessionRedisSslVerify",
                "sessionRedisUsername",
                "sessionRemember",
                "sessionRememberAbsoluteTimeout",
                "sessionRememberCookieName",
                "sessionRememberRollingTimeout",
                "sessionRequestHeaders",
                "sessionResponseHeaders",
                "sessionRollingTimeout",
                "sessionSecret",
                "sessionStorage",
                "sessionStoreMetadata",
                "sslVerify",
                "timeout",
                "tlsClientAuthCertId",
                "tlsClientAuthSslVerify",
                "tokenCacheKeyIncludeScope",
                "tokenEndpoint",
                "tokenEndpointAuthMethod",
                "tokenExchangeEndpoint",
                "tokenHeadersClients",
                "tokenHeadersGrants",
                "tokenHeadersNames",
                "tokenHeadersPrefix",
                "tokenHeadersReplays",
                "tokenHeadersValues",
                "tokenPostArgsClients",
                "tokenPostArgsNames",
                "tokenPostArgsValues",
                "unauthorizedDestroySession",
                "unauthorizedErrorMessage",
                "unauthorizedRedirectUris",
                "unexpectedRedirectUris",
                "upstreamAccessTokenHeader",
                "upstreamAccessTokenJwkHeader",
                "upstreamHeadersClaims",
                "upstreamHeadersNames",
                "upstreamIdTokenHeader",
                "upstreamIdTokenJwkHeader",
                "upstreamIntrospectionHeader",
                "upstreamIntrospectionJwtHeader",
                "upstreamRefreshTokenHeader",
                "upstreamSessionIdHeader",
                "upstreamUserInfoHeader",
                "upstreamUserInfoJwtHeader",
                "userinfoAccept",
                "userinfoEndpoint",
                "userinfoHeadersClients",
                "userinfoHeadersNames",
                "userinfoHeadersValues",
                "userinfoQueryArgsClients",
                "userinfoQueryArgsNames",
                "userinfoQueryArgsValues",
                "usingPseudoIssuer",
                "verifyClaims",
                "verifyNonce",
                "verifyParameters",
                "verifySignature"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpenidConnectConfigClientJwk:getGatewayPluginOpenidConnectConfigClientJwk": {
            "properties": {
                "alg": {
                    "type": "string"
                },
                "crv": {
                    "type": "string"
                },
                "d": {
                    "type": "string"
                },
                "dp": {
                    "type": "string"
                },
                "dq": {
                    "type": "string"
                },
                "e": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "k": {
                    "type": "string"
                },
                "keyOps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "kid": {
                    "type": "string"
                },
                "kty": {
                    "type": "string"
                },
                "n": {
                    "type": "string"
                },
                "oth": {
                    "type": "string"
                },
                "p": {
                    "type": "string"
                },
                "q": {
                    "type": "string"
                },
                "qi": {
                    "type": "string"
                },
                "r": {
                    "type": "string"
                },
                "t": {
                    "type": "string"
                },
                "use": {
                    "type": "string"
                },
                "x": {
                    "type": "string"
                },
                "x5cs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "x5t": {
                    "type": "string"
                },
                "x5tNumberS256": {
                    "type": "string"
                },
                "x5u": {
                    "type": "string"
                },
                "y": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "alg",
                "crv",
                "d",
                "dp",
                "dq",
                "e",
                "issuer",
                "k",
                "keyOps",
                "kid",
                "kty",
                "n",
                "oth",
                "p",
                "q",
                "qi",
                "r",
                "t",
                "use",
                "x",
                "x5cs",
                "x5t",
                "x5tNumberS256",
                "x5u",
                "y"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpenidConnectConfigSessionRedisClusterNode:getGatewayPluginOpenidConnectConfigSessionRedisClusterNode": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpenidConnectConsumer:getGatewayPluginOpenidConnectConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpenidConnectConsumerGroup:getGatewayPluginOpenidConnectConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpenidConnectRoute:getGatewayPluginOpenidConnectRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpenidConnectService:getGatewayPluginOpenidConnectService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpentelemetryConfig:getGatewayPluginOpentelemetryConfig": {
            "properties": {
                "batchFlushDelay": {
                    "type": "integer",
                    "description": "The delay, in seconds, between two consecutive batches.\n"
                },
                "batchSpanCount": {
                    "type": "integer",
                    "description": "The number of spans to be sent in a single batch.\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.\n"
                },
                "headerType": {
                    "type": "string",
                    "description": "must be one of [\"preserve\", \"ignore\", \"b3\", \"b3-single\", \"w3c\", \"jaeger\", \"ot\", \"aws\", \"gcp\", \"datadog\"]\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The custom headers to be added in the HTTP request sent to the OTLP server. This setting is useful for adding the authentication headers (token) for the APM backend.\n"
                },
                "httpResponseHeaderForTraceid": {
                    "type": "string"
                },
                "propagation": {
                    "$ref": "#/types/konnect:index/getGatewayPluginOpentelemetryConfigPropagation:getGatewayPluginOpentelemetryConfigPropagation"
                },
                "queue": {
                    "$ref": "#/types/konnect:index/getGatewayPluginOpentelemetryConfigQueue:getGatewayPluginOpentelemetryConfigQueue"
                },
                "readTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "resourceAttributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "samplingRate": {
                    "type": "number",
                    "description": "Tracing sampling rate for configuring the probability-based sampler. When set, this value supersedes the global `tracing_sampling_rate` setting from kong.conf.\n"
                },
                "sendTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                }
            },
            "type": "object",
            "required": [
                "batchFlushDelay",
                "batchSpanCount",
                "connectTimeout",
                "endpoint",
                "headerType",
                "headers",
                "httpResponseHeaderForTraceid",
                "propagation",
                "queue",
                "readTimeout",
                "resourceAttributes",
                "samplingRate",
                "sendTimeout"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpentelemetryConfigPropagation:getGatewayPluginOpentelemetryConfigPropagation": {
            "properties": {
                "clears": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.\n"
                },
                "defaultFormat": {
                    "type": "string",
                    "description": "The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`. must be one of [\"b3\", \"gcp\", \"b3-single\", \"jaeger\", \"aws\", \"ot\", \"w3c\", \"datadog\"]\n"
                },
                "extracts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.\n"
                },
                "injects": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.\n"
                }
            },
            "type": "object",
            "required": [
                "clears",
                "defaultFormat",
                "extracts",
                "injects"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpentelemetryConfigQueue:getGatewayPluginOpentelemetryConfigQueue": {
            "properties": {
                "initialRetryDelay": {
                    "type": "number",
                    "description": "Time in seconds before the initial retry is made for a failing batch.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be processed at a time.\n"
                },
                "maxBytes": {
                    "type": "integer",
                    "description": "Maximum number of bytes that can be waiting on a queue, requires string content.\n"
                },
                "maxCoalescingDelay": {
                    "type": "number",
                    "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.\n"
                },
                "maxEntries": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be waiting on the queue.\n"
                },
                "maxRetryDelay": {
                    "type": "number",
                    "description": "Maximum time in seconds between retries, caps exponential backoff.\n"
                },
                "maxRetryTime": {
                    "type": "number",
                    "description": "Time in seconds before the queue gives up calling a failed handler for a batch.\n"
                }
            },
            "type": "object",
            "required": [
                "initialRetryDelay",
                "maxBatchSize",
                "maxBytes",
                "maxCoalescingDelay",
                "maxEntries",
                "maxRetryDelay",
                "maxRetryTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpentelemetryConsumer:getGatewayPluginOpentelemetryConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpentelemetryConsumerGroup:getGatewayPluginOpentelemetryConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpentelemetryRoute:getGatewayPluginOpentelemetryRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginOpentelemetryService:getGatewayPluginOpentelemetryService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPostFunctionConfig:getGatewayPluginPostFunctionConfig": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bodyFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headerFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rewrites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsClientFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsCloses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsHandshakes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsUpstreamFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "accesses",
                "bodyFilters",
                "certificates",
                "headerFilters",
                "logs",
                "rewrites",
                "wsClientFrames",
                "wsCloses",
                "wsHandshakes",
                "wsUpstreamFrames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPostFunctionConsumer:getGatewayPluginPostFunctionConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPostFunctionConsumerGroup:getGatewayPluginPostFunctionConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPostFunctionRoute:getGatewayPluginPostFunctionRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPostFunctionService:getGatewayPluginPostFunctionService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPreFunctionConfig:getGatewayPluginPreFunctionConfig": {
            "properties": {
                "accesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bodyFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "certificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headerFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "rewrites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsClientFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsCloses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsHandshakes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "wsUpstreamFrames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "accesses",
                "bodyFilters",
                "certificates",
                "headerFilters",
                "logs",
                "rewrites",
                "wsClientFrames",
                "wsCloses",
                "wsHandshakes",
                "wsUpstreamFrames"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPreFunctionConsumer:getGatewayPluginPreFunctionConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPreFunctionConsumerGroup:getGatewayPluginPreFunctionConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPreFunctionRoute:getGatewayPluginPreFunctionRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPreFunctionService:getGatewayPluginPreFunctionService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPrometheusConfig:getGatewayPluginPrometheusConfig": {
            "properties": {
                "bandwidthMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if bandwidth metrics should be collected. If enabled, `bandwidth_bytes` and `stream_sessions_total` metrics will be exported.\n"
                },
                "latencyMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if latency metrics should be collected. If enabled, `kong_latency_ms`, `upstream_latency_ms` and `request_latency_ms` metrics will be exported.\n"
                },
                "perConsumer": {
                    "type": "boolean",
                    "description": "A boolean value that determines if per-consumer metrics should be collected. If enabled, the `kong_http_requests_total` and `kong_bandwidth_bytes` metrics fill in the consumer label when available.\n"
                },
                "statusCodeMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if status code metrics should be collected. If enabled, `http_requests_total`, `stream_sessions_total` metrics will be exported.\n"
                },
                "upstreamHealthMetrics": {
                    "type": "boolean",
                    "description": "A boolean value that determines if upstream metrics should be collected. If enabled, `upstream_target_health` metric will be exported.\n"
                }
            },
            "type": "object",
            "required": [
                "bandwidthMetrics",
                "latencyMetrics",
                "perConsumer",
                "statusCodeMetrics",
                "upstreamHealthMetrics"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPrometheusConsumer:getGatewayPluginPrometheusConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPrometheusConsumerGroup:getGatewayPluginPrometheusConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPrometheusRoute:getGatewayPluginPrometheusRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginPrometheusService:getGatewayPluginPrometheusService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginProxyCacheConfig:getGatewayPluginProxyCacheConfig": {
            "properties": {
                "cacheControl": {
                    "type": "boolean",
                    "description": "When enabled, respect the Cache-Control behaviors defined in RFC7234.\n"
                },
                "cacheTtl": {
                    "type": "integer",
                    "description": "TTL, in seconds, of cache entities.\n"
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value.\n"
                },
                "ignoreUriCase": {
                    "type": "boolean"
                },
                "memory": {
                    "$ref": "#/types/konnect:index/getGatewayPluginProxyCacheConfigMemory:getGatewayPluginProxyCacheConfigMemory"
                },
                "requestMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Downstream request methods considered cacheable.\n"
                },
                "responseCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Upstream response status code considered cacheable.\n"
                },
                "responseHeaders": {
                    "$ref": "#/types/konnect:index/getGatewayPluginProxyCacheConfigResponseHeaders:getGatewayPluginProxyCacheConfigResponseHeaders",
                    "description": "Caching related diagnostic headers that should be included in cached responses\n"
                },
                "storageTtl": {
                    "type": "integer",
                    "description": "Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The backing data store in which to hold cache entities. must be one of [\"memory\"]\n"
                },
                "varyHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.\n"
                },
                "varyQueryParams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.\n"
                }
            },
            "type": "object",
            "required": [
                "cacheControl",
                "cacheTtl",
                "contentTypes",
                "ignoreUriCase",
                "memory",
                "requestMethods",
                "responseCodes",
                "responseHeaders",
                "storageTtl",
                "strategy",
                "varyHeaders",
                "varyQueryParams"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginProxyCacheConfigMemory:getGatewayPluginProxyCacheConfigMemory": {
            "properties": {
                "dictionaryName": {
                    "type": "string",
                    "description": "The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.\n"
                }
            },
            "type": "object",
            "required": [
                "dictionaryName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginProxyCacheConfigResponseHeaders:getGatewayPluginProxyCacheConfigResponseHeaders": {
            "properties": {
                "age": {
                    "type": "boolean"
                },
                "xCacheKey": {
                    "type": "boolean"
                },
                "xCacheStatus": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "age",
                "xCacheKey",
                "xCacheStatus"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginProxyCacheConsumer:getGatewayPluginProxyCacheConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginProxyCacheConsumerGroup:getGatewayPluginProxyCacheConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginProxyCacheRoute:getGatewayPluginProxyCacheRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginProxyCacheService:getGatewayPluginProxyCacheService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingAdvancedConfig:getGatewayPluginRateLimitingAdvancedConfig": {
            "properties": {
                "consumerGroups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of consumer groups allowed to override the rate limiting settings for the given Route or Service. Required if `enforce_consumer_groups` is set to `true`.\n"
                },
                "dictionaryName": {
                    "type": "string",
                    "description": "The shared dictionary where counters are stored. When the plugin is configured to synchronize counter data externally (that is `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't `-1`), this dictionary serves as a buffer to populate counters in the data store on each synchronization cycle.\n"
                },
                "disablePenalty": {
                    "type": "boolean",
                    "description": "If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type.\n"
                },
                "enforceConsumerGroups": {
                    "type": "boolean",
                    "description": "Determines if consumer groups are allowed to override the rate limiting settings for the given Route or Service. Flipping `enforce_consumer_groups` from `true` to `false` disables the group override, but does not clear the list of consumer groups. You can then flip `enforce_consumer_groups` to `true` to re-enforce the groups.\n"
                },
                "errorCode": {
                    "type": "number",
                    "description": "Set a custom error code to return when the rate limit is exceeded.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Set a custom error message to return when the rate limit is exceeded.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "A string representing an HTTP header name.\n"
                },
                "hideClientHeaders": {
                    "type": "boolean",
                    "description": "Optionally hide informative response headers that would otherwise provide information about the current status of limits and counters.\n"
                },
                "identifier": {
                    "type": "string",
                    "description": "The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. must be one of [\"ip\", \"credential\", \"consumer\", \"service\", \"header\", \"path\", \"consumer-group\"]\n"
                },
                "limits": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "One or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The rate limiting library namespace to use for this plugin instance. Counter data and sync configuration is isolated in each namespace. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `window_size`, `dictionary_name`, need to be the same.\n"
                },
                "path": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "redis": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingAdvancedConfigRedis:getGatewayPluginRateLimitingAdvancedConfigRedis"
                },
                "retryAfterJitterMax": {
                    "type": "number",
                    "description": "The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After` header of denied requests (status = `429`) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is `0`; in this case, the `Retry-After` header is equal to the `RateLimit-Reset` header.\n"
                },
                "strategy": {
                    "type": "string",
                    "description": "The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`. must be one of [\"cluster\", \"redis\", \"local\"]\n"
                },
                "syncRate": {
                    "type": "number",
                    "description": "How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 will sync the counters in the specified number of seconds. The minimum allowed interval is 0.02 seconds (20ms).\n"
                },
                "windowSizes": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "One or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.\n"
                },
                "windowType": {
                    "type": "string",
                    "description": "Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters. must be one of [\"fixed\", \"sliding\"]\n"
                }
            },
            "type": "object",
            "required": [
                "consumerGroups",
                "dictionaryName",
                "disablePenalty",
                "enforceConsumerGroups",
                "errorCode",
                "errorMessage",
                "headerName",
                "hideClientHeaders",
                "identifier",
                "limits",
                "namespace",
                "path",
                "redis",
                "retryAfterJitterMax",
                "strategy",
                "syncRate",
                "windowSizes",
                "windowType"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingAdvancedConfigRedis:getGatewayPluginRateLimitingAdvancedConfigRedis": {
            "properties": {
                "clusterAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Cluster. Each string element must be a hostname. The minimum length of the array is 1 element.\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "database": {
                    "type": "integer",
                    "description": "Database to use for the Redis connection when using the `redis` strategy\n"
                },
                "host": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "keepaliveBacklog": {
                    "type": "integer",
                    "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.\n"
                },
                "keepalivePoolSize": {
                    "type": "integer",
                    "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "readTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "sendTimeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "sentinelAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Sentinel addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. Each string element must be a hostname. The minimum length of the array is 1 element.\n"
                },
                "sentinelMaster": {
                    "type": "string",
                    "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.\n"
                },
                "sentinelPassword": {
                    "type": "string",
                    "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.\n"
                },
                "sentinelRole": {
                    "type": "string",
                    "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. must be one of [\"master\", \"slave\", \"any\"]\n"
                },
                "sentinelUsername": {
                    "type": "string",
                    "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "A string representing an SNI (server name indication) value for TLS.\n"
                },
                "ssl": {
                    "type": "boolean",
                    "description": "If set to true, uses SSL to connect to Redis.\n"
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\n"
                }
            },
            "type": "object",
            "required": [
                "clusterAddresses",
                "connectTimeout",
                "database",
                "host",
                "keepaliveBacklog",
                "keepalivePoolSize",
                "password",
                "port",
                "readTimeout",
                "sendTimeout",
                "sentinelAddresses",
                "sentinelMaster",
                "sentinelPassword",
                "sentinelRole",
                "sentinelUsername",
                "serverName",
                "ssl",
                "sslVerify",
                "timeout",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingAdvancedConsumer:getGatewayPluginRateLimitingAdvancedConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingAdvancedConsumerGroup:getGatewayPluginRateLimitingAdvancedConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingAdvancedRoute:getGatewayPluginRateLimitingAdvancedRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingAdvancedService:getGatewayPluginRateLimitingAdvancedService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingConfig:getGatewayPluginRateLimitingConfig": {
            "properties": {
                "day": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per day.\n"
                },
                "errorCode": {
                    "type": "number",
                    "description": "Set a custom error code to return when the rate limit is exceeded.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Set a custom error message to return when the rate limit is exceeded.\n"
                },
                "faultTolerant": {
                    "type": "boolean",
                    "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "A string representing an HTTP header name.\n"
                },
                "hideClientHeaders": {
                    "type": "boolean",
                    "description": "Optionally hide informative response headers.\n"
                },
                "hour": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per hour.\n"
                },
                "limitBy": {
                    "type": "string",
                    "description": "The entity that is used when aggregating the limits. must be one of [\"consumer\", \"credential\", \"ip\", \"service\", \"header\", \"path\", \"consumer-group\"]\n"
                },
                "minute": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per minute.\n"
                },
                "month": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per month.\n"
                },
                "path": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "policy": {
                    "type": "string",
                    "description": "The rate-limiting policies to use for retrieving and incrementing the limits. must be one of [\"local\", \"cluster\", \"redis\"]\n"
                },
                "redis": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingConfigRedis:getGatewayPluginRateLimitingConfigRedis",
                    "description": "Redis configuration\n"
                },
                "second": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per second.\n"
                },
                "syncRate": {
                    "type": "number",
                    "description": "How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.\n"
                },
                "year": {
                    "type": "number",
                    "description": "The number of HTTP requests that can be made per year.\n"
                }
            },
            "type": "object",
            "required": [
                "day",
                "errorCode",
                "errorMessage",
                "faultTolerant",
                "headerName",
                "hideClientHeaders",
                "hour",
                "limitBy",
                "minute",
                "month",
                "path",
                "policy",
                "redis",
                "second",
                "syncRate",
                "year"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingConfigRedis:getGatewayPluginRateLimitingConfigRedis": {
            "properties": {
                "database": {
                    "type": "integer",
                    "description": "Database to use for the Redis connection when using the `redis` strategy\n"
                },
                "host": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "A string representing an SNI (server name indication) value for TLS.\n"
                },
                "ssl": {
                    "type": "boolean",
                    "description": "If set to true, uses SSL to connect to Redis.\n"
                },
                "sslVerify": {
                    "type": "boolean",
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\n"
                }
            },
            "type": "object",
            "required": [
                "database",
                "host",
                "password",
                "port",
                "serverName",
                "ssl",
                "sslVerify",
                "timeout",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingConsumer:getGatewayPluginRateLimitingConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingConsumerGroup:getGatewayPluginRateLimitingConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingRoute:getGatewayPluginRateLimitingRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRateLimitingService:getGatewayPluginRateLimitingService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTerminationConfig:getGatewayPluginRequestTerminationConfig": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The raw response body to send. This is mutually exclusive with the `config.message` field.\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "Content type of the raw response configured with `config.body`.\n"
                },
                "echo": {
                    "type": "boolean",
                    "description": "When set, the plugin will echo a copy of the request back to the client. The main usecase for this is debugging. It can be combined with `trigger` in order to debug requests on live systems without disturbing real traffic.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The message to send, if using the default response generator.\n"
                },
                "statusCode": {
                    "type": "integer",
                    "description": "The response code to send. Must be an integer between 100 and 599.\n"
                },
                "trigger": {
                    "type": "string",
                    "description": "A string representing an HTTP header name.\n"
                }
            },
            "type": "object",
            "required": [
                "body",
                "contentType",
                "echo",
                "message",
                "statusCode",
                "trigger"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTerminationConsumer:getGatewayPluginRequestTerminationConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTerminationConsumerGroup:getGatewayPluginRequestTerminationConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTerminationRoute:getGatewayPluginRequestTerminationRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTerminationService:getGatewayPluginRequestTerminationService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConfig:getGatewayPluginRequestTransformerAdvancedConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConfigAdd:getGatewayPluginRequestTransformerAdvancedConfigAdd"
                },
                "allow": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConfigAllow:getGatewayPluginRequestTransformerAdvancedConfigAllow"
                },
                "append": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConfigAppend:getGatewayPluginRequestTransformerAdvancedConfigAppend"
                },
                "dotsInKeys": {
                    "type": "boolean",
                    "description": "Specify whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects.  See Arrays and nested objects.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.\n"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConfigRemove:getGatewayPluginRequestTransformerAdvancedConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConfigRename:getGatewayPluginRequestTransformerAdvancedConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConfigReplace:getGatewayPluginRequestTransformerAdvancedConfigReplace"
                }
            },
            "type": "object",
            "required": [
                "add",
                "allow",
                "append",
                "dotsInKeys",
                "httpMethod",
                "remove",
                "rename",
                "replace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConfigAdd:getGatewayPluginRequestTransformerAdvancedConfigAdd": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "jsonTypes",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConfigAllow:getGatewayPluginRequestTransformerAdvancedConfigAllow": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConfigAppend:getGatewayPluginRequestTransformerAdvancedConfigAppend": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "jsonTypes",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConfigRemove:getGatewayPluginRequestTransformerAdvancedConfigRemove": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConfigRename:getGatewayPluginRequestTransformerAdvancedConfigRename": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConfigReplace:getGatewayPluginRequestTransformerAdvancedConfigReplace": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "jsonTypes",
                "querystrings",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConsumer:getGatewayPluginRequestTransformerAdvancedConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedConsumerGroup:getGatewayPluginRequestTransformerAdvancedConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedRoute:getGatewayPluginRequestTransformerAdvancedRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvancedService:getGatewayPluginRequestTransformerAdvancedService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConfig:getGatewayPluginRequestTransformerConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConfigAdd:getGatewayPluginRequestTransformerConfigAdd"
                },
                "append": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConfigAppend:getGatewayPluginRequestTransformerConfigAppend"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.\n"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConfigRemove:getGatewayPluginRequestTransformerConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConfigRename:getGatewayPluginRequestTransformerConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConfigReplace:getGatewayPluginRequestTransformerConfigReplace"
                }
            },
            "type": "object",
            "required": [
                "add",
                "append",
                "httpMethod",
                "remove",
                "rename",
                "replace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConfigAdd:getGatewayPluginRequestTransformerConfigAdd": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConfigAppend:getGatewayPluginRequestTransformerConfigAppend": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConfigRemove:getGatewayPluginRequestTransformerConfigRemove": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConfigRename:getGatewayPluginRequestTransformerConfigRename": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "querystrings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConfigReplace:getGatewayPluginRequestTransformerConfigReplace": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "querystrings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "bodies",
                "headers",
                "querystrings",
                "uri"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConsumer:getGatewayPluginRequestTransformerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerConsumerGroup:getGatewayPluginRequestTransformerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerRoute:getGatewayPluginRequestTransformerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerService:getGatewayPluginRequestTransformerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfig:getGatewayPluginResponseTransformerAdvancedConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfigAdd:getGatewayPluginResponseTransformerAdvancedConfigAdd"
                },
                "allow": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfigAllow:getGatewayPluginResponseTransformerAdvancedConfigAllow"
                },
                "append": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfigAppend:getGatewayPluginResponseTransformerAdvancedConfigAppend"
                },
                "dotsInKeys": {
                    "type": "boolean",
                    "description": "Whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects..\n"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfigRemove:getGatewayPluginResponseTransformerAdvancedConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfigRename:getGatewayPluginResponseTransformerAdvancedConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfigReplace:getGatewayPluginResponseTransformerAdvancedConfigReplace"
                },
                "transform": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfigTransform:getGatewayPluginResponseTransformerAdvancedConfigTransform"
                }
            },
            "type": "object",
            "required": [
                "add",
                "allow",
                "append",
                "dotsInKeys",
                "remove",
                "rename",
                "replace",
                "transform"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfigAdd:getGatewayPluginResponseTransformerAdvancedConfigAdd": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "ifStatuses",
                "jsons",
                "jsonTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfigAllow:getGatewayPluginResponseTransformerAdvancedConfigAllow": {
            "properties": {
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "jsons"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfigAppend:getGatewayPluginResponseTransformerAdvancedConfigAppend": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "ifStatuses",
                "jsons",
                "jsonTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfigRemove:getGatewayPluginResponseTransformerAdvancedConfigRemove": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "ifStatuses",
                "jsons"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfigRename:getGatewayPluginResponseTransformerAdvancedConfigRename": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "ifStatuses"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfigReplace:getGatewayPluginResponseTransformerAdvancedConfigReplace": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "String with which to replace the entire response body.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "headers",
                "ifStatuses",
                "jsons",
                "jsonTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConfigTransform:getGatewayPluginResponseTransformerAdvancedConfigTransform": {
            "properties": {
                "functions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ifStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "functions",
                "ifStatuses",
                "jsons"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConsumer:getGatewayPluginResponseTransformerAdvancedConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedConsumerGroup:getGatewayPluginResponseTransformerAdvancedConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedRoute:getGatewayPluginResponseTransformerAdvancedRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvancedService:getGatewayPluginResponseTransformerAdvancedService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConfig:getGatewayPluginResponseTransformerConfig": {
            "properties": {
                "add": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConfigAdd:getGatewayPluginResponseTransformerConfigAdd"
                },
                "append": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConfigAppend:getGatewayPluginResponseTransformerConfigAppend"
                },
                "remove": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConfigRemove:getGatewayPluginResponseTransformerConfigRemove"
                },
                "rename": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConfigRename:getGatewayPluginResponseTransformerConfigRename"
                },
                "replace": {
                    "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConfigReplace:getGatewayPluginResponseTransformerConfigReplace"
                }
            },
            "type": "object",
            "required": [
                "add",
                "append",
                "remove",
                "rename",
                "replace"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConfigAdd:getGatewayPluginResponseTransformerConfigAdd": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSON type names. Specify the types of the JSON values returned when appending\nJSON properties. Each string element can be one of: boolean, number, or string.\n"
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "jsons",
                "jsonTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConfigAppend:getGatewayPluginResponseTransformerConfigAppend": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSON type names. Specify the types of the JSON values returned when appending\nJSON properties. Each string element can be one of: boolean, number, or string.\n"
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "jsons",
                "jsonTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConfigRemove:getGatewayPluginResponseTransformerConfigRemove": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "jsons"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConfigRename:getGatewayPluginResponseTransformerConfigRename": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConfigReplace:getGatewayPluginResponseTransformerConfigReplace": {
            "properties": {
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "jsonTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of JSON type names. Specify the types of the JSON values returned when appending\nJSON properties. Each string element can be one of: boolean, number, or string.\n"
                },
                "jsons": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "headers",
                "jsons",
                "jsonTypes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConsumer:getGatewayPluginResponseTransformerConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerConsumerGroup:getGatewayPluginResponseTransformerConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerRoute:getGatewayPluginResponseTransformerRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerService:getGatewayPluginResponseTransformerService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginSamlConfig:getGatewayPluginSamlConfig": {
            "properties": {
                "anonymous": {
                    "type": "string",
                    "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.\n"
                },
                "assertionConsumerPath": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "idpCertificate": {
                    "type": "string",
                    "description": "The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.\n"
                },
                "idpSsoUrl": {
                    "type": "string",
                    "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.\n"
                },
                "nameidFormat": {
                    "type": "string",
                    "description": "The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`. must be one of [\"Unspecified\", \"EmailAddress\", \"Persistent\", \"Transient\"]\n"
                },
                "requestDigestAlgorithm": {
                    "type": "string",
                    "description": "The digest algorithm for Authn requests: - `SHA256` - `SHA1`. must be one of [\"SHA256\", \"SHA1\"]\n"
                },
                "requestSignatureAlgorithm": {
                    "type": "string",
                    "description": "The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of [\"SHA256\", \"SHA384\", \"SHA512\"]\n"
                },
                "requestSigningCertificate": {
                    "type": "string",
                    "description": "The certificate for signing requests.\n"
                },
                "requestSigningKey": {
                    "type": "string",
                    "description": "The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.\n"
                },
                "responseDigestAlgorithm": {
                    "type": "string",
                    "description": "The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`. must be one of [\"SHA256\", \"SHA1\"]\n"
                },
                "responseEncryptionKey": {
                    "type": "string",
                    "description": "The private encryption key required to decrypt encrypted assertions.\n"
                },
                "responseSignatureAlgorithm": {
                    "type": "string",
                    "description": "The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of [\"SHA256\", \"SHA384\", \"SHA512\"]\n"
                },
                "sessionAbsoluteTimeout": {
                    "type": "number",
                    "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.\n"
                },
                "sessionAudience": {
                    "type": "string",
                    "description": "The session audience, for example \"my-application\"\n"
                },
                "sessionCookieDomain": {
                    "type": "string",
                    "description": "The session cookie domain flag.\n"
                },
                "sessionCookieHttpOnly": {
                    "type": "boolean",
                    "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.\n"
                },
                "sessionCookieName": {
                    "type": "string",
                    "description": "The session cookie name.\n"
                },
                "sessionCookiePath": {
                    "type": "string",
                    "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).\n"
                },
                "sessionCookieSameSite": {
                    "type": "string",
                    "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of [\"Strict\", \"Lax\", \"None\", \"Default\"]\n"
                },
                "sessionCookieSecure": {
                    "type": "boolean",
                    "description": "The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.\n"
                },
                "sessionEnforceSameSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, audiences are forced to share the same subject.\n"
                },
                "sessionHashStorageKey": {
                    "type": "boolean",
                    "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.\n"
                },
                "sessionHashSubject": {
                    "type": "boolean",
                    "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.\n"
                },
                "sessionIdlingTimeout": {
                    "type": "number",
                    "description": "The session cookie idle time in seconds.\n"
                },
                "sessionMemcachedHost": {
                    "type": "string",
                    "description": "The memcached host.\n"
                },
                "sessionMemcachedPort": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "sessionMemcachedPrefix": {
                    "type": "string",
                    "description": "The memcached session key prefix.\n"
                },
                "sessionMemcachedSocket": {
                    "type": "string",
                    "description": "The memcached unix socket path.\n"
                },
                "sessionRedisClusterMaxRedirections": {
                    "type": "integer",
                    "description": "The Redis cluster maximum redirects.\n"
                },
                "sessionRedisClusterNodes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getGatewayPluginSamlConfigSessionRedisClusterNode:getGatewayPluginSamlConfigSessionRedisClusterNode"
                    },
                    "description": "The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.\n"
                },
                "sessionRedisConnectTimeout": {
                    "type": "integer",
                    "description": "The Redis connection timeout in milliseconds.\n"
                },
                "sessionRedisHost": {
                    "type": "string",
                    "description": "The Redis host IP.\n"
                },
                "sessionRedisPassword": {
                    "type": "string",
                    "description": "Password to use for Redis connection when the `redis` session storage is defined. If undefined, no auth commands are sent to Redis. This value is pulled from\n"
                },
                "sessionRedisPort": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                },
                "sessionRedisPrefix": {
                    "type": "string",
                    "description": "The Redis session key prefix.\n"
                },
                "sessionRedisReadTimeout": {
                    "type": "integer",
                    "description": "The Redis read timeout in milliseconds.\n"
                },
                "sessionRedisSendTimeout": {
                    "type": "integer",
                    "description": "The Redis send timeout in milliseconds.\n"
                },
                "sessionRedisServerName": {
                    "type": "string",
                    "description": "The SNI used for connecting to the Redis server.\n"
                },
                "sessionRedisSocket": {
                    "type": "string",
                    "description": "The Redis unix socket path.\n"
                },
                "sessionRedisSsl": {
                    "type": "boolean",
                    "description": "Use SSL/TLS for the Redis connection.\n"
                },
                "sessionRedisSslVerify": {
                    "type": "boolean",
                    "description": "Verify the Redis server certificate.\n"
                },
                "sessionRedisUsername": {
                    "type": "string",
                    "description": "Redis username if the `redis` session storage is defined and ACL authentication is desired.If undefined, ACL authentication will not be performed.  This requires Redis v6.0.0+. The username **cannot** be set to `default`.\n"
                },
                "sessionRemember": {
                    "type": "boolean",
                    "description": "Enables or disables persistent sessions\n"
                },
                "sessionRememberAbsoluteTimeout": {
                    "type": "number",
                    "description": "Persistent session absolute timeout in seconds.\n"
                },
                "sessionRememberCookieName": {
                    "type": "string",
                    "description": "Persistent session cookie name\n"
                },
                "sessionRememberRollingTimeout": {
                    "type": "number",
                    "description": "Persistent session rolling timeout in seconds.\n"
                },
                "sessionRequestHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sessionResponseHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sessionRollingTimeout": {
                    "type": "number",
                    "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.\n"
                },
                "sessionSecret": {
                    "type": "string",
                    "description": "The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.\n"
                },
                "sessionStorage": {
                    "type": "string",
                    "description": "The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis. must be one of [\"cookie\", \"memcache\", \"memcached\", \"redis\"]\n"
                },
                "sessionStoreMetadata": {
                    "type": "boolean",
                    "description": "Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.\n"
                },
                "validateAssertionSignature": {
                    "type": "boolean",
                    "description": "Enable signature validation for SAML responses.\n"
                }
            },
            "type": "object",
            "required": [
                "anonymous",
                "assertionConsumerPath",
                "idpCertificate",
                "idpSsoUrl",
                "issuer",
                "nameidFormat",
                "requestDigestAlgorithm",
                "requestSignatureAlgorithm",
                "requestSigningCertificate",
                "requestSigningKey",
                "responseDigestAlgorithm",
                "responseEncryptionKey",
                "responseSignatureAlgorithm",
                "sessionAbsoluteTimeout",
                "sessionAudience",
                "sessionCookieDomain",
                "sessionCookieHttpOnly",
                "sessionCookieName",
                "sessionCookiePath",
                "sessionCookieSameSite",
                "sessionCookieSecure",
                "sessionEnforceSameSubject",
                "sessionHashStorageKey",
                "sessionHashSubject",
                "sessionIdlingTimeout",
                "sessionMemcachedHost",
                "sessionMemcachedPort",
                "sessionMemcachedPrefix",
                "sessionMemcachedSocket",
                "sessionRedisClusterMaxRedirections",
                "sessionRedisClusterNodes",
                "sessionRedisConnectTimeout",
                "sessionRedisHost",
                "sessionRedisPassword",
                "sessionRedisPort",
                "sessionRedisPrefix",
                "sessionRedisReadTimeout",
                "sessionRedisSendTimeout",
                "sessionRedisServerName",
                "sessionRedisSocket",
                "sessionRedisSsl",
                "sessionRedisSslVerify",
                "sessionRedisUsername",
                "sessionRemember",
                "sessionRememberAbsoluteTimeout",
                "sessionRememberCookieName",
                "sessionRememberRollingTimeout",
                "sessionRequestHeaders",
                "sessionResponseHeaders",
                "sessionRollingTimeout",
                "sessionSecret",
                "sessionStorage",
                "sessionStoreMetadata",
                "validateAssertionSignature"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginSamlConfigSessionRedisClusterNode:getGatewayPluginSamlConfigSessionRedisClusterNode": {
            "properties": {
                "ip": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.\n"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginSamlConsumer:getGatewayPluginSamlConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginSamlConsumerGroup:getGatewayPluginSamlConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginSamlRoute:getGatewayPluginSamlRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginSamlService:getGatewayPluginSamlService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginStatsdConfig:getGatewayPluginStatsdConfig": {
            "properties": {
                "allowStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of status code ranges that are allowed to be logged in metrics.\n"
                },
                "consumerIdentifierDefault": {
                    "type": "string",
                    "description": "must be one of [\"consumer_id\", \"custom_id\", \"username\"]\n"
                },
                "flushTimeout": {
                    "type": "number"
                },
                "host": {
                    "type": "string",
                    "description": "The IP address or hostname of StatsD server to send data to.\n"
                },
                "hostnameInPrefix": {
                    "type": "boolean"
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/getGatewayPluginStatsdConfigMetric:getGatewayPluginStatsdConfigMetric"
                    },
                    "description": "List of metrics to be logged.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port of StatsD server to send data to.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "String to prefix to each metric's name.\n"
                },
                "queue": {
                    "$ref": "#/types/konnect:index/getGatewayPluginStatsdConfigQueue:getGatewayPluginStatsdConfigQueue"
                },
                "queueSize": {
                    "type": "integer"
                },
                "retryCount": {
                    "type": "integer"
                },
                "serviceIdentifierDefault": {
                    "type": "string",
                    "description": "must be one of [\"service_id\", \"service_name\", \"service_host\", \"service_name_or_host\"]\n"
                },
                "tagStyle": {
                    "type": "string",
                    "description": "must be one of [\"dogstatsd\", \"influxdb\", \"librato\", \"signalfx\"]\n"
                },
                "udpPacketSize": {
                    "type": "number"
                },
                "useTcp": {
                    "type": "boolean"
                },
                "workspaceIdentifierDefault": {
                    "type": "string",
                    "description": "must be one of [\"workspace_id\", \"workspace_name\"]\n"
                }
            },
            "type": "object",
            "required": [
                "allowStatusCodes",
                "consumerIdentifierDefault",
                "flushTimeout",
                "host",
                "hostnameInPrefix",
                "metrics",
                "port",
                "prefix",
                "queue",
                "queueSize",
                "retryCount",
                "serviceIdentifierDefault",
                "tagStyle",
                "udpPacketSize",
                "useTcp",
                "workspaceIdentifierDefault"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginStatsdConfigMetric:getGatewayPluginStatsdConfigMetric": {
            "properties": {
                "consumerIdentifier": {
                    "type": "string",
                    "description": "Authenticated user detail. must be one of [\"consumer_id\", \"custom_id\", \"username\"]\n"
                },
                "name": {
                    "type": "string",
                    "description": "StatsD metric’s name. must be one of [\"kong_latency\", \"latency\", \"request_count\", \"request_per_user\", \"request_size\", \"response_size\", \"status_count\", \"status_count_per_user\", \"unique_users\", \"upstream_latency\", \"status_count_per_workspace\", \"status_count_per_user_per_route\", \"shdict_usage\", \"cache_datastore_hits_total\", \"cache_datastore_misses_total\"]\n"
                },
                "sampleRate": {
                    "type": "number",
                    "description": "Sampling rate\n"
                },
                "serviceIdentifier": {
                    "type": "string",
                    "description": "Service detail. must be one of [\"service_id\", \"service_name\", \"service_host\", \"service_name_or_host\"]\n"
                },
                "statType": {
                    "type": "string",
                    "description": "Determines what sort of event a metric represents. must be one of [\"counter\", \"gauge\", \"histogram\", \"meter\", \"set\", \"timer\"]\n"
                },
                "workspaceIdentifier": {
                    "type": "string",
                    "description": "Workspace detail. must be one of [\"workspace_id\", \"workspace_name\"]\n"
                }
            },
            "type": "object",
            "required": [
                "consumerIdentifier",
                "name",
                "sampleRate",
                "serviceIdentifier",
                "statType",
                "workspaceIdentifier"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginStatsdConfigQueue:getGatewayPluginStatsdConfigQueue": {
            "properties": {
                "initialRetryDelay": {
                    "type": "number",
                    "description": "Time in seconds before the initial retry is made for a failing batch.\n"
                },
                "maxBatchSize": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be processed at a time.\n"
                },
                "maxBytes": {
                    "type": "integer",
                    "description": "Maximum number of bytes that can be waiting on a queue, requires string content.\n"
                },
                "maxCoalescingDelay": {
                    "type": "number",
                    "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.\n"
                },
                "maxEntries": {
                    "type": "integer",
                    "description": "Maximum number of entries that can be waiting on the queue.\n"
                },
                "maxRetryDelay": {
                    "type": "number",
                    "description": "Maximum time in seconds between retries, caps exponential backoff.\n"
                },
                "maxRetryTime": {
                    "type": "number",
                    "description": "Time in seconds before the queue gives up calling a failed handler for a batch.\n"
                }
            },
            "type": "object",
            "required": [
                "initialRetryDelay",
                "maxBatchSize",
                "maxBytes",
                "maxCoalescingDelay",
                "maxEntries",
                "maxRetryDelay",
                "maxRetryTime"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginStatsdConsumer:getGatewayPluginStatsdConsumer": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginStatsdConsumerGroup:getGatewayPluginStatsdConsumerGroup": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginStatsdRoute:getGatewayPluginStatsdRoute": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayPluginStatsdService:getGatewayPluginStatsdService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayRouteDestination:getGatewayRouteDestination": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayRouteService:getGatewayRouteService": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayRouteSource:getGatewayRouteSource": {
            "properties": {
                "ip": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "ip",
                "port"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayServiceClientCertificate:getGatewayServiceClientCertificate": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewaySniCertificate:getGatewaySniCertificate": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayTargetUpstream:getGatewayTargetUpstream": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamClientCertificate:getGatewayUpstreamClientCertificate": {
            "properties": {
                "id": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamHealthchecks:getGatewayUpstreamHealthchecks": {
            "properties": {
                "active": {
                    "$ref": "#/types/konnect:index/getGatewayUpstreamHealthchecksActive:getGatewayUpstreamHealthchecksActive"
                },
                "passive": {
                    "$ref": "#/types/konnect:index/getGatewayUpstreamHealthchecksPassive:getGatewayUpstreamHealthchecksPassive"
                },
                "threshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "active",
                "passive",
                "threshold"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamHealthchecksActive:getGatewayUpstreamHealthchecksActive": {
            "properties": {
                "concurrency": {
                    "type": "integer"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "healthy": {
                    "$ref": "#/types/konnect:index/getGatewayUpstreamHealthchecksActiveHealthy:getGatewayUpstreamHealthchecksActiveHealthy"
                },
                "httpPath": {
                    "type": "string"
                },
                "httpsSni": {
                    "type": "string"
                },
                "httpsVerifyCertificate": {
                    "type": "boolean"
                },
                "timeout": {
                    "type": "number"
                },
                "type": {
                    "type": "string",
                    "description": "must be one of [\"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\"]\n"
                },
                "unhealthy": {
                    "$ref": "#/types/konnect:index/getGatewayUpstreamHealthchecksActiveUnhealthy:getGatewayUpstreamHealthchecksActiveUnhealthy"
                }
            },
            "type": "object",
            "required": [
                "concurrency",
                "headers",
                "healthy",
                "httpPath",
                "httpsSni",
                "httpsVerifyCertificate",
                "timeout",
                "type",
                "unhealthy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamHealthchecksActiveHealthy:getGatewayUpstreamHealthchecksActiveHealthy": {
            "properties": {
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "interval": {
                    "type": "number"
                },
                "successes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "httpStatuses",
                "interval",
                "successes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamHealthchecksActiveUnhealthy:getGatewayUpstreamHealthchecksActiveUnhealthy": {
            "properties": {
                "httpFailures": {
                    "type": "integer"
                },
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "interval": {
                    "type": "number"
                },
                "tcpFailures": {
                    "type": "integer"
                },
                "timeouts": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "httpFailures",
                "httpStatuses",
                "interval",
                "tcpFailures",
                "timeouts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamHealthchecksPassive:getGatewayUpstreamHealthchecksPassive": {
            "properties": {
                "healthy": {
                    "$ref": "#/types/konnect:index/getGatewayUpstreamHealthchecksPassiveHealthy:getGatewayUpstreamHealthchecksPassiveHealthy"
                },
                "type": {
                    "type": "string",
                    "description": "must be one of [\"tcp\", \"http\", \"https\", \"grpc\", \"grpcs\"]\n"
                },
                "unhealthy": {
                    "$ref": "#/types/konnect:index/getGatewayUpstreamHealthchecksPassiveUnhealthy:getGatewayUpstreamHealthchecksPassiveUnhealthy"
                }
            },
            "type": "object",
            "required": [
                "healthy",
                "type",
                "unhealthy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamHealthchecksPassiveHealthy:getGatewayUpstreamHealthchecksPassiveHealthy": {
            "properties": {
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "successes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "httpStatuses",
                "successes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getGatewayUpstreamHealthchecksPassiveUnhealthy:getGatewayUpstreamHealthchecksPassiveUnhealthy": {
            "properties": {
                "httpFailures": {
                    "type": "integer"
                },
                "httpStatuses": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "tcpFailures": {
                    "type": "integer"
                },
                "timeouts": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "httpFailures",
                "httpStatuses",
                "tcpFailures",
                "timeouts"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomFonts:getPortalAppearanceCustomFonts": {
            "properties": {
                "base": {
                    "type": "string",
                    "description": "The name of the font to render in the browser. must be one of [\"Roboto\", \"Inter\", \"Open Sans\", \"Lato\", \"Slabo 27px\", \"Slabo 13px\", \"Oswald\", \"Source Sans Pro\", \"Montserrat\", \"Raleway\", \"PT Sans\", \"Lora\", \"Roboto Mono\", \"Inconsolata\", \"Source Code Pro\", \"PT Mono\", \"Ubuntu Mono\", \"IBM Plex Mono\"]\n"
                },
                "code": {
                    "type": "string",
                    "description": "The name of the font to render in the browser. must be one of [\"Roboto\", \"Inter\", \"Open Sans\", \"Lato\", \"Slabo 27px\", \"Slabo 13px\", \"Oswald\", \"Source Sans Pro\", \"Montserrat\", \"Raleway\", \"PT Sans\", \"Lora\", \"Roboto Mono\", \"Inconsolata\", \"Source Code Pro\", \"PT Mono\", \"Ubuntu Mono\", \"IBM Plex Mono\"]\n"
                },
                "headings": {
                    "type": "string",
                    "description": "The name of the font to render in the browser. must be one of [\"Roboto\", \"Inter\", \"Open Sans\", \"Lato\", \"Slabo 27px\", \"Slabo 13px\", \"Oswald\", \"Source Sans Pro\", \"Montserrat\", \"Raleway\", \"PT Sans\", \"Lora\", \"Roboto Mono\", \"Inconsolata\", \"Source Code Pro\", \"PT Mono\", \"Ubuntu Mono\", \"IBM Plex Mono\"]\n"
                }
            },
            "type": "object",
            "required": [
                "base",
                "code",
                "headings"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomTheme:getPortalAppearanceCustomTheme": {
            "properties": {
                "colors": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColors:getPortalAppearanceCustomThemeColors"
                }
            },
            "type": "object",
            "required": [
                "colors"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColors:getPortalAppearanceCustomThemeColors": {
            "properties": {
                "button": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsButton:getPortalAppearanceCustomThemeColorsButton"
                },
                "section": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSection:getPortalAppearanceCustomThemeColorsSection"
                },
                "text": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsText:getPortalAppearanceCustomThemeColorsText"
                }
            },
            "type": "object",
            "required": [
                "button",
                "section",
                "text"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsButton:getPortalAppearanceCustomThemeColorsButton": {
            "properties": {
                "primaryFill": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsButtonPrimaryFill:getPortalAppearanceCustomThemeColorsButtonPrimaryFill"
                },
                "primaryText": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsButtonPrimaryText:getPortalAppearanceCustomThemeColorsButtonPrimaryText"
                }
            },
            "type": "object",
            "required": [
                "primaryFill",
                "primaryText"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsButtonPrimaryFill:getPortalAppearanceCustomThemeColorsButtonPrimaryFill": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsButtonPrimaryText:getPortalAppearanceCustomThemeColorsButtonPrimaryText": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSection:getPortalAppearanceCustomThemeColorsSection": {
            "properties": {
                "accent": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSectionAccent:getPortalAppearanceCustomThemeColorsSectionAccent"
                },
                "body": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSectionBody:getPortalAppearanceCustomThemeColorsSectionBody"
                },
                "footer": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSectionFooter:getPortalAppearanceCustomThemeColorsSectionFooter"
                },
                "header": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSectionHeader:getPortalAppearanceCustomThemeColorsSectionHeader"
                },
                "hero": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSectionHero:getPortalAppearanceCustomThemeColorsSectionHero"
                },
                "stroke": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSectionStroke:getPortalAppearanceCustomThemeColorsSectionStroke"
                },
                "tertiary": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsSectionTertiary:getPortalAppearanceCustomThemeColorsSectionTertiary"
                }
            },
            "type": "object",
            "required": [
                "accent",
                "body",
                "footer",
                "header",
                "hero",
                "stroke",
                "tertiary"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSectionAccent:getPortalAppearanceCustomThemeColorsSectionAccent": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSectionBody:getPortalAppearanceCustomThemeColorsSectionBody": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSectionFooter:getPortalAppearanceCustomThemeColorsSectionFooter": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSectionHeader:getPortalAppearanceCustomThemeColorsSectionHeader": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSectionHero:getPortalAppearanceCustomThemeColorsSectionHero": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSectionStroke:getPortalAppearanceCustomThemeColorsSectionStroke": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsSectionTertiary:getPortalAppearanceCustomThemeColorsSectionTertiary": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsText:getPortalAppearanceCustomThemeColorsText": {
            "properties": {
                "accent": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextAccent:getPortalAppearanceCustomThemeColorsTextAccent"
                },
                "footer": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextFooter:getPortalAppearanceCustomThemeColorsTextFooter"
                },
                "header": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextHeader:getPortalAppearanceCustomThemeColorsTextHeader"
                },
                "headings": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextHeadings:getPortalAppearanceCustomThemeColorsTextHeadings"
                },
                "hero": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextHero:getPortalAppearanceCustomThemeColorsTextHero"
                },
                "link": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextLink:getPortalAppearanceCustomThemeColorsTextLink"
                },
                "primary": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextPrimary:getPortalAppearanceCustomThemeColorsTextPrimary"
                },
                "secondary": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceCustomThemeColorsTextSecondary:getPortalAppearanceCustomThemeColorsTextSecondary"
                }
            },
            "type": "object",
            "required": [
                "accent",
                "footer",
                "header",
                "headings",
                "hero",
                "link",
                "primary",
                "secondary"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextAccent:getPortalAppearanceCustomThemeColorsTextAccent": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextFooter:getPortalAppearanceCustomThemeColorsTextFooter": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextHeader:getPortalAppearanceCustomThemeColorsTextHeader": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextHeadings:getPortalAppearanceCustomThemeColorsTextHeadings": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextHero:getPortalAppearanceCustomThemeColorsTextHero": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextLink:getPortalAppearanceCustomThemeColorsTextLink": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextPrimary:getPortalAppearanceCustomThemeColorsTextPrimary": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceCustomThemeColorsTextSecondary:getPortalAppearanceCustomThemeColorsTextSecondary": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceImages:getPortalAppearanceImages": {
            "properties": {
                "catalogCover": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceImagesCatalogCover:getPortalAppearanceImagesCatalogCover",
                    "description": "The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs.\n"
                },
                "favicon": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceImagesFavicon:getPortalAppearanceImagesFavicon",
                    "description": "The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs.\n"
                },
                "logo": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceImagesLogo:getPortalAppearanceImagesLogo",
                    "description": "The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs.\n"
                }
            },
            "type": "object",
            "required": [
                "catalogCover",
                "favicon",
                "logo"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceImagesCatalogCover:getPortalAppearanceImagesCatalogCover": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\u003cBASE64_IMAGE_DATA\u003e\n"
                },
                "filename": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "data",
                "filename"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceImagesFavicon:getPortalAppearanceImagesFavicon": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\u003cBASE64_IMAGE_DATA\u003e\n"
                },
                "filename": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "data",
                "filename"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceImagesLogo:getPortalAppearanceImagesLogo": {
            "properties": {
                "data": {
                    "type": "string",
                    "description": "must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\u003cBASE64_IMAGE_DATA\u003e\n"
                },
                "filename": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "data",
                "filename"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceText:getPortalAppearanceText": {
            "properties": {
                "catalog": {
                    "$ref": "#/types/konnect:index/getPortalAppearanceTextCatalog:getPortalAppearanceTextCatalog"
                }
            },
            "type": "object",
            "required": [
                "catalog"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAppearanceTextCatalog:getPortalAppearanceTextCatalog": {
            "properties": {
                "primaryHeader": {
                    "type": "string"
                },
                "welcomeMessage": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "primaryHeader",
                "welcomeMessage"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAuthOidcConfig:getPortalAuthOidcConfig": {
            "properties": {
                "claimMappings": {
                    "$ref": "#/types/konnect:index/getPortalAuthOidcConfigClaimMappings:getPortalAuthOidcConfigClaimMappings",
                    "description": "Mappings from a portal developer atribute to an Identity Provider claim.\n"
                },
                "clientId": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "claimMappings",
                "clientId",
                "issuer",
                "scopes"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalAuthOidcConfigClaimMappings:getPortalAuthOidcConfigClaimMappings": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "groups": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "email",
                "groups",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalListData:getPortalListData": {
            "properties": {
                "applicationCount": {
                    "type": "number",
                    "description": "Number of applications created in the portal.\n"
                },
                "autoApproveApplications": {
                    "type": "boolean",
                    "description": "Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                },
                "autoApproveDevelopers": {
                    "type": "boolean",
                    "description": "Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "customClientDomain": {
                    "type": "string",
                    "description": "The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal client will no longer be available. `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.\n"
                },
                "customDomain": {
                    "type": "string",
                    "description": "The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.\n"
                },
                "defaultApplicationAuthStrategyId": {
                    "type": "string",
                    "description": "Default strategy ID applied on applications for the portal\n"
                },
                "defaultDomain": {
                    "type": "string",
                    "description": "The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a `custom_domain``.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the portal.\n"
                },
                "developerCount": {
                    "type": "number",
                    "description": "Number of developers using the portal.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the portal. This value will be the portal's `name` in Portal API.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Contains a unique identifier used for this resource.\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types. \n\nKeys must be of length 1-63 characters, and cannot start with \"kong\", \"konnect\", \"mesh\", \"kic\", or \"_\".\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the portal, used to distinguish it from other portals. Name must be unique.\n"
                },
                "publishedProductCount": {
                    "type": "number",
                    "description": "Number of api products published to the portal\n"
                },
                "rbacEnabled": {
                    "type": "boolean",
                    "description": "Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register for products until unless assigned to teams with access to view and consume specific products.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "type": "object",
            "required": [
                "applicationCount",
                "autoApproveApplications",
                "autoApproveDevelopers",
                "createdAt",
                "customClientDomain",
                "customDomain",
                "defaultApplicationAuthStrategyId",
                "defaultDomain",
                "description",
                "developerCount",
                "displayName",
                "id",
                "isPublic",
                "labels",
                "name",
                "publishedProductCount",
                "rbacEnabled",
                "updatedAt"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalListMeta:getPortalListMeta": {
            "properties": {
                "page": {
                    "$ref": "#/types/konnect:index/getPortalListMetaPage:getPortalListMetaPage",
                    "description": "Contains pagination query parameters and the total number of objects returned.\n"
                }
            },
            "type": "object",
            "required": [
                "page"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalListMetaPage:getPortalListMetaPage": {
            "properties": {
                "number": {
                    "type": "number"
                },
                "size": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "number",
                "size",
                "total"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalProductVersionAuthStrategy:getPortalProductVersionAuthStrategy": {
            "properties": {
                "clientCredentials": {
                    "$ref": "#/types/konnect:index/getPortalProductVersionAuthStrategyClientCredentials:getPortalProductVersionAuthStrategyClientCredentials",
                    "description": "Client Credential Auth strategy that the application uses.\n"
                },
                "keyAuth": {
                    "$ref": "#/types/konnect:index/getPortalProductVersionAuthStrategyKeyAuth:getPortalProductVersionAuthStrategyKeyAuth",
                    "description": "KeyAuth Auth strategy that the application uses.\n"
                }
            },
            "type": "object",
            "required": [
                "clientCredentials",
                "keyAuth"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalProductVersionAuthStrategyClientCredentials:getPortalProductVersionAuthStrategyClientCredentials": {
            "properties": {
                "authMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "credentialType": {
                    "type": "string",
                    "description": "must be one of [\"client_credentials\", \"self_managed_client_credentials\"]\n"
                },
                "id": {
                    "type": "string",
                    "description": "The Application Auth Strategy ID.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "authMethods",
                "credentialType",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getPortalProductVersionAuthStrategyKeyAuth:getPortalProductVersionAuthStrategyKeyAuth": {
            "properties": {
                "credentialType": {
                    "type": "string",
                    "description": "must be one of [\"key_auth\"]\n"
                },
                "id": {
                    "type": "string",
                    "description": "The Application Auth Strategy ID.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentialType",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "konnect:index/getServerlessCloudGatewayControlPlane:getServerlessCloudGatewayControlPlane": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the serverless cloud gateway CP.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The prefix of the serverless cloud gateway CP.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The control plane region. must be one of [\"us\", \"eu\", \"au\"]\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "prefix",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the konnect package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "konnectAccessToken": {
                "type": "string",
                "secret": true
            },
            "personalAccessToken": {
                "type": "string",
                "secret": true
            },
            "serverUrl": {
                "type": "string",
                "description": "Server URL (defaults to https://global.api.konghq.com)\n"
            },
            "systemAccountAccessToken": {
                "type": "string",
                "secret": true
            }
        },
        "inputProperties": {
            "konnectAccessToken": {
                "type": "string",
                "secret": true
            },
            "personalAccessToken": {
                "type": "string",
                "secret": true
            },
            "serverUrl": {
                "type": "string",
                "description": "Server URL (defaults to https://global.api.konghq.com)\n"
            },
            "systemAccountAccessToken": {
                "type": "string",
                "secret": true
            }
        }
    },
    "resources": {
        "konnect:index/apiProduct:ApiProduct": {
            "description": "APIProduct Resource\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the API product.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the API product.\n"
                },
                "portalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of portal identifiers which this API product should be published to\n"
                },
                "portals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/ApiProductPortal:ApiProductPortal"
                    },
                    "description": "The list of portals which this API product is published to\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                },
                "versionCount": {
                    "type": "number",
                    "description": "The number of product versions attached to this API product\n"
                }
            },
            "required": [
                "createdAt",
                "description",
                "labels",
                "name",
                "portalIds",
                "portals",
                "updatedAt",
                "versionCount"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the API product.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the API product.\n"
                },
                "portalIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of portal identifiers which this API product should be published to\n"
                }
            },
            "requiredInputs": [
                "portalIds"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiProduct resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the API product.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the API product.\n"
                    },
                    "portalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of portal identifiers which this API product should be published to\n"
                    },
                    "portals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/ApiProductPortal:ApiProductPortal"
                        },
                        "description": "The list of portals which this API product is published to\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity update date.\n"
                    },
                    "versionCount": {
                        "type": "number",
                        "description": "The number of product versions attached to this API product\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/apiProductDocument:ApiProductDocument": {
            "description": "APIProductDocument Resource\n",
            "properties": {
                "apiProductId": {
                    "type": "string",
                    "description": "The API product identifier\n"
                },
                "content": {
                    "type": "string",
                    "description": "Can be markdown string content or base64 encoded string\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "metadata": {
                    "$ref": "#/types/konnect:index/ApiProductDocumentMetadata:ApiProductDocumentMetadata",
                    "description": "metadata of the document\n"
                },
                "parentDocumentId": {
                    "type": "string",
                    "description": "parent document id\n"
                },
                "slug": {
                    "type": "string",
                    "description": "document slug. must be unique accross documents belonging to an api product\n"
                },
                "status": {
                    "type": "string",
                    "description": "document publish status. must be one of [\"published\", \"unpublished\"]\n"
                },
                "title": {
                    "type": "string",
                    "description": "document title\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "required": [
                "apiProductId",
                "content",
                "createdAt",
                "metadata",
                "parentDocumentId",
                "slug",
                "status",
                "title",
                "updatedAt"
            ],
            "inputProperties": {
                "apiProductId": {
                    "type": "string",
                    "description": "The API product identifier\n"
                },
                "content": {
                    "type": "string",
                    "description": "Can be markdown string content or base64 encoded string\n"
                },
                "metadata": {
                    "$ref": "#/types/konnect:index/ApiProductDocumentMetadata:ApiProductDocumentMetadata",
                    "description": "metadata of the document\n"
                },
                "parentDocumentId": {
                    "type": "string",
                    "description": "parent document id\n"
                },
                "slug": {
                    "type": "string",
                    "description": "document slug. must be unique accross documents belonging to an api product\n"
                },
                "status": {
                    "type": "string",
                    "description": "document publish status. must be one of [\"published\", \"unpublished\"]\n"
                },
                "title": {
                    "type": "string",
                    "description": "document title\n"
                }
            },
            "requiredInputs": [
                "apiProductId",
                "slug",
                "status",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiProductDocument resources.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string",
                        "description": "The API product identifier\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "Can be markdown string content or base64 encoded string\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                    },
                    "metadata": {
                        "$ref": "#/types/konnect:index/ApiProductDocumentMetadata:ApiProductDocumentMetadata",
                        "description": "metadata of the document\n"
                    },
                    "parentDocumentId": {
                        "type": "string",
                        "description": "parent document id\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "document slug. must be unique accross documents belonging to an api product\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "document publish status. must be one of [\"published\", \"unpublished\"]\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "document title\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/apiProductSpecification:ApiProductSpecification": {
            "description": "APIProductSpecification Resource\n",
            "properties": {
                "apiProductId": {
                    "type": "string",
                    "description": "The API product identifier\n"
                },
                "apiProductVersionId": {
                    "type": "string",
                    "description": "The API product version identifier\n"
                },
                "content": {
                    "type": "string",
                    "description": "The base64 encoded contents of the API product version specification\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the API product version specification\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "required": [
                "apiProductId",
                "apiProductVersionId",
                "content",
                "createdAt",
                "name",
                "updatedAt"
            ],
            "inputProperties": {
                "apiProductId": {
                    "type": "string",
                    "description": "The API product identifier\n"
                },
                "apiProductVersionId": {
                    "type": "string",
                    "description": "The API product version identifier\n"
                },
                "content": {
                    "type": "string",
                    "description": "The base64 encoded contents of the API product version specification\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the API product version specification\n"
                }
            },
            "requiredInputs": [
                "apiProductId",
                "apiProductVersionId",
                "content"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiProductSpecification resources.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string",
                        "description": "The API product identifier\n"
                    },
                    "apiProductVersionId": {
                        "type": "string",
                        "description": "The API product version identifier\n"
                    },
                    "content": {
                        "type": "string",
                        "description": "The base64 encoded contents of the API product version specification\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the API product version specification\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/apiProductVersion:ApiProductVersion": {
            "description": "APIProductVersion Resource\n",
            "properties": {
                "apiProductId": {
                    "type": "string",
                    "description": "The API Product ID\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Indicates if the version of the API product is deprecated. Applies deprecation or removes deprecation from all related portal product versions. This field is deprecated: Use [PortalProductVersion.deprecated](https://docs.konghq.com/konnect/api/portal-management/latest/#/Portal%20Product%20Versions/create-portal-product-version) instead.\n"
                },
                "gatewayService": {
                    "$ref": "#/types/konnect:index/ApiProductVersionGatewayService:ApiProductVersionGatewayService"
                },
                "name": {
                    "type": "string",
                    "description": "The version name of the API product version.\n"
                },
                "portals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/ApiProductVersionPortal:ApiProductVersionPortal"
                    },
                    "description": "The list of portals which this API product version is configured for\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "required": [
                "apiProductId",
                "createdAt",
                "deprecated",
                "gatewayService",
                "name",
                "portals",
                "updatedAt"
            ],
            "inputProperties": {
                "apiProductId": {
                    "type": "string",
                    "description": "The API Product ID\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Indicates if the version of the API product is deprecated. Applies deprecation or removes deprecation from all related portal product versions. This field is deprecated: Use [PortalProductVersion.deprecated](https://docs.konghq.com/konnect/api/portal-management/latest/#/Portal%20Product%20Versions/create-portal-product-version) instead.\n"
                },
                "gatewayService": {
                    "$ref": "#/types/konnect:index/ApiProductVersionGatewayService:ApiProductVersionGatewayService"
                },
                "name": {
                    "type": "string",
                    "description": "The version name of the API product version.\n"
                }
            },
            "requiredInputs": [
                "apiProductId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiProductVersion resources.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string",
                        "description": "The API Product ID\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Indicates if the version of the API product is deprecated. Applies deprecation or removes deprecation from all related portal product versions. This field is deprecated: Use [PortalProductVersion.deprecated](https://docs.konghq.com/konnect/api/portal-management/latest/#/Portal%20Product%20Versions/create-portal-product-version) instead.\n"
                    },
                    "gatewayService": {
                        "$ref": "#/types/konnect:index/ApiProductVersionGatewayService:ApiProductVersionGatewayService"
                    },
                    "name": {
                        "type": "string",
                        "description": "The version name of the API product version.\n"
                    },
                    "portals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/ApiProductVersionPortal:ApiProductVersionPortal"
                        },
                        "description": "The list of portals which this API product version is configured for\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/applicationAuthStrategy:ApplicationAuthStrategy": {
            "description": "ApplicationAuthStrategy Resource\n",
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "At least one published product version is using this auth strategy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.\n"
                },
                "keyAuth": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyKeyAuth:ApplicationAuthStrategyKeyAuth",
                    "description": "Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyOpenidConnect:ApplicationAuthStrategyOpenidConnect",
                    "description": "Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.\n"
                }
            },
            "required": [
                "active",
                "displayName",
                "keyAuth",
                "name",
                "openidConnect"
            ],
            "inputProperties": {
                "keyAuth": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyKeyAuth:ApplicationAuthStrategyKeyAuth",
                    "description": "Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.\n"
                },
                "openidConnect": {
                    "$ref": "#/types/konnect:index/ApplicationAuthStrategyOpenidConnect:ApplicationAuthStrategyOpenidConnect",
                    "description": "Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApplicationAuthStrategy resources.\n",
                "properties": {
                    "active": {
                        "type": "boolean",
                        "description": "At least one published product version is using this auth strategy.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.\n"
                    },
                    "keyAuth": {
                        "$ref": "#/types/konnect:index/ApplicationAuthStrategyKeyAuth:ApplicationAuthStrategyKeyAuth",
                        "description": "Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.\n"
                    },
                    "openidConnect": {
                        "$ref": "#/types/konnect:index/ApplicationAuthStrategyOpenidConnect:ApplicationAuthStrategyOpenidConnect",
                        "description": "Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/cloudGatewayConfiguration:CloudGatewayConfiguration": {
            "description": "CloudGatewayConfiguration Resource\n",
            "properties": {
                "apiAccess": {
                    "type": "string",
                    "description": "Type of API access data-plane groups will support for a configuration. must be one of [\"private\", \"public\", \"private+public\"]; Default: \"private+public\"\n"
                },
                "controlPlaneGeo": {
                    "type": "string",
                    "description": "Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of [\"us\", \"eu\", \"au\"]\n"
                },
                "controlPlaneId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of configuration creation date.\n"
                },
                "dataplaneGroupConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupConfig:CloudGatewayConfigurationDataplaneGroupConfig"
                    },
                    "description": "Object that describes where data-planes will be deployed to, along with how many instances.\n"
                },
                "dataplaneGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroup:CloudGatewayConfigurationDataplaneGroup"
                    },
                    "description": "List of data-plane groups that describe where to deploy instances, along with how many instances.\n"
                },
                "entityVersion": {
                    "type": "number",
                    "description": "Positive, monotonically increasing version integer, to serialize configuration changes.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of configuration update date.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Supported gateway version.\n"
                }
            },
            "required": [
                "apiAccess",
                "controlPlaneGeo",
                "controlPlaneId",
                "createdAt",
                "dataplaneGroupConfigs",
                "dataplaneGroups",
                "entityVersion",
                "updatedAt",
                "version"
            ],
            "inputProperties": {
                "apiAccess": {
                    "type": "string",
                    "description": "Type of API access data-plane groups will support for a configuration. must be one of [\"private\", \"public\", \"private+public\"]; Default: \"private+public\"\n"
                },
                "controlPlaneGeo": {
                    "type": "string",
                    "description": "Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of [\"us\", \"eu\", \"au\"]\n"
                },
                "controlPlaneId": {
                    "type": "string"
                },
                "dataplaneGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroup:CloudGatewayConfigurationDataplaneGroup"
                    },
                    "description": "List of data-plane groups that describe where to deploy instances, along with how many instances.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Supported gateway version.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneGeo",
                "controlPlaneId",
                "dataplaneGroups",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudGatewayConfiguration resources.\n",
                "properties": {
                    "apiAccess": {
                        "type": "string",
                        "description": "Type of API access data-plane groups will support for a configuration. must be one of [\"private\", \"public\", \"private+public\"]; Default: \"private+public\"\n"
                    },
                    "controlPlaneGeo": {
                        "type": "string",
                        "description": "Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of [\"us\", \"eu\", \"au\"]\n"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of configuration creation date.\n"
                    },
                    "dataplaneGroupConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroupConfig:CloudGatewayConfigurationDataplaneGroupConfig"
                        },
                        "description": "Object that describes where data-planes will be deployed to, along with how many instances.\n"
                    },
                    "dataplaneGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/CloudGatewayConfigurationDataplaneGroup:CloudGatewayConfigurationDataplaneGroup"
                        },
                        "description": "List of data-plane groups that describe where to deploy instances, along with how many instances.\n"
                    },
                    "entityVersion": {
                        "type": "number",
                        "description": "Positive, monotonically increasing version integer, to serialize configuration changes.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of configuration update date.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Supported gateway version.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/cloudGatewayCustomDomain:CloudGatewayCustomDomain": {
            "description": "CloudGatewayCustomDomain Resource\n",
            "properties": {
                "certificateId": {
                    "type": "string",
                    "description": "Certificate ID for the certificate representing this domain and stored on data-planes for this\ncontrol-plane. Can be retrieved via the control-planes API for this custom domain's control-plane.\n"
                },
                "controlPlaneGeo": {
                    "type": "string",
                    "description": "Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\"]\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of custom domain creation date.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name of the custom domain. Requires replacement if changed.\n"
                },
                "entityVersion": {
                    "type": "integer",
                    "description": "Monotonically-increasing version count of the custom domain, to indicate the order of updates to the custom\ndomain.\n"
                },
                "sniId": {
                    "type": "string",
                    "description": "Server Name Indication ID for this domain and stored on data-planes for this control-plane. Can be retrieved\nvia the control-planes API for this custom domain's control-plane.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the custom domain. must be one of [\"created\", \"initializing\", \"ready\", \"terminating\", \"terminated\", \"error\"]\n"
                },
                "stateMetadata": {
                    "$ref": "#/types/konnect:index/CloudGatewayCustomDomainStateMetadata:CloudGatewayCustomDomainStateMetadata",
                    "description": "Metadata describing the backing state of the custom domain and why it may be in an erroneous state.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of custom domain update date.\n"
                }
            },
            "required": [
                "certificateId",
                "controlPlaneGeo",
                "controlPlaneId",
                "createdAt",
                "domain",
                "entityVersion",
                "sniId",
                "state",
                "stateMetadata",
                "updatedAt"
            ],
            "inputProperties": {
                "controlPlaneGeo": {
                    "type": "string",
                    "description": "Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\"]\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain name of the custom domain. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneGeo",
                "controlPlaneId",
                "domain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudGatewayCustomDomain resources.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "Certificate ID for the certificate representing this domain and stored on data-planes for this\ncontrol-plane. Can be retrieved via the control-planes API for this custom domain's control-plane.\n"
                    },
                    "controlPlaneGeo": {
                        "type": "string",
                        "description": "Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\"]\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of custom domain creation date.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain name of the custom domain. Requires replacement if changed.\n"
                    },
                    "entityVersion": {
                        "type": "integer",
                        "description": "Monotonically-increasing version count of the custom domain, to indicate the order of updates to the custom\ndomain.\n"
                    },
                    "sniId": {
                        "type": "string",
                        "description": "Server Name Indication ID for this domain and stored on data-planes for this control-plane. Can be retrieved\nvia the control-planes API for this custom domain's control-plane.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the custom domain. must be one of [\"created\", \"initializing\", \"ready\", \"terminating\", \"terminated\", \"error\"]\n"
                    },
                    "stateMetadata": {
                        "$ref": "#/types/konnect:index/CloudGatewayCustomDomainStateMetadata:CloudGatewayCustomDomainStateMetadata",
                        "description": "Metadata describing the backing state of the custom domain and why it may be in an erroneous state.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of custom domain update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/cloudGatewayNetwork:CloudGatewayNetwork": {
            "description": "CloudGatewayNetwork Resource\n",
            "properties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of availability zones that the network is attached to. Requires replacement if changed.\n"
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "CIDR block configuration for the network. Requires replacement if changed.\n"
                },
                "cloudGatewayProviderAccountId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "configurationReferenceCount": {
                    "type": "integer",
                    "description": "The number of configurations that reference this network.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of network creation date.\n"
                },
                "ddosProtection": {
                    "type": "boolean",
                    "description": "Whether DDOS protection is enabled for the network. Requires replacement if changed.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Whether the network is a default network or not. Default networks are Networks that are created\nautomatically by Konnect when an organization is linked to a provider account.\n"
                },
                "entityVersion": {
                    "type": "integer",
                    "description": "Monotonically-increasing version count of the network, to indicate the order of updates to the network.\n"
                },
                "firewall": {
                    "$ref": "#/types/konnect:index/CloudGatewayNetworkFirewall:CloudGatewayNetworkFirewall",
                    "description": "Firewall configuration for a network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name of the network.\n"
                },
                "providerMetadata": {
                    "$ref": "#/types/konnect:index/CloudGatewayNetworkProviderMetadata:CloudGatewayNetworkProviderMetadata",
                    "description": "Metadata describing attributes returned by cloud-provider for the network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region ID for cloud provider region. Requires replacement if changed.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the network. must be one of [\"created\", \"initializing\", \"offline\", \"ready\", \"terminating\", \"terminated\"]\n"
                },
                "transitGatewayCount": {
                    "type": "integer",
                    "description": "The number of transit gateways attached to this network.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of network update date.\n"
                }
            },
            "required": [
                "availabilityZones",
                "cidrBlock",
                "cloudGatewayProviderAccountId",
                "configurationReferenceCount",
                "createdAt",
                "ddosProtection",
                "default",
                "entityVersion",
                "firewall",
                "name",
                "providerMetadata",
                "region",
                "state",
                "transitGatewayCount",
                "updatedAt"
            ],
            "inputProperties": {
                "availabilityZones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of availability zones that the network is attached to. Requires replacement if changed.\n"
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "CIDR block configuration for the network. Requires replacement if changed.\n"
                },
                "cloudGatewayProviderAccountId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "ddosProtection": {
                    "type": "boolean",
                    "description": "Whether DDOS protection is enabled for the network. Requires replacement if changed.\n"
                },
                "firewall": {
                    "$ref": "#/types/konnect:index/CloudGatewayNetworkFirewall:CloudGatewayNetworkFirewall",
                    "description": "Firewall configuration for a network.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name of the network.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region ID for cloud provider region. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "availabilityZones",
                "cidrBlock",
                "cloudGatewayProviderAccountId",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudGatewayNetwork resources.\n",
                "properties": {
                    "availabilityZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of availability zones that the network is attached to. Requires replacement if changed.\n"
                    },
                    "cidrBlock": {
                        "type": "string",
                        "description": "CIDR block configuration for the network. Requires replacement if changed.\n"
                    },
                    "cloudGatewayProviderAccountId": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "configurationReferenceCount": {
                        "type": "integer",
                        "description": "The number of configurations that reference this network.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of network creation date.\n"
                    },
                    "ddosProtection": {
                        "type": "boolean",
                        "description": "Whether DDOS protection is enabled for the network. Requires replacement if changed.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Whether the network is a default network or not. Default networks are Networks that are created\nautomatically by Konnect when an organization is linked to a provider account.\n"
                    },
                    "entityVersion": {
                        "type": "integer",
                        "description": "Monotonically-increasing version count of the network, to indicate the order of updates to the network.\n"
                    },
                    "firewall": {
                        "$ref": "#/types/konnect:index/CloudGatewayNetworkFirewall:CloudGatewayNetworkFirewall",
                        "description": "Firewall configuration for a network.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-readable name of the network.\n"
                    },
                    "providerMetadata": {
                        "$ref": "#/types/konnect:index/CloudGatewayNetworkProviderMetadata:CloudGatewayNetworkProviderMetadata",
                        "description": "Metadata describing attributes returned by cloud-provider for the network.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region ID for cloud provider region. Requires replacement if changed.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the network. must be one of [\"created\", \"initializing\", \"offline\", \"ready\", \"terminating\", \"terminated\"]\n"
                    },
                    "transitGatewayCount": {
                        "type": "integer",
                        "description": "The number of transit gateways attached to this network.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of network update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/cloudGatewayTransitGateway:CloudGatewayTransitGateway": {
            "description": "CloudGatewayTransitGateway Resource\n",
            "properties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning\nnetwork.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of transit gateway creation date.\n"
                },
                "dnsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/CloudGatewayTransitGatewayDnsConfig:CloudGatewayTransitGatewayDnsConfig"
                    },
                    "description": "List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.\nRequires replacement if changed.\n"
                },
                "entityVersion": {
                    "type": "integer",
                    "description": "Monotonically-increasing version count of the transit gateway, to indicate the order of updates to the transit gateway.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name of the transit gateway. Requires replacement if changed.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network to operate on. Requires replacement if changed.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State of the transit gateway. must be one of [\"created\", \"initializing\", \"ready\", \"terminating\", \"terminated\"]\n"
                },
                "transitGatewayAttachmentConfig": {
                    "$ref": "#/types/konnect:index/CloudGatewayTransitGatewayTransitGatewayAttachmentConfig:CloudGatewayTransitGatewayTransitGatewayAttachmentConfig",
                    "description": "Requires replacement if changed.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An RFC-3339 timestamp representation of transit gateway update date.\n"
                }
            },
            "required": [
                "cidrBlocks",
                "createdAt",
                "dnsConfigs",
                "entityVersion",
                "name",
                "networkId",
                "state",
                "transitGatewayAttachmentConfig",
                "updatedAt"
            ],
            "inputProperties": {
                "cidrBlocks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning\nnetwork.\n"
                },
                "dnsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/CloudGatewayTransitGatewayDnsConfig:CloudGatewayTransitGatewayDnsConfig"
                    },
                    "description": "List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.\nRequires replacement if changed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name of the transit gateway. Requires replacement if changed.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "The network to operate on. Requires replacement if changed.\n"
                },
                "transitGatewayAttachmentConfig": {
                    "$ref": "#/types/konnect:index/CloudGatewayTransitGatewayTransitGatewayAttachmentConfig:CloudGatewayTransitGatewayTransitGatewayAttachmentConfig",
                    "description": "Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "cidrBlocks",
                "networkId",
                "transitGatewayAttachmentConfig"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudGatewayTransitGateway resources.\n",
                "properties": {
                    "cidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning\nnetwork.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of transit gateway creation date.\n"
                    },
                    "dnsConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/CloudGatewayTransitGatewayDnsConfig:CloudGatewayTransitGatewayDnsConfig"
                        },
                        "description": "List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.\nRequires replacement if changed.\n"
                    },
                    "entityVersion": {
                        "type": "integer",
                        "description": "Monotonically-increasing version count of the transit gateway, to indicate the order of updates to the transit gateway.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-readable name of the transit gateway. Requires replacement if changed.\n"
                    },
                    "networkId": {
                        "type": "string",
                        "description": "The network to operate on. Requires replacement if changed.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "State of the transit gateway. must be one of [\"created\", \"initializing\", \"ready\", \"terminating\", \"terminated\"]\n"
                    },
                    "transitGatewayAttachmentConfig": {
                        "$ref": "#/types/konnect:index/CloudGatewayTransitGatewayTransitGatewayAttachmentConfig:CloudGatewayTransitGatewayTransitGatewayAttachmentConfig",
                        "description": "Requires replacement if changed.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An RFC-3339 timestamp representation of transit gateway update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayAcl:GatewayAcl": {
            "description": "GatewayACL Resource\n",
            "properties": {
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayAclConsumer:GatewayAclConsumer"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "required": [
                "consumer",
                "consumerId",
                "controlPlaneId",
                "createdAt",
                "group",
                "tags"
            ],
            "inputProperties": {
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "consumerId",
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayAcl resources.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayAclConsumer:GatewayAclConsumer"
                    },
                    "consumerId": {
                        "type": "string",
                        "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "group": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayBasicAuth:GatewayBasicAuth": {
            "description": "GatewayBasicAuth Resource\n",
            "properties": {
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayBasicAuthConsumer:GatewayBasicAuthConsumer"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                }
            },
            "required": [
                "consumer",
                "consumerId",
                "controlPlaneId",
                "createdAt",
                "tags",
                "username"
            ],
            "inputProperties": {
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "consumerId",
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayBasicAuth resources.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayBasicAuthConsumer:GatewayBasicAuthConsumer"
                    },
                    "consumerId": {
                        "type": "string",
                        "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n",
                        "secret": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Requires replacement if changed.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayCaCertificate:GatewayCaCertificate": {
            "description": "GatewayCACertificate Resource\n",
            "properties": {
                "cert": {
                    "type": "string",
                    "description": "PEM-encoded public certificate of the CA.\n"
                },
                "certDigest": {
                    "type": "string",
                    "description": "SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Certificate for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "cert",
                "certDigest",
                "controlPlaneId",
                "createdAt",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "cert": {
                    "type": "string",
                    "description": "PEM-encoded public certificate of the CA.\n"
                },
                "certDigest": {
                    "type": "string",
                    "description": "SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Certificate for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayCaCertificate resources.\n",
                "properties": {
                    "cert": {
                        "type": "string",
                        "description": "PEM-encoded public certificate of the CA.\n"
                    },
                    "certDigest": {
                        "type": "string",
                        "description": "SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Certificate for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayCertificate:GatewayCertificate": {
            "description": "GatewayCertificate Resource\n",
            "properties": {
                "cert": {
                    "type": "string",
                    "description": "PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "certAlt": {
                    "type": "string",
                    "description": "PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "key": {
                    "type": "string",
                    "description": "PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "keyAlt": {
                    "type": "string",
                    "description": "PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Certificate for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "cert",
                "certAlt",
                "controlPlaneId",
                "createdAt",
                "key",
                "keyAlt",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "cert": {
                    "type": "string",
                    "description": "PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "certAlt": {
                    "type": "string",
                    "description": "PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "key": {
                    "type": "string",
                    "description": "PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "keyAlt": {
                    "type": "string",
                    "description": "PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Certificate for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayCertificate resources.\n",
                "properties": {
                    "cert": {
                        "type": "string",
                        "description": "PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                    },
                    "certAlt": {
                        "type": "string",
                        "description": "PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                    },
                    "keyAlt": {
                        "type": "string",
                        "description": "PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Certificate for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayConsumer:GatewayConsumer": {
            "description": "GatewayConsumer Resource\n",
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "customId": {
                    "type": "string",
                    "description": "Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Consumer for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The unique username of the Consumer. You must send either this field or `custom_id` with the request.\n"
                }
            },
            "required": [
                "controlPlaneId",
                "createdAt",
                "customId",
                "tags",
                "updatedAt",
                "username"
            ],
            "inputProperties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "customId": {
                    "type": "string",
                    "description": "Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Consumer for grouping and filtering.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The unique username of the Consumer. You must send either this field or `custom_id` with the request.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayConsumer resources.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "customId": {
                        "type": "string",
                        "description": "Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Consumer for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The unique username of the Consumer. You must send either this field or `custom_id` with the request.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayConsumerGroup:GatewayConsumerGroup": {
            "description": "GatewayConsumerGroup Resource\n",
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "controlPlaneId",
                "createdAt",
                "name",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayConsumerGroup resources.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayConsumerGroupMember:GatewayConsumerGroupMember": {
            "description": "GatewayConsumerGroupMember Resource\n",
            "properties": {
                "consumerGroupId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                }
            },
            "required": [
                "consumerGroupId",
                "controlPlaneId"
            ],
            "inputProperties": {
                "consumerGroupId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "consumerGroupId",
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayConsumerGroupMember resources.\n",
                "properties": {
                    "consumerGroupId": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "consumerId": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayControlPlane:GatewayControlPlane": {
            "description": "GatewayControlPlane Resource\n",
            "properties": {
                "authType": {
                    "type": "string",
                    "description": "The auth type value of the cluster associated with the Runtime Group. must be one of [\"pinned*client*certs\", \"pki*client*certs\"]\n"
                },
                "cloudGateway": {
                    "type": "boolean",
                    "description": "Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of [\"CLUSTER*TYPE*CONTROL*PLANE\", \"CLUSTER*TYPE*HYBRID\", \"CLUSTER*TYPE*K8S*INGRESS*CONTROLLER\", \"CLUSTER*TYPE*CONTROL*PLANE*GROUP\", \"CLUSTER*TYPE_SERVERLESS\"]\n"
                },
                "config": {
                    "$ref": "#/types/konnect:index/GatewayControlPlaneConfig:GatewayControlPlaneConfig",
                    "description": "CP configuration object for related access endpoints.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the control plane in Konnect.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the control plane.\n"
                },
                "proxyUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayControlPlaneProxyUrl:GatewayControlPlaneProxyUrl"
                    },
                    "description": "Array of proxy URLs associated with reaching the data-planes connected to a control-plane.\n"
                }
            },
            "required": [
                "config",
                "description",
                "labels",
                "name"
            ],
            "inputProperties": {
                "authType": {
                    "type": "string",
                    "description": "The auth type value of the cluster associated with the Runtime Group. must be one of [\"pinned*client*certs\", \"pki*client*certs\"]\n"
                },
                "cloudGateway": {
                    "type": "boolean",
                    "description": "Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of [\"CLUSTER*TYPE*CONTROL*PLANE\", \"CLUSTER*TYPE*HYBRID\", \"CLUSTER*TYPE*K8S*INGRESS*CONTROLLER\", \"CLUSTER*TYPE*CONTROL*PLANE*GROUP\", \"CLUSTER*TYPE_SERVERLESS\"]\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the control plane in Konnect.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the control plane.\n"
                },
                "proxyUrls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayControlPlaneProxyUrl:GatewayControlPlaneProxyUrl"
                    },
                    "description": "Array of proxy URLs associated with reaching the data-planes connected to a control-plane.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayControlPlane resources.\n",
                "properties": {
                    "authType": {
                        "type": "string",
                        "description": "The auth type value of the cluster associated with the Runtime Group. must be one of [\"pinned*client*certs\", \"pki*client*certs\"]\n"
                    },
                    "cloudGateway": {
                        "type": "boolean",
                        "description": "Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of [\"CLUSTER*TYPE*CONTROL*PLANE\", \"CLUSTER*TYPE*HYBRID\", \"CLUSTER*TYPE*K8S*INGRESS*CONTROLLER\", \"CLUSTER*TYPE*CONTROL*PLANE*GROUP\", \"CLUSTER*TYPE_SERVERLESS\"]\n"
                    },
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayControlPlaneConfig:GatewayControlPlaneConfig",
                        "description": "CP configuration object for related access endpoints.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the control plane in Konnect.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the control plane.\n"
                    },
                    "proxyUrls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/GatewayControlPlaneProxyUrl:GatewayControlPlaneProxyUrl"
                        },
                        "description": "Array of proxy URLs associated with reaching the data-planes connected to a control-plane.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayControlPlaneMembership:GatewayControlPlaneMembership": {
            "description": "GatewayControlPlaneMembership Resource\n",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayControlPlaneMembershipMember:GatewayControlPlaneMembershipMember"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "inputProperties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayControlPlaneMembershipMember:GatewayControlPlaneMembershipMember"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayControlPlaneMembership resources.\n",
                "properties": {
                    "members": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/GatewayControlPlaneMembershipMember:GatewayControlPlaneMembershipMember"
                        },
                        "description": "Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayCustomPluginSchema:GatewayCustomPluginSchema": {
            "description": "GatewayCustomPluginSchema Resource\n",
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "An ISO-8604 timestamp representation of custom plugin schema creation date.\n"
                },
                "luaSchema": {
                    "type": "string",
                    "description": "The custom plugin schema; `jq -Rs '.' schema.lua`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The custom plugin name\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "An ISO-8604 timestamp representation of custom plugin schema update date.\n"
                }
            },
            "required": [
                "controlPlaneId",
                "createdAt",
                "luaSchema",
                "name",
                "updatedAt"
            ],
            "inputProperties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager\n"
                },
                "luaSchema": {
                    "type": "string",
                    "description": "The custom plugin schema; `jq -Rs '.' schema.lua`.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId",
                "luaSchema"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayCustomPluginSchema resources.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "An ISO-8604 timestamp representation of custom plugin schema creation date.\n"
                    },
                    "luaSchema": {
                        "type": "string",
                        "description": "The custom plugin schema; `jq -Rs '.' schema.lua`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The custom plugin name\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "An ISO-8604 timestamp representation of custom plugin schema update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayDataPlaneClientCertificate:GatewayDataPlaneClientCertificate": {
            "description": "GatewayDataPlaneClientCertificate Resource\n",
            "properties": {
                "cert": {
                    "type": "string",
                    "description": "JSON escaped string of the certificate. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Date certificate was created.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Date certificate was last updated.\n"
                }
            },
            "required": [
                "cert",
                "controlPlaneId",
                "createdAt",
                "updatedAt"
            ],
            "inputProperties": {
                "cert": {
                    "type": "string",
                    "description": "JSON escaped string of the certificate. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "cert",
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayDataPlaneClientCertificate resources.\n",
                "properties": {
                    "cert": {
                        "type": "string",
                        "description": "JSON escaped string of the certificate. Requires replacement if changed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Date certificate was created.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Date certificate was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayHmacAuth:GatewayHmacAuth": {
            "description": "GatewayHMACAuth Resource\n",
            "properties": {
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayHmacAuthConsumer:GatewayHmacAuthConsumer"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                }
            },
            "required": [
                "consumer",
                "consumerId",
                "controlPlaneId",
                "createdAt",
                "secret",
                "tags",
                "username"
            ],
            "inputProperties": {
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "consumerId",
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayHmacAuth resources.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayHmacAuthConsumer:GatewayHmacAuthConsumer"
                    },
                    "consumerId": {
                        "type": "string",
                        "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Requires replacement if changed.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayJwt:GatewayJwt": {
            "description": "GatewayJWT Resource\n",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Requires replacement if changed. ; must be one of [\"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"EdDSA\"]\n"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayJwtConsumer:GatewayJwtConsumer"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "required": [
                "algorithm",
                "consumer",
                "consumerId",
                "controlPlaneId",
                "createdAt",
                "key",
                "rsaPublicKey",
                "secret",
                "tags"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Requires replacement if changed. ; must be one of [\"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"EdDSA\"]\n"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "rsaPublicKey": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "consumerId",
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayJwt resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Requires replacement if changed. ; must be one of [\"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"ES256\", \"ES384\", \"ES512\", \"PS256\", \"PS384\", \"PS512\", \"EdDSA\"]\n"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayJwtConsumer:GatewayJwtConsumer"
                    },
                    "consumerId": {
                        "type": "string",
                        "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "rsaPublicKey": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayKey:GatewayKey": {
            "description": "GatewayKey Resource\n",
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "jwk": {
                    "type": "string",
                    "description": "A JSON Web Key represented as a string.\n"
                },
                "kid": {
                    "type": "string",
                    "description": "A unique identifier for a key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name to associate with the given keys.\n"
                },
                "pem": {
                    "$ref": "#/types/konnect:index/GatewayKeyPem:GatewayKeyPem",
                    "description": "A keypair in PEM format.\n"
                },
                "set": {
                    "$ref": "#/types/konnect:index/GatewayKeySet:GatewayKeySet",
                    "description": "The id (an UUID) of the key-set with which to associate the key.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Key for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "controlPlaneId",
                "createdAt",
                "jwk",
                "kid",
                "name",
                "pem",
                "set",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "jwk": {
                    "type": "string",
                    "description": "A JSON Web Key represented as a string.\n"
                },
                "kid": {
                    "type": "string",
                    "description": "A unique identifier for a key.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name to associate with the given keys.\n"
                },
                "pem": {
                    "$ref": "#/types/konnect:index/GatewayKeyPem:GatewayKeyPem",
                    "description": "A keypair in PEM format.\n"
                },
                "set": {
                    "$ref": "#/types/konnect:index/GatewayKeySet:GatewayKeySet",
                    "description": "The id (an UUID) of the key-set with which to associate the key.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Key for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayKey resources.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "jwk": {
                        "type": "string",
                        "description": "A JSON Web Key represented as a string.\n"
                    },
                    "kid": {
                        "type": "string",
                        "description": "A unique identifier for a key.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name to associate with the given keys.\n"
                    },
                    "pem": {
                        "$ref": "#/types/konnect:index/GatewayKeyPem:GatewayKeyPem",
                        "description": "A keypair in PEM format.\n"
                    },
                    "set": {
                        "$ref": "#/types/konnect:index/GatewayKeySet:GatewayKeySet",
                        "description": "The id (an UUID) of the key-set with which to associate the key.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Key for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayKeyAuth:GatewayKeyAuth": {
            "description": "GatewayKeyAuth Resource\n",
            "properties": {
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayKeyAuthConsumer:GatewayKeyAuthConsumer"
                },
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "required": [
                "consumer",
                "consumerId",
                "controlPlaneId",
                "createdAt",
                "key",
                "tags"
            ],
            "inputProperties": {
                "consumerId": {
                    "type": "string",
                    "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "consumerId",
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayKeyAuth resources.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayKeyAuthConsumer:GatewayKeyAuthConsumer"
                    },
                    "consumerId": {
                        "type": "string",
                        "description": "Consumer ID for nested entities. Requires replacement if changed.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayKeySet:GatewayKeySet": {
            "description": "GatewayKeySet Resource\n",
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "controlPlaneId",
                "createdAt",
                "name",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayKeySet resources.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginAcl:GatewayPluginAcl": {
            "description": "GatewayPluginACL Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclConfig:GatewayPluginAclConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclConsumer:GatewayPluginAclConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclConsumerGroup:GatewayPluginAclConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclRoute:GatewayPluginAclRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclService:GatewayPluginAclService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclConfig:GatewayPluginAclConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclConsumer:GatewayPluginAclConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclConsumerGroup:GatewayPluginAclConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclRoute:GatewayPluginAclRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAclService:GatewayPluginAclService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginAcl resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginAclConfig:GatewayPluginAclConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginAclConsumer:GatewayPluginAclConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginAclConsumerGroup:GatewayPluginAclConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginAclRoute:GatewayPluginAclRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginAclService:GatewayPluginAclService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginAiPromptDecorator:GatewayPluginAiPromptDecorator": {
            "description": "GatewayPluginAIPromptDecorator Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConfig:GatewayPluginAiPromptDecoratorConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConsumer:GatewayPluginAiPromptDecoratorConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConsumerGroup:GatewayPluginAiPromptDecoratorConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorRoute:GatewayPluginAiPromptDecoratorRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorService:GatewayPluginAiPromptDecoratorService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConfig:GatewayPluginAiPromptDecoratorConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConsumer:GatewayPluginAiPromptDecoratorConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConsumerGroup:GatewayPluginAiPromptDecoratorConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorRoute:GatewayPluginAiPromptDecoratorRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorService:GatewayPluginAiPromptDecoratorService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginAiPromptDecorator resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConfig:GatewayPluginAiPromptDecoratorConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConsumer:GatewayPluginAiPromptDecoratorConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorConsumerGroup:GatewayPluginAiPromptDecoratorConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorRoute:GatewayPluginAiPromptDecoratorRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptDecoratorService:GatewayPluginAiPromptDecoratorService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginAiPromptGuard:GatewayPluginAiPromptGuard": {
            "description": "GatewayPluginAIPromptGuard Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConfig:GatewayPluginAiPromptGuardConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConsumer:GatewayPluginAiPromptGuardConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConsumerGroup:GatewayPluginAiPromptGuardConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardRoute:GatewayPluginAiPromptGuardRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardService:GatewayPluginAiPromptGuardService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConfig:GatewayPluginAiPromptGuardConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConsumer:GatewayPluginAiPromptGuardConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConsumerGroup:GatewayPluginAiPromptGuardConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardRoute:GatewayPluginAiPromptGuardRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardService:GatewayPluginAiPromptGuardService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginAiPromptGuard resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConfig:GatewayPluginAiPromptGuardConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConsumer:GatewayPluginAiPromptGuardConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardConsumerGroup:GatewayPluginAiPromptGuardConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardRoute:GatewayPluginAiPromptGuardRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptGuardService:GatewayPluginAiPromptGuardService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginAiPromptTemplate:GatewayPluginAiPromptTemplate": {
            "description": "GatewayPluginAIPromptTemplate Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConfig:GatewayPluginAiPromptTemplateConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConsumer:GatewayPluginAiPromptTemplateConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConsumerGroup:GatewayPluginAiPromptTemplateConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateRoute:GatewayPluginAiPromptTemplateRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateService:GatewayPluginAiPromptTemplateService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConfig:GatewayPluginAiPromptTemplateConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConsumer:GatewayPluginAiPromptTemplateConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConsumerGroup:GatewayPluginAiPromptTemplateConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateRoute:GatewayPluginAiPromptTemplateRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateService:GatewayPluginAiPromptTemplateService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginAiPromptTemplate resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConfig:GatewayPluginAiPromptTemplateConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConsumer:GatewayPluginAiPromptTemplateConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateConsumerGroup:GatewayPluginAiPromptTemplateConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateRoute:GatewayPluginAiPromptTemplateRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiPromptTemplateService:GatewayPluginAiPromptTemplateService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginAiProxy:GatewayPluginAiProxy": {
            "description": "GatewayPluginAIProxy Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConfig:GatewayPluginAiProxyConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConsumer:GatewayPluginAiProxyConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConsumerGroup:GatewayPluginAiProxyConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyRoute:GatewayPluginAiProxyRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyService:GatewayPluginAiProxyService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConfig:GatewayPluginAiProxyConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConsumer:GatewayPluginAiProxyConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyConsumerGroup:GatewayPluginAiProxyConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyRoute:GatewayPluginAiProxyRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAiProxyService:GatewayPluginAiProxyService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginAiProxy resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiProxyConfig:GatewayPluginAiProxyConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiProxyConsumer:GatewayPluginAiProxyConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiProxyConsumerGroup:GatewayPluginAiProxyConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiProxyRoute:GatewayPluginAiProxyRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginAiProxyService:GatewayPluginAiProxyService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginAwsLambda:GatewayPluginAwsLambda": {
            "description": "GatewayPluginAWSLambda Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConfig:GatewayPluginAwsLambdaConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConsumer:GatewayPluginAwsLambdaConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConsumerGroup:GatewayPluginAwsLambdaConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaRoute:GatewayPluginAwsLambdaRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaService:GatewayPluginAwsLambdaService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConfig:GatewayPluginAwsLambdaConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConsumer:GatewayPluginAwsLambdaConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConsumerGroup:GatewayPluginAwsLambdaConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaRoute:GatewayPluginAwsLambdaRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaService:GatewayPluginAwsLambdaService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginAwsLambda resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConfig:GatewayPluginAwsLambdaConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConsumer:GatewayPluginAwsLambdaConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaConsumerGroup:GatewayPluginAwsLambdaConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaRoute:GatewayPluginAwsLambdaRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginAwsLambdaService:GatewayPluginAwsLambdaService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginBasicAuth:GatewayPluginBasicAuth": {
            "description": "GatewayPluginBasicAuth Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConfig:GatewayPluginBasicAuthConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConsumer:GatewayPluginBasicAuthConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConsumerGroup:GatewayPluginBasicAuthConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthRoute:GatewayPluginBasicAuthRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthService:GatewayPluginBasicAuthService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConfig:GatewayPluginBasicAuthConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConsumer:GatewayPluginBasicAuthConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConsumerGroup:GatewayPluginBasicAuthConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthRoute:GatewayPluginBasicAuthRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginBasicAuthService:GatewayPluginBasicAuthService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginBasicAuth resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConfig:GatewayPluginBasicAuthConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConsumer:GatewayPluginBasicAuthConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginBasicAuthConsumerGroup:GatewayPluginBasicAuthConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginBasicAuthRoute:GatewayPluginBasicAuthRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginBasicAuthService:GatewayPluginBasicAuthService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginCorrelationId:GatewayPluginCorrelationId": {
            "description": "GatewayPluginCorrelationID Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConfig:GatewayPluginCorrelationIdConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConsumer:GatewayPluginCorrelationIdConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConsumerGroup:GatewayPluginCorrelationIdConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdRoute:GatewayPluginCorrelationIdRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdService:GatewayPluginCorrelationIdService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConfig:GatewayPluginCorrelationIdConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConsumer:GatewayPluginCorrelationIdConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConsumerGroup:GatewayPluginCorrelationIdConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdRoute:GatewayPluginCorrelationIdRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdService:GatewayPluginCorrelationIdService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginCorrelationId resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConfig:GatewayPluginCorrelationIdConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConsumer:GatewayPluginCorrelationIdConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdConsumerGroup:GatewayPluginCorrelationIdConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdRoute:GatewayPluginCorrelationIdRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorrelationIdService:GatewayPluginCorrelationIdService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginCors:GatewayPluginCors": {
            "description": "GatewayPluginCORS Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsConfig:GatewayPluginCorsConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsConsumer:GatewayPluginCorsConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsConsumerGroup:GatewayPluginCorsConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsRoute:GatewayPluginCorsRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsService:GatewayPluginCorsService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsConfig:GatewayPluginCorsConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsConsumer:GatewayPluginCorsConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsConsumerGroup:GatewayPluginCorsConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsRoute:GatewayPluginCorsRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginCorsService:GatewayPluginCorsService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginCors resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorsConfig:GatewayPluginCorsConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorsConsumer:GatewayPluginCorsConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorsConsumerGroup:GatewayPluginCorsConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorsRoute:GatewayPluginCorsRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginCorsService:GatewayPluginCorsService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginExitTransformer:GatewayPluginExitTransformer": {
            "description": "GatewayPluginExitTransformer Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConfig:GatewayPluginExitTransformerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConsumer:GatewayPluginExitTransformerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConsumerGroup:GatewayPluginExitTransformerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerRoute:GatewayPluginExitTransformerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerService:GatewayPluginExitTransformerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConfig:GatewayPluginExitTransformerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConsumer:GatewayPluginExitTransformerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConsumerGroup:GatewayPluginExitTransformerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerRoute:GatewayPluginExitTransformerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginExitTransformerService:GatewayPluginExitTransformerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginExitTransformer resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConfig:GatewayPluginExitTransformerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConsumer:GatewayPluginExitTransformerConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginExitTransformerConsumerGroup:GatewayPluginExitTransformerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginExitTransformerRoute:GatewayPluginExitTransformerRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginExitTransformerService:GatewayPluginExitTransformerService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginFileLog:GatewayPluginFileLog": {
            "description": "GatewayPluginFileLog Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogConfig:GatewayPluginFileLogConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogConsumer:GatewayPluginFileLogConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogConsumerGroup:GatewayPluginFileLogConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogRoute:GatewayPluginFileLogRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogService:GatewayPluginFileLogService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogConfig:GatewayPluginFileLogConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogConsumer:GatewayPluginFileLogConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogConsumerGroup:GatewayPluginFileLogConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogRoute:GatewayPluginFileLogRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginFileLogService:GatewayPluginFileLogService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginFileLog resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginFileLogConfig:GatewayPluginFileLogConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginFileLogConsumer:GatewayPluginFileLogConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginFileLogConsumerGroup:GatewayPluginFileLogConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginFileLogRoute:GatewayPluginFileLogRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginFileLogService:GatewayPluginFileLogService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginIpRestriction:GatewayPluginIpRestriction": {
            "description": "GatewayPluginIPRestriction Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConfig:GatewayPluginIpRestrictionConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConsumer:GatewayPluginIpRestrictionConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConsumerGroup:GatewayPluginIpRestrictionConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionRoute:GatewayPluginIpRestrictionRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionService:GatewayPluginIpRestrictionService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConfig:GatewayPluginIpRestrictionConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConsumer:GatewayPluginIpRestrictionConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConsumerGroup:GatewayPluginIpRestrictionConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionRoute:GatewayPluginIpRestrictionRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionService:GatewayPluginIpRestrictionService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginIpRestriction resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConfig:GatewayPluginIpRestrictionConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConsumer:GatewayPluginIpRestrictionConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionConsumerGroup:GatewayPluginIpRestrictionConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionRoute:GatewayPluginIpRestrictionRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginIpRestrictionService:GatewayPluginIpRestrictionService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginJq:GatewayPluginJq": {
            "description": "GatewayPluginJQ Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConfig:GatewayPluginJqConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConsumer:GatewayPluginJqConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConsumerGroup:GatewayPluginJqConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqRoute:GatewayPluginJqRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqService:GatewayPluginJqService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConfig:GatewayPluginJqConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConsumer:GatewayPluginJqConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqConsumerGroup:GatewayPluginJqConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqRoute:GatewayPluginJqRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginJqService:GatewayPluginJqService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginJq resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginJqConfig:GatewayPluginJqConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginJqConsumer:GatewayPluginJqConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginJqConsumerGroup:GatewayPluginJqConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginJqRoute:GatewayPluginJqRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginJqService:GatewayPluginJqService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginJwt:GatewayPluginJwt": {
            "description": "GatewayPluginJWT Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtConfig:GatewayPluginJwtConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtConsumer:GatewayPluginJwtConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtConsumerGroup:GatewayPluginJwtConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtRoute:GatewayPluginJwtRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtService:GatewayPluginJwtService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtConfig:GatewayPluginJwtConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtConsumer:GatewayPluginJwtConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtConsumerGroup:GatewayPluginJwtConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtRoute:GatewayPluginJwtRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtService:GatewayPluginJwtService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginJwt resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtConfig:GatewayPluginJwtConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtConsumer:GatewayPluginJwtConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtConsumerGroup:GatewayPluginJwtConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtRoute:GatewayPluginJwtRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtService:GatewayPluginJwtService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginJwtSigner:GatewayPluginJwtSigner": {
            "description": "GatewayPluginJWTSigner Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConfig:GatewayPluginJwtSignerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConsumer:GatewayPluginJwtSignerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConsumerGroup:GatewayPluginJwtSignerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerRoute:GatewayPluginJwtSignerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerService:GatewayPluginJwtSignerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConfig:GatewayPluginJwtSignerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConsumer:GatewayPluginJwtSignerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConsumerGroup:GatewayPluginJwtSignerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerRoute:GatewayPluginJwtSignerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginJwtSignerService:GatewayPluginJwtSignerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginJwtSigner resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConfig:GatewayPluginJwtSignerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConsumer:GatewayPluginJwtSignerConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtSignerConsumerGroup:GatewayPluginJwtSignerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtSignerRoute:GatewayPluginJwtSignerRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginJwtSignerService:GatewayPluginJwtSignerService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginKeyAuth:GatewayPluginKeyAuth": {
            "description": "GatewayPluginKeyAuth Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConfig:GatewayPluginKeyAuthConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConsumer:GatewayPluginKeyAuthConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConsumerGroup:GatewayPluginKeyAuthConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthRoute:GatewayPluginKeyAuthRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthService:GatewayPluginKeyAuthService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConfig:GatewayPluginKeyAuthConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConsumer:GatewayPluginKeyAuthConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConsumerGroup:GatewayPluginKeyAuthConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthRoute:GatewayPluginKeyAuthRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginKeyAuthService:GatewayPluginKeyAuthService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginKeyAuth resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConfig:GatewayPluginKeyAuthConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConsumer:GatewayPluginKeyAuthConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginKeyAuthConsumerGroup:GatewayPluginKeyAuthConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginKeyAuthRoute:GatewayPluginKeyAuthRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginKeyAuthService:GatewayPluginKeyAuthService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginOauth2:GatewayPluginOauth2": {
            "description": "GatewayPluginOauth2 Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Config:GatewayPluginOauth2Config"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Consumer:GatewayPluginOauth2Consumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2ConsumerGroup:GatewayPluginOauth2ConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Route:GatewayPluginOauth2Route",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Service:GatewayPluginOauth2Service",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Config:GatewayPluginOauth2Config"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Consumer:GatewayPluginOauth2Consumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2ConsumerGroup:GatewayPluginOauth2ConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Route:GatewayPluginOauth2Route",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginOauth2Service:GatewayPluginOauth2Service",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginOauth2 resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginOauth2Config:GatewayPluginOauth2Config"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginOauth2Consumer:GatewayPluginOauth2Consumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginOauth2ConsumerGroup:GatewayPluginOauth2ConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginOauth2Route:GatewayPluginOauth2Route",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginOauth2Service:GatewayPluginOauth2Service",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginOpenidConnect:GatewayPluginOpenidConnect": {
            "description": "GatewayPluginOpenidConnect Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConfig:GatewayPluginOpenidConnectConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConsumer:GatewayPluginOpenidConnectConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConsumerGroup:GatewayPluginOpenidConnectConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectRoute:GatewayPluginOpenidConnectRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectService:GatewayPluginOpenidConnectService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConfig:GatewayPluginOpenidConnectConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConsumer:GatewayPluginOpenidConnectConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConsumerGroup:GatewayPluginOpenidConnectConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectRoute:GatewayPluginOpenidConnectRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectService:GatewayPluginOpenidConnectService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginOpenidConnect resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConfig:GatewayPluginOpenidConnectConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConsumer:GatewayPluginOpenidConnectConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectConsumerGroup:GatewayPluginOpenidConnectConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectRoute:GatewayPluginOpenidConnectRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpenidConnectService:GatewayPluginOpenidConnectService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginOpentelemetry:GatewayPluginOpentelemetry": {
            "description": "GatewayPluginOpentelemetry Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConfig:GatewayPluginOpentelemetryConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConsumer:GatewayPluginOpentelemetryConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConsumerGroup:GatewayPluginOpentelemetryConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryRoute:GatewayPluginOpentelemetryRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryService:GatewayPluginOpentelemetryService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConfig:GatewayPluginOpentelemetryConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConsumer:GatewayPluginOpentelemetryConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConsumerGroup:GatewayPluginOpentelemetryConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryRoute:GatewayPluginOpentelemetryRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryService:GatewayPluginOpentelemetryService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginOpentelemetry resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConfig:GatewayPluginOpentelemetryConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConsumer:GatewayPluginOpentelemetryConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryConsumerGroup:GatewayPluginOpentelemetryConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryRoute:GatewayPluginOpentelemetryRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginOpentelemetryService:GatewayPluginOpentelemetryService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginPostFunction:GatewayPluginPostFunction": {
            "description": "GatewayPluginPostFunction Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConfig:GatewayPluginPostFunctionConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConsumer:GatewayPluginPostFunctionConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConsumerGroup:GatewayPluginPostFunctionConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionRoute:GatewayPluginPostFunctionRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionService:GatewayPluginPostFunctionService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConfig:GatewayPluginPostFunctionConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConsumer:GatewayPluginPostFunctionConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConsumerGroup:GatewayPluginPostFunctionConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionRoute:GatewayPluginPostFunctionRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginPostFunctionService:GatewayPluginPostFunctionService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginPostFunction resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConfig:GatewayPluginPostFunctionConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConsumer:GatewayPluginPostFunctionConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginPostFunctionConsumerGroup:GatewayPluginPostFunctionConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginPostFunctionRoute:GatewayPluginPostFunctionRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginPostFunctionService:GatewayPluginPostFunctionService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginPreFunction:GatewayPluginPreFunction": {
            "description": "GatewayPluginPreFunction Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConfig:GatewayPluginPreFunctionConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConsumer:GatewayPluginPreFunctionConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConsumerGroup:GatewayPluginPreFunctionConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionRoute:GatewayPluginPreFunctionRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionService:GatewayPluginPreFunctionService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConfig:GatewayPluginPreFunctionConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConsumer:GatewayPluginPreFunctionConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConsumerGroup:GatewayPluginPreFunctionConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionRoute:GatewayPluginPreFunctionRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginPreFunctionService:GatewayPluginPreFunctionService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginPreFunction resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConfig:GatewayPluginPreFunctionConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConsumer:GatewayPluginPreFunctionConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginPreFunctionConsumerGroup:GatewayPluginPreFunctionConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginPreFunctionRoute:GatewayPluginPreFunctionRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginPreFunctionService:GatewayPluginPreFunctionService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginPrometheus:GatewayPluginPrometheus": {
            "description": "GatewayPluginPrometheus Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusConfig:GatewayPluginPrometheusConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusConsumer:GatewayPluginPrometheusConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusConsumerGroup:GatewayPluginPrometheusConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusRoute:GatewayPluginPrometheusRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusService:GatewayPluginPrometheusService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusConfig:GatewayPluginPrometheusConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusConsumer:GatewayPluginPrometheusConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusConsumerGroup:GatewayPluginPrometheusConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusRoute:GatewayPluginPrometheusRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginPrometheusService:GatewayPluginPrometheusService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginPrometheus resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginPrometheusConfig:GatewayPluginPrometheusConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginPrometheusConsumer:GatewayPluginPrometheusConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginPrometheusConsumerGroup:GatewayPluginPrometheusConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginPrometheusRoute:GatewayPluginPrometheusRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginPrometheusService:GatewayPluginPrometheusService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginProxyCache:GatewayPluginProxyCache": {
            "description": "GatewayPluginProxyCache Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConfig:GatewayPluginProxyCacheConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConsumer:GatewayPluginProxyCacheConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConsumerGroup:GatewayPluginProxyCacheConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheRoute:GatewayPluginProxyCacheRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheService:GatewayPluginProxyCacheService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConfig:GatewayPluginProxyCacheConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConsumer:GatewayPluginProxyCacheConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConsumerGroup:GatewayPluginProxyCacheConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheRoute:GatewayPluginProxyCacheRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginProxyCacheService:GatewayPluginProxyCacheService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginProxyCache resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConfig:GatewayPluginProxyCacheConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConsumer:GatewayPluginProxyCacheConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginProxyCacheConsumerGroup:GatewayPluginProxyCacheConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginProxyCacheRoute:GatewayPluginProxyCacheRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginProxyCacheService:GatewayPluginProxyCacheService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginRateLimiting:GatewayPluginRateLimiting": {
            "description": "GatewayPluginRateLimiting Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConfig:GatewayPluginRateLimitingConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConsumer:GatewayPluginRateLimitingConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConsumerGroup:GatewayPluginRateLimitingConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingRoute:GatewayPluginRateLimitingRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingService:GatewayPluginRateLimitingService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConfig:GatewayPluginRateLimitingConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConsumer:GatewayPluginRateLimitingConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConsumerGroup:GatewayPluginRateLimitingConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingRoute:GatewayPluginRateLimitingRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingService:GatewayPluginRateLimitingService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginRateLimiting resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConfig:GatewayPluginRateLimitingConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConsumer:GatewayPluginRateLimitingConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingConsumerGroup:GatewayPluginRateLimitingConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingRoute:GatewayPluginRateLimitingRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingService:GatewayPluginRateLimitingService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginRateLimitingAdvanced:GatewayPluginRateLimitingAdvanced": {
            "description": "GatewayPluginRateLimitingAdvanced Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConfig:GatewayPluginRateLimitingAdvancedConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConsumer:GatewayPluginRateLimitingAdvancedConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConsumerGroup:GatewayPluginRateLimitingAdvancedConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedRoute:GatewayPluginRateLimitingAdvancedRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedService:GatewayPluginRateLimitingAdvancedService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConfig:GatewayPluginRateLimitingAdvancedConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConsumer:GatewayPluginRateLimitingAdvancedConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConsumerGroup:GatewayPluginRateLimitingAdvancedConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedRoute:GatewayPluginRateLimitingAdvancedRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedService:GatewayPluginRateLimitingAdvancedService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginRateLimitingAdvanced resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConfig:GatewayPluginRateLimitingAdvancedConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConsumer:GatewayPluginRateLimitingAdvancedConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedConsumerGroup:GatewayPluginRateLimitingAdvancedConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedRoute:GatewayPluginRateLimitingAdvancedRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginRateLimitingAdvancedService:GatewayPluginRateLimitingAdvancedService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginRequestTermination:GatewayPluginRequestTermination": {
            "description": "GatewayPluginRequestTermination Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConfig:GatewayPluginRequestTerminationConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConsumer:GatewayPluginRequestTerminationConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConsumerGroup:GatewayPluginRequestTerminationConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationRoute:GatewayPluginRequestTerminationRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationService:GatewayPluginRequestTerminationService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConfig:GatewayPluginRequestTerminationConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConsumer:GatewayPluginRequestTerminationConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConsumerGroup:GatewayPluginRequestTerminationConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationRoute:GatewayPluginRequestTerminationRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationService:GatewayPluginRequestTerminationService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginRequestTermination resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConfig:GatewayPluginRequestTerminationConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConsumer:GatewayPluginRequestTerminationConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationConsumerGroup:GatewayPluginRequestTerminationConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationRoute:GatewayPluginRequestTerminationRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTerminationService:GatewayPluginRequestTerminationService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginRequestTransformer:GatewayPluginRequestTransformer": {
            "description": "GatewayPluginRequestTransformer Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfig:GatewayPluginRequestTransformerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConsumer:GatewayPluginRequestTransformerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConsumerGroup:GatewayPluginRequestTransformerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerRoute:GatewayPluginRequestTransformerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerService:GatewayPluginRequestTransformerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfig:GatewayPluginRequestTransformerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConsumer:GatewayPluginRequestTransformerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConsumerGroup:GatewayPluginRequestTransformerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerRoute:GatewayPluginRequestTransformerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerService:GatewayPluginRequestTransformerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginRequestTransformer resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConfig:GatewayPluginRequestTransformerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConsumer:GatewayPluginRequestTransformerConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerConsumerGroup:GatewayPluginRequestTransformerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerRoute:GatewayPluginRequestTransformerRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerService:GatewayPluginRequestTransformerService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginRequestTransformerAdvanced:GatewayPluginRequestTransformerAdvanced": {
            "description": "GatewayPluginRequestTransformerAdvanced Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfig:GatewayPluginRequestTransformerAdvancedConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConsumer:GatewayPluginRequestTransformerAdvancedConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConsumerGroup:GatewayPluginRequestTransformerAdvancedConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedRoute:GatewayPluginRequestTransformerAdvancedRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedService:GatewayPluginRequestTransformerAdvancedService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfig:GatewayPluginRequestTransformerAdvancedConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConsumer:GatewayPluginRequestTransformerAdvancedConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConsumerGroup:GatewayPluginRequestTransformerAdvancedConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedRoute:GatewayPluginRequestTransformerAdvancedRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedService:GatewayPluginRequestTransformerAdvancedService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginRequestTransformerAdvanced resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConfig:GatewayPluginRequestTransformerAdvancedConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConsumer:GatewayPluginRequestTransformerAdvancedConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedConsumerGroup:GatewayPluginRequestTransformerAdvancedConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedRoute:GatewayPluginRequestTransformerAdvancedRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginRequestTransformerAdvancedService:GatewayPluginRequestTransformerAdvancedService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginResponseTransformer:GatewayPluginResponseTransformer": {
            "description": "GatewayPluginResponseTransformer Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfig:GatewayPluginResponseTransformerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConsumer:GatewayPluginResponseTransformerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConsumerGroup:GatewayPluginResponseTransformerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerRoute:GatewayPluginResponseTransformerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerService:GatewayPluginResponseTransformerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfig:GatewayPluginResponseTransformerConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConsumer:GatewayPluginResponseTransformerConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConsumerGroup:GatewayPluginResponseTransformerConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerRoute:GatewayPluginResponseTransformerRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerService:GatewayPluginResponseTransformerService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginResponseTransformer resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConfig:GatewayPluginResponseTransformerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConsumer:GatewayPluginResponseTransformerConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerConsumerGroup:GatewayPluginResponseTransformerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerRoute:GatewayPluginResponseTransformerRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerService:GatewayPluginResponseTransformerService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginResponseTransformerAdvanced:GatewayPluginResponseTransformerAdvanced": {
            "description": "GatewayPluginResponseTransformerAdvanced Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfig:GatewayPluginResponseTransformerAdvancedConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConsumer:GatewayPluginResponseTransformerAdvancedConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConsumerGroup:GatewayPluginResponseTransformerAdvancedConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedRoute:GatewayPluginResponseTransformerAdvancedRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedService:GatewayPluginResponseTransformerAdvancedService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfig:GatewayPluginResponseTransformerAdvancedConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConsumer:GatewayPluginResponseTransformerAdvancedConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConsumerGroup:GatewayPluginResponseTransformerAdvancedConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedRoute:GatewayPluginResponseTransformerAdvancedRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedService:GatewayPluginResponseTransformerAdvancedService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginResponseTransformerAdvanced resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConfig:GatewayPluginResponseTransformerAdvancedConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConsumer:GatewayPluginResponseTransformerAdvancedConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedConsumerGroup:GatewayPluginResponseTransformerAdvancedConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedRoute:GatewayPluginResponseTransformerAdvancedRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginResponseTransformerAdvancedService:GatewayPluginResponseTransformerAdvancedService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginSaml:GatewayPluginSaml": {
            "description": "GatewayPluginSaml Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlConfig:GatewayPluginSamlConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlConsumer:GatewayPluginSamlConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlConsumerGroup:GatewayPluginSamlConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlRoute:GatewayPluginSamlRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlService:GatewayPluginSamlService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlConfig:GatewayPluginSamlConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlConsumer:GatewayPluginSamlConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlConsumerGroup:GatewayPluginSamlConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlRoute:GatewayPluginSamlRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginSamlService:GatewayPluginSamlService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginSaml resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginSamlConfig:GatewayPluginSamlConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginSamlConsumer:GatewayPluginSamlConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginSamlConsumerGroup:GatewayPluginSamlConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginSamlRoute:GatewayPluginSamlRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginSamlService:GatewayPluginSamlService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayPluginStatsd:GatewayPluginStatsd": {
            "description": "GatewayPluginStatsd Resource\n",
            "properties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdConfig:GatewayPluginStatsdConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdConsumer:GatewayPluginStatsdConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdConsumerGroup:GatewayPluginStatsdConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdRoute:GatewayPluginStatsdRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdService:GatewayPluginStatsdService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "consumer",
                "consumerGroup",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "instanceName",
                "protocols",
                "route",
                "service",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdConfig:GatewayPluginStatsdConfig"
                },
                "consumer": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdConsumer:GatewayPluginStatsdConsumer",
                    "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                },
                "consumerGroup": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdConsumerGroup:GatewayPluginStatsdConsumerGroup"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the plugin is applied.\n"
                },
                "instanceName": {
                    "type": "string"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                },
                "route": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdRoute:GatewayPluginStatsdRoute",
                    "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayPluginStatsdService:GatewayPluginStatsdService",
                    "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayPluginStatsd resources.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/GatewayPluginStatsdConfig:GatewayPluginStatsdConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/GatewayPluginStatsdConsumer:GatewayPluginStatsdConsumer",
                        "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.\n"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/GatewayPluginStatsdConsumerGroup:GatewayPluginStatsdConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the plugin is applied.\n"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `\"tcp\"` and `\"tls\"`.\n"
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/GatewayPluginStatsdRoute:GatewayPluginStatsdRoute",
                        "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayPluginStatsdService:GatewayPluginStatsdService",
                        "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Plugin for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayRoute:GatewayRoute": {
            "description": "GatewayRoute Resource\n",
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayRouteDestination:GatewayRouteDestination"
                    },
                    "description": "A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of domain names that match this Route. Note that the hosts value is case sensitive.\n"
                },
                "httpsRedirectStatusCode": {
                    "type": "integer",
                    "description": "The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of [\"426\", \"301\", \"302\", \"307\", \"308\"]\n"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of HTTP methods that match this Route.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named \"test\" and \"Test\".\n"
                },
                "pathHandling": {
                    "type": "string",
                    "description": "Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of [\"v0\", \"v1\"]\n"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of paths that match this Route.\n"
                },
                "preserveHost": {
                    "type": "boolean",
                    "description": "When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `\"https\"`, HTTP requests are answered with an upgrade error. When set to only `\"http\"`, HTTPS requests are answered with an error.\n"
                },
                "regexPriority": {
                    "type": "integer",
                    "description": "A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).\n"
                },
                "requestBuffering": {
                    "type": "boolean",
                    "description": "Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.\n"
                },
                "responseBuffering": {
                    "type": "boolean",
                    "description": "Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayRouteService:GatewayRouteService",
                    "description": "The Service this Route is associated to. This is where the Route proxies traffic to.\n"
                },
                "snis": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SNIs that match this Route when using stream routing.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayRouteSource:GatewayRouteSource"
                    },
                    "description": "A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".\n"
                },
                "stripPath": {
                    "type": "boolean",
                    "description": "When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Route for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "controlPlaneId",
                "createdAt",
                "destinations",
                "headers",
                "hosts",
                "httpsRedirectStatusCode",
                "methods",
                "name",
                "pathHandling",
                "paths",
                "preserveHost",
                "protocols",
                "regexPriority",
                "requestBuffering",
                "responseBuffering",
                "service",
                "snis",
                "sources",
                "stripPath",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "destinations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayRouteDestination:GatewayRouteDestination"
                    },
                    "description": "A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".\n"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.\n"
                },
                "hosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of domain names that match this Route. Note that the hosts value is case sensitive.\n"
                },
                "httpsRedirectStatusCode": {
                    "type": "integer",
                    "description": "The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of [\"426\", \"301\", \"302\", \"307\", \"308\"]\n"
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of HTTP methods that match this Route.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named \"test\" and \"Test\".\n"
                },
                "pathHandling": {
                    "type": "string",
                    "description": "Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of [\"v0\", \"v1\"]\n"
                },
                "paths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of paths that match this Route.\n"
                },
                "preserveHost": {
                    "type": "boolean",
                    "description": "When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `\"https\"`, HTTP requests are answered with an upgrade error. When set to only `\"http\"`, HTTPS requests are answered with an error.\n"
                },
                "regexPriority": {
                    "type": "integer",
                    "description": "A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).\n"
                },
                "requestBuffering": {
                    "type": "boolean",
                    "description": "Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.\n"
                },
                "responseBuffering": {
                    "type": "boolean",
                    "description": "Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.\n"
                },
                "service": {
                    "$ref": "#/types/konnect:index/GatewayRouteService:GatewayRouteService",
                    "description": "The Service this Route is associated to. This is where the Route proxies traffic to.\n"
                },
                "snis": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of SNIs that match this Route when using stream routing.\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/GatewayRouteSource:GatewayRouteSource"
                    },
                    "description": "A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".\n"
                },
                "stripPath": {
                    "type": "boolean",
                    "description": "When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Route for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayRoute resources.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "destinations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/GatewayRouteDestination:GatewayRouteDestination"
                        },
                        "description": "A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".\n"
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.\n"
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of domain names that match this Route. Note that the hosts value is case sensitive.\n"
                    },
                    "httpsRedirectStatusCode": {
                        "type": "integer",
                        "description": "The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of [\"426\", \"301\", \"302\", \"307\", \"308\"]\n"
                    },
                    "methods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of HTTP methods that match this Route.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named \"test\" and \"Test\".\n"
                    },
                    "pathHandling": {
                        "type": "string",
                        "description": "Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of [\"v0\", \"v1\"]\n"
                    },
                    "paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of paths that match this Route.\n"
                    },
                    "preserveHost": {
                        "type": "boolean",
                        "description": "When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `\"https\"`, HTTP requests are answered with an upgrade error. When set to only `\"http\"`, HTTPS requests are answered with an error.\n"
                    },
                    "regexPriority": {
                        "type": "integer",
                        "description": "A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).\n"
                    },
                    "requestBuffering": {
                        "type": "boolean",
                        "description": "Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.\n"
                    },
                    "responseBuffering": {
                        "type": "boolean",
                        "description": "Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.\n"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/GatewayRouteService:GatewayRouteService",
                        "description": "The Service this Route is associated to. This is where the Route proxies traffic to.\n"
                    },
                    "snis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of SNIs that match this Route when using stream routing.\n"
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/GatewayRouteSource:GatewayRouteSource"
                        },
                        "description": "A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields \"ip\" (optionally in CIDR range notation) and/or \"port\".\n"
                    },
                    "stripPath": {
                        "type": "boolean",
                        "description": "When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Route for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayService:GatewayService": {
            "description": "GatewayService Resource\n",
            "properties": {
                "caCertificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).\n"
                },
                "clientCertificate": {
                    "$ref": "#/types/konnect:index/GatewayServiceClientCertificate:GatewayServiceClientCertificate",
                    "description": "Certificate to be used as client certificate while TLS handshaking to the upstream server.\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds for establishing a connection to the upstream server.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host of the upstream server. Note that the host value is case sensitive.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Service name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to be used in requests to the upstream server.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The upstream server port.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used to communicate with the upstream. must be one of [\"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\", \"tls_passthrough\", \"udp\", \"ws\", \"wss\"]\n"
                },
                "readTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of retries to execute upon failure to proxy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Service for grouping and filtering.\n"
                },
                "tlsVerify": {
                    "type": "boolean",
                    "description": "Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.\n"
                },
                "tlsVerifyDepth": {
                    "type": "integer",
                    "description": "Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                },
                "writeTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.\n"
                }
            },
            "required": [
                "caCertificates",
                "clientCertificate",
                "connectTimeout",
                "controlPlaneId",
                "createdAt",
                "enabled",
                "host",
                "name",
                "path",
                "port",
                "protocol",
                "readTimeout",
                "retries",
                "tags",
                "tlsVerify",
                "tlsVerifyDepth",
                "updatedAt",
                "writeTimeout"
            ],
            "inputProperties": {
                "caCertificates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).\n"
                },
                "clientCertificate": {
                    "$ref": "#/types/konnect:index/GatewayServiceClientCertificate:GatewayServiceClientCertificate",
                    "description": "Certificate to be used as client certificate while TLS handshaking to the upstream server.\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds for establishing a connection to the upstream server.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.\n"
                },
                "host": {
                    "type": "string",
                    "description": "The host of the upstream server. Note that the host value is case sensitive.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The Service name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to be used in requests to the upstream server.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The upstream server port.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "The protocol used to communicate with the upstream. must be one of [\"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\", \"tls_passthrough\", \"udp\", \"ws\", \"wss\"]\n"
                },
                "readTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "The number of retries to execute upon failure to proxy.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Service for grouping and filtering.\n"
                },
                "tlsVerify": {
                    "type": "boolean",
                    "description": "Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.\n"
                },
                "tlsVerifyDepth": {
                    "type": "integer",
                    "description": "Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.\n"
                },
                "writeTimeout": {
                    "type": "integer",
                    "description": "The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayService resources.\n",
                "properties": {
                    "caCertificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).\n"
                    },
                    "clientCertificate": {
                        "$ref": "#/types/konnect:index/GatewayServiceClientCertificate:GatewayServiceClientCertificate",
                        "description": "Certificate to be used as client certificate while TLS handshaking to the upstream server.\n"
                    },
                    "connectTimeout": {
                        "type": "integer",
                        "description": "The timeout in milliseconds for establishing a connection to the upstream server.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "The host of the upstream server. Note that the host value is case sensitive.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The Service name.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The path to be used in requests to the upstream server.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "The upstream server port.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "The protocol used to communicate with the upstream. must be one of [\"grpc\", \"grpcs\", \"http\", \"https\", \"tcp\", \"tls\", \"tls_passthrough\", \"udp\", \"ws\", \"wss\"]\n"
                    },
                    "readTimeout": {
                        "type": "integer",
                        "description": "The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.\n"
                    },
                    "retries": {
                        "type": "integer",
                        "description": "The number of retries to execute upon failure to proxy.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Service for grouping and filtering.\n"
                    },
                    "tlsVerify": {
                        "type": "boolean",
                        "description": "Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.\n"
                    },
                    "tlsVerifyDepth": {
                        "type": "integer",
                        "description": "Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    },
                    "writeTimeout": {
                        "type": "integer",
                        "description": "The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewaySni:GatewaySni": {
            "description": "GatewaySNI Resource\n",
            "properties": {
                "certificate": {
                    "$ref": "#/types/konnect:index/GatewaySniCertificate:GatewaySniCertificate",
                    "description": "The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The SNI name to associate with the given certificate.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the SNIs for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "certificate",
                "controlPlaneId",
                "createdAt",
                "name",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "certificate": {
                    "$ref": "#/types/konnect:index/GatewaySniCertificate:GatewaySniCertificate",
                    "description": "The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The SNI name to associate with the given certificate.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the SNIs for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewaySni resources.\n",
                "properties": {
                    "certificate": {
                        "$ref": "#/types/konnect:index/GatewaySniCertificate:GatewaySniCertificate",
                        "description": "The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The SNI name to associate with the given certificate.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the SNIs for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayTarget:GatewayTarget": {
            "description": "GatewayTarget Resource\n",
            "properties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "number",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.\n"
                },
                "updatedAt": {
                    "type": "number",
                    "description": "Unix epoch when the resource was last updated.\n"
                },
                "upstream": {
                    "$ref": "#/types/konnect:index/GatewayTargetUpstream:GatewayTargetUpstream"
                },
                "upstreamId": {
                    "type": "string",
                    "description": "ID or target of the Target to lookup. Requires replacement if changed.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.\n"
                }
            },
            "required": [
                "controlPlaneId",
                "createdAt",
                "tags",
                "target",
                "updatedAt",
                "upstream",
                "upstreamId",
                "weight"
            ],
            "inputProperties": {
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.\n"
                },
                "target": {
                    "type": "string",
                    "description": "The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.\n"
                },
                "upstreamId": {
                    "type": "string",
                    "description": "ID or target of the Target to lookup. Requires replacement if changed.\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId",
                "upstreamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayTarget resources.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "number",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.\n"
                    },
                    "updatedAt": {
                        "type": "number",
                        "description": "Unix epoch when the resource was last updated.\n"
                    },
                    "upstream": {
                        "$ref": "#/types/konnect:index/GatewayTargetUpstream:GatewayTargetUpstream"
                    },
                    "upstreamId": {
                        "type": "string",
                        "description": "ID or target of the Target to lookup. Requires replacement if changed.\n"
                    },
                    "weight": {
                        "type": "integer",
                        "description": "The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayUpstream:GatewayUpstream": {
            "description": "GatewayUpstream Resource\n",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "description": "Which load balancing algorithm to use. must be one of [\"consistent-hashing\", \"least-connections\", \"round-robin\", \"latency\"]\n"
                },
                "clientCertificate": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamClientCertificate:GatewayUpstreamClientCertificate",
                    "description": "If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "hashFallback": {
                    "type": "string",
                    "description": "What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`. must be one of [\"none\", \"consumer\", \"ip\", \"header\", \"cookie\", \"path\", \"query*arg\", \"uri*capture\"]\n"
                },
                "hashFallbackHeader": {
                    "type": "string",
                    "description": "The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.\n"
                },
                "hashFallbackQueryArg": {
                    "type": "string",
                    "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.\n"
                },
                "hashFallbackUriCapture": {
                    "type": "string",
                    "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.\n"
                },
                "hashOn": {
                    "type": "string",
                    "description": "What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of [\"none\", \"consumer\", \"ip\", \"header\", \"cookie\", \"path\", \"query*arg\", \"uri*capture\"]\n"
                },
                "hashOnCookie": {
                    "type": "string",
                    "description": "The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.\n"
                },
                "hashOnCookiePath": {
                    "type": "string",
                    "description": "The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.\n"
                },
                "hashOnHeader": {
                    "type": "string",
                    "description": "The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.\n"
                },
                "hashOnQueryArg": {
                    "type": "string",
                    "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.\n"
                },
                "hashOnUriCapture": {
                    "type": "string",
                    "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.\n"
                },
                "healthchecks": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecks:GatewayUpstreamHealthchecks"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The hostname to be used as `Host` header when proxying requests through Kong.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This is a hostname, which must be equal to the `host` of a Service.\n"
                },
                "slots": {
                    "type": "integer",
                    "description": "The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Upstream for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                },
                "useSrvName": {
                    "type": "boolean",
                    "description": "If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.\n"
                }
            },
            "required": [
                "algorithm",
                "clientCertificate",
                "controlPlaneId",
                "createdAt",
                "hashFallback",
                "hashFallbackHeader",
                "hashFallbackQueryArg",
                "hashFallbackUriCapture",
                "hashOn",
                "hashOnCookie",
                "hashOnCookiePath",
                "hashOnHeader",
                "hashOnQueryArg",
                "hashOnUriCapture",
                "healthchecks",
                "hostHeader",
                "name",
                "slots",
                "tags",
                "updatedAt",
                "useSrvName"
            ],
            "inputProperties": {
                "algorithm": {
                    "type": "string",
                    "description": "Which load balancing algorithm to use. must be one of [\"consistent-hashing\", \"least-connections\", \"round-robin\", \"latency\"]\n"
                },
                "clientCertificate": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamClientCertificate:GatewayUpstreamClientCertificate",
                    "description": "If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "hashFallback": {
                    "type": "string",
                    "description": "What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`. must be one of [\"none\", \"consumer\", \"ip\", \"header\", \"cookie\", \"path\", \"query*arg\", \"uri*capture\"]\n"
                },
                "hashFallbackHeader": {
                    "type": "string",
                    "description": "The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.\n"
                },
                "hashFallbackQueryArg": {
                    "type": "string",
                    "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.\n"
                },
                "hashFallbackUriCapture": {
                    "type": "string",
                    "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.\n"
                },
                "hashOn": {
                    "type": "string",
                    "description": "What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of [\"none\", \"consumer\", \"ip\", \"header\", \"cookie\", \"path\", \"query*arg\", \"uri*capture\"]\n"
                },
                "hashOnCookie": {
                    "type": "string",
                    "description": "The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.\n"
                },
                "hashOnCookiePath": {
                    "type": "string",
                    "description": "The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.\n"
                },
                "hashOnHeader": {
                    "type": "string",
                    "description": "The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.\n"
                },
                "hashOnQueryArg": {
                    "type": "string",
                    "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.\n"
                },
                "hashOnUriCapture": {
                    "type": "string",
                    "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.\n"
                },
                "healthchecks": {
                    "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecks:GatewayUpstreamHealthchecks"
                },
                "hostHeader": {
                    "type": "string",
                    "description": "The hostname to be used as `Host` header when proxying requests through Kong.\n"
                },
                "name": {
                    "type": "string",
                    "description": "This is a hostname, which must be equal to the `host` of a Service.\n"
                },
                "slots": {
                    "type": "integer",
                    "description": "The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Upstream for grouping and filtering.\n"
                },
                "useSrvName": {
                    "type": "boolean",
                    "description": "If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayUpstream resources.\n",
                "properties": {
                    "algorithm": {
                        "type": "string",
                        "description": "Which load balancing algorithm to use. must be one of [\"consistent-hashing\", \"least-connections\", \"round-robin\", \"latency\"]\n"
                    },
                    "clientCertificate": {
                        "$ref": "#/types/konnect:index/GatewayUpstreamClientCertificate:GatewayUpstreamClientCertificate",
                        "description": "If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "hashFallback": {
                        "type": "string",
                        "description": "What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`. must be one of [\"none\", \"consumer\", \"ip\", \"header\", \"cookie\", \"path\", \"query*arg\", \"uri*capture\"]\n"
                    },
                    "hashFallbackHeader": {
                        "type": "string",
                        "description": "The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.\n"
                    },
                    "hashFallbackQueryArg": {
                        "type": "string",
                        "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.\n"
                    },
                    "hashFallbackUriCapture": {
                        "type": "string",
                        "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.\n"
                    },
                    "hashOn": {
                        "type": "string",
                        "description": "What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of [\"none\", \"consumer\", \"ip\", \"header\", \"cookie\", \"path\", \"query*arg\", \"uri*capture\"]\n"
                    },
                    "hashOnCookie": {
                        "type": "string",
                        "description": "The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.\n"
                    },
                    "hashOnCookiePath": {
                        "type": "string",
                        "description": "The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.\n"
                    },
                    "hashOnHeader": {
                        "type": "string",
                        "description": "The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.\n"
                    },
                    "hashOnQueryArg": {
                        "type": "string",
                        "description": "The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.\n"
                    },
                    "hashOnUriCapture": {
                        "type": "string",
                        "description": "The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.\n"
                    },
                    "healthchecks": {
                        "$ref": "#/types/konnect:index/GatewayUpstreamHealthchecks:GatewayUpstreamHealthchecks"
                    },
                    "hostHeader": {
                        "type": "string",
                        "description": "The hostname to be used as `Host` header when proxying requests through Kong.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "This is a hostname, which must be equal to the `host` of a Service.\n"
                    },
                    "slots": {
                        "type": "integer",
                        "description": "The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Upstream for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    },
                    "useSrvName": {
                        "type": "boolean",
                        "description": "If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/gatewayVault:GatewayVault": {
            "description": "GatewayVault Resource\n",
            "properties": {
                "config": {
                    "type": "string",
                    "description": "The configuration properties for the Vault which can be found on the vaults' documentation page. Parsed as JSON.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "createdAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Vault entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Vault for grouping and filtering.\n"
                },
                "updatedAt": {
                    "type": "integer",
                    "description": "Unix epoch when the resource was last updated.\n"
                }
            },
            "required": [
                "config",
                "controlPlaneId",
                "createdAt",
                "description",
                "name",
                "prefix",
                "tags",
                "updatedAt"
            ],
            "inputProperties": {
                "config": {
                    "type": "string",
                    "description": "The configuration properties for the Vault which can be found on the vaults' documentation page. Parsed as JSON.\n"
                },
                "controlPlaneId": {
                    "type": "string",
                    "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Vault entity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An optional set of strings associated with the Vault for grouping and filtering.\n"
                }
            },
            "requiredInputs": [
                "controlPlaneId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GatewayVault resources.\n",
                "properties": {
                    "config": {
                        "type": "string",
                        "description": "The configuration properties for the Vault which can be found on the vaults' documentation page. Parsed as JSON.\n"
                    },
                    "controlPlaneId": {
                        "type": "string",
                        "description": "The UUID of your control plane. This variable is available in the Konnect manager.\n"
                    },
                    "createdAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the Vault entity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the Vault that's going to be added. Currently, the Vault implementation must be installed in every Kong instance.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The unique prefix (or identifier) for this Vault configuration. The prefix is used to load the right Vault configuration and implementation when referencing secrets with the other entities.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An optional set of strings associated with the Vault for grouping and filtering.\n"
                    },
                    "updatedAt": {
                        "type": "integer",
                        "description": "Unix epoch when the resource was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/meshControlPlane:MeshControlPlane": {
            "description": "MeshControlPlane Resource\n",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the control plane.\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "createdAt",
                "description",
                "labels",
                "name",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the control plane.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MeshControlPlane resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the control plane.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/portal:Portal": {
            "description": "Portal Resource\n",
            "properties": {
                "applicationCount": {
                    "type": "number",
                    "description": "Number of applications created in the portal.\n"
                },
                "autoApproveApplications": {
                    "type": "boolean",
                    "description": "Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                },
                "autoApproveDevelopers": {
                    "type": "boolean",
                    "description": "Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "customClientDomain": {
                    "type": "string",
                    "description": "The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.\n"
                },
                "customDomain": {
                    "type": "string",
                    "description": "The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.\n"
                },
                "defaultApplicationAuthStrategyId": {
                    "type": "string",
                    "description": "Default strategy ID applied on applications for the portal\n"
                },
                "defaultDomain": {
                    "type": "string",
                    "description": "The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a\n`custom_domain``.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the portal.\n"
                },
                "developerCount": {
                    "type": "number",
                    "description": "Number of developers using the portal.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the portal. This value will be the portal's `name` in Portal API.\n"
                },
                "force": {
                    "type": "string",
                    "description": "If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of [\"true\", \"false\"]; Default: \"false\"\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the portal, used to distinguish it from other portals. Name must be unique.\n"
                },
                "publishedProductCount": {
                    "type": "number",
                    "description": "Number of api products published to the portal\n"
                },
                "rbacEnabled": {
                    "type": "boolean",
                    "description": "Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register\nfor products until unless assigned to teams with access to view and consume specific products.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "required": [
                "applicationCount",
                "autoApproveApplications",
                "autoApproveDevelopers",
                "createdAt",
                "customClientDomain",
                "customDomain",
                "defaultApplicationAuthStrategyId",
                "defaultDomain",
                "description",
                "developerCount",
                "displayName",
                "force",
                "isPublic",
                "labels",
                "name",
                "publishedProductCount",
                "rbacEnabled",
                "updatedAt"
            ],
            "inputProperties": {
                "autoApproveApplications": {
                    "type": "boolean",
                    "description": "Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                },
                "autoApproveDevelopers": {
                    "type": "boolean",
                    "description": "Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                },
                "customClientDomain": {
                    "type": "string",
                    "description": "The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.\n"
                },
                "customDomain": {
                    "type": "string",
                    "description": "The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.\n"
                },
                "defaultApplicationAuthStrategyId": {
                    "type": "string",
                    "description": "Default strategy ID applied on applications for the portal\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the portal.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "The display name of the portal. This value will be the portal's `name` in Portal API.\n"
                },
                "force": {
                    "type": "string",
                    "description": "If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of [\"true\", \"false\"]; Default: \"false\"\n"
                },
                "isPublic": {
                    "type": "boolean",
                    "description": "Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the portal, used to distinguish it from other portals. Name must be unique.\n"
                },
                "rbacEnabled": {
                    "type": "boolean",
                    "description": "Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register\nfor products until unless assigned to teams with access to view and consume specific products.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Portal resources.\n",
                "properties": {
                    "applicationCount": {
                        "type": "number",
                        "description": "Number of applications created in the portal.\n"
                    },
                    "autoApproveApplications": {
                        "type": "boolean",
                        "description": "Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                    },
                    "autoApproveDevelopers": {
                        "type": "boolean",
                        "description": "Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                    },
                    "customClientDomain": {
                        "type": "string",
                        "description": "The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.\n"
                    },
                    "customDomain": {
                        "type": "string",
                        "description": "The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.\n"
                    },
                    "defaultApplicationAuthStrategyId": {
                        "type": "string",
                        "description": "Default strategy ID applied on applications for the portal\n"
                    },
                    "defaultDomain": {
                        "type": "string",
                        "description": "The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a\n`custom_domain``.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the portal.\n"
                    },
                    "developerCount": {
                        "type": "number",
                        "description": "Number of developers using the portal.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "The display name of the portal. This value will be the portal's `name` in Portal API.\n"
                    },
                    "force": {
                        "type": "string",
                        "description": "If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of [\"true\", \"false\"]; Default: \"false\"\n"
                    },
                    "isPublic": {
                        "type": "boolean",
                        "description": "Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the portal, used to distinguish it from other portals. Name must be unique.\n"
                    },
                    "publishedProductCount": {
                        "type": "number",
                        "description": "Number of api products published to the portal\n"
                    },
                    "rbacEnabled": {
                        "type": "boolean",
                        "description": "Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register\nfor products until unless assigned to teams with access to view and consume specific products.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/portalAppearance:PortalAppearance": {
            "description": "PortalAppearance Resource\n",
            "properties": {
                "customFonts": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomFonts:PortalAppearanceCustomFonts",
                    "description": "Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.\n"
                },
                "customTheme": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomTheme:PortalAppearanceCustomTheme",
                    "description": "Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.\n"
                },
                "images": {
                    "$ref": "#/types/konnect:index/PortalAppearanceImages:PortalAppearanceImages",
                    "description": "A collection of binary image data to customize images in the portal\n"
                },
                "portalId": {
                    "type": "string",
                    "description": "ID of the portal.\n"
                },
                "text": {
                    "$ref": "#/types/konnect:index/PortalAppearanceText:PortalAppearanceText",
                    "description": "Values to display for customizable text in the portal user interface\n"
                },
                "themeName": {
                    "type": "string",
                    "description": "Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of [\"mint*rocket\", \"dark_mode\", \"custom\"]\n"
                },
                "useCustomFonts": {
                    "type": "boolean",
                    "description": "If true, fonts in custom_fonts will be used over the theme's default fonts\n"
                }
            },
            "required": [
                "customFonts",
                "customTheme",
                "images",
                "portalId",
                "text",
                "themeName",
                "useCustomFonts"
            ],
            "inputProperties": {
                "customFonts": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomFonts:PortalAppearanceCustomFonts",
                    "description": "Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.\n"
                },
                "customTheme": {
                    "$ref": "#/types/konnect:index/PortalAppearanceCustomTheme:PortalAppearanceCustomTheme",
                    "description": "Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.\n"
                },
                "images": {
                    "$ref": "#/types/konnect:index/PortalAppearanceImages:PortalAppearanceImages",
                    "description": "A collection of binary image data to customize images in the portal\n"
                },
                "portalId": {
                    "type": "string",
                    "description": "ID of the portal.\n"
                },
                "text": {
                    "$ref": "#/types/konnect:index/PortalAppearanceText:PortalAppearanceText",
                    "description": "Values to display for customizable text in the portal user interface\n"
                },
                "themeName": {
                    "type": "string",
                    "description": "Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of [\"mint*rocket\", \"dark_mode\", \"custom\"]\n"
                },
                "useCustomFonts": {
                    "type": "boolean",
                    "description": "If true, fonts in custom_fonts will be used over the theme's default fonts\n"
                }
            },
            "requiredInputs": [
                "portalId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PortalAppearance resources.\n",
                "properties": {
                    "customFonts": {
                        "$ref": "#/types/konnect:index/PortalAppearanceCustomFonts:PortalAppearanceCustomFonts",
                        "description": "Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.\n"
                    },
                    "customTheme": {
                        "$ref": "#/types/konnect:index/PortalAppearanceCustomTheme:PortalAppearanceCustomTheme",
                        "description": "Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.\n"
                    },
                    "images": {
                        "$ref": "#/types/konnect:index/PortalAppearanceImages:PortalAppearanceImages",
                        "description": "A collection of binary image data to customize images in the portal\n"
                    },
                    "portalId": {
                        "type": "string",
                        "description": "ID of the portal.\n"
                    },
                    "text": {
                        "$ref": "#/types/konnect:index/PortalAppearanceText:PortalAppearanceText",
                        "description": "Values to display for customizable text in the portal user interface\n"
                    },
                    "themeName": {
                        "type": "string",
                        "description": "Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of [\"mint*rocket\", \"dark_mode\", \"custom\"]\n"
                    },
                    "useCustomFonts": {
                        "type": "boolean",
                        "description": "If true, fonts in custom_fonts will be used over the theme's default fonts\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/portalAuth:PortalAuth": {
            "description": "PortalAuth Resource\n",
            "properties": {
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "The organization has basic auth enabled.\n"
                },
                "konnectMappingEnabled": {
                    "type": "boolean",
                    "description": "Whether a Konnect Identity Admin assigns teams to a developer.\n"
                },
                "oidcAuthEnabled": {
                    "type": "boolean",
                    "description": "The organization has OIDC disabled.\n"
                },
                "oidcClaimMappings": {
                    "$ref": "#/types/konnect:index/PortalAuthOidcClaimMappings:PortalAuthOidcClaimMappings",
                    "description": "Mappings from a portal developer atribute to an Identity Provider claim.\n"
                },
                "oidcClientId": {
                    "type": "string"
                },
                "oidcClientSecret": {
                    "type": "string"
                },
                "oidcConfig": {
                    "$ref": "#/types/konnect:index/PortalAuthOidcConfig:PortalAuthOidcConfig",
                    "description": "Configuration properties for an OpenID Connect Identity Provider.\n"
                },
                "oidcIssuer": {
                    "type": "string"
                },
                "oidcScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "oidcTeamMappingEnabled": {
                    "type": "boolean",
                    "description": "Whether IdP groups determine the Konnect Portal teams a developer has.\n"
                },
                "portalId": {
                    "type": "string",
                    "description": "ID of the portal.\n"
                }
            },
            "required": [
                "basicAuthEnabled",
                "konnectMappingEnabled",
                "oidcAuthEnabled",
                "oidcConfig",
                "oidcTeamMappingEnabled",
                "portalId"
            ],
            "inputProperties": {
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "The organization has basic auth enabled.\n"
                },
                "konnectMappingEnabled": {
                    "type": "boolean",
                    "description": "Whether a Konnect Identity Admin assigns teams to a developer.\n"
                },
                "oidcAuthEnabled": {
                    "type": "boolean",
                    "description": "The organization has OIDC disabled.\n"
                },
                "oidcClaimMappings": {
                    "$ref": "#/types/konnect:index/PortalAuthOidcClaimMappings:PortalAuthOidcClaimMappings",
                    "description": "Mappings from a portal developer atribute to an Identity Provider claim.\n"
                },
                "oidcClientId": {
                    "type": "string"
                },
                "oidcClientSecret": {
                    "type": "string"
                },
                "oidcIssuer": {
                    "type": "string"
                },
                "oidcScopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "oidcTeamMappingEnabled": {
                    "type": "boolean",
                    "description": "Whether IdP groups determine the Konnect Portal teams a developer has.\n"
                },
                "portalId": {
                    "type": "string",
                    "description": "ID of the portal.\n"
                }
            },
            "requiredInputs": [
                "portalId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PortalAuth resources.\n",
                "properties": {
                    "basicAuthEnabled": {
                        "type": "boolean",
                        "description": "The organization has basic auth enabled.\n"
                    },
                    "konnectMappingEnabled": {
                        "type": "boolean",
                        "description": "Whether a Konnect Identity Admin assigns teams to a developer.\n"
                    },
                    "oidcAuthEnabled": {
                        "type": "boolean",
                        "description": "The organization has OIDC disabled.\n"
                    },
                    "oidcClaimMappings": {
                        "$ref": "#/types/konnect:index/PortalAuthOidcClaimMappings:PortalAuthOidcClaimMappings",
                        "description": "Mappings from a portal developer atribute to an Identity Provider claim.\n"
                    },
                    "oidcClientId": {
                        "type": "string"
                    },
                    "oidcClientSecret": {
                        "type": "string"
                    },
                    "oidcConfig": {
                        "$ref": "#/types/konnect:index/PortalAuthOidcConfig:PortalAuthOidcConfig",
                        "description": "Configuration properties for an OpenID Connect Identity Provider.\n"
                    },
                    "oidcIssuer": {
                        "type": "string"
                    },
                    "oidcScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "oidcTeamMappingEnabled": {
                        "type": "boolean",
                        "description": "Whether IdP groups determine the Konnect Portal teams a developer has.\n"
                    },
                    "portalId": {
                        "type": "string",
                        "description": "ID of the portal.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/portalProductVersion:PortalProductVersion": {
            "description": "PortalProductVersion Resource\n",
            "properties": {
                "applicationRegistrationEnabled": {
                    "type": "boolean",
                    "description": "Whether the application registration on this portal for the api product version is enabled\n"
                },
                "authStrategies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/konnect:index/PortalProductVersionAuthStrategy:PortalProductVersionAuthStrategy"
                    },
                    "description": "A list of authentication strategies\n"
                },
                "authStrategyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication strategy IDs\n"
                },
                "autoApproveRegistration": {
                    "type": "boolean",
                    "description": "Whether the application registration auto approval on this portal for the api product version is enabled\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the api product version on the portal is deprecated\n"
                },
                "notifyDevelopers": {
                    "type": "boolean",
                    "description": "Whether to notify developers who are affected by this change\n"
                },
                "portalId": {
                    "type": "string",
                    "description": "portal identifier\n"
                },
                "productVersionId": {
                    "type": "string",
                    "description": "API product version identifier\n"
                },
                "publishStatus": {
                    "type": "string",
                    "description": "Publication status of the API product version on the portal. must be one of [\"published\", \"unpublished\"]\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "An ISO-8601 timestamp representation of entity update date.\n"
                }
            },
            "required": [
                "applicationRegistrationEnabled",
                "authStrategies",
                "authStrategyIds",
                "autoApproveRegistration",
                "createdAt",
                "deprecated",
                "portalId",
                "productVersionId",
                "publishStatus",
                "updatedAt"
            ],
            "inputProperties": {
                "applicationRegistrationEnabled": {
                    "type": "boolean",
                    "description": "Whether the application registration on this portal for the api product version is enabled\n"
                },
                "authStrategyIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of authentication strategy IDs\n"
                },
                "autoApproveRegistration": {
                    "type": "boolean",
                    "description": "Whether the application registration auto approval on this portal for the api product version is enabled\n"
                },
                "deprecated": {
                    "type": "boolean",
                    "description": "Whether the api product version on the portal is deprecated\n"
                },
                "notifyDevelopers": {
                    "type": "boolean",
                    "description": "Whether to notify developers who are affected by this change\n"
                },
                "portalId": {
                    "type": "string",
                    "description": "portal identifier\n"
                },
                "productVersionId": {
                    "type": "string",
                    "description": "API product version identifier\n"
                },
                "publishStatus": {
                    "type": "string",
                    "description": "Publication status of the API product version on the portal. must be one of [\"published\", \"unpublished\"]\n"
                }
            },
            "requiredInputs": [
                "applicationRegistrationEnabled",
                "authStrategyIds",
                "autoApproveRegistration",
                "deprecated",
                "portalId",
                "productVersionId",
                "publishStatus"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PortalProductVersion resources.\n",
                "properties": {
                    "applicationRegistrationEnabled": {
                        "type": "boolean",
                        "description": "Whether the application registration on this portal for the api product version is enabled\n"
                    },
                    "authStrategies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/PortalProductVersionAuthStrategy:PortalProductVersionAuthStrategy"
                        },
                        "description": "A list of authentication strategies\n"
                    },
                    "authStrategyIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of authentication strategy IDs\n"
                    },
                    "autoApproveRegistration": {
                        "type": "boolean",
                        "description": "Whether the application registration auto approval on this portal for the api product version is enabled\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity creation date.\n"
                    },
                    "deprecated": {
                        "type": "boolean",
                        "description": "Whether the api product version on the portal is deprecated\n"
                    },
                    "notifyDevelopers": {
                        "type": "boolean",
                        "description": "Whether to notify developers who are affected by this change\n"
                    },
                    "portalId": {
                        "type": "string",
                        "description": "portal identifier\n"
                    },
                    "productVersionId": {
                        "type": "string",
                        "description": "API product version identifier\n"
                    },
                    "publishStatus": {
                        "type": "string",
                        "description": "Publication status of the API product version on the portal. must be one of [\"published\", \"unpublished\"]\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp representation of entity update date.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/serverlessCloudGateway:ServerlessCloudGateway": {
            "description": "ServerlessCloudGateway Resource\n",
            "properties": {
                "clusterCert": {
                    "type": "string",
                    "description": "The cluster certificate (public key). Requires replacement if changed.\n"
                },
                "clusterCertKey": {
                    "type": "string",
                    "description": "The cluster certificate key (private key). Requires replacement if changed.\n"
                },
                "controlPlane": {
                    "$ref": "#/types/konnect:index/ServerlessCloudGatewayControlPlane:ServerlessCloudGatewayControlPlane",
                    "description": "Requires replacement if changed.\n"
                },
                "createdAt": {
                    "type": "string"
                },
                "gatewayEndpoint": {
                    "type": "string",
                    "description": "Endpoint for the serverless cloud gateway.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to facilitate tagged search on serverless cloud gateways. Keys must be of length 1-63 characters, and cannot start with 'kong', 'konnect', 'mesh', 'kic', or '_'. Requires replacement if changed.\n"
                },
                "updatedAt": {
                    "type": "string"
                }
            },
            "required": [
                "clusterCert",
                "clusterCertKey",
                "controlPlane",
                "createdAt",
                "gatewayEndpoint",
                "labels",
                "updatedAt"
            ],
            "inputProperties": {
                "clusterCert": {
                    "type": "string",
                    "description": "The cluster certificate (public key). Requires replacement if changed.\n"
                },
                "clusterCertKey": {
                    "type": "string",
                    "description": "The cluster certificate key (private key). Requires replacement if changed.\n"
                },
                "controlPlane": {
                    "$ref": "#/types/konnect:index/ServerlessCloudGatewayControlPlane:ServerlessCloudGatewayControlPlane",
                    "description": "Requires replacement if changed.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to facilitate tagged search on serverless cloud gateways. Keys must be of length 1-63 characters, and cannot start with 'kong', 'konnect', 'mesh', 'kic', or '_'. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "clusterCert",
                "clusterCertKey",
                "controlPlane"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServerlessCloudGateway resources.\n",
                "properties": {
                    "clusterCert": {
                        "type": "string",
                        "description": "The cluster certificate (public key). Requires replacement if changed.\n"
                    },
                    "clusterCertKey": {
                        "type": "string",
                        "description": "The cluster certificate key (private key). Requires replacement if changed.\n"
                    },
                    "controlPlane": {
                        "$ref": "#/types/konnect:index/ServerlessCloudGatewayControlPlane:ServerlessCloudGatewayControlPlane",
                        "description": "Requires replacement if changed.\n"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "gatewayEndpoint": {
                        "type": "string",
                        "description": "Endpoint for the serverless cloud gateway.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels to facilitate tagged search on serverless cloud gateways. Keys must be of length 1-63 characters, and cannot start with 'kong', 'konnect', 'mesh', 'kic', or '_'. Requires replacement if changed.\n"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/systemAccount:SystemAccount": {
            "description": "SystemAccount Resource\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of when the system account was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the system account. Useful when the system account name is not sufficient to differentiate one system account from another.\n"
                },
                "konnectManaged": {
                    "type": "boolean",
                    "description": "The system account is managed by Konnect (true/false). Requires replacement if changed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the system account.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of when the system account was last updated.\n"
                }
            },
            "required": [
                "createdAt",
                "description",
                "konnectManaged",
                "name",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the system account. Useful when the system account name is not sufficient to differentiate one system account from another.\n"
                },
                "konnectManaged": {
                    "type": "boolean",
                    "description": "The system account is managed by Konnect (true/false). Requires replacement if changed.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the system account.\n"
                }
            },
            "requiredInputs": [
                "description"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SystemAccount resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp of when the system account was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the system account. Useful when the system account name is not sufficient to differentiate one system account from another.\n"
                    },
                    "konnectManaged": {
                        "type": "boolean",
                        "description": "The system account is managed by Konnect (true/false). Requires replacement if changed.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the system account.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp of when the system account was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/systemAccountAccessToken:SystemAccountAccessToken": {
            "description": "SystemAccountAccessToken Resource\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the system account.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp of when the system account access token was created.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "lastUsedAt": {
                    "type": "string",
                    "description": "Timestamp of when the system account access token was last used.\n"
                },
                "name": {
                    "type": "string"
                },
                "token": {
                    "type": "string",
                    "description": "The token of the system account access token.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp of when the system account access token was last updated.\n"
                }
            },
            "required": [
                "accountId",
                "createdAt",
                "expiresAt",
                "lastUsedAt",
                "name",
                "token",
                "updatedAt"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the system account.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Requires replacement if changed.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "accountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SystemAccountAccessToken resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "ID of the system account.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp of when the system account access token was created.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Requires replacement if changed.\n"
                    },
                    "lastUsedAt": {
                        "type": "string",
                        "description": "Timestamp of when the system account access token was last used.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "token": {
                        "type": "string",
                        "description": "The token of the system account access token.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp of when the system account access token was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/systemAccountRole:SystemAccountRole": {
            "description": "SystemAccountRole Resource\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the system account. Requires replacement if changed.\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity. Requires replacement if changed.\n"
                },
                "entityRegion": {
                    "type": "string",
                    "description": "The region of the team. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\", \"*\"]\n"
                },
                "entityTypeName": {
                    "type": "string",
                    "description": "The type of entity. Requires replacement if changed. ; must be one of [\"API Products\", \"Application Auth Strategies\", \"Audit Logs\", \"Control Planes\", \"DCR Providers\", \"Identity\", \"Mesh Control Planes\", \"Networks\", \"Portals\", \"Service Hub\"]\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The desired role. Requires replacement if changed. ; must be one of [\"Admin\", \"Appearance Maintainer\", \"Application Registration\", \"Certificate Admin\", \"Cloud Gateway Cluster Admin\", \"Cloud Gateway Cluster Viewer\", \"Consumer Admin\", \"Creator\", \"Deployer\", \"Discovery Admin\", \"Discovery Viewer\", \"Gateway Service Admin\", \"Integration Admin\", \"Integration Viewer\", \"Key Admin\", \"Maintainer\", \"Network Admin\", \"Network Creator\", \"Network Viewer\", \"Plugin Admin\", \"Plugins Admin\", \"Product Publisher\", \"Publisher\", \"Route Admin\", \"SNI Admin\", \"Service Admin\", \"Service Creator\", \"Service Viewer\", \"Upstream Admin\", \"Vault Admin\", \"Viewer\"]\n"
                }
            },
            "required": [
                "accountId",
                "entityId",
                "entityRegion",
                "entityTypeName",
                "roleName"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the system account. Requires replacement if changed.\n"
                },
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity. Requires replacement if changed.\n"
                },
                "entityRegion": {
                    "type": "string",
                    "description": "The region of the team. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\", \"*\"]\n"
                },
                "entityTypeName": {
                    "type": "string",
                    "description": "The type of entity. Requires replacement if changed. ; must be one of [\"API Products\", \"Application Auth Strategies\", \"Audit Logs\", \"Control Planes\", \"DCR Providers\", \"Identity\", \"Mesh Control Planes\", \"Networks\", \"Portals\", \"Service Hub\"]\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The desired role. Requires replacement if changed. ; must be one of [\"Admin\", \"Appearance Maintainer\", \"Application Registration\", \"Certificate Admin\", \"Cloud Gateway Cluster Admin\", \"Cloud Gateway Cluster Viewer\", \"Consumer Admin\", \"Creator\", \"Deployer\", \"Discovery Admin\", \"Discovery Viewer\", \"Gateway Service Admin\", \"Integration Admin\", \"Integration Viewer\", \"Key Admin\", \"Maintainer\", \"Network Admin\", \"Network Creator\", \"Network Viewer\", \"Plugin Admin\", \"Plugins Admin\", \"Product Publisher\", \"Publisher\", \"Route Admin\", \"SNI Admin\", \"Service Admin\", \"Service Creator\", \"Service Viewer\", \"Upstream Admin\", \"Vault Admin\", \"Viewer\"]\n"
                }
            },
            "requiredInputs": [
                "accountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SystemAccountRole resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "ID of the system account. Requires replacement if changed.\n"
                    },
                    "entityId": {
                        "type": "string",
                        "description": "The ID of the entity. Requires replacement if changed.\n"
                    },
                    "entityRegion": {
                        "type": "string",
                        "description": "The region of the team. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\", \"*\"]\n"
                    },
                    "entityTypeName": {
                        "type": "string",
                        "description": "The type of entity. Requires replacement if changed. ; must be one of [\"API Products\", \"Application Auth Strategies\", \"Audit Logs\", \"Control Planes\", \"DCR Providers\", \"Identity\", \"Mesh Control Planes\", \"Networks\", \"Portals\", \"Service Hub\"]\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The desired role. Requires replacement if changed. ; must be one of [\"Admin\", \"Appearance Maintainer\", \"Application Registration\", \"Certificate Admin\", \"Cloud Gateway Cluster Admin\", \"Cloud Gateway Cluster Viewer\", \"Consumer Admin\", \"Creator\", \"Deployer\", \"Discovery Admin\", \"Discovery Viewer\", \"Gateway Service Admin\", \"Integration Admin\", \"Integration Viewer\", \"Key Admin\", \"Maintainer\", \"Network Admin\", \"Network Creator\", \"Network Viewer\", \"Plugin Admin\", \"Plugins Admin\", \"Product Publisher\", \"Publisher\", \"Route Admin\", \"SNI Admin\", \"Service Admin\", \"Service Creator\", \"Service Viewer\", \"Upstream Admin\", \"Vault Admin\", \"Viewer\"]\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/systemAccountTeam:SystemAccountTeam": {
            "description": "SystemAccountTeam Resource\n",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the system account. Requires replacement if changed.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "ID of the team. Requires replacement if changed.\n"
                }
            },
            "required": [
                "teamId"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "ID of the system account. Requires replacement if changed.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "ID of the team. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SystemAccountTeam resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "ID of the system account. Requires replacement if changed.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "ID of the team. Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/team:Team": {
            "description": "Team Resource\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "A Unix timestamp representation of team creation.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the new team.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the team being created.\n"
                },
                "systemTeam": {
                    "type": "boolean",
                    "description": "Returns True if a user belongs to a `system_team`. System teams are teams that can manage Konnect objects, like\n\"Organization Admin\", or \"Service\"\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "A Unix timestamp representation of the most recent change to the team object in Konnect.\n"
                }
            },
            "required": [
                "createdAt",
                "description",
                "labels",
                "name",
                "systemTeam",
                "updatedAt"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the new team.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name for the team being created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "A Unix timestamp representation of team creation.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the new team.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A name for the team being created.\n"
                    },
                    "systemTeam": {
                        "type": "boolean",
                        "description": "Returns True if a user belongs to a `system_team`. System teams are teams that can manage Konnect objects, like\n\"Organization Admin\", or \"Service\"\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "A Unix timestamp representation of the most recent change to the team object in Konnect.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/teamRole:TeamRole": {
            "description": "TeamRole Resource\n",
            "properties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity. Requires replacement if changed.\n"
                },
                "entityRegion": {
                    "type": "string",
                    "description": "The region of the team. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\", \"*\"]\n"
                },
                "entityTypeName": {
                    "type": "string",
                    "description": "The type of entity. Requires replacement if changed. ; must be one of [\"API Products\", \"Application Auth Strategies\", \"Audit Logs\", \"Control Planes\", \"DCR Providers\", \"Identity\", \"Mesh Control Planes\", \"Networks\", \"Portals\", \"Service Hub\"]\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The desired role. Requires replacement if changed. ; must be one of [\"Admin\", \"Appearance Maintainer\", \"Application Registration\", \"Certificate Admin\", \"Cloud Gateway Cluster Admin\", \"Cloud Gateway Cluster Viewer\", \"Consumer Admin\", \"Creator\", \"Deployer\", \"Discovery Admin\", \"Discovery Viewer\", \"Gateway Service Admin\", \"Integration Admin\", \"Integration Viewer\", \"Key Admin\", \"Maintainer\", \"Network Admin\", \"Network Creator\", \"Network Viewer\", \"Plugin Admin\", \"Plugins Admin\", \"Product Publisher\", \"Publisher\", \"Route Admin\", \"SNI Admin\", \"Service Admin\", \"Service Creator\", \"Service Viewer\", \"Upstream Admin\", \"Vault Admin\", \"Viewer\"]\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID. Requires replacement if changed.\n"
                }
            },
            "required": [
                "entityId",
                "entityRegion",
                "entityTypeName",
                "roleName",
                "teamId"
            ],
            "inputProperties": {
                "entityId": {
                    "type": "string",
                    "description": "The ID of the entity. Requires replacement if changed.\n"
                },
                "entityRegion": {
                    "type": "string",
                    "description": "The region of the team. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\", \"*\"]\n"
                },
                "entityTypeName": {
                    "type": "string",
                    "description": "The type of entity. Requires replacement if changed. ; must be one of [\"API Products\", \"Application Auth Strategies\", \"Audit Logs\", \"Control Planes\", \"DCR Providers\", \"Identity\", \"Mesh Control Planes\", \"Networks\", \"Portals\", \"Service Hub\"]\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "The desired role. Requires replacement if changed. ; must be one of [\"Admin\", \"Appearance Maintainer\", \"Application Registration\", \"Certificate Admin\", \"Cloud Gateway Cluster Admin\", \"Cloud Gateway Cluster Viewer\", \"Consumer Admin\", \"Creator\", \"Deployer\", \"Discovery Admin\", \"Discovery Viewer\", \"Gateway Service Admin\", \"Integration Admin\", \"Integration Viewer\", \"Key Admin\", \"Maintainer\", \"Network Admin\", \"Network Creator\", \"Network Viewer\", \"Plugin Admin\", \"Plugins Admin\", \"Product Publisher\", \"Publisher\", \"Route Admin\", \"SNI Admin\", \"Service Admin\", \"Service Creator\", \"Service Viewer\", \"Upstream Admin\", \"Vault Admin\", \"Viewer\"]\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The team ID. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamRole resources.\n",
                "properties": {
                    "entityId": {
                        "type": "string",
                        "description": "The ID of the entity. Requires replacement if changed.\n"
                    },
                    "entityRegion": {
                        "type": "string",
                        "description": "The region of the team. Requires replacement if changed. ; must be one of [\"us\", \"eu\", \"au\", \"*\"]\n"
                    },
                    "entityTypeName": {
                        "type": "string",
                        "description": "The type of entity. Requires replacement if changed. ; must be one of [\"API Products\", \"Application Auth Strategies\", \"Audit Logs\", \"Control Planes\", \"DCR Providers\", \"Identity\", \"Mesh Control Planes\", \"Networks\", \"Portals\", \"Service Hub\"]\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "The desired role. Requires replacement if changed. ; must be one of [\"Admin\", \"Appearance Maintainer\", \"Application Registration\", \"Certificate Admin\", \"Cloud Gateway Cluster Admin\", \"Cloud Gateway Cluster Viewer\", \"Consumer Admin\", \"Creator\", \"Deployer\", \"Discovery Admin\", \"Discovery Viewer\", \"Gateway Service Admin\", \"Integration Admin\", \"Integration Viewer\", \"Key Admin\", \"Maintainer\", \"Network Admin\", \"Network Creator\", \"Network Viewer\", \"Plugin Admin\", \"Plugins Admin\", \"Product Publisher\", \"Publisher\", \"Route Admin\", \"SNI Admin\", \"Service Admin\", \"Service Creator\", \"Service Viewer\", \"Upstream Admin\", \"Vault Admin\", \"Viewer\"]\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The team ID. Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        },
        "konnect:index/teamUser:TeamUser": {
            "description": "TeamUser Resource\n",
            "properties": {
                "teamId": {
                    "type": "string",
                    "description": "ID of the team. Requires replacement if changed.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID. Requires replacement if changed.\n"
                }
            },
            "required": [
                "teamId",
                "userId"
            ],
            "inputProperties": {
                "teamId": {
                    "type": "string",
                    "description": "ID of the team. Requires replacement if changed.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID. Requires replacement if changed.\n"
                }
            },
            "requiredInputs": [
                "teamId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamUser resources.\n",
                "properties": {
                    "teamId": {
                        "type": "string",
                        "description": "ID of the team. Requires replacement if changed.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID. Requires replacement if changed.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "konnect:index/getApiProduct:getApiProduct": {
            "inputs": {
                "description": "A collection of arguments for invoking getApiProduct.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApiProduct.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "portalIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "portals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getApiProductPortal:getApiProductPortal"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "versionCount": {
                        "type": "number"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "portalIds",
                    "portals",
                    "updatedAt",
                    "versionCount"
                ]
            }
        },
        "konnect:index/getApiProductDocument:getApiProductDocument": {
            "inputs": {
                "description": "A collection of arguments for invoking getApiProductDocument.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiProductId",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApiProductDocument.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "metadata": {
                        "$ref": "#/types/konnect:index/getApiProductDocumentMetadata:getApiProductDocumentMetadata"
                    },
                    "parentDocumentId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiProductId",
                    "content",
                    "createdAt",
                    "id",
                    "metadata",
                    "parentDocumentId",
                    "slug",
                    "status",
                    "title",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getApiProductSpecification:getApiProductSpecification": {
            "inputs": {
                "description": "A collection of arguments for invoking getApiProductSpecification.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string"
                    },
                    "apiProductVersionId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiProductId",
                    "apiProductVersionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApiProductSpecification.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string"
                    },
                    "apiProductVersionId": {
                        "type": "string"
                    },
                    "content": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiProductId",
                    "apiProductVersionId",
                    "content",
                    "createdAt",
                    "id",
                    "name",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getApiProductVersion:getApiProductVersion": {
            "inputs": {
                "description": "A collection of arguments for invoking getApiProductVersion.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiProductId",
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getApiProductVersion.\n",
                "properties": {
                    "apiProductId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "gatewayService": {
                        "$ref": "#/types/konnect:index/getApiProductVersionGatewayService:getApiProductVersionGatewayService"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "portals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getApiProductVersionPortal:getApiProductVersionPortal"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiProductId",
                    "createdAt",
                    "deprecated",
                    "gatewayService",
                    "id",
                    "name",
                    "portals",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getApplicationAuthStrategy:getApplicationAuthStrategy": {
            "outputs": {
                "description": "A collection of values returned by getApplicationAuthStrategy.\n",
                "properties": {
                    "active": {
                        "type": "boolean"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "keyAuth": {
                        "$ref": "#/types/konnect:index/getApplicationAuthStrategyKeyAuth:getApplicationAuthStrategyKeyAuth"
                    },
                    "name": {
                        "type": "string"
                    },
                    "openidConnect": {
                        "$ref": "#/types/konnect:index/getApplicationAuthStrategyOpenidConnect:getApplicationAuthStrategyOpenidConnect"
                    }
                },
                "type": "object",
                "required": [
                    "active",
                    "displayName",
                    "id",
                    "keyAuth",
                    "name",
                    "openidConnect"
                ]
            }
        },
        "konnect:index/getCloudGatewayConfiguration:getCloudGatewayConfiguration": {
            "outputs": {
                "description": "A collection of values returned by getCloudGatewayConfiguration.\n",
                "properties": {
                    "apiAccess": {
                        "type": "string"
                    },
                    "controlPlaneGeo": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dataplaneGroupConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroupConfig:getCloudGatewayConfigurationDataplaneGroupConfig"
                        }
                    },
                    "dataplaneGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getCloudGatewayConfigurationDataplaneGroup:getCloudGatewayConfigurationDataplaneGroup"
                        }
                    },
                    "entityVersion": {
                        "type": "number"
                    },
                    "id": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "apiAccess",
                    "controlPlaneGeo",
                    "controlPlaneId",
                    "createdAt",
                    "dataplaneGroupConfigs",
                    "dataplaneGroups",
                    "entityVersion",
                    "id",
                    "updatedAt",
                    "version"
                ]
            }
        },
        "konnect:index/getCloudGatewayCustomDomain:getCloudGatewayCustomDomain": {
            "outputs": {
                "description": "A collection of values returned by getCloudGatewayCustomDomain.\n",
                "properties": {
                    "certificateId": {
                        "type": "string"
                    },
                    "controlPlaneGeo": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string"
                    },
                    "entityVersion": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "sniId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "stateMetadata": {
                        "$ref": "#/types/konnect:index/getCloudGatewayCustomDomainStateMetadata:getCloudGatewayCustomDomainStateMetadata"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificateId",
                    "controlPlaneGeo",
                    "controlPlaneId",
                    "createdAt",
                    "domain",
                    "entityVersion",
                    "id",
                    "sniId",
                    "state",
                    "stateMetadata",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getCloudGatewayNetwork:getCloudGatewayNetwork": {
            "outputs": {
                "description": "A collection of values returned by getCloudGatewayNetwork.\n",
                "properties": {
                    "availabilityZones": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "cidrBlock": {
                        "type": "string"
                    },
                    "cloudGatewayProviderAccountId": {
                        "type": "string"
                    },
                    "configurationReferenceCount": {
                        "type": "integer"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "ddosProtection": {
                        "type": "boolean"
                    },
                    "default": {
                        "type": "boolean"
                    },
                    "entityVersion": {
                        "type": "integer"
                    },
                    "firewall": {
                        "$ref": "#/types/konnect:index/getCloudGatewayNetworkFirewall:getCloudGatewayNetworkFirewall"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "providerMetadata": {
                        "$ref": "#/types/konnect:index/getCloudGatewayNetworkProviderMetadata:getCloudGatewayNetworkProviderMetadata"
                    },
                    "region": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "transitGatewayCount": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "availabilityZones",
                    "cidrBlock",
                    "cloudGatewayProviderAccountId",
                    "configurationReferenceCount",
                    "createdAt",
                    "ddosProtection",
                    "default",
                    "entityVersion",
                    "firewall",
                    "id",
                    "name",
                    "providerMetadata",
                    "region",
                    "state",
                    "transitGatewayCount",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getCloudGatewayProviderAccountList:getCloudGatewayProviderAccountList": {
            "inputs": {
                "description": "A collection of arguments for invoking getCloudGatewayProviderAccountList.\n",
                "properties": {
                    "pageNumber": {
                        "type": "integer"
                    },
                    "pageSize": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudGatewayProviderAccountList.\n",
                "properties": {
                    "datas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getCloudGatewayProviderAccountListData:getCloudGatewayProviderAccountListData"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "meta": {
                        "$ref": "#/types/konnect:index/getCloudGatewayProviderAccountListMeta:getCloudGatewayProviderAccountListMeta"
                    },
                    "pageNumber": {
                        "type": "integer"
                    },
                    "pageSize": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "datas",
                    "meta",
                    "id"
                ]
            }
        },
        "konnect:index/getCloudGatewayTransitGateway:getCloudGatewayTransitGateway": {
            "inputs": {
                "description": "A collection of arguments for invoking getCloudGatewayTransitGateway.\n",
                "properties": {
                    "networkId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "networkId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudGatewayTransitGateway.\n",
                "properties": {
                    "cidrBlocks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "dnsConfigs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getCloudGatewayTransitGatewayDnsConfig:getCloudGatewayTransitGatewayDnsConfig"
                        }
                    },
                    "entityVersion": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkId": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    },
                    "transitGatewayAttachmentConfig": {
                        "$ref": "#/types/konnect:index/getCloudGatewayTransitGatewayTransitGatewayAttachmentConfig:getCloudGatewayTransitGatewayTransitGatewayAttachmentConfig"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cidrBlocks",
                    "createdAt",
                    "dnsConfigs",
                    "entityVersion",
                    "id",
                    "name",
                    "networkId",
                    "state",
                    "transitGatewayAttachmentConfig",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayAcl:getGatewayAcl": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayAcl.\n",
                "properties": {
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumerId",
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayAcl.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayAclConsumer:getGatewayAclConsumer"
                    },
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "group": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "consumer",
                    "consumerId",
                    "controlPlaneId",
                    "createdAt",
                    "group",
                    "id",
                    "tags"
                ]
            }
        },
        "konnect:index/getGatewayBasicAuth:getGatewayBasicAuth": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayBasicAuth.\n",
                "properties": {
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumerId",
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayBasicAuth.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayBasicAuthConsumer:getGatewayBasicAuthConsumer"
                    },
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumer",
                    "consumerId",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "tags",
                    "username"
                ]
            }
        },
        "konnect:index/getGatewayCaCertificate:getGatewayCaCertificate": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayCaCertificate.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayCaCertificate.\n",
                "properties": {
                    "cert": {
                        "type": "string"
                    },
                    "certDigest": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "cert",
                    "certDigest",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayCertificate:getGatewayCertificate": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayCertificate.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayCertificate.\n",
                "properties": {
                    "cert": {
                        "type": "string"
                    },
                    "certAlt": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "keyAlt": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "cert",
                    "certAlt",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "key",
                    "keyAlt",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayConsumer:getGatewayConsumer": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayConsumer.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayConsumer.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "customId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "createdAt",
                    "customId",
                    "id",
                    "tags",
                    "updatedAt",
                    "username"
                ]
            }
        },
        "konnect:index/getGatewayConsumerGroup:getGatewayConsumerGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayConsumerGroup.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayConsumerGroup.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "name",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayControlPlane:getGatewayControlPlane": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayControlPlane.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayControlPlane.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayControlPlaneConfig:getGatewayControlPlaneConfig"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "description",
                    "id",
                    "labels",
                    "name"
                ]
            }
        },
        "konnect:index/getGatewayCustomPluginSchema:getGatewayCustomPluginSchema": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayCustomPluginSchema.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayCustomPluginSchema.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "luaSchema": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "createdAt",
                    "luaSchema",
                    "name",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "konnect:index/getGatewayDataPlaneClientCertificate:getGatewayDataPlaneClientCertificate": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayDataPlaneClientCertificate.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayDataPlaneClientCertificate.\n",
                "properties": {
                    "cert": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "cert",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayHmacAuth:getGatewayHmacAuth": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayHmacAuth.\n",
                "properties": {
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumerId",
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayHmacAuth.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayHmacAuthConsumer:getGatewayHmacAuthConsumer"
                    },
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumer",
                    "consumerId",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "secret",
                    "tags",
                    "username"
                ]
            }
        },
        "konnect:index/getGatewayJwt:getGatewayJwt": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayJwt.\n",
                "properties": {
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumerId",
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayJwt.\n",
                "properties": {
                    "algorithm": {
                        "type": "string"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayJwtConsumer:getGatewayJwtConsumer"
                    },
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "rsaPublicKey": {
                        "type": "string"
                    },
                    "secret": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "algorithm",
                    "consumer",
                    "consumerId",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "key",
                    "rsaPublicKey",
                    "secret",
                    "tags"
                ]
            }
        },
        "konnect:index/getGatewayKey:getGatewayKey": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayKey.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayKey.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "jwk": {
                        "type": "string"
                    },
                    "kid": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "pem": {
                        "$ref": "#/types/konnect:index/getGatewayKeyPem:getGatewayKeyPem"
                    },
                    "set": {
                        "$ref": "#/types/konnect:index/getGatewayKeySet:getGatewayKeySet"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "jwk",
                    "kid",
                    "name",
                    "pem",
                    "set",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayKeyAuth:getGatewayKeyAuth": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayKeyAuth.\n",
                "properties": {
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "consumerId",
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayKeyAuth.\n",
                "properties": {
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayKeyAuthConsumer:getGatewayKeyAuthConsumer"
                    },
                    "consumerId": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "consumer",
                    "consumerId",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "key",
                    "tags"
                ]
            }
        },
        "konnect:index/getGatewayKeySet:getGatewayKeySet": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayKeySet.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayKeySet.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "name",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginAcl:getGatewayPluginAcl": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginAcl.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginAcl.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAclConfig:getGatewayPluginAclConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAclConsumer:getGatewayPluginAclConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAclConsumerGroup:getGatewayPluginAclConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAclRoute:getGatewayPluginAclRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAclService:getGatewayPluginAclService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginAiPromptDecorator:getGatewayPluginAiPromptDecorator": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginAiPromptDecorator.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginAiPromptDecorator.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorConfig:getGatewayPluginAiPromptDecoratorConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorConsumer:getGatewayPluginAiPromptDecoratorConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorConsumerGroup:getGatewayPluginAiPromptDecoratorConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorRoute:getGatewayPluginAiPromptDecoratorRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptDecoratorService:getGatewayPluginAiPromptDecoratorService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginAiPromptGuard:getGatewayPluginAiPromptGuard": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginAiPromptGuard.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginAiPromptGuard.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptGuardConfig:getGatewayPluginAiPromptGuardConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptGuardConsumer:getGatewayPluginAiPromptGuardConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptGuardConsumerGroup:getGatewayPluginAiPromptGuardConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptGuardRoute:getGatewayPluginAiPromptGuardRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptGuardService:getGatewayPluginAiPromptGuardService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginAiPromptTemplate:getGatewayPluginAiPromptTemplate": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginAiPromptTemplate.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginAiPromptTemplate.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptTemplateConfig:getGatewayPluginAiPromptTemplateConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptTemplateConsumer:getGatewayPluginAiPromptTemplateConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptTemplateConsumerGroup:getGatewayPluginAiPromptTemplateConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptTemplateRoute:getGatewayPluginAiPromptTemplateRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiPromptTemplateService:getGatewayPluginAiPromptTemplateService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginAiProxy:getGatewayPluginAiProxy": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginAiProxy.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginAiProxy.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiProxyConfig:getGatewayPluginAiProxyConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiProxyConsumer:getGatewayPluginAiProxyConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiProxyConsumerGroup:getGatewayPluginAiProxyConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiProxyRoute:getGatewayPluginAiProxyRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAiProxyService:getGatewayPluginAiProxyService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginAwsLambda:getGatewayPluginAwsLambda": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginAwsLambda.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginAwsLambda.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAwsLambdaConfig:getGatewayPluginAwsLambdaConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAwsLambdaConsumer:getGatewayPluginAwsLambdaConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAwsLambdaConsumerGroup:getGatewayPluginAwsLambdaConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAwsLambdaRoute:getGatewayPluginAwsLambdaRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginAwsLambdaService:getGatewayPluginAwsLambdaService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginBasicAuth:getGatewayPluginBasicAuth": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginBasicAuth.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginBasicAuth.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginBasicAuthConfig:getGatewayPluginBasicAuthConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginBasicAuthConsumer:getGatewayPluginBasicAuthConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginBasicAuthConsumerGroup:getGatewayPluginBasicAuthConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginBasicAuthRoute:getGatewayPluginBasicAuthRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginBasicAuthService:getGatewayPluginBasicAuthService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginCorrelationId:getGatewayPluginCorrelationId": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginCorrelationId.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginCorrelationId.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorrelationIdConfig:getGatewayPluginCorrelationIdConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorrelationIdConsumer:getGatewayPluginCorrelationIdConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorrelationIdConsumerGroup:getGatewayPluginCorrelationIdConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorrelationIdRoute:getGatewayPluginCorrelationIdRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorrelationIdService:getGatewayPluginCorrelationIdService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginCors:getGatewayPluginCors": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginCors.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginCors.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorsConfig:getGatewayPluginCorsConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorsConsumer:getGatewayPluginCorsConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorsConsumerGroup:getGatewayPluginCorsConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorsRoute:getGatewayPluginCorsRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginCorsService:getGatewayPluginCorsService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginExitTransformer:getGatewayPluginExitTransformer": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginExitTransformer.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginExitTransformer.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginExitTransformerConfig:getGatewayPluginExitTransformerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginExitTransformerConsumer:getGatewayPluginExitTransformerConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginExitTransformerConsumerGroup:getGatewayPluginExitTransformerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginExitTransformerRoute:getGatewayPluginExitTransformerRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginExitTransformerService:getGatewayPluginExitTransformerService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginFileLog:getGatewayPluginFileLog": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginFileLog.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginFileLog.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginFileLogConfig:getGatewayPluginFileLogConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginFileLogConsumer:getGatewayPluginFileLogConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginFileLogConsumerGroup:getGatewayPluginFileLogConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginFileLogRoute:getGatewayPluginFileLogRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginFileLogService:getGatewayPluginFileLogService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginIpRestriction:getGatewayPluginIpRestriction": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginIpRestriction.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginIpRestriction.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginIpRestrictionConfig:getGatewayPluginIpRestrictionConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginIpRestrictionConsumer:getGatewayPluginIpRestrictionConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginIpRestrictionConsumerGroup:getGatewayPluginIpRestrictionConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginIpRestrictionRoute:getGatewayPluginIpRestrictionRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginIpRestrictionService:getGatewayPluginIpRestrictionService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginJq:getGatewayPluginJq": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginJq.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginJq.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJqConfig:getGatewayPluginJqConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJqConsumer:getGatewayPluginJqConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJqConsumerGroup:getGatewayPluginJqConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJqRoute:getGatewayPluginJqRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJqService:getGatewayPluginJqService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginJwt:getGatewayPluginJwt": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginJwt.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginJwt.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtConfig:getGatewayPluginJwtConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtConsumer:getGatewayPluginJwtConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtConsumerGroup:getGatewayPluginJwtConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtRoute:getGatewayPluginJwtRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtService:getGatewayPluginJwtService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginJwtSigner:getGatewayPluginJwtSigner": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginJwtSigner.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginJwtSigner.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtSignerConfig:getGatewayPluginJwtSignerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtSignerConsumer:getGatewayPluginJwtSignerConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtSignerConsumerGroup:getGatewayPluginJwtSignerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtSignerRoute:getGatewayPluginJwtSignerRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginJwtSignerService:getGatewayPluginJwtSignerService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginKeyAuth:getGatewayPluginKeyAuth": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginKeyAuth.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginKeyAuth.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginKeyAuthConfig:getGatewayPluginKeyAuthConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginKeyAuthConsumer:getGatewayPluginKeyAuthConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginKeyAuthConsumerGroup:getGatewayPluginKeyAuthConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginKeyAuthRoute:getGatewayPluginKeyAuthRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginKeyAuthService:getGatewayPluginKeyAuthService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginOauth2:getGatewayPluginOauth2": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginOauth2.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginOauth2.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOauth2Config:getGatewayPluginOauth2Config"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOauth2Consumer:getGatewayPluginOauth2Consumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOauth2ConsumerGroup:getGatewayPluginOauth2ConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOauth2Route:getGatewayPluginOauth2Route"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOauth2Service:getGatewayPluginOauth2Service"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginOpenidConnect:getGatewayPluginOpenidConnect": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginOpenidConnect.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginOpenidConnect.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpenidConnectConfig:getGatewayPluginOpenidConnectConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpenidConnectConsumer:getGatewayPluginOpenidConnectConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpenidConnectConsumerGroup:getGatewayPluginOpenidConnectConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpenidConnectRoute:getGatewayPluginOpenidConnectRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpenidConnectService:getGatewayPluginOpenidConnectService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginOpentelemetry:getGatewayPluginOpentelemetry": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginOpentelemetry.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginOpentelemetry.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpentelemetryConfig:getGatewayPluginOpentelemetryConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpentelemetryConsumer:getGatewayPluginOpentelemetryConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpentelemetryConsumerGroup:getGatewayPluginOpentelemetryConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpentelemetryRoute:getGatewayPluginOpentelemetryRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginOpentelemetryService:getGatewayPluginOpentelemetryService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginPostFunction:getGatewayPluginPostFunction": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginPostFunction.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginPostFunction.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPostFunctionConfig:getGatewayPluginPostFunctionConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPostFunctionConsumer:getGatewayPluginPostFunctionConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPostFunctionConsumerGroup:getGatewayPluginPostFunctionConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPostFunctionRoute:getGatewayPluginPostFunctionRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPostFunctionService:getGatewayPluginPostFunctionService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginPreFunction:getGatewayPluginPreFunction": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginPreFunction.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginPreFunction.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPreFunctionConfig:getGatewayPluginPreFunctionConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPreFunctionConsumer:getGatewayPluginPreFunctionConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPreFunctionConsumerGroup:getGatewayPluginPreFunctionConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPreFunctionRoute:getGatewayPluginPreFunctionRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPreFunctionService:getGatewayPluginPreFunctionService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginPrometheus:getGatewayPluginPrometheus": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginPrometheus.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginPrometheus.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPrometheusConfig:getGatewayPluginPrometheusConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPrometheusConsumer:getGatewayPluginPrometheusConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPrometheusConsumerGroup:getGatewayPluginPrometheusConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPrometheusRoute:getGatewayPluginPrometheusRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginPrometheusService:getGatewayPluginPrometheusService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginProxyCache:getGatewayPluginProxyCache": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginProxyCache.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginProxyCache.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginProxyCacheConfig:getGatewayPluginProxyCacheConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginProxyCacheConsumer:getGatewayPluginProxyCacheConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginProxyCacheConsumerGroup:getGatewayPluginProxyCacheConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginProxyCacheRoute:getGatewayPluginProxyCacheRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginProxyCacheService:getGatewayPluginProxyCacheService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginRateLimiting:getGatewayPluginRateLimiting": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginRateLimiting.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginRateLimiting.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingConfig:getGatewayPluginRateLimitingConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingConsumer:getGatewayPluginRateLimitingConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingConsumerGroup:getGatewayPluginRateLimitingConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingRoute:getGatewayPluginRateLimitingRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingService:getGatewayPluginRateLimitingService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginRateLimitingAdvanced:getGatewayPluginRateLimitingAdvanced": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginRateLimitingAdvanced.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginRateLimitingAdvanced.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingAdvancedConfig:getGatewayPluginRateLimitingAdvancedConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingAdvancedConsumer:getGatewayPluginRateLimitingAdvancedConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingAdvancedConsumerGroup:getGatewayPluginRateLimitingAdvancedConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingAdvancedRoute:getGatewayPluginRateLimitingAdvancedRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRateLimitingAdvancedService:getGatewayPluginRateLimitingAdvancedService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginRequestTermination:getGatewayPluginRequestTermination": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginRequestTermination.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginRequestTermination.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTerminationConfig:getGatewayPluginRequestTerminationConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTerminationConsumer:getGatewayPluginRequestTerminationConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTerminationConsumerGroup:getGatewayPluginRequestTerminationConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTerminationRoute:getGatewayPluginRequestTerminationRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTerminationService:getGatewayPluginRequestTerminationService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginRequestTransformer:getGatewayPluginRequestTransformer": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginRequestTransformer.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginRequestTransformer.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConfig:getGatewayPluginRequestTransformerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConsumer:getGatewayPluginRequestTransformerConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerConsumerGroup:getGatewayPluginRequestTransformerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerRoute:getGatewayPluginRequestTransformerRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerService:getGatewayPluginRequestTransformerService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginRequestTransformerAdvanced:getGatewayPluginRequestTransformerAdvanced": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginRequestTransformerAdvanced.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginRequestTransformerAdvanced.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConfig:getGatewayPluginRequestTransformerAdvancedConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConsumer:getGatewayPluginRequestTransformerAdvancedConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedConsumerGroup:getGatewayPluginRequestTransformerAdvancedConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedRoute:getGatewayPluginRequestTransformerAdvancedRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginRequestTransformerAdvancedService:getGatewayPluginRequestTransformerAdvancedService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginResponseTransformer:getGatewayPluginResponseTransformer": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginResponseTransformer.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginResponseTransformer.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConfig:getGatewayPluginResponseTransformerConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConsumer:getGatewayPluginResponseTransformerConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerConsumerGroup:getGatewayPluginResponseTransformerConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerRoute:getGatewayPluginResponseTransformerRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerService:getGatewayPluginResponseTransformerService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginResponseTransformerAdvanced:getGatewayPluginResponseTransformerAdvanced": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginResponseTransformerAdvanced.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginResponseTransformerAdvanced.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConfig:getGatewayPluginResponseTransformerAdvancedConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConsumer:getGatewayPluginResponseTransformerAdvancedConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedConsumerGroup:getGatewayPluginResponseTransformerAdvancedConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedRoute:getGatewayPluginResponseTransformerAdvancedRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginResponseTransformerAdvancedService:getGatewayPluginResponseTransformerAdvancedService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginSaml:getGatewayPluginSaml": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginSaml.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginSaml.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginSamlConfig:getGatewayPluginSamlConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginSamlConsumer:getGatewayPluginSamlConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginSamlConsumerGroup:getGatewayPluginSamlConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginSamlRoute:getGatewayPluginSamlRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginSamlService:getGatewayPluginSamlService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayPluginStatsd:getGatewayPluginStatsd": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayPluginStatsd.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayPluginStatsd.\n",
                "properties": {
                    "config": {
                        "$ref": "#/types/konnect:index/getGatewayPluginStatsdConfig:getGatewayPluginStatsdConfig"
                    },
                    "consumer": {
                        "$ref": "#/types/konnect:index/getGatewayPluginStatsdConsumer:getGatewayPluginStatsdConsumer"
                    },
                    "consumerGroup": {
                        "$ref": "#/types/konnect:index/getGatewayPluginStatsdConsumerGroup:getGatewayPluginStatsdConsumerGroup"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "instanceName": {
                        "type": "string"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "route": {
                        "$ref": "#/types/konnect:index/getGatewayPluginStatsdRoute:getGatewayPluginStatsdRoute"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayPluginStatsdService:getGatewayPluginStatsdService"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "consumer",
                    "consumerGroup",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "id",
                    "instanceName",
                    "protocols",
                    "route",
                    "service",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayRoute:getGatewayRoute": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayRoute.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayRoute.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "destinations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getGatewayRouteDestination:getGatewayRouteDestination"
                        }
                    },
                    "headers": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "httpsRedirectStatusCode": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "methods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "pathHandling": {
                        "type": "string"
                    },
                    "paths": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "preserveHost": {
                        "type": "boolean"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "regexPriority": {
                        "type": "integer"
                    },
                    "requestBuffering": {
                        "type": "boolean"
                    },
                    "responseBuffering": {
                        "type": "boolean"
                    },
                    "service": {
                        "$ref": "#/types/konnect:index/getGatewayRouteService:getGatewayRouteService"
                    },
                    "snis": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getGatewayRouteSource:getGatewayRouteSource"
                        }
                    },
                    "stripPath": {
                        "type": "boolean"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "createdAt",
                    "destinations",
                    "headers",
                    "hosts",
                    "httpsRedirectStatusCode",
                    "id",
                    "methods",
                    "name",
                    "pathHandling",
                    "paths",
                    "preserveHost",
                    "protocols",
                    "regexPriority",
                    "requestBuffering",
                    "responseBuffering",
                    "service",
                    "snis",
                    "sources",
                    "stripPath",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayService:getGatewayService": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayService.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayService.\n",
                "properties": {
                    "caCertificates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "clientCertificate": {
                        "$ref": "#/types/konnect:index/getGatewayServiceClientCertificate:getGatewayServiceClientCertificate"
                    },
                    "connectTimeout": {
                        "type": "integer"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "host": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "port": {
                        "type": "integer"
                    },
                    "protocol": {
                        "type": "string"
                    },
                    "readTimeout": {
                        "type": "integer"
                    },
                    "retries": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tlsVerify": {
                        "type": "boolean"
                    },
                    "tlsVerifyDepth": {
                        "type": "integer"
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "writeTimeout": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "caCertificates",
                    "clientCertificate",
                    "connectTimeout",
                    "controlPlaneId",
                    "createdAt",
                    "enabled",
                    "host",
                    "id",
                    "name",
                    "path",
                    "port",
                    "protocol",
                    "readTimeout",
                    "retries",
                    "tags",
                    "tlsVerify",
                    "tlsVerifyDepth",
                    "updatedAt",
                    "writeTimeout"
                ]
            }
        },
        "konnect:index/getGatewaySni:getGatewaySni": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewaySni.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewaySni.\n",
                "properties": {
                    "certificate": {
                        "$ref": "#/types/konnect:index/getGatewaySniCertificate:getGatewaySniCertificate"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "certificate",
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "name",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getGatewayTarget:getGatewayTarget": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayTarget.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "upstreamId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "upstreamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayTarget.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "number"
                    },
                    "id": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "target": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "number"
                    },
                    "upstream": {
                        "$ref": "#/types/konnect:index/getGatewayTargetUpstream:getGatewayTargetUpstream"
                    },
                    "upstreamId": {
                        "type": "string"
                    },
                    "weight": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId",
                    "createdAt",
                    "id",
                    "tags",
                    "target",
                    "updatedAt",
                    "upstream",
                    "upstreamId",
                    "weight"
                ]
            }
        },
        "konnect:index/getGatewayUpstream:getGatewayUpstream": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayUpstream.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayUpstream.\n",
                "properties": {
                    "algorithm": {
                        "type": "string"
                    },
                    "clientCertificate": {
                        "$ref": "#/types/konnect:index/getGatewayUpstreamClientCertificate:getGatewayUpstreamClientCertificate"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "hashFallback": {
                        "type": "string"
                    },
                    "hashFallbackHeader": {
                        "type": "string"
                    },
                    "hashFallbackQueryArg": {
                        "type": "string"
                    },
                    "hashFallbackUriCapture": {
                        "type": "string"
                    },
                    "hashOn": {
                        "type": "string"
                    },
                    "hashOnCookie": {
                        "type": "string"
                    },
                    "hashOnCookiePath": {
                        "type": "string"
                    },
                    "hashOnHeader": {
                        "type": "string"
                    },
                    "hashOnQueryArg": {
                        "type": "string"
                    },
                    "hashOnUriCapture": {
                        "type": "string"
                    },
                    "healthchecks": {
                        "$ref": "#/types/konnect:index/getGatewayUpstreamHealthchecks:getGatewayUpstreamHealthchecks"
                    },
                    "hostHeader": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slots": {
                        "type": "integer"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    },
                    "useSrvName": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "algorithm",
                    "clientCertificate",
                    "controlPlaneId",
                    "createdAt",
                    "hashFallback",
                    "hashFallbackHeader",
                    "hashFallbackQueryArg",
                    "hashFallbackUriCapture",
                    "hashOn",
                    "hashOnCookie",
                    "hashOnCookiePath",
                    "hashOnHeader",
                    "hashOnQueryArg",
                    "hashOnUriCapture",
                    "healthchecks",
                    "hostHeader",
                    "id",
                    "name",
                    "slots",
                    "tags",
                    "updatedAt",
                    "useSrvName"
                ]
            }
        },
        "konnect:index/getGatewayVault:getGatewayVault": {
            "inputs": {
                "description": "A collection of arguments for invoking getGatewayVault.\n",
                "properties": {
                    "controlPlaneId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlaneId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGatewayVault.\n",
                "properties": {
                    "config": {
                        "type": "string"
                    },
                    "controlPlaneId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "prefix": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "controlPlaneId",
                    "createdAt",
                    "description",
                    "id",
                    "name",
                    "prefix",
                    "tags",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getMeshControlPlane:getMeshControlPlane": {
            "outputs": {
                "description": "A collection of values returned by getMeshControlPlane.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getPortal:getPortal": {
            "outputs": {
                "description": "A collection of values returned by getPortal.\n",
                "properties": {
                    "applicationCount": {
                        "type": "number"
                    },
                    "autoApproveApplications": {
                        "type": "boolean"
                    },
                    "autoApproveDevelopers": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "customClientDomain": {
                        "type": "string"
                    },
                    "customDomain": {
                        "type": "string"
                    },
                    "defaultApplicationAuthStrategyId": {
                        "type": "string"
                    },
                    "defaultDomain": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "developerCount": {
                        "type": "number"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "publishedProductCount": {
                        "type": "number"
                    },
                    "rbacEnabled": {
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "applicationCount",
                    "autoApproveApplications",
                    "autoApproveDevelopers",
                    "createdAt",
                    "customClientDomain",
                    "customDomain",
                    "defaultApplicationAuthStrategyId",
                    "defaultDomain",
                    "description",
                    "developerCount",
                    "displayName",
                    "id",
                    "isPublic",
                    "labels",
                    "name",
                    "publishedProductCount",
                    "rbacEnabled",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getPortalAppearance:getPortalAppearance": {
            "inputs": {
                "description": "A collection of arguments for invoking getPortalAppearance.\n",
                "properties": {
                    "portalId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "portalId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPortalAppearance.\n",
                "properties": {
                    "customFonts": {
                        "$ref": "#/types/konnect:index/getPortalAppearanceCustomFonts:getPortalAppearanceCustomFonts"
                    },
                    "customTheme": {
                        "$ref": "#/types/konnect:index/getPortalAppearanceCustomTheme:getPortalAppearanceCustomTheme"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "images": {
                        "$ref": "#/types/konnect:index/getPortalAppearanceImages:getPortalAppearanceImages"
                    },
                    "portalId": {
                        "type": "string"
                    },
                    "text": {
                        "$ref": "#/types/konnect:index/getPortalAppearanceText:getPortalAppearanceText"
                    },
                    "themeName": {
                        "type": "string"
                    },
                    "useCustomFonts": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "customFonts",
                    "customTheme",
                    "images",
                    "portalId",
                    "text",
                    "themeName",
                    "useCustomFonts",
                    "id"
                ]
            }
        },
        "konnect:index/getPortalAuth:getPortalAuth": {
            "inputs": {
                "description": "A collection of arguments for invoking getPortalAuth.\n",
                "properties": {
                    "portalId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "portalId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPortalAuth.\n",
                "properties": {
                    "basicAuthEnabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "konnectMappingEnabled": {
                        "type": "boolean"
                    },
                    "oidcAuthEnabled": {
                        "type": "boolean"
                    },
                    "oidcConfig": {
                        "$ref": "#/types/konnect:index/getPortalAuthOidcConfig:getPortalAuthOidcConfig"
                    },
                    "oidcTeamMappingEnabled": {
                        "type": "boolean"
                    },
                    "portalId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "basicAuthEnabled",
                    "konnectMappingEnabled",
                    "oidcAuthEnabled",
                    "oidcConfig",
                    "oidcTeamMappingEnabled",
                    "portalId",
                    "id"
                ]
            }
        },
        "konnect:index/getPortalList:getPortalList": {
            "inputs": {
                "description": "A collection of arguments for invoking getPortalList.\n",
                "properties": {
                    "pageNumber": {
                        "type": "integer"
                    },
                    "pageSize": {
                        "type": "integer"
                    },
                    "sort": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPortalList.\n",
                "properties": {
                    "datas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getPortalListData:getPortalListData"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "meta": {
                        "$ref": "#/types/konnect:index/getPortalListMeta:getPortalListMeta"
                    },
                    "pageNumber": {
                        "type": "integer"
                    },
                    "pageSize": {
                        "type": "integer"
                    },
                    "sort": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "datas",
                    "meta",
                    "id"
                ]
            }
        },
        "konnect:index/getPortalProductVersion:getPortalProductVersion": {
            "inputs": {
                "description": "A collection of arguments for invoking getPortalProductVersion.\n",
                "properties": {
                    "portalId": {
                        "type": "string"
                    },
                    "productVersionId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "portalId",
                    "productVersionId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPortalProductVersion.\n",
                "properties": {
                    "applicationRegistrationEnabled": {
                        "type": "boolean"
                    },
                    "authStrategies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/konnect:index/getPortalProductVersionAuthStrategy:getPortalProductVersionAuthStrategy"
                        }
                    },
                    "autoApproveRegistration": {
                        "type": "boolean"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "deprecated": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "portalId": {
                        "type": "string"
                    },
                    "productVersionId": {
                        "type": "string"
                    },
                    "publishStatus": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "applicationRegistrationEnabled",
                    "authStrategies",
                    "autoApproveRegistration",
                    "createdAt",
                    "deprecated",
                    "id",
                    "portalId",
                    "productVersionId",
                    "publishStatus",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getServerlessCloudGateway:getServerlessCloudGateway": {
            "outputs": {
                "description": "A collection of values returned by getServerlessCloudGateway.\n",
                "properties": {
                    "controlPlane": {
                        "$ref": "#/types/konnect:index/getServerlessCloudGatewayControlPlane:getServerlessCloudGatewayControlPlane"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "gatewayEndpoint": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "controlPlane",
                    "createdAt",
                    "gatewayEndpoint",
                    "labels",
                    "updatedAt",
                    "id"
                ]
            }
        },
        "konnect:index/getSystemAccount:getSystemAccount": {
            "outputs": {
                "description": "A collection of values returned by getSystemAccount.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "konnectManaged": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "konnectManaged",
                    "name",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getSystemAccountAccessToken:getSystemAccountAccessToken": {
            "inputs": {
                "description": "A collection of arguments for invoking getSystemAccountAccessToken.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSystemAccountAccessToken.\n",
                "properties": {
                    "accountId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "lastUsedAt": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accountId",
                    "createdAt",
                    "expiresAt",
                    "id",
                    "lastUsedAt",
                    "name",
                    "updatedAt"
                ]
            }
        },
        "konnect:index/getTeam:getTeam": {
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "systemTeam": {
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "description",
                    "id",
                    "labels",
                    "name",
                    "systemTeam",
                    "updatedAt"
                ]
            }
        }
    }
}