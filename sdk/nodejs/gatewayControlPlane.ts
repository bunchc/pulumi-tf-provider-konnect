// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * GatewayControlPlane Resource
 */
export class GatewayControlPlane extends pulumi.CustomResource {
    /**
     * Get an existing GatewayControlPlane resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayControlPlaneState, opts?: pulumi.CustomResourceOptions): GatewayControlPlane {
        return new GatewayControlPlane(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/gatewayControlPlane:GatewayControlPlane';

    /**
     * Returns true if the given object is an instance of GatewayControlPlane.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayControlPlane {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayControlPlane.__pulumiType;
    }

    /**
     * The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
     */
    public readonly authType!: pulumi.Output<string | undefined>;
    /**
     * Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
     */
    public readonly cloudGateway!: pulumi.Output<boolean | undefined>;
    /**
     * The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
     */
    public readonly clusterType!: pulumi.Output<string | undefined>;
    /**
     * CP configuration object for related access endpoints.
     */
    public /*out*/ readonly config!: pulumi.Output<outputs.GatewayControlPlaneConfig>;
    /**
     * The description of the control plane in Konnect.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the control plane.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
     */
    public readonly proxyUrls!: pulumi.Output<outputs.GatewayControlPlaneProxyUrl[] | undefined>;

    /**
     * Create a GatewayControlPlane resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: GatewayControlPlaneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayControlPlaneArgs | GatewayControlPlaneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayControlPlaneState | undefined;
            resourceInputs["authType"] = state ? state.authType : undefined;
            resourceInputs["cloudGateway"] = state ? state.cloudGateway : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["proxyUrls"] = state ? state.proxyUrls : undefined;
        } else {
            const args = argsOrState as GatewayControlPlaneArgs | undefined;
            resourceInputs["authType"] = args ? args.authType : undefined;
            resourceInputs["cloudGateway"] = args ? args.cloudGateway : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["proxyUrls"] = args ? args.proxyUrls : undefined;
            resourceInputs["config"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayControlPlane.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayControlPlane resources.
 */
export interface GatewayControlPlaneState {
    /**
     * The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
     */
    authType?: pulumi.Input<string>;
    /**
     * Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
     */
    cloudGateway?: pulumi.Input<boolean>;
    /**
     * The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
     */
    clusterType?: pulumi.Input<string>;
    /**
     * CP configuration object for related access endpoints.
     */
    config?: pulumi.Input<inputs.GatewayControlPlaneConfig>;
    /**
     * The description of the control plane in Konnect.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the control plane.
     */
    name?: pulumi.Input<string>;
    /**
     * Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
     */
    proxyUrls?: pulumi.Input<pulumi.Input<inputs.GatewayControlPlaneProxyUrl>[]>;
}

/**
 * The set of arguments for constructing a GatewayControlPlane resource.
 */
export interface GatewayControlPlaneArgs {
    /**
     * The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
     */
    authType?: pulumi.Input<string>;
    /**
     * Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
     */
    cloudGateway?: pulumi.Input<boolean>;
    /**
     * The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
     */
    clusterType?: pulumi.Input<string>;
    /**
     * The description of the control plane in Konnect.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the control plane.
     */
    name?: pulumi.Input<string>;
    /**
     * Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
     */
    proxyUrls?: pulumi.Input<pulumi.Input<inputs.GatewayControlPlaneProxyUrl>[]>;
}
