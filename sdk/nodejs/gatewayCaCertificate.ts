// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * GatewayCACertificate Resource
 */
export class GatewayCaCertificate extends pulumi.CustomResource {
    /**
     * Get an existing GatewayCaCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayCaCertificateState, opts?: pulumi.CustomResourceOptions): GatewayCaCertificate {
        return new GatewayCaCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/gatewayCaCertificate:GatewayCaCertificate';

    /**
     * Returns true if the given object is an instance of GatewayCaCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayCaCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayCaCertificate.__pulumiType;
    }

    /**
     * PEM-encoded public certificate of the CA.
     */
    public readonly cert!: pulumi.Output<string>;
    /**
     * SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
     */
    public readonly certDigest!: pulumi.Output<string>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    public readonly controlPlaneId!: pulumi.Output<string>;
    /**
     * Unix epoch when the resource was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * An optional set of strings associated with the Certificate for grouping and filtering.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Unix epoch when the resource was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;

    /**
     * Create a GatewayCaCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayCaCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayCaCertificateArgs | GatewayCaCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayCaCertificateState | undefined;
            resourceInputs["cert"] = state ? state.cert : undefined;
            resourceInputs["certDigest"] = state ? state.certDigest : undefined;
            resourceInputs["controlPlaneId"] = state ? state.controlPlaneId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as GatewayCaCertificateArgs | undefined;
            if ((!args || args.controlPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneId'");
            }
            resourceInputs["cert"] = args ? args.cert : undefined;
            resourceInputs["certDigest"] = args ? args.certDigest : undefined;
            resourceInputs["controlPlaneId"] = args ? args.controlPlaneId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayCaCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayCaCertificate resources.
 */
export interface GatewayCaCertificateState {
    /**
     * PEM-encoded public certificate of the CA.
     */
    cert?: pulumi.Input<string>;
    /**
     * SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
     */
    certDigest?: pulumi.Input<string>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId?: pulumi.Input<string>;
    /**
     * Unix epoch when the resource was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * An optional set of strings associated with the Certificate for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unix epoch when the resource was last updated.
     */
    updatedAt?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GatewayCaCertificate resource.
 */
export interface GatewayCaCertificateArgs {
    /**
     * PEM-encoded public certificate of the CA.
     */
    cert?: pulumi.Input<string>;
    /**
     * SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
     */
    certDigest?: pulumi.Input<string>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId: pulumi.Input<string>;
    /**
     * An optional set of strings associated with the Certificate for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
