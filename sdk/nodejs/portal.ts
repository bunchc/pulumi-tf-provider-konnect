// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Portal Resource
 */
export class Portal extends pulumi.CustomResource {
    /**
     * Get an existing Portal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortalState, opts?: pulumi.CustomResourceOptions): Portal {
        return new Portal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/portal:Portal';

    /**
     * Returns true if the given object is an instance of Portal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Portal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Portal.__pulumiType;
    }

    /**
     * Number of applications created in the portal.
     */
    public /*out*/ readonly applicationCount!: pulumi.Output<number>;
    /**
     * Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
     */
    public readonly autoApproveApplications!: pulumi.Output<boolean>;
    /**
     * Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
     */
    public readonly autoApproveDevelopers!: pulumi.Output<boolean>;
    /**
     * An ISO-8601 timestamp representation of entity creation date.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
     */
    public readonly customClientDomain!: pulumi.Output<string>;
    /**
     * The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
     */
    public readonly customDomain!: pulumi.Output<string>;
    /**
     * Default strategy ID applied on applications for the portal
     */
    public readonly defaultApplicationAuthStrategyId!: pulumi.Output<string>;
    /**
     * The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
     * `customDomain``.
     */
    public /*out*/ readonly defaultDomain!: pulumi.Output<string>;
    /**
     * The description of the portal.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Number of developers using the portal.
     */
    public /*out*/ readonly developerCount!: pulumi.Output<number>;
    /**
     * The display name of the portal. This value will be the portal's `name` in Portal API.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
     */
    public readonly force!: pulumi.Output<string>;
    /**
     * Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
     */
    public readonly isPublic!: pulumi.Output<boolean>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the portal, used to distinguish it from other portals. Name must be unique.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Number of api products published to the portal
     */
    public /*out*/ readonly publishedProductCount!: pulumi.Output<number>;
    /**
     * Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
     * for products until unless assigned to teams with access to view and consume specific products.
     */
    public readonly rbacEnabled!: pulumi.Output<boolean>;
    /**
     * An ISO-8601 timestamp representation of entity update date.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a Portal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: PortalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortalArgs | PortalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortalState | undefined;
            resourceInputs["applicationCount"] = state ? state.applicationCount : undefined;
            resourceInputs["autoApproveApplications"] = state ? state.autoApproveApplications : undefined;
            resourceInputs["autoApproveDevelopers"] = state ? state.autoApproveDevelopers : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customClientDomain"] = state ? state.customClientDomain : undefined;
            resourceInputs["customDomain"] = state ? state.customDomain : undefined;
            resourceInputs["defaultApplicationAuthStrategyId"] = state ? state.defaultApplicationAuthStrategyId : undefined;
            resourceInputs["defaultDomain"] = state ? state.defaultDomain : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["developerCount"] = state ? state.developerCount : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["force"] = state ? state.force : undefined;
            resourceInputs["isPublic"] = state ? state.isPublic : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publishedProductCount"] = state ? state.publishedProductCount : undefined;
            resourceInputs["rbacEnabled"] = state ? state.rbacEnabled : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as PortalArgs | undefined;
            resourceInputs["autoApproveApplications"] = args ? args.autoApproveApplications : undefined;
            resourceInputs["autoApproveDevelopers"] = args ? args.autoApproveDevelopers : undefined;
            resourceInputs["customClientDomain"] = args ? args.customClientDomain : undefined;
            resourceInputs["customDomain"] = args ? args.customDomain : undefined;
            resourceInputs["defaultApplicationAuthStrategyId"] = args ? args.defaultApplicationAuthStrategyId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["force"] = args ? args.force : undefined;
            resourceInputs["isPublic"] = args ? args.isPublic : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["rbacEnabled"] = args ? args.rbacEnabled : undefined;
            resourceInputs["applicationCount"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["defaultDomain"] = undefined /*out*/;
            resourceInputs["developerCount"] = undefined /*out*/;
            resourceInputs["publishedProductCount"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Portal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Portal resources.
 */
export interface PortalState {
    /**
     * Number of applications created in the portal.
     */
    applicationCount?: pulumi.Input<number>;
    /**
     * Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
     */
    autoApproveApplications?: pulumi.Input<boolean>;
    /**
     * Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
     */
    autoApproveDevelopers?: pulumi.Input<boolean>;
    /**
     * An ISO-8601 timestamp representation of entity creation date.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
     */
    customClientDomain?: pulumi.Input<string>;
    /**
     * The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Default strategy ID applied on applications for the portal
     */
    defaultApplicationAuthStrategyId?: pulumi.Input<string>;
    /**
     * The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
     * `customDomain``.
     */
    defaultDomain?: pulumi.Input<string>;
    /**
     * The description of the portal.
     */
    description?: pulumi.Input<string>;
    /**
     * Number of developers using the portal.
     */
    developerCount?: pulumi.Input<number>;
    /**
     * The display name of the portal. This value will be the portal's `name` in Portal API.
     */
    displayName?: pulumi.Input<string>;
    /**
     * If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
     */
    force?: pulumi.Input<string>;
    /**
     * Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the portal, used to distinguish it from other portals. Name must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * Number of api products published to the portal
     */
    publishedProductCount?: pulumi.Input<number>;
    /**
     * Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
     * for products until unless assigned to teams with access to view and consume specific products.
     */
    rbacEnabled?: pulumi.Input<boolean>;
    /**
     * An ISO-8601 timestamp representation of entity update date.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Portal resource.
 */
export interface PortalArgs {
    /**
     * Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
     */
    autoApproveApplications?: pulumi.Input<boolean>;
    /**
     * Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
     */
    autoApproveDevelopers?: pulumi.Input<boolean>;
    /**
     * The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
     */
    customClientDomain?: pulumi.Input<string>;
    /**
     * The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
     */
    customDomain?: pulumi.Input<string>;
    /**
     * Default strategy ID applied on applications for the portal
     */
    defaultApplicationAuthStrategyId?: pulumi.Input<string>;
    /**
     * The description of the portal.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the portal. This value will be the portal's `name` in Portal API.
     */
    displayName?: pulumi.Input<string>;
    /**
     * If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
     */
    force?: pulumi.Input<string>;
    /**
     * Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
     */
    isPublic?: pulumi.Input<boolean>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the portal, used to distinguish it from other portals. Name must be unique.
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
     * for products until unless assigned to teams with access to view and consume specific products.
     */
    rbacEnabled?: pulumi.Input<boolean>;
}
