// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * PortalProductVersion Resource
 */
export class PortalProductVersion extends pulumi.CustomResource {
    /**
     * Get an existing PortalProductVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortalProductVersionState, opts?: pulumi.CustomResourceOptions): PortalProductVersion {
        return new PortalProductVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/portalProductVersion:PortalProductVersion';

    /**
     * Returns true if the given object is an instance of PortalProductVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PortalProductVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortalProductVersion.__pulumiType;
    }

    /**
     * Whether the application registration on this portal for the api product version is enabled
     */
    public readonly applicationRegistrationEnabled!: pulumi.Output<boolean>;
    /**
     * A list of authentication strategies
     */
    public /*out*/ readonly authStrategies!: pulumi.Output<outputs.PortalProductVersionAuthStrategy[]>;
    /**
     * A list of authentication strategy IDs
     */
    public readonly authStrategyIds!: pulumi.Output<string[]>;
    /**
     * Whether the application registration auto approval on this portal for the api product version is enabled
     */
    public readonly autoApproveRegistration!: pulumi.Output<boolean>;
    /**
     * An ISO-8601 timestamp representation of entity creation date.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Whether the api product version on the portal is deprecated
     */
    public readonly deprecated!: pulumi.Output<boolean>;
    /**
     * Whether to notify developers who are affected by this change
     */
    public readonly notifyDevelopers!: pulumi.Output<boolean | undefined>;
    /**
     * portal identifier
     */
    public readonly portalId!: pulumi.Output<string>;
    /**
     * API product version identifier
     */
    public readonly productVersionId!: pulumi.Output<string>;
    /**
     * Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
     */
    public readonly publishStatus!: pulumi.Output<string>;
    /**
     * An ISO-8601 timestamp representation of entity update date.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a PortalProductVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortalProductVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortalProductVersionArgs | PortalProductVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortalProductVersionState | undefined;
            resourceInputs["applicationRegistrationEnabled"] = state ? state.applicationRegistrationEnabled : undefined;
            resourceInputs["authStrategies"] = state ? state.authStrategies : undefined;
            resourceInputs["authStrategyIds"] = state ? state.authStrategyIds : undefined;
            resourceInputs["autoApproveRegistration"] = state ? state.autoApproveRegistration : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deprecated"] = state ? state.deprecated : undefined;
            resourceInputs["notifyDevelopers"] = state ? state.notifyDevelopers : undefined;
            resourceInputs["portalId"] = state ? state.portalId : undefined;
            resourceInputs["productVersionId"] = state ? state.productVersionId : undefined;
            resourceInputs["publishStatus"] = state ? state.publishStatus : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as PortalProductVersionArgs | undefined;
            if ((!args || args.applicationRegistrationEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationRegistrationEnabled'");
            }
            if ((!args || args.authStrategyIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authStrategyIds'");
            }
            if ((!args || args.autoApproveRegistration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoApproveRegistration'");
            }
            if ((!args || args.deprecated === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deprecated'");
            }
            if ((!args || args.portalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portalId'");
            }
            if ((!args || args.productVersionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productVersionId'");
            }
            if ((!args || args.publishStatus === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishStatus'");
            }
            resourceInputs["applicationRegistrationEnabled"] = args ? args.applicationRegistrationEnabled : undefined;
            resourceInputs["authStrategyIds"] = args ? args.authStrategyIds : undefined;
            resourceInputs["autoApproveRegistration"] = args ? args.autoApproveRegistration : undefined;
            resourceInputs["deprecated"] = args ? args.deprecated : undefined;
            resourceInputs["notifyDevelopers"] = args ? args.notifyDevelopers : undefined;
            resourceInputs["portalId"] = args ? args.portalId : undefined;
            resourceInputs["productVersionId"] = args ? args.productVersionId : undefined;
            resourceInputs["publishStatus"] = args ? args.publishStatus : undefined;
            resourceInputs["authStrategies"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PortalProductVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PortalProductVersion resources.
 */
export interface PortalProductVersionState {
    /**
     * Whether the application registration on this portal for the api product version is enabled
     */
    applicationRegistrationEnabled?: pulumi.Input<boolean>;
    /**
     * A list of authentication strategies
     */
    authStrategies?: pulumi.Input<pulumi.Input<inputs.PortalProductVersionAuthStrategy>[]>;
    /**
     * A list of authentication strategy IDs
     */
    authStrategyIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the application registration auto approval on this portal for the api product version is enabled
     */
    autoApproveRegistration?: pulumi.Input<boolean>;
    /**
     * An ISO-8601 timestamp representation of entity creation date.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether the api product version on the portal is deprecated
     */
    deprecated?: pulumi.Input<boolean>;
    /**
     * Whether to notify developers who are affected by this change
     */
    notifyDevelopers?: pulumi.Input<boolean>;
    /**
     * portal identifier
     */
    portalId?: pulumi.Input<string>;
    /**
     * API product version identifier
     */
    productVersionId?: pulumi.Input<string>;
    /**
     * Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
     */
    publishStatus?: pulumi.Input<string>;
    /**
     * An ISO-8601 timestamp representation of entity update date.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PortalProductVersion resource.
 */
export interface PortalProductVersionArgs {
    /**
     * Whether the application registration on this portal for the api product version is enabled
     */
    applicationRegistrationEnabled: pulumi.Input<boolean>;
    /**
     * A list of authentication strategy IDs
     */
    authStrategyIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the application registration auto approval on this portal for the api product version is enabled
     */
    autoApproveRegistration: pulumi.Input<boolean>;
    /**
     * Whether the api product version on the portal is deprecated
     */
    deprecated: pulumi.Input<boolean>;
    /**
     * Whether to notify developers who are affected by this change
     */
    notifyDevelopers?: pulumi.Input<boolean>;
    /**
     * portal identifier
     */
    portalId: pulumi.Input<string>;
    /**
     * API product version identifier
     */
    productVersionId: pulumi.Input<string>;
    /**
     * Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
     */
    publishStatus: pulumi.Input<string>;
}
