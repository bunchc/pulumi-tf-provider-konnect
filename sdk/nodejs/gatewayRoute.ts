// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * GatewayRoute Resource
 */
export class GatewayRoute extends pulumi.CustomResource {
    /**
     * Get an existing GatewayRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayRouteState, opts?: pulumi.CustomResourceOptions): GatewayRoute {
        return new GatewayRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/gatewayRoute:GatewayRoute';

    /**
     * Returns true if the given object is an instance of GatewayRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayRoute.__pulumiType;
    }

    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    public readonly controlPlaneId!: pulumi.Output<string>;
    /**
     * Unix epoch when the resource was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
     */
    public readonly destinations!: pulumi.Output<outputs.GatewayRouteDestination[]>;
    /**
     * One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
     */
    public readonly headers!: pulumi.Output<{[key: string]: string}>;
    /**
     * A list of domain names that match this Route. Note that the hosts value is case sensitive.
     */
    public readonly hosts!: pulumi.Output<string[]>;
    /**
     * The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of ["426", "301", "302", "307", "308"]
     */
    public readonly httpsRedirectStatusCode!: pulumi.Output<number>;
    /**
     * A list of HTTP methods that match this Route.
     */
    public readonly methods!: pulumi.Output<string[]>;
    /**
     * The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of ["v0", "v1"]
     */
    public readonly pathHandling!: pulumi.Output<string>;
    /**
     * A list of paths that match this Route.
     */
    public readonly paths!: pulumi.Output<string[]>;
    /**
     * When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
     */
    public readonly preserveHost!: pulumi.Output<boolean>;
    /**
     * An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
     */
    public readonly protocols!: pulumi.Output<string[]>;
    /**
     * A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regexPriority`, the older one (lowest `createdAt`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
     */
    public readonly regexPriority!: pulumi.Output<number>;
    /**
     * Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
     */
    public readonly requestBuffering!: pulumi.Output<boolean>;
    /**
     * Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
     */
    public readonly responseBuffering!: pulumi.Output<boolean>;
    /**
     * The Service this Route is associated to. This is where the Route proxies traffic to.
     */
    public readonly service!: pulumi.Output<outputs.GatewayRouteService>;
    /**
     * A list of SNIs that match this Route when using stream routing.
     */
    public readonly snis!: pulumi.Output<string[]>;
    /**
     * A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
     */
    public readonly sources!: pulumi.Output<outputs.GatewayRouteSource[]>;
    /**
     * When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
     */
    public readonly stripPath!: pulumi.Output<boolean>;
    /**
     * An optional set of strings associated with the Route for grouping and filtering.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Unix epoch when the resource was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;

    /**
     * Create a GatewayRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayRouteArgs | GatewayRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayRouteState | undefined;
            resourceInputs["controlPlaneId"] = state ? state.controlPlaneId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["destinations"] = state ? state.destinations : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["httpsRedirectStatusCode"] = state ? state.httpsRedirectStatusCode : undefined;
            resourceInputs["methods"] = state ? state.methods : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathHandling"] = state ? state.pathHandling : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["preserveHost"] = state ? state.preserveHost : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["regexPriority"] = state ? state.regexPriority : undefined;
            resourceInputs["requestBuffering"] = state ? state.requestBuffering : undefined;
            resourceInputs["responseBuffering"] = state ? state.responseBuffering : undefined;
            resourceInputs["service"] = state ? state.service : undefined;
            resourceInputs["snis"] = state ? state.snis : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["stripPath"] = state ? state.stripPath : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as GatewayRouteArgs | undefined;
            if ((!args || args.controlPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneId'");
            }
            resourceInputs["controlPlaneId"] = args ? args.controlPlaneId : undefined;
            resourceInputs["destinations"] = args ? args.destinations : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["hosts"] = args ? args.hosts : undefined;
            resourceInputs["httpsRedirectStatusCode"] = args ? args.httpsRedirectStatusCode : undefined;
            resourceInputs["methods"] = args ? args.methods : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathHandling"] = args ? args.pathHandling : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["preserveHost"] = args ? args.preserveHost : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["regexPriority"] = args ? args.regexPriority : undefined;
            resourceInputs["requestBuffering"] = args ? args.requestBuffering : undefined;
            resourceInputs["responseBuffering"] = args ? args.responseBuffering : undefined;
            resourceInputs["service"] = args ? args.service : undefined;
            resourceInputs["snis"] = args ? args.snis : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["stripPath"] = args ? args.stripPath : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayRoute resources.
 */
export interface GatewayRouteState {
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId?: pulumi.Input<string>;
    /**
     * Unix epoch when the resource was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.GatewayRouteDestination>[]>;
    /**
     * One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of domain names that match this Route. Note that the hosts value is case sensitive.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of ["426", "301", "302", "307", "308"]
     */
    httpsRedirectStatusCode?: pulumi.Input<number>;
    /**
     * A list of HTTP methods that match this Route.
     */
    methods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
     */
    name?: pulumi.Input<string>;
    /**
     * Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of ["v0", "v1"]
     */
    pathHandling?: pulumi.Input<string>;
    /**
     * A list of paths that match this Route.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
     */
    preserveHost?: pulumi.Input<boolean>;
    /**
     * An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regexPriority`, the older one (lowest `createdAt`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
     */
    regexPriority?: pulumi.Input<number>;
    /**
     * Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
     */
    requestBuffering?: pulumi.Input<boolean>;
    /**
     * Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
     */
    responseBuffering?: pulumi.Input<boolean>;
    /**
     * The Service this Route is associated to. This is where the Route proxies traffic to.
     */
    service?: pulumi.Input<inputs.GatewayRouteService>;
    /**
     * A list of SNIs that match this Route when using stream routing.
     */
    snis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
     */
    sources?: pulumi.Input<pulumi.Input<inputs.GatewayRouteSource>[]>;
    /**
     * When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
     */
    stripPath?: pulumi.Input<boolean>;
    /**
     * An optional set of strings associated with the Route for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unix epoch when the resource was last updated.
     */
    updatedAt?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GatewayRoute resource.
 */
export interface GatewayRouteArgs {
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId: pulumi.Input<string>;
    /**
     * A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
     */
    destinations?: pulumi.Input<pulumi.Input<inputs.GatewayRouteDestination>[]>;
    /**
     * One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
     */
    headers?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A list of domain names that match this Route. Note that the hosts value is case sensitive.
     */
    hosts?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of ["426", "301", "302", "307", "308"]
     */
    httpsRedirectStatusCode?: pulumi.Input<number>;
    /**
     * A list of HTTP methods that match this Route.
     */
    methods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
     */
    name?: pulumi.Input<string>;
    /**
     * Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of ["v0", "v1"]
     */
    pathHandling?: pulumi.Input<string>;
    /**
     * A list of paths that match this Route.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
     */
    preserveHost?: pulumi.Input<boolean>;
    /**
     * An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regexPriority`, the older one (lowest `createdAt`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
     */
    regexPriority?: pulumi.Input<number>;
    /**
     * Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
     */
    requestBuffering?: pulumi.Input<boolean>;
    /**
     * Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
     */
    responseBuffering?: pulumi.Input<boolean>;
    /**
     * The Service this Route is associated to. This is where the Route proxies traffic to.
     */
    service?: pulumi.Input<inputs.GatewayRouteService>;
    /**
     * A list of SNIs that match this Route when using stream routing.
     */
    snis?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
     */
    sources?: pulumi.Input<pulumi.Input<inputs.GatewayRouteSource>[]>;
    /**
     * When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
     */
    stripPath?: pulumi.Input<boolean>;
    /**
     * An optional set of strings associated with the Route for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
}
