// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * CloudGatewayConfiguration Resource
 */
export class CloudGatewayConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing CloudGatewayConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudGatewayConfigurationState, opts?: pulumi.CustomResourceOptions): CloudGatewayConfiguration {
        return new CloudGatewayConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/cloudGatewayConfiguration:CloudGatewayConfiguration';

    /**
     * Returns true if the given object is an instance of CloudGatewayConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudGatewayConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudGatewayConfiguration.__pulumiType;
    }

    /**
     * Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
     */
    public readonly apiAccess!: pulumi.Output<string>;
    /**
     * Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
     */
    public readonly controlPlaneGeo!: pulumi.Output<string>;
    public readonly controlPlaneId!: pulumi.Output<string>;
    /**
     * An RFC-3339 timestamp representation of configuration creation date.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Object that describes where data-planes will be deployed to, along with how many instances.
     */
    public /*out*/ readonly dataplaneGroupConfigs!: pulumi.Output<outputs.CloudGatewayConfigurationDataplaneGroupConfig[]>;
    /**
     * List of data-plane groups that describe where to deploy instances, along with how many instances.
     */
    public readonly dataplaneGroups!: pulumi.Output<outputs.CloudGatewayConfigurationDataplaneGroup[]>;
    /**
     * Positive, monotonically increasing version integer, to serialize configuration changes.
     */
    public /*out*/ readonly entityVersion!: pulumi.Output<number>;
    /**
     * An RFC-3339 timestamp representation of configuration update date.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * Supported gateway version.
     */
    public readonly version!: pulumi.Output<string>;

    /**
     * Create a CloudGatewayConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudGatewayConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudGatewayConfigurationArgs | CloudGatewayConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudGatewayConfigurationState | undefined;
            resourceInputs["apiAccess"] = state ? state.apiAccess : undefined;
            resourceInputs["controlPlaneGeo"] = state ? state.controlPlaneGeo : undefined;
            resourceInputs["controlPlaneId"] = state ? state.controlPlaneId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["dataplaneGroupConfigs"] = state ? state.dataplaneGroupConfigs : undefined;
            resourceInputs["dataplaneGroups"] = state ? state.dataplaneGroups : undefined;
            resourceInputs["entityVersion"] = state ? state.entityVersion : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CloudGatewayConfigurationArgs | undefined;
            if ((!args || args.controlPlaneGeo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneGeo'");
            }
            if ((!args || args.controlPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneId'");
            }
            if ((!args || args.dataplaneGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataplaneGroups'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["apiAccess"] = args ? args.apiAccess : undefined;
            resourceInputs["controlPlaneGeo"] = args ? args.controlPlaneGeo : undefined;
            resourceInputs["controlPlaneId"] = args ? args.controlPlaneId : undefined;
            resourceInputs["dataplaneGroups"] = args ? args.dataplaneGroups : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["dataplaneGroupConfigs"] = undefined /*out*/;
            resourceInputs["entityVersion"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudGatewayConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudGatewayConfiguration resources.
 */
export interface CloudGatewayConfigurationState {
    /**
     * Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
     */
    apiAccess?: pulumi.Input<string>;
    /**
     * Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
     */
    controlPlaneGeo?: pulumi.Input<string>;
    controlPlaneId?: pulumi.Input<string>;
    /**
     * An RFC-3339 timestamp representation of configuration creation date.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Object that describes where data-planes will be deployed to, along with how many instances.
     */
    dataplaneGroupConfigs?: pulumi.Input<pulumi.Input<inputs.CloudGatewayConfigurationDataplaneGroupConfig>[]>;
    /**
     * List of data-plane groups that describe where to deploy instances, along with how many instances.
     */
    dataplaneGroups?: pulumi.Input<pulumi.Input<inputs.CloudGatewayConfigurationDataplaneGroup>[]>;
    /**
     * Positive, monotonically increasing version integer, to serialize configuration changes.
     */
    entityVersion?: pulumi.Input<number>;
    /**
     * An RFC-3339 timestamp representation of configuration update date.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * Supported gateway version.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudGatewayConfiguration resource.
 */
export interface CloudGatewayConfigurationArgs {
    /**
     * Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
     */
    apiAccess?: pulumi.Input<string>;
    /**
     * Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
     */
    controlPlaneGeo: pulumi.Input<string>;
    controlPlaneId: pulumi.Input<string>;
    /**
     * List of data-plane groups that describe where to deploy instances, along with how many instances.
     */
    dataplaneGroups: pulumi.Input<pulumi.Input<inputs.CloudGatewayConfigurationDataplaneGroup>[]>;
    /**
     * Supported gateway version.
     */
    version: pulumi.Input<string>;
}
