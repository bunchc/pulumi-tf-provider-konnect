// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * GatewayUpstream Resource
 */
export class GatewayUpstream extends pulumi.CustomResource {
    /**
     * Get an existing GatewayUpstream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayUpstreamState, opts?: pulumi.CustomResourceOptions): GatewayUpstream {
        return new GatewayUpstream(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/gatewayUpstream:GatewayUpstream';

    /**
     * Returns true if the given object is an instance of GatewayUpstream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayUpstream {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayUpstream.__pulumiType;
    }

    /**
     * Which load balancing algorithm to use. must be one of ["consistent-hashing", "least-connections", "round-robin", "latency"]
     */
    public readonly algorithm!: pulumi.Output<string>;
    /**
     * If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
     */
    public readonly clientCertificate!: pulumi.Output<outputs.GatewayUpstreamClientCertificate>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    public readonly controlPlaneId!: pulumi.Output<string>;
    /**
     * Unix epoch when the resource was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * What to use as hashing input if the primary `hashOn` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hashOn` is set to `cookie`. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
     */
    public readonly hashFallback!: pulumi.Output<string>;
    /**
     * The header name to take the value from as hash input. Only required when `hashFallback` is set to `header`.
     */
    public readonly hashFallbackHeader!: pulumi.Output<string>;
    /**
     * The name of the query string argument to take the value from as hash input. Only required when `hashFallback` is set to `queryArg`.
     */
    public readonly hashFallbackQueryArg!: pulumi.Output<string>;
    /**
     * The name of the route URI capture to take the value from as hash input. Only required when `hashFallback` is set to `uriCapture`.
     */
    public readonly hashFallbackUriCapture!: pulumi.Output<string>;
    /**
     * What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
     */
    public readonly hashOn!: pulumi.Output<string>;
    /**
     * The cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
     */
    public readonly hashOnCookie!: pulumi.Output<string>;
    /**
     * The cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`.
     */
    public readonly hashOnCookiePath!: pulumi.Output<string>;
    /**
     * The header name to take the value from as hash input. Only required when `hashOn` is set to `header`.
     */
    public readonly hashOnHeader!: pulumi.Output<string>;
    /**
     * The name of the query string argument to take the value from as hash input. Only required when `hashOn` is set to `queryArg`.
     */
    public readonly hashOnQueryArg!: pulumi.Output<string>;
    /**
     * The name of the route URI capture to take the value from as hash input. Only required when `hashOn` is set to `uriCapture`.
     */
    public readonly hashOnUriCapture!: pulumi.Output<string>;
    public readonly healthchecks!: pulumi.Output<outputs.GatewayUpstreamHealthchecks>;
    /**
     * The hostname to be used as `Host` header when proxying requests through Kong.
     */
    public readonly hostHeader!: pulumi.Output<string>;
    /**
     * This is a hostname, which must be equal to the `host` of a Service.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
     */
    public readonly slots!: pulumi.Output<number>;
    /**
     * An optional set of strings associated with the Upstream for grouping and filtering.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Unix epoch when the resource was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;
    /**
     * If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
     */
    public readonly useSrvName!: pulumi.Output<boolean>;

    /**
     * Create a GatewayUpstream resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayUpstreamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayUpstreamArgs | GatewayUpstreamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayUpstreamState | undefined;
            resourceInputs["algorithm"] = state ? state.algorithm : undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["controlPlaneId"] = state ? state.controlPlaneId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["hashFallback"] = state ? state.hashFallback : undefined;
            resourceInputs["hashFallbackHeader"] = state ? state.hashFallbackHeader : undefined;
            resourceInputs["hashFallbackQueryArg"] = state ? state.hashFallbackQueryArg : undefined;
            resourceInputs["hashFallbackUriCapture"] = state ? state.hashFallbackUriCapture : undefined;
            resourceInputs["hashOn"] = state ? state.hashOn : undefined;
            resourceInputs["hashOnCookie"] = state ? state.hashOnCookie : undefined;
            resourceInputs["hashOnCookiePath"] = state ? state.hashOnCookiePath : undefined;
            resourceInputs["hashOnHeader"] = state ? state.hashOnHeader : undefined;
            resourceInputs["hashOnQueryArg"] = state ? state.hashOnQueryArg : undefined;
            resourceInputs["hashOnUriCapture"] = state ? state.hashOnUriCapture : undefined;
            resourceInputs["healthchecks"] = state ? state.healthchecks : undefined;
            resourceInputs["hostHeader"] = state ? state.hostHeader : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["slots"] = state ? state.slots : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["useSrvName"] = state ? state.useSrvName : undefined;
        } else {
            const args = argsOrState as GatewayUpstreamArgs | undefined;
            if ((!args || args.controlPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneId'");
            }
            resourceInputs["algorithm"] = args ? args.algorithm : undefined;
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["controlPlaneId"] = args ? args.controlPlaneId : undefined;
            resourceInputs["hashFallback"] = args ? args.hashFallback : undefined;
            resourceInputs["hashFallbackHeader"] = args ? args.hashFallbackHeader : undefined;
            resourceInputs["hashFallbackQueryArg"] = args ? args.hashFallbackQueryArg : undefined;
            resourceInputs["hashFallbackUriCapture"] = args ? args.hashFallbackUriCapture : undefined;
            resourceInputs["hashOn"] = args ? args.hashOn : undefined;
            resourceInputs["hashOnCookie"] = args ? args.hashOnCookie : undefined;
            resourceInputs["hashOnCookiePath"] = args ? args.hashOnCookiePath : undefined;
            resourceInputs["hashOnHeader"] = args ? args.hashOnHeader : undefined;
            resourceInputs["hashOnQueryArg"] = args ? args.hashOnQueryArg : undefined;
            resourceInputs["hashOnUriCapture"] = args ? args.hashOnUriCapture : undefined;
            resourceInputs["healthchecks"] = args ? args.healthchecks : undefined;
            resourceInputs["hostHeader"] = args ? args.hostHeader : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["slots"] = args ? args.slots : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["useSrvName"] = args ? args.useSrvName : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayUpstream.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayUpstream resources.
 */
export interface GatewayUpstreamState {
    /**
     * Which load balancing algorithm to use. must be one of ["consistent-hashing", "least-connections", "round-robin", "latency"]
     */
    algorithm?: pulumi.Input<string>;
    /**
     * If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
     */
    clientCertificate?: pulumi.Input<inputs.GatewayUpstreamClientCertificate>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId?: pulumi.Input<string>;
    /**
     * Unix epoch when the resource was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * What to use as hashing input if the primary `hashOn` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hashOn` is set to `cookie`. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
     */
    hashFallback?: pulumi.Input<string>;
    /**
     * The header name to take the value from as hash input. Only required when `hashFallback` is set to `header`.
     */
    hashFallbackHeader?: pulumi.Input<string>;
    /**
     * The name of the query string argument to take the value from as hash input. Only required when `hashFallback` is set to `queryArg`.
     */
    hashFallbackQueryArg?: pulumi.Input<string>;
    /**
     * The name of the route URI capture to take the value from as hash input. Only required when `hashFallback` is set to `uriCapture`.
     */
    hashFallbackUriCapture?: pulumi.Input<string>;
    /**
     * What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
     */
    hashOn?: pulumi.Input<string>;
    /**
     * The cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
     */
    hashOnCookie?: pulumi.Input<string>;
    /**
     * The cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`.
     */
    hashOnCookiePath?: pulumi.Input<string>;
    /**
     * The header name to take the value from as hash input. Only required when `hashOn` is set to `header`.
     */
    hashOnHeader?: pulumi.Input<string>;
    /**
     * The name of the query string argument to take the value from as hash input. Only required when `hashOn` is set to `queryArg`.
     */
    hashOnQueryArg?: pulumi.Input<string>;
    /**
     * The name of the route URI capture to take the value from as hash input. Only required when `hashOn` is set to `uriCapture`.
     */
    hashOnUriCapture?: pulumi.Input<string>;
    healthchecks?: pulumi.Input<inputs.GatewayUpstreamHealthchecks>;
    /**
     * The hostname to be used as `Host` header when proxying requests through Kong.
     */
    hostHeader?: pulumi.Input<string>;
    /**
     * This is a hostname, which must be equal to the `host` of a Service.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
     */
    slots?: pulumi.Input<number>;
    /**
     * An optional set of strings associated with the Upstream for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unix epoch when the resource was last updated.
     */
    updatedAt?: pulumi.Input<number>;
    /**
     * If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
     */
    useSrvName?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a GatewayUpstream resource.
 */
export interface GatewayUpstreamArgs {
    /**
     * Which load balancing algorithm to use. must be one of ["consistent-hashing", "least-connections", "round-robin", "latency"]
     */
    algorithm?: pulumi.Input<string>;
    /**
     * If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
     */
    clientCertificate?: pulumi.Input<inputs.GatewayUpstreamClientCertificate>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId: pulumi.Input<string>;
    /**
     * What to use as hashing input if the primary `hashOn` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hashOn` is set to `cookie`. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
     */
    hashFallback?: pulumi.Input<string>;
    /**
     * The header name to take the value from as hash input. Only required when `hashFallback` is set to `header`.
     */
    hashFallbackHeader?: pulumi.Input<string>;
    /**
     * The name of the query string argument to take the value from as hash input. Only required when `hashFallback` is set to `queryArg`.
     */
    hashFallbackQueryArg?: pulumi.Input<string>;
    /**
     * The name of the route URI capture to take the value from as hash input. Only required when `hashFallback` is set to `uriCapture`.
     */
    hashFallbackUriCapture?: pulumi.Input<string>;
    /**
     * What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
     */
    hashOn?: pulumi.Input<string>;
    /**
     * The cookie name to take the value from as hash input. Only required when `hashOn` or `hashFallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
     */
    hashOnCookie?: pulumi.Input<string>;
    /**
     * The cookie path to set in the response headers. Only required when `hashOn` or `hashFallback` is set to `cookie`.
     */
    hashOnCookiePath?: pulumi.Input<string>;
    /**
     * The header name to take the value from as hash input. Only required when `hashOn` is set to `header`.
     */
    hashOnHeader?: pulumi.Input<string>;
    /**
     * The name of the query string argument to take the value from as hash input. Only required when `hashOn` is set to `queryArg`.
     */
    hashOnQueryArg?: pulumi.Input<string>;
    /**
     * The name of the route URI capture to take the value from as hash input. Only required when `hashOn` is set to `uriCapture`.
     */
    hashOnUriCapture?: pulumi.Input<string>;
    healthchecks?: pulumi.Input<inputs.GatewayUpstreamHealthchecks>;
    /**
     * The hostname to be used as `Host` header when proxying requests through Kong.
     */
    hostHeader?: pulumi.Input<string>;
    /**
     * This is a hostname, which must be equal to the `host` of a Service.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
     */
    slots?: pulumi.Input<number>;
    /**
     * An optional set of strings associated with the Upstream for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
     */
    useSrvName?: pulumi.Input<boolean>;
}
