// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * PortalAppearance Resource
 */
export class PortalAppearance extends pulumi.CustomResource {
    /**
     * Get an existing PortalAppearance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortalAppearanceState, opts?: pulumi.CustomResourceOptions): PortalAppearance {
        return new PortalAppearance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/portalAppearance:PortalAppearance';

    /**
     * Returns true if the given object is an instance of PortalAppearance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PortalAppearance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortalAppearance.__pulumiType;
    }

    /**
     * Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
     */
    public readonly customFonts!: pulumi.Output<outputs.PortalAppearanceCustomFonts>;
    /**
     * Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
     */
    public readonly customTheme!: pulumi.Output<outputs.PortalAppearanceCustomTheme>;
    /**
     * A collection of binary image data to customize images in the portal
     */
    public readonly images!: pulumi.Output<outputs.PortalAppearanceImages>;
    /**
     * ID of the portal.
     */
    public readonly portalId!: pulumi.Output<string>;
    /**
     * Values to display for customizable text in the portal user interface
     */
    public readonly text!: pulumi.Output<outputs.PortalAppearanceText>;
    /**
     * Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
     */
    public readonly themeName!: pulumi.Output<string>;
    /**
     * If true, fonts in customFonts will be used over the theme's default fonts
     */
    public readonly useCustomFonts!: pulumi.Output<boolean>;

    /**
     * Create a PortalAppearance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortalAppearanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortalAppearanceArgs | PortalAppearanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortalAppearanceState | undefined;
            resourceInputs["customFonts"] = state ? state.customFonts : undefined;
            resourceInputs["customTheme"] = state ? state.customTheme : undefined;
            resourceInputs["images"] = state ? state.images : undefined;
            resourceInputs["portalId"] = state ? state.portalId : undefined;
            resourceInputs["text"] = state ? state.text : undefined;
            resourceInputs["themeName"] = state ? state.themeName : undefined;
            resourceInputs["useCustomFonts"] = state ? state.useCustomFonts : undefined;
        } else {
            const args = argsOrState as PortalAppearanceArgs | undefined;
            if ((!args || args.portalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portalId'");
            }
            resourceInputs["customFonts"] = args ? args.customFonts : undefined;
            resourceInputs["customTheme"] = args ? args.customTheme : undefined;
            resourceInputs["images"] = args ? args.images : undefined;
            resourceInputs["portalId"] = args ? args.portalId : undefined;
            resourceInputs["text"] = args ? args.text : undefined;
            resourceInputs["themeName"] = args ? args.themeName : undefined;
            resourceInputs["useCustomFonts"] = args ? args.useCustomFonts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PortalAppearance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PortalAppearance resources.
 */
export interface PortalAppearanceState {
    /**
     * Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
     */
    customFonts?: pulumi.Input<inputs.PortalAppearanceCustomFonts>;
    /**
     * Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
     */
    customTheme?: pulumi.Input<inputs.PortalAppearanceCustomTheme>;
    /**
     * A collection of binary image data to customize images in the portal
     */
    images?: pulumi.Input<inputs.PortalAppearanceImages>;
    /**
     * ID of the portal.
     */
    portalId?: pulumi.Input<string>;
    /**
     * Values to display for customizable text in the portal user interface
     */
    text?: pulumi.Input<inputs.PortalAppearanceText>;
    /**
     * Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
     */
    themeName?: pulumi.Input<string>;
    /**
     * If true, fonts in customFonts will be used over the theme's default fonts
     */
    useCustomFonts?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a PortalAppearance resource.
 */
export interface PortalAppearanceArgs {
    /**
     * Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
     */
    customFonts?: pulumi.Input<inputs.PortalAppearanceCustomFonts>;
    /**
     * Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
     */
    customTheme?: pulumi.Input<inputs.PortalAppearanceCustomTheme>;
    /**
     * A collection of binary image data to customize images in the portal
     */
    images?: pulumi.Input<inputs.PortalAppearanceImages>;
    /**
     * ID of the portal.
     */
    portalId: pulumi.Input<string>;
    /**
     * Values to display for customizable text in the portal user interface
     */
    text?: pulumi.Input<inputs.PortalAppearanceText>;
    /**
     * Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
     */
    themeName?: pulumi.Input<string>;
    /**
     * If true, fonts in customFonts will be used over the theme's default fonts
     */
    useCustomFonts?: pulumi.Input<boolean>;
}
