// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * PortalAuth Resource
 */
export class PortalAuth extends pulumi.CustomResource {
    /**
     * Get an existing PortalAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortalAuthState, opts?: pulumi.CustomResourceOptions): PortalAuth {
        return new PortalAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/portalAuth:PortalAuth';

    /**
     * Returns true if the given object is an instance of PortalAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PortalAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortalAuth.__pulumiType;
    }

    /**
     * The organization has basic auth enabled.
     */
    public readonly basicAuthEnabled!: pulumi.Output<boolean>;
    /**
     * Whether a Konnect Identity Admin assigns teams to a developer.
     */
    public readonly konnectMappingEnabled!: pulumi.Output<boolean>;
    /**
     * The organization has OIDC disabled.
     */
    public readonly oidcAuthEnabled!: pulumi.Output<boolean>;
    /**
     * Mappings from a portal developer atribute to an Identity Provider claim.
     */
    public readonly oidcClaimMappings!: pulumi.Output<outputs.PortalAuthOidcClaimMappings | undefined>;
    public readonly oidcClientId!: pulumi.Output<string | undefined>;
    public readonly oidcClientSecret!: pulumi.Output<string | undefined>;
    /**
     * Configuration properties for an OpenID Connect Identity Provider.
     */
    public /*out*/ readonly oidcConfig!: pulumi.Output<outputs.PortalAuthOidcConfig>;
    public readonly oidcIssuer!: pulumi.Output<string | undefined>;
    public readonly oidcScopes!: pulumi.Output<string[] | undefined>;
    /**
     * Whether IdP groups determine the Konnect Portal teams a developer has.
     */
    public readonly oidcTeamMappingEnabled!: pulumi.Output<boolean>;
    /**
     * ID of the portal.
     */
    public readonly portalId!: pulumi.Output<string>;

    /**
     * Create a PortalAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortalAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortalAuthArgs | PortalAuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortalAuthState | undefined;
            resourceInputs["basicAuthEnabled"] = state ? state.basicAuthEnabled : undefined;
            resourceInputs["konnectMappingEnabled"] = state ? state.konnectMappingEnabled : undefined;
            resourceInputs["oidcAuthEnabled"] = state ? state.oidcAuthEnabled : undefined;
            resourceInputs["oidcClaimMappings"] = state ? state.oidcClaimMappings : undefined;
            resourceInputs["oidcClientId"] = state ? state.oidcClientId : undefined;
            resourceInputs["oidcClientSecret"] = state ? state.oidcClientSecret : undefined;
            resourceInputs["oidcConfig"] = state ? state.oidcConfig : undefined;
            resourceInputs["oidcIssuer"] = state ? state.oidcIssuer : undefined;
            resourceInputs["oidcScopes"] = state ? state.oidcScopes : undefined;
            resourceInputs["oidcTeamMappingEnabled"] = state ? state.oidcTeamMappingEnabled : undefined;
            resourceInputs["portalId"] = state ? state.portalId : undefined;
        } else {
            const args = argsOrState as PortalAuthArgs | undefined;
            if ((!args || args.portalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portalId'");
            }
            resourceInputs["basicAuthEnabled"] = args ? args.basicAuthEnabled : undefined;
            resourceInputs["konnectMappingEnabled"] = args ? args.konnectMappingEnabled : undefined;
            resourceInputs["oidcAuthEnabled"] = args ? args.oidcAuthEnabled : undefined;
            resourceInputs["oidcClaimMappings"] = args ? args.oidcClaimMappings : undefined;
            resourceInputs["oidcClientId"] = args ? args.oidcClientId : undefined;
            resourceInputs["oidcClientSecret"] = args ? args.oidcClientSecret : undefined;
            resourceInputs["oidcIssuer"] = args ? args.oidcIssuer : undefined;
            resourceInputs["oidcScopes"] = args ? args.oidcScopes : undefined;
            resourceInputs["oidcTeamMappingEnabled"] = args ? args.oidcTeamMappingEnabled : undefined;
            resourceInputs["portalId"] = args ? args.portalId : undefined;
            resourceInputs["oidcConfig"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PortalAuth.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PortalAuth resources.
 */
export interface PortalAuthState {
    /**
     * The organization has basic auth enabled.
     */
    basicAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Whether a Konnect Identity Admin assigns teams to a developer.
     */
    konnectMappingEnabled?: pulumi.Input<boolean>;
    /**
     * The organization has OIDC disabled.
     */
    oidcAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Mappings from a portal developer atribute to an Identity Provider claim.
     */
    oidcClaimMappings?: pulumi.Input<inputs.PortalAuthOidcClaimMappings>;
    oidcClientId?: pulumi.Input<string>;
    oidcClientSecret?: pulumi.Input<string>;
    /**
     * Configuration properties for an OpenID Connect Identity Provider.
     */
    oidcConfig?: pulumi.Input<inputs.PortalAuthOidcConfig>;
    oidcIssuer?: pulumi.Input<string>;
    oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether IdP groups determine the Konnect Portal teams a developer has.
     */
    oidcTeamMappingEnabled?: pulumi.Input<boolean>;
    /**
     * ID of the portal.
     */
    portalId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PortalAuth resource.
 */
export interface PortalAuthArgs {
    /**
     * The organization has basic auth enabled.
     */
    basicAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Whether a Konnect Identity Admin assigns teams to a developer.
     */
    konnectMappingEnabled?: pulumi.Input<boolean>;
    /**
     * The organization has OIDC disabled.
     */
    oidcAuthEnabled?: pulumi.Input<boolean>;
    /**
     * Mappings from a portal developer atribute to an Identity Provider claim.
     */
    oidcClaimMappings?: pulumi.Input<inputs.PortalAuthOidcClaimMappings>;
    oidcClientId?: pulumi.Input<string>;
    oidcClientSecret?: pulumi.Input<string>;
    oidcIssuer?: pulumi.Input<string>;
    oidcScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether IdP groups determine the Konnect Portal teams a developer has.
     */
    oidcTeamMappingEnabled?: pulumi.Input<boolean>;
    /**
     * ID of the portal.
     */
    portalId: pulumi.Input<string>;
}
