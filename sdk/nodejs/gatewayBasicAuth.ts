// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * GatewayBasicAuth Resource
 */
export class GatewayBasicAuth extends pulumi.CustomResource {
    /**
     * Get an existing GatewayBasicAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayBasicAuthState, opts?: pulumi.CustomResourceOptions): GatewayBasicAuth {
        return new GatewayBasicAuth(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/gatewayBasicAuth:GatewayBasicAuth';

    /**
     * Returns true if the given object is an instance of GatewayBasicAuth.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayBasicAuth {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayBasicAuth.__pulumiType;
    }

    public /*out*/ readonly consumer!: pulumi.Output<outputs.GatewayBasicAuthConsumer>;
    /**
     * Consumer ID for nested entities. Requires replacement if changed.
     */
    public readonly consumerId!: pulumi.Output<string>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
     */
    public readonly controlPlaneId!: pulumi.Output<string>;
    /**
     * Unix epoch when the resource was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * Requires replacement if changed.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * Requires replacement if changed.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Requires replacement if changed.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a GatewayBasicAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayBasicAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayBasicAuthArgs | GatewayBasicAuthState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayBasicAuthState | undefined;
            resourceInputs["consumer"] = state ? state.consumer : undefined;
            resourceInputs["consumerId"] = state ? state.consumerId : undefined;
            resourceInputs["controlPlaneId"] = state ? state.controlPlaneId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as GatewayBasicAuthArgs | undefined;
            if ((!args || args.consumerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerId'");
            }
            if ((!args || args.controlPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneId'");
            }
            resourceInputs["consumerId"] = args ? args.consumerId : undefined;
            resourceInputs["controlPlaneId"] = args ? args.controlPlaneId : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["consumer"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(GatewayBasicAuth.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayBasicAuth resources.
 */
export interface GatewayBasicAuthState {
    consumer?: pulumi.Input<inputs.GatewayBasicAuthConsumer>;
    /**
     * Consumer ID for nested entities. Requires replacement if changed.
     */
    consumerId?: pulumi.Input<string>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
     */
    controlPlaneId?: pulumi.Input<string>;
    /**
     * Unix epoch when the resource was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * Requires replacement if changed.
     */
    password?: pulumi.Input<string>;
    /**
     * Requires replacement if changed.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Requires replacement if changed.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayBasicAuth resource.
 */
export interface GatewayBasicAuthArgs {
    /**
     * Consumer ID for nested entities. Requires replacement if changed.
     */
    consumerId: pulumi.Input<string>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
     */
    controlPlaneId: pulumi.Input<string>;
    /**
     * Requires replacement if changed.
     */
    password?: pulumi.Input<string>;
    /**
     * Requires replacement if changed.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Requires replacement if changed.
     */
    username?: pulumi.Input<string>;
}
