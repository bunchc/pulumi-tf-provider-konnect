// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * APIProduct Resource
 */
export class ApiProduct extends pulumi.CustomResource {
    /**
     * Get an existing ApiProduct resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiProductState, opts?: pulumi.CustomResourceOptions): ApiProduct {
        return new ApiProduct(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/apiProduct:ApiProduct';

    /**
     * Returns true if the given object is an instance of ApiProduct.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiProduct {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiProduct.__pulumiType;
    }

    /**
     * An ISO-8601 timestamp representation of entity creation date.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the API product.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}>;
    /**
     * The name of the API product.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The list of portal identifiers which this API product should be published to
     */
    public readonly portalIds!: pulumi.Output<string[]>;
    /**
     * The list of portals which this API product is published to
     */
    public /*out*/ readonly portals!: pulumi.Output<outputs.ApiProductPortal[]>;
    /**
     * An ISO-8601 timestamp representation of entity update date.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The number of product versions attached to this API product
     */
    public /*out*/ readonly versionCount!: pulumi.Output<number>;

    /**
     * Create a ApiProduct resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiProductArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiProductArgs | ApiProductState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiProductState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["portalIds"] = state ? state.portalIds : undefined;
            resourceInputs["portals"] = state ? state.portals : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["versionCount"] = state ? state.versionCount : undefined;
        } else {
            const args = argsOrState as ApiProductArgs | undefined;
            if ((!args || args.portalIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'portalIds'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["portalIds"] = args ? args.portalIds : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["portals"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["versionCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiProduct.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiProduct resources.
 */
export interface ApiProductState {
    /**
     * An ISO-8601 timestamp representation of entity creation date.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the API product.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the API product.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of portal identifiers which this API product should be published to
     */
    portalIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of portals which this API product is published to
     */
    portals?: pulumi.Input<pulumi.Input<inputs.ApiProductPortal>[]>;
    /**
     * An ISO-8601 timestamp representation of entity update date.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The number of product versions attached to this API product
     */
    versionCount?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ApiProduct resource.
 */
export interface ApiProductArgs {
    /**
     * The description of the API product.
     */
    description?: pulumi.Input<string>;
    /**
     * Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the API product.
     */
    name?: pulumi.Input<string>;
    /**
     * The list of portal identifiers which this API product should be published to
     */
    portalIds: pulumi.Input<pulumi.Input<string>[]>;
}
