// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ApplicationAuthStrategy Resource
 */
export class ApplicationAuthStrategy extends pulumi.CustomResource {
    /**
     * Get an existing ApplicationAuthStrategy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApplicationAuthStrategyState, opts?: pulumi.CustomResourceOptions): ApplicationAuthStrategy {
        return new ApplicationAuthStrategy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/applicationAuthStrategy:ApplicationAuthStrategy';

    /**
     * Returns true if the given object is an instance of ApplicationAuthStrategy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApplicationAuthStrategy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApplicationAuthStrategy.__pulumiType;
    }

    /**
     * At least one published product version is using this auth strategy.
     */
    public /*out*/ readonly active!: pulumi.Output<boolean>;
    /**
     * The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
     */
    public /*out*/ readonly displayName!: pulumi.Output<string>;
    /**
     * Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
     */
    public readonly keyAuth!: pulumi.Output<outputs.ApplicationAuthStrategyKeyAuth>;
    /**
     * The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
     */
    public readonly openidConnect!: pulumi.Output<outputs.ApplicationAuthStrategyOpenidConnect>;

    /**
     * Create a ApplicationAuthStrategy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ApplicationAuthStrategyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApplicationAuthStrategyArgs | ApplicationAuthStrategyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApplicationAuthStrategyState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["keyAuth"] = state ? state.keyAuth : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["openidConnect"] = state ? state.openidConnect : undefined;
        } else {
            const args = argsOrState as ApplicationAuthStrategyArgs | undefined;
            resourceInputs["keyAuth"] = args ? args.keyAuth : undefined;
            resourceInputs["openidConnect"] = args ? args.openidConnect : undefined;
            resourceInputs["active"] = undefined /*out*/;
            resourceInputs["displayName"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApplicationAuthStrategy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApplicationAuthStrategy resources.
 */
export interface ApplicationAuthStrategyState {
    /**
     * At least one published product version is using this auth strategy.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
     */
    displayName?: pulumi.Input<string>;
    /**
     * Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
     */
    keyAuth?: pulumi.Input<inputs.ApplicationAuthStrategyKeyAuth>;
    /**
     * The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
     */
    name?: pulumi.Input<string>;
    /**
     * Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
     */
    openidConnect?: pulumi.Input<inputs.ApplicationAuthStrategyOpenidConnect>;
}

/**
 * The set of arguments for constructing a ApplicationAuthStrategy resource.
 */
export interface ApplicationAuthStrategyArgs {
    /**
     * Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
     */
    keyAuth?: pulumi.Input<inputs.ApplicationAuthStrategyKeyAuth>;
    /**
     * Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
     */
    openidConnect?: pulumi.Input<inputs.ApplicationAuthStrategyOpenidConnect>;
}
