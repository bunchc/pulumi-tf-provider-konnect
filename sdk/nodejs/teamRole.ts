// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * TeamRole Resource
 */
export class TeamRole extends pulumi.CustomResource {
    /**
     * Get an existing TeamRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamRoleState, opts?: pulumi.CustomResourceOptions): TeamRole {
        return new TeamRole(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/teamRole:TeamRole';

    /**
     * Returns true if the given object is an instance of TeamRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamRole {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamRole.__pulumiType;
    }

    /**
     * The ID of the entity. Requires replacement if changed.
     */
    public readonly entityId!: pulumi.Output<string>;
    /**
     * The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
     */
    public readonly entityRegion!: pulumi.Output<string>;
    /**
     * The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
     */
    public readonly entityTypeName!: pulumi.Output<string>;
    /**
     * The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * The team ID. Requires replacement if changed.
     */
    public readonly teamId!: pulumi.Output<string>;

    /**
     * Create a TeamRole resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamRoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamRoleArgs | TeamRoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamRoleState | undefined;
            resourceInputs["entityId"] = state ? state.entityId : undefined;
            resourceInputs["entityRegion"] = state ? state.entityRegion : undefined;
            resourceInputs["entityTypeName"] = state ? state.entityTypeName : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
        } else {
            const args = argsOrState as TeamRoleArgs | undefined;
            if ((!args || args.teamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'teamId'");
            }
            resourceInputs["entityId"] = args ? args.entityId : undefined;
            resourceInputs["entityRegion"] = args ? args.entityRegion : undefined;
            resourceInputs["entityTypeName"] = args ? args.entityTypeName : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamRole.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TeamRole resources.
 */
export interface TeamRoleState {
    /**
     * The ID of the entity. Requires replacement if changed.
     */
    entityId?: pulumi.Input<string>;
    /**
     * The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
     */
    entityRegion?: pulumi.Input<string>;
    /**
     * The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
     */
    entityTypeName?: pulumi.Input<string>;
    /**
     * The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
     */
    roleName?: pulumi.Input<string>;
    /**
     * The team ID. Requires replacement if changed.
     */
    teamId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TeamRole resource.
 */
export interface TeamRoleArgs {
    /**
     * The ID of the entity. Requires replacement if changed.
     */
    entityId?: pulumi.Input<string>;
    /**
     * The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
     */
    entityRegion?: pulumi.Input<string>;
    /**
     * The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
     */
    entityTypeName?: pulumi.Input<string>;
    /**
     * The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
     */
    roleName?: pulumi.Input<string>;
    /**
     * The team ID. Requires replacement if changed.
     */
    teamId: pulumi.Input<string>;
}
