// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * GatewayService Resource
 */
export class GatewayService extends pulumi.CustomResource {
    /**
     * Get an existing GatewayService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayServiceState, opts?: pulumi.CustomResourceOptions): GatewayService {
        return new GatewayService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'konnect:index/gatewayService:GatewayService';

    /**
     * Returns true if the given object is an instance of GatewayService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayService.__pulumiType;
    }

    /**
     * Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
     */
    public readonly caCertificates!: pulumi.Output<string[]>;
    /**
     * Certificate to be used as client certificate while TLS handshaking to the upstream server.
     */
    public readonly clientCertificate!: pulumi.Output<outputs.GatewayServiceClientCertificate>;
    /**
     * The timeout in milliseconds for establishing a connection to the upstream server.
     */
    public readonly connectTimeout!: pulumi.Output<number>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    public readonly controlPlaneId!: pulumi.Output<string>;
    /**
     * Unix epoch when the resource was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<number>;
    /**
     * Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The host of the upstream server. Note that the host value is case sensitive.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The Service name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The path to be used in requests to the upstream server.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * The upstream server port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
     */
    public readonly readTimeout!: pulumi.Output<number>;
    /**
     * The number of retries to execute upon failure to proxy.
     */
    public readonly retries!: pulumi.Output<number>;
    /**
     * An optional set of strings associated with the Service for grouping and filtering.
     */
    public readonly tags!: pulumi.Output<string[]>;
    /**
     * Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
     */
    public readonly tlsVerify!: pulumi.Output<boolean>;
    /**
     * Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
     */
    public readonly tlsVerifyDepth!: pulumi.Output<number>;
    /**
     * Unix epoch when the resource was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<number>;
    /**
     * The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
     */
    public readonly writeTimeout!: pulumi.Output<number>;

    /**
     * Create a GatewayService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayServiceArgs | GatewayServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayServiceState | undefined;
            resourceInputs["caCertificates"] = state ? state.caCertificates : undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["connectTimeout"] = state ? state.connectTimeout : undefined;
            resourceInputs["controlPlaneId"] = state ? state.controlPlaneId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["readTimeout"] = state ? state.readTimeout : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tlsVerify"] = state ? state.tlsVerify : undefined;
            resourceInputs["tlsVerifyDepth"] = state ? state.tlsVerifyDepth : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["writeTimeout"] = state ? state.writeTimeout : undefined;
        } else {
            const args = argsOrState as GatewayServiceArgs | undefined;
            if ((!args || args.controlPlaneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'controlPlaneId'");
            }
            resourceInputs["caCertificates"] = args ? args.caCertificates : undefined;
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["connectTimeout"] = args ? args.connectTimeout : undefined;
            resourceInputs["controlPlaneId"] = args ? args.controlPlaneId : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["readTimeout"] = args ? args.readTimeout : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tlsVerify"] = args ? args.tlsVerify : undefined;
            resourceInputs["tlsVerifyDepth"] = args ? args.tlsVerifyDepth : undefined;
            resourceInputs["writeTimeout"] = args ? args.writeTimeout : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayService resources.
 */
export interface GatewayServiceState {
    /**
     * Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
     */
    caCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate to be used as client certificate while TLS handshaking to the upstream server.
     */
    clientCertificate?: pulumi.Input<inputs.GatewayServiceClientCertificate>;
    /**
     * The timeout in milliseconds for establishing a connection to the upstream server.
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId?: pulumi.Input<string>;
    /**
     * Unix epoch when the resource was created.
     */
    createdAt?: pulumi.Input<number>;
    /**
     * Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The host of the upstream server. Note that the host value is case sensitive.
     */
    host?: pulumi.Input<string>;
    /**
     * The Service name.
     */
    name?: pulumi.Input<string>;
    /**
     * The path to be used in requests to the upstream server.
     */
    path?: pulumi.Input<string>;
    /**
     * The upstream server port.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
     */
    protocol?: pulumi.Input<string>;
    /**
     * The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
     */
    readTimeout?: pulumi.Input<number>;
    /**
     * The number of retries to execute upon failure to proxy.
     */
    retries?: pulumi.Input<number>;
    /**
     * An optional set of strings associated with the Service for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
     */
    tlsVerify?: pulumi.Input<boolean>;
    /**
     * Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
     */
    tlsVerifyDepth?: pulumi.Input<number>;
    /**
     * Unix epoch when the resource was last updated.
     */
    updatedAt?: pulumi.Input<number>;
    /**
     * The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
     */
    writeTimeout?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a GatewayService resource.
 */
export interface GatewayServiceArgs {
    /**
     * Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
     */
    caCertificates?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Certificate to be used as client certificate while TLS handshaking to the upstream server.
     */
    clientCertificate?: pulumi.Input<inputs.GatewayServiceClientCertificate>;
    /**
     * The timeout in milliseconds for establishing a connection to the upstream server.
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * The UUID of your control plane. This variable is available in the Konnect manager.
     */
    controlPlaneId: pulumi.Input<string>;
    /**
     * Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The host of the upstream server. Note that the host value is case sensitive.
     */
    host?: pulumi.Input<string>;
    /**
     * The Service name.
     */
    name?: pulumi.Input<string>;
    /**
     * The path to be used in requests to the upstream server.
     */
    path?: pulumi.Input<string>;
    /**
     * The upstream server port.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
     */
    protocol?: pulumi.Input<string>;
    /**
     * The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
     */
    readTimeout?: pulumi.Input<number>;
    /**
     * The number of retries to execute upon failure to proxy.
     */
    retries?: pulumi.Input<number>;
    /**
     * An optional set of strings associated with the Service for grouping and filtering.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
     */
    tlsVerify?: pulumi.Input<boolean>;
    /**
     * Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
     */
    tlsVerifyDepth?: pulumi.Input<number>;
    /**
     * The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
     */
    writeTimeout?: pulumi.Input<number>;
}
