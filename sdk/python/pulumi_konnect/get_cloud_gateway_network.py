# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudGatewayNetworkResult',
    'AwaitableGetCloudGatewayNetworkResult',
    'get_cloud_gateway_network',
    'get_cloud_gateway_network_output',
]

@pulumi.output_type
class GetCloudGatewayNetworkResult:
    """
    A collection of values returned by getCloudGatewayNetwork.
    """
    def __init__(__self__, availability_zones=None, cidr_block=None, cloud_gateway_provider_account_id=None, configuration_reference_count=None, created_at=None, ddos_protection=None, default=None, entity_version=None, firewall=None, id=None, name=None, provider_metadata=None, region=None, state=None, transit_gateway_count=None, updated_at=None):
        if availability_zones and not isinstance(availability_zones, list):
            raise TypeError("Expected argument 'availability_zones' to be a list")
        pulumi.set(__self__, "availability_zones", availability_zones)
        if cidr_block and not isinstance(cidr_block, str):
            raise TypeError("Expected argument 'cidr_block' to be a str")
        pulumi.set(__self__, "cidr_block", cidr_block)
        if cloud_gateway_provider_account_id and not isinstance(cloud_gateway_provider_account_id, str):
            raise TypeError("Expected argument 'cloud_gateway_provider_account_id' to be a str")
        pulumi.set(__self__, "cloud_gateway_provider_account_id", cloud_gateway_provider_account_id)
        if configuration_reference_count and not isinstance(configuration_reference_count, int):
            raise TypeError("Expected argument 'configuration_reference_count' to be a int")
        pulumi.set(__self__, "configuration_reference_count", configuration_reference_count)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if ddos_protection and not isinstance(ddos_protection, bool):
            raise TypeError("Expected argument 'ddos_protection' to be a bool")
        pulumi.set(__self__, "ddos_protection", ddos_protection)
        if default and not isinstance(default, bool):
            raise TypeError("Expected argument 'default' to be a bool")
        pulumi.set(__self__, "default", default)
        if entity_version and not isinstance(entity_version, int):
            raise TypeError("Expected argument 'entity_version' to be a int")
        pulumi.set(__self__, "entity_version", entity_version)
        if firewall and not isinstance(firewall, dict):
            raise TypeError("Expected argument 'firewall' to be a dict")
        pulumi.set(__self__, "firewall", firewall)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if provider_metadata and not isinstance(provider_metadata, dict):
            raise TypeError("Expected argument 'provider_metadata' to be a dict")
        pulumi.set(__self__, "provider_metadata", provider_metadata)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if transit_gateway_count and not isinstance(transit_gateway_count, int):
            raise TypeError("Expected argument 'transit_gateway_count' to be a int")
        pulumi.set(__self__, "transit_gateway_count", transit_gateway_count)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="availabilityZones")
    def availability_zones(self) -> Sequence[str]:
        return pulumi.get(self, "availability_zones")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="cloudGatewayProviderAccountId")
    def cloud_gateway_provider_account_id(self) -> str:
        return pulumi.get(self, "cloud_gateway_provider_account_id")

    @property
    @pulumi.getter(name="configurationReferenceCount")
    def configuration_reference_count(self) -> int:
        return pulumi.get(self, "configuration_reference_count")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="ddosProtection")
    def ddos_protection(self) -> bool:
        return pulumi.get(self, "ddos_protection")

    @property
    @pulumi.getter
    def default(self) -> bool:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> int:
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter
    def firewall(self) -> 'outputs.GetCloudGatewayNetworkFirewallResult':
        return pulumi.get(self, "firewall")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="providerMetadata")
    def provider_metadata(self) -> 'outputs.GetCloudGatewayNetworkProviderMetadataResult':
        return pulumi.get(self, "provider_metadata")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="transitGatewayCount")
    def transit_gateway_count(self) -> int:
        return pulumi.get(self, "transit_gateway_count")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetCloudGatewayNetworkResult(GetCloudGatewayNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudGatewayNetworkResult(
            availability_zones=self.availability_zones,
            cidr_block=self.cidr_block,
            cloud_gateway_provider_account_id=self.cloud_gateway_provider_account_id,
            configuration_reference_count=self.configuration_reference_count,
            created_at=self.created_at,
            ddos_protection=self.ddos_protection,
            default=self.default,
            entity_version=self.entity_version,
            firewall=self.firewall,
            id=self.id,
            name=self.name,
            provider_metadata=self.provider_metadata,
            region=self.region,
            state=self.state,
            transit_gateway_count=self.transit_gateway_count,
            updated_at=self.updated_at)


def get_cloud_gateway_network(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudGatewayNetworkResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getCloudGatewayNetwork:getCloudGatewayNetwork', __args__, opts=opts, typ=GetCloudGatewayNetworkResult).value

    return AwaitableGetCloudGatewayNetworkResult(
        availability_zones=pulumi.get(__ret__, 'availability_zones'),
        cidr_block=pulumi.get(__ret__, 'cidr_block'),
        cloud_gateway_provider_account_id=pulumi.get(__ret__, 'cloud_gateway_provider_account_id'),
        configuration_reference_count=pulumi.get(__ret__, 'configuration_reference_count'),
        created_at=pulumi.get(__ret__, 'created_at'),
        ddos_protection=pulumi.get(__ret__, 'ddos_protection'),
        default=pulumi.get(__ret__, 'default'),
        entity_version=pulumi.get(__ret__, 'entity_version'),
        firewall=pulumi.get(__ret__, 'firewall'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        provider_metadata=pulumi.get(__ret__, 'provider_metadata'),
        region=pulumi.get(__ret__, 'region'),
        state=pulumi.get(__ret__, 'state'),
        transit_gateway_count=pulumi.get(__ret__, 'transit_gateway_count'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_cloud_gateway_network)
def get_cloud_gateway_network_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudGatewayNetworkResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
