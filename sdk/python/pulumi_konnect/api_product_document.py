# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApiProductDocumentArgs', 'ApiProductDocument']

@pulumi.input_type
class ApiProductDocumentArgs:
    def __init__(__self__, *,
                 api_product_id: pulumi.Input[str],
                 slug: pulumi.Input[str],
                 status: pulumi.Input[str],
                 title: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['ApiProductDocumentMetadataArgs']] = None,
                 parent_document_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ApiProductDocument resource.
        :param pulumi.Input[str] api_product_id: The API product identifier
        :param pulumi.Input[str] slug: document slug. must be unique accross documents belonging to an api product
        :param pulumi.Input[str] status: document publish status. must be one of ["published", "unpublished"]
        :param pulumi.Input[str] title: document title
        :param pulumi.Input[str] content: Can be markdown string content or base64 encoded string
        :param pulumi.Input['ApiProductDocumentMetadataArgs'] metadata: metadata of the document
        :param pulumi.Input[str] parent_document_id: parent document id
        """
        pulumi.set(__self__, "api_product_id", api_product_id)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "title", title)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if parent_document_id is not None:
            pulumi.set(__self__, "parent_document_id", parent_document_id)

    @property
    @pulumi.getter(name="apiProductId")
    def api_product_id(self) -> pulumi.Input[str]:
        """
        The API product identifier
        """
        return pulumi.get(self, "api_product_id")

    @api_product_id.setter
    def api_product_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_product_id", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        """
        document slug. must be unique accross documents belonging to an api product
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        document publish status. must be one of ["published", "unpublished"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        document title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Can be markdown string content or base64 encoded string
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ApiProductDocumentMetadataArgs']]:
        """
        metadata of the document
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ApiProductDocumentMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="parentDocumentId")
    def parent_document_id(self) -> Optional[pulumi.Input[str]]:
        """
        parent document id
        """
        return pulumi.get(self, "parent_document_id")

    @parent_document_id.setter
    def parent_document_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_document_id", value)


@pulumi.input_type
class _ApiProductDocumentState:
    def __init__(__self__, *,
                 api_product_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['ApiProductDocumentMetadataArgs']] = None,
                 parent_document_id: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiProductDocument resources.
        :param pulumi.Input[str] api_product_id: The API product identifier
        :param pulumi.Input[str] content: Can be markdown string content or base64 encoded string
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input['ApiProductDocumentMetadataArgs'] metadata: metadata of the document
        :param pulumi.Input[str] parent_document_id: parent document id
        :param pulumi.Input[str] slug: document slug. must be unique accross documents belonging to an api product
        :param pulumi.Input[str] status: document publish status. must be one of ["published", "unpublished"]
        :param pulumi.Input[str] title: document title
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        if api_product_id is not None:
            pulumi.set(__self__, "api_product_id", api_product_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if parent_document_id is not None:
            pulumi.set(__self__, "parent_document_id", parent_document_id)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="apiProductId")
    def api_product_id(self) -> Optional[pulumi.Input[str]]:
        """
        The API product identifier
        """
        return pulumi.get(self, "api_product_id")

    @api_product_id.setter
    def api_product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_product_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Can be markdown string content or base64 encoded string
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ApiProductDocumentMetadataArgs']]:
        """
        metadata of the document
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ApiProductDocumentMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="parentDocumentId")
    def parent_document_id(self) -> Optional[pulumi.Input[str]]:
        """
        parent document id
        """
        return pulumi.get(self, "parent_document_id")

    @parent_document_id.setter
    def parent_document_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_document_id", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        document slug. must be unique accross documents belonging to an api product
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        document publish status. must be one of ["published", "unpublished"]
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        document title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class ApiProductDocument(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_product_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['ApiProductDocumentMetadataArgs']]] = None,
                 parent_document_id: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        APIProductDocument Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_product_id: The API product identifier
        :param pulumi.Input[str] content: Can be markdown string content or base64 encoded string
        :param pulumi.Input[pulumi.InputType['ApiProductDocumentMetadataArgs']] metadata: metadata of the document
        :param pulumi.Input[str] parent_document_id: parent document id
        :param pulumi.Input[str] slug: document slug. must be unique accross documents belonging to an api product
        :param pulumi.Input[str] status: document publish status. must be one of ["published", "unpublished"]
        :param pulumi.Input[str] title: document title
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiProductDocumentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        APIProductDocument Resource

        :param str resource_name: The name of the resource.
        :param ApiProductDocumentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiProductDocumentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_product_id: Optional[pulumi.Input[str]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[pulumi.InputType['ApiProductDocumentMetadataArgs']]] = None,
                 parent_document_id: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiProductDocumentArgs.__new__(ApiProductDocumentArgs)

            if api_product_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_product_id'")
            __props__.__dict__["api_product_id"] = api_product_id
            __props__.__dict__["content"] = content
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["parent_document_id"] = parent_document_id
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(ApiProductDocument, __self__).__init__(
            'konnect:index/apiProductDocument:ApiProductDocument',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_product_id: Optional[pulumi.Input[str]] = None,
            content: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            metadata: Optional[pulumi.Input[pulumi.InputType['ApiProductDocumentMetadataArgs']]] = None,
            parent_document_id: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'ApiProductDocument':
        """
        Get an existing ApiProductDocument resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_product_id: The API product identifier
        :param pulumi.Input[str] content: Can be markdown string content or base64 encoded string
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input[pulumi.InputType['ApiProductDocumentMetadataArgs']] metadata: metadata of the document
        :param pulumi.Input[str] parent_document_id: parent document id
        :param pulumi.Input[str] slug: document slug. must be unique accross documents belonging to an api product
        :param pulumi.Input[str] status: document publish status. must be one of ["published", "unpublished"]
        :param pulumi.Input[str] title: document title
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiProductDocumentState.__new__(_ApiProductDocumentState)

        __props__.__dict__["api_product_id"] = api_product_id
        __props__.__dict__["content"] = content
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["parent_document_id"] = parent_document_id
        __props__.__dict__["slug"] = slug
        __props__.__dict__["status"] = status
        __props__.__dict__["title"] = title
        __props__.__dict__["updated_at"] = updated_at
        return ApiProductDocument(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiProductId")
    def api_product_id(self) -> pulumi.Output[str]:
        """
        The API product identifier
        """
        return pulumi.get(self, "api_product_id")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        Can be markdown string content or base64 encoded string
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output['outputs.ApiProductDocumentMetadata']:
        """
        metadata of the document
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="parentDocumentId")
    def parent_document_id(self) -> pulumi.Output[str]:
        """
        parent document id
        """
        return pulumi.get(self, "parent_document_id")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        document slug. must be unique accross documents belonging to an api product
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        document publish status. must be one of ["published", "unpublished"]
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        document title
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

