# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GatewayControlPlaneArgs', 'GatewayControlPlane']

@pulumi.input_type
class GatewayControlPlaneArgs:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 cloud_gateway: Optional[pulumi.Input[bool]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]]] = None):
        """
        The set of arguments for constructing a GatewayControlPlane resource.
        :param pulumi.Input[str] auth_type: The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        :param pulumi.Input[bool] cloud_gateway: Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        :param pulumi.Input[str] cluster_type: The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        :param pulumi.Input[str] description: The description of the control plane in Konnect.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the control plane.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]] proxy_urls: Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if cloud_gateway is not None:
            pulumi.set(__self__, "cloud_gateway", cloud_gateway)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_urls is not None:
            pulumi.set(__self__, "proxy_urls", proxy_urls)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="cloudGateway")
    def cloud_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        """
        return pulumi.get(self, "cloud_gateway")

    @cloud_gateway.setter
    def cloud_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_gateway", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the control plane in Konnect.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the control plane.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyUrls")
    def proxy_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]]]:
        """
        Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        """
        return pulumi.get(self, "proxy_urls")

    @proxy_urls.setter
    def proxy_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]]]):
        pulumi.set(self, "proxy_urls", value)


@pulumi.input_type
class _GatewayControlPlaneState:
    def __init__(__self__, *,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 cloud_gateway: Optional[pulumi.Input[bool]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input['GatewayControlPlaneConfigArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]]] = None):
        """
        Input properties used for looking up and filtering GatewayControlPlane resources.
        :param pulumi.Input[str] auth_type: The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        :param pulumi.Input[bool] cloud_gateway: Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        :param pulumi.Input[str] cluster_type: The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        :param pulumi.Input['GatewayControlPlaneConfigArgs'] config: CP configuration object for related access endpoints.
        :param pulumi.Input[str] description: The description of the control plane in Konnect.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the control plane.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]] proxy_urls: Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        """
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if cloud_gateway is not None:
            pulumi.set(__self__, "cloud_gateway", cloud_gateway)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if proxy_urls is not None:
            pulumi.set(__self__, "proxy_urls", proxy_urls)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        """
        The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        """
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="cloudGateway")
    def cloud_gateway(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        """
        return pulumi.get(self, "cloud_gateway")

    @cloud_gateway.setter
    def cloud_gateway(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_gateway", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[str]]:
        """
        The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_type", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['GatewayControlPlaneConfigArgs']]:
        """
        CP configuration object for related access endpoints.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['GatewayControlPlaneConfigArgs']]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the control plane in Konnect.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the control plane.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="proxyUrls")
    def proxy_urls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]]]:
        """
        Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        """
        return pulumi.get(self, "proxy_urls")

    @proxy_urls.setter
    def proxy_urls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayControlPlaneProxyUrlArgs']]]]):
        pulumi.set(self, "proxy_urls", value)


class GatewayControlPlane(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 cloud_gateway: Optional[pulumi.Input[bool]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GatewayControlPlaneProxyUrlArgs']]]]] = None,
                 __props__=None):
        """
        GatewayControlPlane Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_type: The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        :param pulumi.Input[bool] cloud_gateway: Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        :param pulumi.Input[str] cluster_type: The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        :param pulumi.Input[str] description: The description of the control plane in Konnect.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the control plane.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GatewayControlPlaneProxyUrlArgs']]]] proxy_urls: Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GatewayControlPlaneArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        GatewayControlPlane Resource

        :param str resource_name: The name of the resource.
        :param GatewayControlPlaneArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayControlPlaneArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 cloud_gateway: Optional[pulumi.Input[bool]] = None,
                 cluster_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GatewayControlPlaneProxyUrlArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayControlPlaneArgs.__new__(GatewayControlPlaneArgs)

            __props__.__dict__["auth_type"] = auth_type
            __props__.__dict__["cloud_gateway"] = cloud_gateway
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["description"] = description
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["proxy_urls"] = proxy_urls
            __props__.__dict__["config"] = None
        super(GatewayControlPlane, __self__).__init__(
            'konnect:index/gatewayControlPlane:GatewayControlPlane',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auth_type: Optional[pulumi.Input[str]] = None,
            cloud_gateway: Optional[pulumi.Input[bool]] = None,
            cluster_type: Optional[pulumi.Input[str]] = None,
            config: Optional[pulumi.Input[pulumi.InputType['GatewayControlPlaneConfigArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            proxy_urls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GatewayControlPlaneProxyUrlArgs']]]]] = None) -> 'GatewayControlPlane':
        """
        Get an existing GatewayControlPlane resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] auth_type: The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        :param pulumi.Input[bool] cloud_gateway: Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        :param pulumi.Input[str] cluster_type: The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        :param pulumi.Input[pulumi.InputType['GatewayControlPlaneConfigArgs']] config: CP configuration object for related access endpoints.
        :param pulumi.Input[str] description: The description of the control plane in Konnect.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the control plane.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['GatewayControlPlaneProxyUrlArgs']]]] proxy_urls: Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayControlPlaneState.__new__(_GatewayControlPlaneState)

        __props__.__dict__["auth_type"] = auth_type
        __props__.__dict__["cloud_gateway"] = cloud_gateway
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["config"] = config
        __props__.__dict__["description"] = description
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["proxy_urls"] = proxy_urls
        return GatewayControlPlane(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Output[Optional[str]]:
        """
        The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        """
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="cloudGateway")
    def cloud_gateway(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        """
        return pulumi.get(self, "cloud_gateway")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[Optional[str]]:
        """
        The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        """
        return pulumi.get(self, "cluster_type")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output['outputs.GatewayControlPlaneConfig']:
        """
        CP configuration object for related access endpoints.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the control plane in Konnect.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the control plane.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="proxyUrls")
    def proxy_urls(self) -> pulumi.Output[Optional[Sequence['outputs.GatewayControlPlaneProxyUrl']]]:
        """
        Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        """
        return pulumi.get(self, "proxy_urls")

