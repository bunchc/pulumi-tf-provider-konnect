# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetApplicationAuthStrategyResult',
    'AwaitableGetApplicationAuthStrategyResult',
    'get_application_auth_strategy',
    'get_application_auth_strategy_output',
]

@pulumi.output_type
class GetApplicationAuthStrategyResult:
    """
    A collection of values returned by getApplicationAuthStrategy.
    """
    def __init__(__self__, active=None, display_name=None, id=None, key_auth=None, name=None, openid_connect=None):
        if active and not isinstance(active, bool):
            raise TypeError("Expected argument 'active' to be a bool")
        pulumi.set(__self__, "active", active)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if key_auth and not isinstance(key_auth, dict):
            raise TypeError("Expected argument 'key_auth' to be a dict")
        pulumi.set(__self__, "key_auth", key_auth)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if openid_connect and not isinstance(openid_connect, dict):
            raise TypeError("Expected argument 'openid_connect' to be a dict")
        pulumi.set(__self__, "openid_connect", openid_connect)

    @property
    @pulumi.getter
    def active(self) -> bool:
        return pulumi.get(self, "active")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="keyAuth")
    def key_auth(self) -> 'outputs.GetApplicationAuthStrategyKeyAuthResult':
        return pulumi.get(self, "key_auth")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openidConnect")
    def openid_connect(self) -> 'outputs.GetApplicationAuthStrategyOpenidConnectResult':
        return pulumi.get(self, "openid_connect")


class AwaitableGetApplicationAuthStrategyResult(GetApplicationAuthStrategyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApplicationAuthStrategyResult(
            active=self.active,
            display_name=self.display_name,
            id=self.id,
            key_auth=self.key_auth,
            name=self.name,
            openid_connect=self.openid_connect)


def get_application_auth_strategy(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApplicationAuthStrategyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getApplicationAuthStrategy:getApplicationAuthStrategy', __args__, opts=opts, typ=GetApplicationAuthStrategyResult).value

    return AwaitableGetApplicationAuthStrategyResult(
        active=pulumi.get(__ret__, 'active'),
        display_name=pulumi.get(__ret__, 'display_name'),
        id=pulumi.get(__ret__, 'id'),
        key_auth=pulumi.get(__ret__, 'key_auth'),
        name=pulumi.get(__ret__, 'name'),
        openid_connect=pulumi.get(__ret__, 'openid_connect'))


@_utilities.lift_output_func(get_application_auth_strategy)
def get_application_auth_strategy_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApplicationAuthStrategyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
