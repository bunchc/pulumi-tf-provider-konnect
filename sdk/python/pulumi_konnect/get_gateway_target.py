# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGatewayTargetResult',
    'AwaitableGetGatewayTargetResult',
    'get_gateway_target',
    'get_gateway_target_output',
]

@pulumi.output_type
class GetGatewayTargetResult:
    """
    A collection of values returned by getGatewayTarget.
    """
    def __init__(__self__, control_plane_id=None, created_at=None, id=None, tags=None, target=None, updated_at=None, upstream=None, upstream_id=None, weight=None):
        if control_plane_id and not isinstance(control_plane_id, str):
            raise TypeError("Expected argument 'control_plane_id' to be a str")
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at and not isinstance(created_at, float):
            raise TypeError("Expected argument 'created_at' to be a float")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if target and not isinstance(target, str):
            raise TypeError("Expected argument 'target' to be a str")
        pulumi.set(__self__, "target", target)
        if updated_at and not isinstance(updated_at, float):
            raise TypeError("Expected argument 'updated_at' to be a float")
        pulumi.set(__self__, "updated_at", updated_at)
        if upstream and not isinstance(upstream, dict):
            raise TypeError("Expected argument 'upstream' to be a dict")
        pulumi.set(__self__, "upstream", upstream)
        if upstream_id and not isinstance(upstream_id, str):
            raise TypeError("Expected argument 'upstream_id' to be a str")
        pulumi.set(__self__, "upstream_id", upstream_id)
        if weight and not isinstance(weight, int):
            raise TypeError("Expected argument 'weight' to be a int")
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> str:
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> float:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> float:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def upstream(self) -> 'outputs.GetGatewayTargetUpstreamResult':
        return pulumi.get(self, "upstream")

    @property
    @pulumi.getter(name="upstreamId")
    def upstream_id(self) -> str:
        return pulumi.get(self, "upstream_id")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


class AwaitableGetGatewayTargetResult(GetGatewayTargetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewayTargetResult(
            control_plane_id=self.control_plane_id,
            created_at=self.created_at,
            id=self.id,
            tags=self.tags,
            target=self.target,
            updated_at=self.updated_at,
            upstream=self.upstream,
            upstream_id=self.upstream_id,
            weight=self.weight)


def get_gateway_target(control_plane_id: Optional[str] = None,
                       upstream_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewayTargetResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['controlPlaneId'] = control_plane_id
    __args__['upstreamId'] = upstream_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getGatewayTarget:getGatewayTarget', __args__, opts=opts, typ=GetGatewayTargetResult).value

    return AwaitableGetGatewayTargetResult(
        control_plane_id=pulumi.get(__ret__, 'control_plane_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        tags=pulumi.get(__ret__, 'tags'),
        target=pulumi.get(__ret__, 'target'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        upstream=pulumi.get(__ret__, 'upstream'),
        upstream_id=pulumi.get(__ret__, 'upstream_id'),
        weight=pulumi.get(__ret__, 'weight'))


@_utilities.lift_output_func(get_gateway_target)
def get_gateway_target_output(control_plane_id: Optional[pulumi.Input[str]] = None,
                              upstream_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGatewayTargetResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
