# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudGatewayCustomDomainResult',
    'AwaitableGetCloudGatewayCustomDomainResult',
    'get_cloud_gateway_custom_domain',
    'get_cloud_gateway_custom_domain_output',
]

@pulumi.output_type
class GetCloudGatewayCustomDomainResult:
    """
    A collection of values returned by getCloudGatewayCustomDomain.
    """
    def __init__(__self__, certificate_id=None, control_plane_geo=None, control_plane_id=None, created_at=None, domain=None, entity_version=None, id=None, sni_id=None, state=None, state_metadata=None, updated_at=None):
        if certificate_id and not isinstance(certificate_id, str):
            raise TypeError("Expected argument 'certificate_id' to be a str")
        pulumi.set(__self__, "certificate_id", certificate_id)
        if control_plane_geo and not isinstance(control_plane_geo, str):
            raise TypeError("Expected argument 'control_plane_geo' to be a str")
        pulumi.set(__self__, "control_plane_geo", control_plane_geo)
        if control_plane_id and not isinstance(control_plane_id, str):
            raise TypeError("Expected argument 'control_plane_id' to be a str")
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if entity_version and not isinstance(entity_version, int):
            raise TypeError("Expected argument 'entity_version' to be a int")
        pulumi.set(__self__, "entity_version", entity_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sni_id and not isinstance(sni_id, str):
            raise TypeError("Expected argument 'sni_id' to be a str")
        pulumi.set(__self__, "sni_id", sni_id)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_metadata and not isinstance(state_metadata, dict):
            raise TypeError("Expected argument 'state_metadata' to be a dict")
        pulumi.set(__self__, "state_metadata", state_metadata)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> str:
        return pulumi.get(self, "control_plane_geo")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> str:
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> int:
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="sniId")
    def sni_id(self) -> str:
        return pulumi.get(self, "sni_id")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMetadata")
    def state_metadata(self) -> 'outputs.GetCloudGatewayCustomDomainStateMetadataResult':
        return pulumi.get(self, "state_metadata")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetCloudGatewayCustomDomainResult(GetCloudGatewayCustomDomainResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudGatewayCustomDomainResult(
            certificate_id=self.certificate_id,
            control_plane_geo=self.control_plane_geo,
            control_plane_id=self.control_plane_id,
            created_at=self.created_at,
            domain=self.domain,
            entity_version=self.entity_version,
            id=self.id,
            sni_id=self.sni_id,
            state=self.state,
            state_metadata=self.state_metadata,
            updated_at=self.updated_at)


def get_cloud_gateway_custom_domain(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudGatewayCustomDomainResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getCloudGatewayCustomDomain:getCloudGatewayCustomDomain', __args__, opts=opts, typ=GetCloudGatewayCustomDomainResult).value

    return AwaitableGetCloudGatewayCustomDomainResult(
        certificate_id=pulumi.get(__ret__, 'certificate_id'),
        control_plane_geo=pulumi.get(__ret__, 'control_plane_geo'),
        control_plane_id=pulumi.get(__ret__, 'control_plane_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        domain=pulumi.get(__ret__, 'domain'),
        entity_version=pulumi.get(__ret__, 'entity_version'),
        id=pulumi.get(__ret__, 'id'),
        sni_id=pulumi.get(__ret__, 'sni_id'),
        state=pulumi.get(__ret__, 'state'),
        state_metadata=pulumi.get(__ret__, 'state_metadata'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_cloud_gateway_custom_domain)
def get_cloud_gateway_custom_domain_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudGatewayCustomDomainResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
