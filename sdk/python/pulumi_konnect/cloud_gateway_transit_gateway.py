# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudGatewayTransitGatewayArgs', 'CloudGatewayTransitGateway']

@pulumi.input_type
class CloudGatewayTransitGatewayArgs:
    def __init__(__self__, *,
                 cidr_blocks: pulumi.Input[Sequence[pulumi.Input[str]]],
                 network_id: pulumi.Input[str],
                 transit_gateway_attachment_config: pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs'],
                 dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CloudGatewayTransitGateway resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidr_blocks: CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
               network.
        :param pulumi.Input[str] network_id: The network to operate on. Requires replacement if changed.
        :param pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs'] transit_gateway_attachment_config: Requires replacement if changed.
        :param pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]] dns_configs: List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.
               Requires replacement if changed.
        :param pulumi.Input[str] name: Human-readable name of the transit gateway. Requires replacement if changed.
        """
        pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "transit_gateway_attachment_config", transit_gateway_attachment_config)
        if dns_configs is not None:
            pulumi.set(__self__, "dns_configs", dns_configs)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
        network.
        """
        return pulumi.get(self, "cidr_blocks")

    @cidr_blocks.setter
    def cidr_blocks(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "cidr_blocks", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        The network to operate on. Requires replacement if changed.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="transitGatewayAttachmentConfig")
    def transit_gateway_attachment_config(self) -> pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "transit_gateway_attachment_config")

    @transit_gateway_attachment_config.setter
    def transit_gateway_attachment_config(self, value: pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']):
        pulumi.set(self, "transit_gateway_attachment_config", value)

    @property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]]]:
        """
        List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.
        Requires replacement if changed.
        """
        return pulumi.get(self, "dns_configs")

    @dns_configs.setter
    def dns_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]]]):
        pulumi.set(self, "dns_configs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable name of the transit gateway. Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CloudGatewayTransitGatewayState:
    def __init__(__self__, *,
                 cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]]] = None,
                 entity_version: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 transit_gateway_attachment_config: Optional[pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudGatewayTransitGateway resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidr_blocks: CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
               network.
        :param pulumi.Input[str] created_at: An RFC-3339 timestamp representation of transit gateway creation date.
        :param pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]] dns_configs: List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.
               Requires replacement if changed.
        :param pulumi.Input[int] entity_version: Monotonically-increasing version count of the transit gateway, to indicate the order of updates to the transit gateway.
        :param pulumi.Input[str] name: Human-readable name of the transit gateway. Requires replacement if changed.
        :param pulumi.Input[str] network_id: The network to operate on. Requires replacement if changed.
        :param pulumi.Input[str] state: State of the transit gateway. must be one of ["created", "initializing", "ready", "terminating", "terminated"]
        :param pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs'] transit_gateway_attachment_config: Requires replacement if changed.
        :param pulumi.Input[str] updated_at: An RFC-3339 timestamp representation of transit gateway update date.
        """
        if cidr_blocks is not None:
            pulumi.set(__self__, "cidr_blocks", cidr_blocks)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dns_configs is not None:
            pulumi.set(__self__, "dns_configs", dns_configs)
        if entity_version is not None:
            pulumi.set(__self__, "entity_version", entity_version)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if transit_gateway_attachment_config is not None:
            pulumi.set(__self__, "transit_gateway_attachment_config", transit_gateway_attachment_config)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
        network.
        """
        return pulumi.get(self, "cidr_blocks")

    @cidr_blocks.setter
    def cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cidr_blocks", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of transit gateway creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]]]:
        """
        List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.
        Requires replacement if changed.
        """
        return pulumi.get(self, "dns_configs")

    @dns_configs.setter
    def dns_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayTransitGatewayDnsConfigArgs']]]]):
        pulumi.set(self, "dns_configs", value)

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> Optional[pulumi.Input[int]]:
        """
        Monotonically-increasing version count of the transit gateway, to indicate the order of updates to the transit gateway.
        """
        return pulumi.get(self, "entity_version")

    @entity_version.setter
    def entity_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entity_version", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Human-readable name of the transit gateway. Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        The network to operate on. Requires replacement if changed.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the transit gateway. must be one of ["created", "initializing", "ready", "terminating", "terminated"]
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="transitGatewayAttachmentConfig")
    def transit_gateway_attachment_config(self) -> Optional[pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "transit_gateway_attachment_config")

    @transit_gateway_attachment_config.setter
    def transit_gateway_attachment_config(self, value: Optional[pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']]):
        pulumi.set(self, "transit_gateway_attachment_config", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of transit gateway update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class CloudGatewayTransitGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayDnsConfigArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 transit_gateway_attachment_config: Optional[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']]] = None,
                 __props__=None):
        """
        CloudGatewayTransitGateway Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidr_blocks: CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
               network.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayDnsConfigArgs']]]] dns_configs: List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.
               Requires replacement if changed.
        :param pulumi.Input[str] name: Human-readable name of the transit gateway. Requires replacement if changed.
        :param pulumi.Input[str] network_id: The network to operate on. Requires replacement if changed.
        :param pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']] transit_gateway_attachment_config: Requires replacement if changed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudGatewayTransitGatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CloudGatewayTransitGateway Resource

        :param str resource_name: The name of the resource.
        :param CloudGatewayTransitGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudGatewayTransitGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayDnsConfigArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 transit_gateway_attachment_config: Optional[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudGatewayTransitGatewayArgs.__new__(CloudGatewayTransitGatewayArgs)

            if cidr_blocks is None and not opts.urn:
                raise TypeError("Missing required property 'cidr_blocks'")
            __props__.__dict__["cidr_blocks"] = cidr_blocks
            __props__.__dict__["dns_configs"] = dns_configs
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            if transit_gateway_attachment_config is None and not opts.urn:
                raise TypeError("Missing required property 'transit_gateway_attachment_config'")
            __props__.__dict__["transit_gateway_attachment_config"] = transit_gateway_attachment_config
            __props__.__dict__["created_at"] = None
            __props__.__dict__["entity_version"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["updated_at"] = None
        super(CloudGatewayTransitGateway, __self__).__init__(
            'konnect:index/cloudGatewayTransitGateway:CloudGatewayTransitGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            dns_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayDnsConfigArgs']]]]] = None,
            entity_version: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            transit_gateway_attachment_config: Optional[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'CloudGatewayTransitGateway':
        """
        Get an existing CloudGatewayTransitGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cidr_blocks: CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
               network.
        :param pulumi.Input[str] created_at: An RFC-3339 timestamp representation of transit gateway creation date.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayDnsConfigArgs']]]] dns_configs: List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.
               Requires replacement if changed.
        :param pulumi.Input[int] entity_version: Monotonically-increasing version count of the transit gateway, to indicate the order of updates to the transit gateway.
        :param pulumi.Input[str] name: Human-readable name of the transit gateway. Requires replacement if changed.
        :param pulumi.Input[str] network_id: The network to operate on. Requires replacement if changed.
        :param pulumi.Input[str] state: State of the transit gateway. must be one of ["created", "initializing", "ready", "terminating", "terminated"]
        :param pulumi.Input[pulumi.InputType['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs']] transit_gateway_attachment_config: Requires replacement if changed.
        :param pulumi.Input[str] updated_at: An RFC-3339 timestamp representation of transit gateway update date.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudGatewayTransitGatewayState.__new__(_CloudGatewayTransitGatewayState)

        __props__.__dict__["cidr_blocks"] = cidr_blocks
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dns_configs"] = dns_configs
        __props__.__dict__["entity_version"] = entity_version
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["state"] = state
        __props__.__dict__["transit_gateway_attachment_config"] = transit_gateway_attachment_config
        __props__.__dict__["updated_at"] = updated_at
        return CloudGatewayTransitGateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cidrBlocks")
    def cidr_blocks(self) -> pulumi.Output[Sequence[str]]:
        """
        CIDR blocks for constructing a route table for the transit gateway, when attaching to the owning
        network.
        """
        return pulumi.get(self, "cidr_blocks")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        An RFC-3339 timestamp representation of transit gateway creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dnsConfigs")
    def dns_configs(self) -> pulumi.Output[Sequence['outputs.CloudGatewayTransitGatewayDnsConfig']]:
        """
        List of mappings from remote DNS server IP address sets to proxied internal domains, for a transit gateway attachment.
        Requires replacement if changed.
        """
        return pulumi.get(self, "dns_configs")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> pulumi.Output[int]:
        """
        Monotonically-increasing version count of the transit gateway, to indicate the order of updates to the transit gateway.
        """
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Human-readable name of the transit gateway. Requires replacement if changed.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        The network to operate on. Requires replacement if changed.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the transit gateway. must be one of ["created", "initializing", "ready", "terminating", "terminated"]
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="transitGatewayAttachmentConfig")
    def transit_gateway_attachment_config(self) -> pulumi.Output['outputs.CloudGatewayTransitGatewayTransitGatewayAttachmentConfig']:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "transit_gateway_attachment_config")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        An RFC-3339 timestamp representation of transit gateway update date.
        """
        return pulumi.get(self, "updated_at")

