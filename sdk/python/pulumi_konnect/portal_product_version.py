# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortalProductVersionArgs', 'PortalProductVersion']

@pulumi.input_type
class PortalProductVersionArgs:
    def __init__(__self__, *,
                 application_registration_enabled: pulumi.Input[bool],
                 auth_strategy_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 auto_approve_registration: pulumi.Input[bool],
                 deprecated: pulumi.Input[bool],
                 portal_id: pulumi.Input[str],
                 product_version_id: pulumi.Input[str],
                 publish_status: pulumi.Input[str],
                 notify_developers: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a PortalProductVersion resource.
        :param pulumi.Input[bool] application_registration_enabled: Whether the application registration on this portal for the api product version is enabled
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auth_strategy_ids: A list of authentication strategy IDs
        :param pulumi.Input[bool] auto_approve_registration: Whether the application registration auto approval on this portal for the api product version is enabled
        :param pulumi.Input[bool] deprecated: Whether the api product version on the portal is deprecated
        :param pulumi.Input[str] portal_id: portal identifier
        :param pulumi.Input[str] product_version_id: API product version identifier
        :param pulumi.Input[str] publish_status: Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
        :param pulumi.Input[bool] notify_developers: Whether to notify developers who are affected by this change
        """
        pulumi.set(__self__, "application_registration_enabled", application_registration_enabled)
        pulumi.set(__self__, "auth_strategy_ids", auth_strategy_ids)
        pulumi.set(__self__, "auto_approve_registration", auto_approve_registration)
        pulumi.set(__self__, "deprecated", deprecated)
        pulumi.set(__self__, "portal_id", portal_id)
        pulumi.set(__self__, "product_version_id", product_version_id)
        pulumi.set(__self__, "publish_status", publish_status)
        if notify_developers is not None:
            pulumi.set(__self__, "notify_developers", notify_developers)

    @property
    @pulumi.getter(name="applicationRegistrationEnabled")
    def application_registration_enabled(self) -> pulumi.Input[bool]:
        """
        Whether the application registration on this portal for the api product version is enabled
        """
        return pulumi.get(self, "application_registration_enabled")

    @application_registration_enabled.setter
    def application_registration_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "application_registration_enabled", value)

    @property
    @pulumi.getter(name="authStrategyIds")
    def auth_strategy_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of authentication strategy IDs
        """
        return pulumi.get(self, "auth_strategy_ids")

    @auth_strategy_ids.setter
    def auth_strategy_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "auth_strategy_ids", value)

    @property
    @pulumi.getter(name="autoApproveRegistration")
    def auto_approve_registration(self) -> pulumi.Input[bool]:
        """
        Whether the application registration auto approval on this portal for the api product version is enabled
        """
        return pulumi.get(self, "auto_approve_registration")

    @auto_approve_registration.setter
    def auto_approve_registration(self, value: pulumi.Input[bool]):
        pulumi.set(self, "auto_approve_registration", value)

    @property
    @pulumi.getter
    def deprecated(self) -> pulumi.Input[bool]:
        """
        Whether the api product version on the portal is deprecated
        """
        return pulumi.get(self, "deprecated")

    @deprecated.setter
    def deprecated(self, value: pulumi.Input[bool]):
        pulumi.set(self, "deprecated", value)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> pulumi.Input[str]:
        """
        portal identifier
        """
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "portal_id", value)

    @property
    @pulumi.getter(name="productVersionId")
    def product_version_id(self) -> pulumi.Input[str]:
        """
        API product version identifier
        """
        return pulumi.get(self, "product_version_id")

    @product_version_id.setter
    def product_version_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_version_id", value)

    @property
    @pulumi.getter(name="publishStatus")
    def publish_status(self) -> pulumi.Input[str]:
        """
        Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
        """
        return pulumi.get(self, "publish_status")

    @publish_status.setter
    def publish_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "publish_status", value)

    @property
    @pulumi.getter(name="notifyDevelopers")
    def notify_developers(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to notify developers who are affected by this change
        """
        return pulumi.get(self, "notify_developers")

    @notify_developers.setter
    def notify_developers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify_developers", value)


@pulumi.input_type
class _PortalProductVersionState:
    def __init__(__self__, *,
                 application_registration_enabled: Optional[pulumi.Input[bool]] = None,
                 auth_strategies: Optional[pulumi.Input[Sequence[pulumi.Input['PortalProductVersionAuthStrategyArgs']]]] = None,
                 auth_strategy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_approve_registration: Optional[pulumi.Input[bool]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 deprecated: Optional[pulumi.Input[bool]] = None,
                 notify_developers: Optional[pulumi.Input[bool]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 product_version_id: Optional[pulumi.Input[str]] = None,
                 publish_status: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PortalProductVersion resources.
        :param pulumi.Input[bool] application_registration_enabled: Whether the application registration on this portal for the api product version is enabled
        :param pulumi.Input[Sequence[pulumi.Input['PortalProductVersionAuthStrategyArgs']]] auth_strategies: A list of authentication strategies
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auth_strategy_ids: A list of authentication strategy IDs
        :param pulumi.Input[bool] auto_approve_registration: Whether the application registration auto approval on this portal for the api product version is enabled
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input[bool] deprecated: Whether the api product version on the portal is deprecated
        :param pulumi.Input[bool] notify_developers: Whether to notify developers who are affected by this change
        :param pulumi.Input[str] portal_id: portal identifier
        :param pulumi.Input[str] product_version_id: API product version identifier
        :param pulumi.Input[str] publish_status: Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        if application_registration_enabled is not None:
            pulumi.set(__self__, "application_registration_enabled", application_registration_enabled)
        if auth_strategies is not None:
            pulumi.set(__self__, "auth_strategies", auth_strategies)
        if auth_strategy_ids is not None:
            pulumi.set(__self__, "auth_strategy_ids", auth_strategy_ids)
        if auto_approve_registration is not None:
            pulumi.set(__self__, "auto_approve_registration", auto_approve_registration)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deprecated is not None:
            pulumi.set(__self__, "deprecated", deprecated)
        if notify_developers is not None:
            pulumi.set(__self__, "notify_developers", notify_developers)
        if portal_id is not None:
            pulumi.set(__self__, "portal_id", portal_id)
        if product_version_id is not None:
            pulumi.set(__self__, "product_version_id", product_version_id)
        if publish_status is not None:
            pulumi.set(__self__, "publish_status", publish_status)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="applicationRegistrationEnabled")
    def application_registration_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the application registration on this portal for the api product version is enabled
        """
        return pulumi.get(self, "application_registration_enabled")

    @application_registration_enabled.setter
    def application_registration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "application_registration_enabled", value)

    @property
    @pulumi.getter(name="authStrategies")
    def auth_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PortalProductVersionAuthStrategyArgs']]]]:
        """
        A list of authentication strategies
        """
        return pulumi.get(self, "auth_strategies")

    @auth_strategies.setter
    def auth_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PortalProductVersionAuthStrategyArgs']]]]):
        pulumi.set(self, "auth_strategies", value)

    @property
    @pulumi.getter(name="authStrategyIds")
    def auth_strategy_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of authentication strategy IDs
        """
        return pulumi.get(self, "auth_strategy_ids")

    @auth_strategy_ids.setter
    def auth_strategy_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auth_strategy_ids", value)

    @property
    @pulumi.getter(name="autoApproveRegistration")
    def auto_approve_registration(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the application registration auto approval on this portal for the api product version is enabled
        """
        return pulumi.get(self, "auto_approve_registration")

    @auto_approve_registration.setter
    def auto_approve_registration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_approve_registration", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def deprecated(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the api product version on the portal is deprecated
        """
        return pulumi.get(self, "deprecated")

    @deprecated.setter
    def deprecated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deprecated", value)

    @property
    @pulumi.getter(name="notifyDevelopers")
    def notify_developers(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to notify developers who are affected by this change
        """
        return pulumi.get(self, "notify_developers")

    @notify_developers.setter
    def notify_developers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify_developers", value)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> Optional[pulumi.Input[str]]:
        """
        portal identifier
        """
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_id", value)

    @property
    @pulumi.getter(name="productVersionId")
    def product_version_id(self) -> Optional[pulumi.Input[str]]:
        """
        API product version identifier
        """
        return pulumi.get(self, "product_version_id")

    @product_version_id.setter
    def product_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_version_id", value)

    @property
    @pulumi.getter(name="publishStatus")
    def publish_status(self) -> Optional[pulumi.Input[str]]:
        """
        Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
        """
        return pulumi.get(self, "publish_status")

    @publish_status.setter
    def publish_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_status", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class PortalProductVersion(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_registration_enabled: Optional[pulumi.Input[bool]] = None,
                 auth_strategy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_approve_registration: Optional[pulumi.Input[bool]] = None,
                 deprecated: Optional[pulumi.Input[bool]] = None,
                 notify_developers: Optional[pulumi.Input[bool]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 product_version_id: Optional[pulumi.Input[str]] = None,
                 publish_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        PortalProductVersion Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] application_registration_enabled: Whether the application registration on this portal for the api product version is enabled
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auth_strategy_ids: A list of authentication strategy IDs
        :param pulumi.Input[bool] auto_approve_registration: Whether the application registration auto approval on this portal for the api product version is enabled
        :param pulumi.Input[bool] deprecated: Whether the api product version on the portal is deprecated
        :param pulumi.Input[bool] notify_developers: Whether to notify developers who are affected by this change
        :param pulumi.Input[str] portal_id: portal identifier
        :param pulumi.Input[str] product_version_id: API product version identifier
        :param pulumi.Input[str] publish_status: Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PortalProductVersionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        PortalProductVersion Resource

        :param str resource_name: The name of the resource.
        :param PortalProductVersionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortalProductVersionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 application_registration_enabled: Optional[pulumi.Input[bool]] = None,
                 auth_strategy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_approve_registration: Optional[pulumi.Input[bool]] = None,
                 deprecated: Optional[pulumi.Input[bool]] = None,
                 notify_developers: Optional[pulumi.Input[bool]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 product_version_id: Optional[pulumi.Input[str]] = None,
                 publish_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortalProductVersionArgs.__new__(PortalProductVersionArgs)

            if application_registration_enabled is None and not opts.urn:
                raise TypeError("Missing required property 'application_registration_enabled'")
            __props__.__dict__["application_registration_enabled"] = application_registration_enabled
            if auth_strategy_ids is None and not opts.urn:
                raise TypeError("Missing required property 'auth_strategy_ids'")
            __props__.__dict__["auth_strategy_ids"] = auth_strategy_ids
            if auto_approve_registration is None and not opts.urn:
                raise TypeError("Missing required property 'auto_approve_registration'")
            __props__.__dict__["auto_approve_registration"] = auto_approve_registration
            if deprecated is None and not opts.urn:
                raise TypeError("Missing required property 'deprecated'")
            __props__.__dict__["deprecated"] = deprecated
            __props__.__dict__["notify_developers"] = notify_developers
            if portal_id is None and not opts.urn:
                raise TypeError("Missing required property 'portal_id'")
            __props__.__dict__["portal_id"] = portal_id
            if product_version_id is None and not opts.urn:
                raise TypeError("Missing required property 'product_version_id'")
            __props__.__dict__["product_version_id"] = product_version_id
            if publish_status is None and not opts.urn:
                raise TypeError("Missing required property 'publish_status'")
            __props__.__dict__["publish_status"] = publish_status
            __props__.__dict__["auth_strategies"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(PortalProductVersion, __self__).__init__(
            'konnect:index/portalProductVersion:PortalProductVersion',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_registration_enabled: Optional[pulumi.Input[bool]] = None,
            auth_strategies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PortalProductVersionAuthStrategyArgs']]]]] = None,
            auth_strategy_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            auto_approve_registration: Optional[pulumi.Input[bool]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            deprecated: Optional[pulumi.Input[bool]] = None,
            notify_developers: Optional[pulumi.Input[bool]] = None,
            portal_id: Optional[pulumi.Input[str]] = None,
            product_version_id: Optional[pulumi.Input[str]] = None,
            publish_status: Optional[pulumi.Input[str]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'PortalProductVersion':
        """
        Get an existing PortalProductVersion resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] application_registration_enabled: Whether the application registration on this portal for the api product version is enabled
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['PortalProductVersionAuthStrategyArgs']]]] auth_strategies: A list of authentication strategies
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auth_strategy_ids: A list of authentication strategy IDs
        :param pulumi.Input[bool] auto_approve_registration: Whether the application registration auto approval on this portal for the api product version is enabled
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input[bool] deprecated: Whether the api product version on the portal is deprecated
        :param pulumi.Input[bool] notify_developers: Whether to notify developers who are affected by this change
        :param pulumi.Input[str] portal_id: portal identifier
        :param pulumi.Input[str] product_version_id: API product version identifier
        :param pulumi.Input[str] publish_status: Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortalProductVersionState.__new__(_PortalProductVersionState)

        __props__.__dict__["application_registration_enabled"] = application_registration_enabled
        __props__.__dict__["auth_strategies"] = auth_strategies
        __props__.__dict__["auth_strategy_ids"] = auth_strategy_ids
        __props__.__dict__["auto_approve_registration"] = auto_approve_registration
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["deprecated"] = deprecated
        __props__.__dict__["notify_developers"] = notify_developers
        __props__.__dict__["portal_id"] = portal_id
        __props__.__dict__["product_version_id"] = product_version_id
        __props__.__dict__["publish_status"] = publish_status
        __props__.__dict__["updated_at"] = updated_at
        return PortalProductVersion(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationRegistrationEnabled")
    def application_registration_enabled(self) -> pulumi.Output[bool]:
        """
        Whether the application registration on this portal for the api product version is enabled
        """
        return pulumi.get(self, "application_registration_enabled")

    @property
    @pulumi.getter(name="authStrategies")
    def auth_strategies(self) -> pulumi.Output[Sequence['outputs.PortalProductVersionAuthStrategy']]:
        """
        A list of authentication strategies
        """
        return pulumi.get(self, "auth_strategies")

    @property
    @pulumi.getter(name="authStrategyIds")
    def auth_strategy_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of authentication strategy IDs
        """
        return pulumi.get(self, "auth_strategy_ids")

    @property
    @pulumi.getter(name="autoApproveRegistration")
    def auto_approve_registration(self) -> pulumi.Output[bool]:
        """
        Whether the application registration auto approval on this portal for the api product version is enabled
        """
        return pulumi.get(self, "auto_approve_registration")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def deprecated(self) -> pulumi.Output[bool]:
        """
        Whether the api product version on the portal is deprecated
        """
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter(name="notifyDevelopers")
    def notify_developers(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to notify developers who are affected by this change
        """
        return pulumi.get(self, "notify_developers")

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> pulumi.Output[str]:
        """
        portal identifier
        """
        return pulumi.get(self, "portal_id")

    @property
    @pulumi.getter(name="productVersionId")
    def product_version_id(self) -> pulumi.Output[str]:
        """
        API product version identifier
        """
        return pulumi.get(self, "product_version_id")

    @property
    @pulumi.getter(name="publishStatus")
    def publish_status(self) -> pulumi.Output[str]:
        """
        Publication status of the API product version on the portal. must be one of ["published", "unpublished"]
        """
        return pulumi.get(self, "publish_status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

