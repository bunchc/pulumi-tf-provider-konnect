# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetApiProductDocumentResult',
    'AwaitableGetApiProductDocumentResult',
    'get_api_product_document',
    'get_api_product_document_output',
]

@pulumi.output_type
class GetApiProductDocumentResult:
    """
    A collection of values returned by getApiProductDocument.
    """
    def __init__(__self__, api_product_id=None, content=None, created_at=None, id=None, metadata=None, parent_document_id=None, slug=None, status=None, title=None, updated_at=None):
        if api_product_id and not isinstance(api_product_id, str):
            raise TypeError("Expected argument 'api_product_id' to be a str")
        pulumi.set(__self__, "api_product_id", api_product_id)
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if metadata and not isinstance(metadata, dict):
            raise TypeError("Expected argument 'metadata' to be a dict")
        pulumi.set(__self__, "metadata", metadata)
        if parent_document_id and not isinstance(parent_document_id, str):
            raise TypeError("Expected argument 'parent_document_id' to be a str")
        pulumi.set(__self__, "parent_document_id", parent_document_id)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if title and not isinstance(title, str):
            raise TypeError("Expected argument 'title' to be a str")
        pulumi.set(__self__, "title", title)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="apiProductId")
    def api_product_id(self) -> str:
        return pulumi.get(self, "api_product_id")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def metadata(self) -> 'outputs.GetApiProductDocumentMetadataResult':
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="parentDocumentId")
    def parent_document_id(self) -> str:
        return pulumi.get(self, "parent_document_id")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetApiProductDocumentResult(GetApiProductDocumentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiProductDocumentResult(
            api_product_id=self.api_product_id,
            content=self.content,
            created_at=self.created_at,
            id=self.id,
            metadata=self.metadata,
            parent_document_id=self.parent_document_id,
            slug=self.slug,
            status=self.status,
            title=self.title,
            updated_at=self.updated_at)


def get_api_product_document(api_product_id: Optional[str] = None,
                             id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiProductDocumentResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiProductId'] = api_product_id
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getApiProductDocument:getApiProductDocument', __args__, opts=opts, typ=GetApiProductDocumentResult).value

    return AwaitableGetApiProductDocumentResult(
        api_product_id=pulumi.get(__ret__, 'api_product_id'),
        content=pulumi.get(__ret__, 'content'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        metadata=pulumi.get(__ret__, 'metadata'),
        parent_document_id=pulumi.get(__ret__, 'parent_document_id'),
        slug=pulumi.get(__ret__, 'slug'),
        status=pulumi.get(__ret__, 'status'),
        title=pulumi.get(__ret__, 'title'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_api_product_document)
def get_api_product_document_output(api_product_id: Optional[pulumi.Input[str]] = None,
                                    id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiProductDocumentResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
