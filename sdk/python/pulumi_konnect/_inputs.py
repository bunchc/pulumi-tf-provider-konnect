# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ApiProductDocumentMetadataArgs',
    'ApiProductPortalArgs',
    'ApiProductVersionGatewayServiceArgs',
    'ApiProductVersionPortalArgs',
    'ApiProductVersionPortalAuthStrategyArgs',
    'ApplicationAuthStrategyKeyAuthArgs',
    'ApplicationAuthStrategyKeyAuthConfigsArgs',
    'ApplicationAuthStrategyKeyAuthConfigsKeyAuthArgs',
    'ApplicationAuthStrategyKeyAuthDcrProviderArgs',
    'ApplicationAuthStrategyOpenidConnectArgs',
    'ApplicationAuthStrategyOpenidConnectConfigsArgs',
    'ApplicationAuthStrategyOpenidConnectConfigsOpenidConnectArgs',
    'ApplicationAuthStrategyOpenidConnectDcrProviderArgs',
    'CloudGatewayConfigurationDataplaneGroupArgs',
    'CloudGatewayConfigurationDataplaneGroupAutoscaleArgs',
    'CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs',
    'CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs',
    'CloudGatewayConfigurationDataplaneGroupConfigArgs',
    'CloudGatewayConfigurationDataplaneGroupConfigAutoscaleArgs',
    'CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs',
    'CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs',
    'CloudGatewayCustomDomainStateMetadataArgs',
    'CloudGatewayNetworkFirewallArgs',
    'CloudGatewayNetworkProviderMetadataArgs',
    'CloudGatewayTransitGatewayDnsConfigArgs',
    'CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs',
    'CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfigArgs',
    'GatewayAclConsumerArgs',
    'GatewayBasicAuthConsumerArgs',
    'GatewayControlPlaneConfigArgs',
    'GatewayControlPlaneMembershipMemberArgs',
    'GatewayControlPlaneProxyUrlArgs',
    'GatewayHmacAuthConsumerArgs',
    'GatewayJwtConsumerArgs',
    'GatewayKeyAuthConsumerArgs',
    'GatewayKeyPemArgs',
    'GatewayKeySetArgs',
    'GatewayPluginAclConfigArgs',
    'GatewayPluginAclConsumerArgs',
    'GatewayPluginAclConsumerGroupArgs',
    'GatewayPluginAclRouteArgs',
    'GatewayPluginAclServiceArgs',
    'GatewayPluginAiPromptDecoratorConfigArgs',
    'GatewayPluginAiPromptDecoratorConfigPromptsArgs',
    'GatewayPluginAiPromptDecoratorConfigPromptsAppendArgs',
    'GatewayPluginAiPromptDecoratorConfigPromptsPrependArgs',
    'GatewayPluginAiPromptDecoratorConsumerArgs',
    'GatewayPluginAiPromptDecoratorConsumerGroupArgs',
    'GatewayPluginAiPromptDecoratorRouteArgs',
    'GatewayPluginAiPromptDecoratorServiceArgs',
    'GatewayPluginAiPromptGuardConfigArgs',
    'GatewayPluginAiPromptGuardConsumerArgs',
    'GatewayPluginAiPromptGuardConsumerGroupArgs',
    'GatewayPluginAiPromptGuardRouteArgs',
    'GatewayPluginAiPromptGuardServiceArgs',
    'GatewayPluginAiPromptTemplateConfigArgs',
    'GatewayPluginAiPromptTemplateConfigTemplateArgs',
    'GatewayPluginAiPromptTemplateConsumerArgs',
    'GatewayPluginAiPromptTemplateConsumerGroupArgs',
    'GatewayPluginAiPromptTemplateRouteArgs',
    'GatewayPluginAiPromptTemplateServiceArgs',
    'GatewayPluginAiProxyConfigArgs',
    'GatewayPluginAiProxyConfigAuthArgs',
    'GatewayPluginAiProxyConfigLoggingArgs',
    'GatewayPluginAiProxyConfigModelArgs',
    'GatewayPluginAiProxyConfigModelOptionsArgs',
    'GatewayPluginAiProxyConsumerArgs',
    'GatewayPluginAiProxyConsumerGroupArgs',
    'GatewayPluginAiProxyRouteArgs',
    'GatewayPluginAiProxyServiceArgs',
    'GatewayPluginAwsLambdaConfigArgs',
    'GatewayPluginAwsLambdaConsumerArgs',
    'GatewayPluginAwsLambdaConsumerGroupArgs',
    'GatewayPluginAwsLambdaRouteArgs',
    'GatewayPluginAwsLambdaServiceArgs',
    'GatewayPluginBasicAuthConfigArgs',
    'GatewayPluginBasicAuthConsumerArgs',
    'GatewayPluginBasicAuthConsumerGroupArgs',
    'GatewayPluginBasicAuthRouteArgs',
    'GatewayPluginBasicAuthServiceArgs',
    'GatewayPluginCorrelationIdConfigArgs',
    'GatewayPluginCorrelationIdConsumerArgs',
    'GatewayPluginCorrelationIdConsumerGroupArgs',
    'GatewayPluginCorrelationIdRouteArgs',
    'GatewayPluginCorrelationIdServiceArgs',
    'GatewayPluginCorsConfigArgs',
    'GatewayPluginCorsConsumerArgs',
    'GatewayPluginCorsConsumerGroupArgs',
    'GatewayPluginCorsRouteArgs',
    'GatewayPluginCorsServiceArgs',
    'GatewayPluginExitTransformerConfigArgs',
    'GatewayPluginExitTransformerConsumerArgs',
    'GatewayPluginExitTransformerConsumerGroupArgs',
    'GatewayPluginExitTransformerRouteArgs',
    'GatewayPluginExitTransformerServiceArgs',
    'GatewayPluginFileLogConfigArgs',
    'GatewayPluginFileLogConsumerArgs',
    'GatewayPluginFileLogConsumerGroupArgs',
    'GatewayPluginFileLogRouteArgs',
    'GatewayPluginFileLogServiceArgs',
    'GatewayPluginIpRestrictionConfigArgs',
    'GatewayPluginIpRestrictionConsumerArgs',
    'GatewayPluginIpRestrictionConsumerGroupArgs',
    'GatewayPluginIpRestrictionRouteArgs',
    'GatewayPluginIpRestrictionServiceArgs',
    'GatewayPluginJqConfigArgs',
    'GatewayPluginJqConfigRequestJqProgramOptionsArgs',
    'GatewayPluginJqConfigResponseJqProgramOptionsArgs',
    'GatewayPluginJqConsumerArgs',
    'GatewayPluginJqConsumerGroupArgs',
    'GatewayPluginJqRouteArgs',
    'GatewayPluginJqServiceArgs',
    'GatewayPluginJwtConfigArgs',
    'GatewayPluginJwtConsumerArgs',
    'GatewayPluginJwtConsumerGroupArgs',
    'GatewayPluginJwtRouteArgs',
    'GatewayPluginJwtServiceArgs',
    'GatewayPluginJwtSignerConfigArgs',
    'GatewayPluginJwtSignerConsumerArgs',
    'GatewayPluginJwtSignerConsumerGroupArgs',
    'GatewayPluginJwtSignerRouteArgs',
    'GatewayPluginJwtSignerServiceArgs',
    'GatewayPluginKeyAuthConfigArgs',
    'GatewayPluginKeyAuthConsumerArgs',
    'GatewayPluginKeyAuthConsumerGroupArgs',
    'GatewayPluginKeyAuthRouteArgs',
    'GatewayPluginKeyAuthServiceArgs',
    'GatewayPluginOauth2ConfigArgs',
    'GatewayPluginOauth2ConsumerArgs',
    'GatewayPluginOauth2ConsumerGroupArgs',
    'GatewayPluginOauth2RouteArgs',
    'GatewayPluginOauth2ServiceArgs',
    'GatewayPluginOpenidConnectConfigArgs',
    'GatewayPluginOpenidConnectConfigClientJwkArgs',
    'GatewayPluginOpenidConnectConfigSessionRedisClusterNodeArgs',
    'GatewayPluginOpenidConnectConsumerArgs',
    'GatewayPluginOpenidConnectConsumerGroupArgs',
    'GatewayPluginOpenidConnectRouteArgs',
    'GatewayPluginOpenidConnectServiceArgs',
    'GatewayPluginOpentelemetryConfigArgs',
    'GatewayPluginOpentelemetryConfigPropagationArgs',
    'GatewayPluginOpentelemetryConfigQueueArgs',
    'GatewayPluginOpentelemetryConsumerArgs',
    'GatewayPluginOpentelemetryConsumerGroupArgs',
    'GatewayPluginOpentelemetryRouteArgs',
    'GatewayPluginOpentelemetryServiceArgs',
    'GatewayPluginPostFunctionConfigArgs',
    'GatewayPluginPostFunctionConsumerArgs',
    'GatewayPluginPostFunctionConsumerGroupArgs',
    'GatewayPluginPostFunctionRouteArgs',
    'GatewayPluginPostFunctionServiceArgs',
    'GatewayPluginPreFunctionConfigArgs',
    'GatewayPluginPreFunctionConsumerArgs',
    'GatewayPluginPreFunctionConsumerGroupArgs',
    'GatewayPluginPreFunctionRouteArgs',
    'GatewayPluginPreFunctionServiceArgs',
    'GatewayPluginPrometheusConfigArgs',
    'GatewayPluginPrometheusConsumerArgs',
    'GatewayPluginPrometheusConsumerGroupArgs',
    'GatewayPluginPrometheusRouteArgs',
    'GatewayPluginPrometheusServiceArgs',
    'GatewayPluginProxyCacheConfigArgs',
    'GatewayPluginProxyCacheConfigMemoryArgs',
    'GatewayPluginProxyCacheConfigResponseHeadersArgs',
    'GatewayPluginProxyCacheConsumerArgs',
    'GatewayPluginProxyCacheConsumerGroupArgs',
    'GatewayPluginProxyCacheRouteArgs',
    'GatewayPluginProxyCacheServiceArgs',
    'GatewayPluginRateLimitingAdvancedConfigArgs',
    'GatewayPluginRateLimitingAdvancedConfigRedisArgs',
    'GatewayPluginRateLimitingAdvancedConsumerArgs',
    'GatewayPluginRateLimitingAdvancedConsumerGroupArgs',
    'GatewayPluginRateLimitingAdvancedRouteArgs',
    'GatewayPluginRateLimitingAdvancedServiceArgs',
    'GatewayPluginRateLimitingConfigArgs',
    'GatewayPluginRateLimitingConfigRedisArgs',
    'GatewayPluginRateLimitingConsumerArgs',
    'GatewayPluginRateLimitingConsumerGroupArgs',
    'GatewayPluginRateLimitingRouteArgs',
    'GatewayPluginRateLimitingServiceArgs',
    'GatewayPluginRequestTerminationConfigArgs',
    'GatewayPluginRequestTerminationConsumerArgs',
    'GatewayPluginRequestTerminationConsumerGroupArgs',
    'GatewayPluginRequestTerminationRouteArgs',
    'GatewayPluginRequestTerminationServiceArgs',
    'GatewayPluginRequestTransformerAdvancedConfigArgs',
    'GatewayPluginRequestTransformerAdvancedConfigAddArgs',
    'GatewayPluginRequestTransformerAdvancedConfigAllowArgs',
    'GatewayPluginRequestTransformerAdvancedConfigAppendArgs',
    'GatewayPluginRequestTransformerAdvancedConfigRemoveArgs',
    'GatewayPluginRequestTransformerAdvancedConfigRenameArgs',
    'GatewayPluginRequestTransformerAdvancedConfigReplaceArgs',
    'GatewayPluginRequestTransformerAdvancedConsumerArgs',
    'GatewayPluginRequestTransformerAdvancedConsumerGroupArgs',
    'GatewayPluginRequestTransformerAdvancedRouteArgs',
    'GatewayPluginRequestTransformerAdvancedServiceArgs',
    'GatewayPluginRequestTransformerConfigArgs',
    'GatewayPluginRequestTransformerConfigAddArgs',
    'GatewayPluginRequestTransformerConfigAppendArgs',
    'GatewayPluginRequestTransformerConfigRemoveArgs',
    'GatewayPluginRequestTransformerConfigRenameArgs',
    'GatewayPluginRequestTransformerConfigReplaceArgs',
    'GatewayPluginRequestTransformerConsumerArgs',
    'GatewayPluginRequestTransformerConsumerGroupArgs',
    'GatewayPluginRequestTransformerRouteArgs',
    'GatewayPluginRequestTransformerServiceArgs',
    'GatewayPluginResponseTransformerAdvancedConfigArgs',
    'GatewayPluginResponseTransformerAdvancedConfigAddArgs',
    'GatewayPluginResponseTransformerAdvancedConfigAllowArgs',
    'GatewayPluginResponseTransformerAdvancedConfigAppendArgs',
    'GatewayPluginResponseTransformerAdvancedConfigRemoveArgs',
    'GatewayPluginResponseTransformerAdvancedConfigRenameArgs',
    'GatewayPluginResponseTransformerAdvancedConfigReplaceArgs',
    'GatewayPluginResponseTransformerAdvancedConfigTransformArgs',
    'GatewayPluginResponseTransformerAdvancedConsumerArgs',
    'GatewayPluginResponseTransformerAdvancedConsumerGroupArgs',
    'GatewayPluginResponseTransformerAdvancedRouteArgs',
    'GatewayPluginResponseTransformerAdvancedServiceArgs',
    'GatewayPluginResponseTransformerConfigArgs',
    'GatewayPluginResponseTransformerConfigAddArgs',
    'GatewayPluginResponseTransformerConfigAppendArgs',
    'GatewayPluginResponseTransformerConfigRemoveArgs',
    'GatewayPluginResponseTransformerConfigRenameArgs',
    'GatewayPluginResponseTransformerConfigReplaceArgs',
    'GatewayPluginResponseTransformerConsumerArgs',
    'GatewayPluginResponseTransformerConsumerGroupArgs',
    'GatewayPluginResponseTransformerRouteArgs',
    'GatewayPluginResponseTransformerServiceArgs',
    'GatewayPluginSamlConfigArgs',
    'GatewayPluginSamlConfigSessionRedisClusterNodeArgs',
    'GatewayPluginSamlConsumerArgs',
    'GatewayPluginSamlConsumerGroupArgs',
    'GatewayPluginSamlRouteArgs',
    'GatewayPluginSamlServiceArgs',
    'GatewayPluginStatsdConfigArgs',
    'GatewayPluginStatsdConfigMetricArgs',
    'GatewayPluginStatsdConfigQueueArgs',
    'GatewayPluginStatsdConsumerArgs',
    'GatewayPluginStatsdConsumerGroupArgs',
    'GatewayPluginStatsdRouteArgs',
    'GatewayPluginStatsdServiceArgs',
    'GatewayRouteDestinationArgs',
    'GatewayRouteServiceArgs',
    'GatewayRouteSourceArgs',
    'GatewayServiceClientCertificateArgs',
    'GatewaySniCertificateArgs',
    'GatewayTargetUpstreamArgs',
    'GatewayUpstreamClientCertificateArgs',
    'GatewayUpstreamHealthchecksArgs',
    'GatewayUpstreamHealthchecksActiveArgs',
    'GatewayUpstreamHealthchecksActiveHealthyArgs',
    'GatewayUpstreamHealthchecksActiveUnhealthyArgs',
    'GatewayUpstreamHealthchecksPassiveArgs',
    'GatewayUpstreamHealthchecksPassiveHealthyArgs',
    'GatewayUpstreamHealthchecksPassiveUnhealthyArgs',
    'PortalAppearanceCustomFontsArgs',
    'PortalAppearanceCustomThemeArgs',
    'PortalAppearanceCustomThemeColorsArgs',
    'PortalAppearanceCustomThemeColorsButtonArgs',
    'PortalAppearanceCustomThemeColorsButtonPrimaryFillArgs',
    'PortalAppearanceCustomThemeColorsButtonPrimaryTextArgs',
    'PortalAppearanceCustomThemeColorsSectionArgs',
    'PortalAppearanceCustomThemeColorsSectionAccentArgs',
    'PortalAppearanceCustomThemeColorsSectionBodyArgs',
    'PortalAppearanceCustomThemeColorsSectionFooterArgs',
    'PortalAppearanceCustomThemeColorsSectionHeaderArgs',
    'PortalAppearanceCustomThemeColorsSectionHeroArgs',
    'PortalAppearanceCustomThemeColorsSectionStrokeArgs',
    'PortalAppearanceCustomThemeColorsSectionTertiaryArgs',
    'PortalAppearanceCustomThemeColorsTextArgs',
    'PortalAppearanceCustomThemeColorsTextAccentArgs',
    'PortalAppearanceCustomThemeColorsTextFooterArgs',
    'PortalAppearanceCustomThemeColorsTextHeaderArgs',
    'PortalAppearanceCustomThemeColorsTextHeadingsArgs',
    'PortalAppearanceCustomThemeColorsTextHeroArgs',
    'PortalAppearanceCustomThemeColorsTextLinkArgs',
    'PortalAppearanceCustomThemeColorsTextPrimaryArgs',
    'PortalAppearanceCustomThemeColorsTextSecondaryArgs',
    'PortalAppearanceImagesArgs',
    'PortalAppearanceImagesCatalogCoverArgs',
    'PortalAppearanceImagesFaviconArgs',
    'PortalAppearanceImagesLogoArgs',
    'PortalAppearanceTextArgs',
    'PortalAppearanceTextCatalogArgs',
    'PortalAuthOidcClaimMappingsArgs',
    'PortalAuthOidcConfigArgs',
    'PortalAuthOidcConfigClaimMappingsArgs',
    'PortalProductVersionAuthStrategyArgs',
    'PortalProductVersionAuthStrategyClientCredentialsArgs',
    'PortalProductVersionAuthStrategyKeyAuthArgs',
    'ServerlessCloudGatewayControlPlaneArgs',
]

@pulumi.input_type
class ApiProductDocumentMetadataArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ApiProductPortalArgs:
    def __init__(__self__, *,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 portal_name: Optional[pulumi.Input[str]] = None):
        if portal_id is not None:
            pulumi.set(__self__, "portal_id", portal_id)
        if portal_name is not None:
            pulumi.set(__self__, "portal_name", portal_name)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_id", value)

    @property
    @pulumi.getter(name="portalName")
    def portal_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_name")

    @portal_name.setter
    def portal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_name", value)


@pulumi.input_type
class ApiProductVersionGatewayServiceArgs:
    def __init__(__self__, *,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 runtime_group_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] control_plane_id: The identifier of the control plane that the gateway service resides in. Not Null
        :param pulumi.Input[str] id: The identifier of a gateway service associated with the version of the API product. Not Null
        :param pulumi.Input[str] runtime_group_id: This field is deprecated, please use `control_plane_id` instead. The identifier of the control plane that the gateway service resides in
        """
        if control_plane_id is not None:
            pulumi.set(__self__, "control_plane_id", control_plane_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if runtime_group_id is not None:
            pulumi.set(__self__, "runtime_group_id", runtime_group_id)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the control plane that the gateway service resides in. Not Null
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of a gateway service associated with the version of the API product. Not Null
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="runtimeGroupId")
    def runtime_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        This field is deprecated, please use `control_plane_id` instead. The identifier of the control plane that the gateway service resides in
        """
        return pulumi.get(self, "runtime_group_id")

    @runtime_group_id.setter
    def runtime_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_group_id", value)


@pulumi.input_type
class ApiProductVersionPortalArgs:
    def __init__(__self__, *,
                 application_registration_enabled: Optional[pulumi.Input[bool]] = None,
                 auth_strategies: Optional[pulumi.Input[Sequence[pulumi.Input['ApiProductVersionPortalAuthStrategyArgs']]]] = None,
                 auto_approve_registration: Optional[pulumi.Input[bool]] = None,
                 deprecated: Optional[pulumi.Input[bool]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 portal_name: Optional[pulumi.Input[str]] = None,
                 portal_product_version_id: Optional[pulumi.Input[str]] = None,
                 publish_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] publish_status: must be one of ["published", "unpublished"]
        """
        if application_registration_enabled is not None:
            pulumi.set(__self__, "application_registration_enabled", application_registration_enabled)
        if auth_strategies is not None:
            pulumi.set(__self__, "auth_strategies", auth_strategies)
        if auto_approve_registration is not None:
            pulumi.set(__self__, "auto_approve_registration", auto_approve_registration)
        if deprecated is not None:
            pulumi.set(__self__, "deprecated", deprecated)
        if portal_id is not None:
            pulumi.set(__self__, "portal_id", portal_id)
        if portal_name is not None:
            pulumi.set(__self__, "portal_name", portal_name)
        if portal_product_version_id is not None:
            pulumi.set(__self__, "portal_product_version_id", portal_product_version_id)
        if publish_status is not None:
            pulumi.set(__self__, "publish_status", publish_status)

    @property
    @pulumi.getter(name="applicationRegistrationEnabled")
    def application_registration_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "application_registration_enabled")

    @application_registration_enabled.setter
    def application_registration_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "application_registration_enabled", value)

    @property
    @pulumi.getter(name="authStrategies")
    def auth_strategies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ApiProductVersionPortalAuthStrategyArgs']]]]:
        return pulumi.get(self, "auth_strategies")

    @auth_strategies.setter
    def auth_strategies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ApiProductVersionPortalAuthStrategyArgs']]]]):
        pulumi.set(self, "auth_strategies", value)

    @property
    @pulumi.getter(name="autoApproveRegistration")
    def auto_approve_registration(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_approve_registration")

    @auto_approve_registration.setter
    def auto_approve_registration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_approve_registration", value)

    @property
    @pulumi.getter
    def deprecated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "deprecated")

    @deprecated.setter
    def deprecated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deprecated", value)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_id", value)

    @property
    @pulumi.getter(name="portalName")
    def portal_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_name")

    @portal_name.setter
    def portal_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_name", value)

    @property
    @pulumi.getter(name="portalProductVersionId")
    def portal_product_version_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "portal_product_version_id")

    @portal_product_version_id.setter
    def portal_product_version_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_product_version_id", value)

    @property
    @pulumi.getter(name="publishStatus")
    def publish_status(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["published", "unpublished"]
        """
        return pulumi.get(self, "publish_status")

    @publish_status.setter
    def publish_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "publish_status", value)


@pulumi.input_type
class ApiProductVersionPortalAuthStrategyArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationAuthStrategyKeyAuthArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 configs: Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsArgs']] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 dcr_provider: Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthDcrProviderArgs']] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 strategy_type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: At least one published product version is using this auth strategy.
        :param pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsArgs'] configs: JSON-B object containing the configuration for the Key Auth strategy. Requires replacement if changed. ; Not Null
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input[str] display_name: The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
        :param pulumi.Input[str] id: Contains a unique identifier used for this resource.
        :param pulumi.Input[str] name: The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
        :param pulumi.Input[str] strategy_type: Requires replacement if changed. ; Not Null; must be one of ["key_auth"]
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dcr_provider is not None:
            pulumi.set(__self__, "dcr_provider", dcr_provider)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        At least one published product version is using this auth strategy.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsArgs']]:
        """
        JSON-B object containing the configuration for the Key Auth strategy. Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsArgs']]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dcrProvider")
    def dcr_provider(self) -> Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthDcrProviderArgs']]:
        return pulumi.get(self, "dcr_provider")

    @dcr_provider.setter
    def dcr_provider(self, value: Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthDcrProviderArgs']]):
        pulumi.set(self, "dcr_provider", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Contains a unique identifier used for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed. ; Not Null; must be one of ["key_auth"]
        """
        return pulumi.get(self, "strategy_type")

    @strategy_type.setter
    def strategy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ApplicationAuthStrategyKeyAuthConfigsArgs:
    def __init__(__self__, *,
                 key_auth: Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsKeyAuthArgs']] = None):
        """
        :param pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsKeyAuthArgs'] key_auth: The most basic mode to configure an Application Auth Strategy for an API Product Version.
               Using this mode will allow developers to generate API keys that will authenticate their application requests.
               Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.
        """
        if key_auth is not None:
            pulumi.set(__self__, "key_auth", key_auth)

    @property
    @pulumi.getter(name="keyAuth")
    def key_auth(self) -> Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsKeyAuthArgs']]:
        """
        The most basic mode to configure an Application Auth Strategy for an API Product Version.
        Using this mode will allow developers to generate API keys that will authenticate their application requests.
        Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for Key Auth.
        """
        return pulumi.get(self, "key_auth")

    @key_auth.setter
    def key_auth(self, value: Optional[pulumi.Input['ApplicationAuthStrategyKeyAuthConfigsKeyAuthArgs']]):
        pulumi.set(self, "key_auth", value)


@pulumi.input_type
class ApplicationAuthStrategyKeyAuthConfigsKeyAuthArgs:
    def __init__(__self__, *,
                 key_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_names: The names of the headers containing the API key. You can specify multiple header names. Requires replacement if changed.
        """
        if key_names is not None:
            pulumi.set(__self__, "key_names", key_names)

    @property
    @pulumi.getter(name="keyNames")
    def key_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The names of the headers containing the API key. You can specify multiple header names. Requires replacement if changed.
        """
        return pulumi.get(self, "key_names")

    @key_names.setter
    def key_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_names", value)


@pulumi.input_type
class ApplicationAuthStrategyKeyAuthDcrProviderArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
        :param pulumi.Input[str] id: Contains a unique identifier used for this resource.
        :param pulumi.Input[str] provider_type: The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of ["auth0", "azureAd", "curity", "okta", "http"]
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Contains a unique identifier used for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of ["auth0", "azureAd", "curity", "okta", "http"]
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)


@pulumi.input_type
class ApplicationAuthStrategyOpenidConnectArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input[bool]] = None,
                 configs: Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsArgs']] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 dcr_provider: Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectDcrProviderArgs']] = None,
                 dcr_provider_id: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 strategy_type: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] active: At least one published product version is using this auth strategy.
        :param pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsArgs'] configs: JSON-B object containing the configuration for the OIDC strategy. Requires replacement if changed. ; Not Null
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input[str] dcr_provider_id: Requires replacement if changed.
        :param pulumi.Input[str] display_name: The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
        :param pulumi.Input[str] id: Contains a unique identifier used for this resource.
        :param pulumi.Input[str] name: The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
        :param pulumi.Input[str] strategy_type: Requires replacement if changed. ; Not Null; must be one of ["openid_connect"]
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        if active is not None:
            pulumi.set(__self__, "active", active)
        if configs is not None:
            pulumi.set(__self__, "configs", configs)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dcr_provider is not None:
            pulumi.set(__self__, "dcr_provider", dcr_provider)
        if dcr_provider_id is not None:
            pulumi.set(__self__, "dcr_provider_id", dcr_provider_id)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if strategy_type is not None:
            pulumi.set(__self__, "strategy_type", strategy_type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input[bool]]:
        """
        At least one published product version is using this auth strategy.
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def configs(self) -> Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsArgs']]:
        """
        JSON-B object containing the configuration for the OIDC strategy. Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "configs")

    @configs.setter
    def configs(self, value: Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsArgs']]):
        pulumi.set(self, "configs", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dcrProvider")
    def dcr_provider(self) -> Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectDcrProviderArgs']]:
        return pulumi.get(self, "dcr_provider")

    @dcr_provider.setter
    def dcr_provider(self, value: Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectDcrProviderArgs']]):
        pulumi.set(self, "dcr_provider", value)

    @property
    @pulumi.getter(name="dcrProviderId")
    def dcr_provider_id(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "dcr_provider_id")

    @dcr_provider_id.setter
    def dcr_provider_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dcr_provider_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Contains a unique identifier used for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="strategyType")
    def strategy_type(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed. ; Not Null; must be one of ["openid_connect"]
        """
        return pulumi.get(self, "strategy_type")

    @strategy_type.setter
    def strategy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy_type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class ApplicationAuthStrategyOpenidConnectConfigsArgs:
    def __init__(__self__, *,
                 openid_connect: Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsOpenidConnectArgs']] = None):
        """
        :param pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsOpenidConnectArgs'] openid_connect: A more advanced mode to configure an API Product Version’s Application Auth Strategy.
               Using this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests.
               Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy.
               An OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.
        """
        if openid_connect is not None:
            pulumi.set(__self__, "openid_connect", openid_connect)

    @property
    @pulumi.getter(name="openidConnect")
    def openid_connect(self) -> Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsOpenidConnectArgs']]:
        """
        A more advanced mode to configure an API Product Version’s Application Auth Strategy.
        Using this mode will allow developers to use API credentials issued from an external IdP that will authenticate their application requests.
        Once authenticated, an application will be granted access to any Product Version it is registered for that is configured for the same Auth Strategy.
        An OIDC strategy may be used in conjunction with a DCR provider to automatically create the IdP application.
        """
        return pulumi.get(self, "openid_connect")

    @openid_connect.setter
    def openid_connect(self, value: Optional[pulumi.Input['ApplicationAuthStrategyOpenidConnectConfigsOpenidConnectArgs']]):
        pulumi.set(self, "openid_connect", value)


@pulumi.input_type
class ApplicationAuthStrategyOpenidConnectConfigsOpenidConnectArgs:
    def __init__(__self__, *,
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 credential_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] additional_properties: Parsed as JSON.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auth_methods: Requires replacement if changed. ; Not Null
        :param pulumi.Input[Sequence[pulumi.Input[str]]] credential_claims: Requires replacement if changed. ; Not Null
        :param pulumi.Input[str] issuer: Requires replacement if changed. ; Not Null
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: Requires replacement if changed. ; Not Null
        """
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_methods is not None:
            pulumi.set(__self__, "auth_methods", auth_methods)
        if credential_claims is not None:
            pulumi.set(__self__, "credential_claims", credential_claims)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        """
        Parsed as JSON.
        """
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authMethods")
    def auth_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "auth_methods")

    @auth_methods.setter
    def auth_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auth_methods", value)

    @property
    @pulumi.getter(name="credentialClaims")
    def credential_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "credential_claims")

    @credential_claims.setter
    def credential_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "credential_claims", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class ApplicationAuthStrategyOpenidConnectDcrProviderArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 provider_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
        :param pulumi.Input[str] id: Contains a unique identifier used for this resource.
        :param pulumi.Input[str] provider_type: The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of ["auth0", "azureAd", "curity", "okta", "http"]
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if provider_type is not None:
            pulumi.set(__self__, "provider_type", provider_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the DCR provider. This is used to identify the DCR provider in the Portal UI.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Contains a unique identifier used for this resource.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="providerType")
    def provider_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of DCR provider. Can be one of the following - auth0, azureAd, curity, okta, http. must be one of ["auth0", "azureAd", "curity", "okta", "http"]
        """
        return pulumi.get(self, "provider_type")

    @provider_type.setter
    def provider_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider_type", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleArgs']] = None,
                 cloud_gateway_network_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 egress_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 private_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleArgs'] autoscale: Not Null
        :param pulumi.Input[str] cloud_gateway_network_id: Not Null
        :param pulumi.Input[str] created_at: An RFC-3339 timestamp representation of data-plane group creation date.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] egress_ip_addresses: List of egress IP addresses for the network that this data-plane group runs on.
        :param pulumi.Input[str] id: ID of the data-plane group that represents a deployment target for a set of data-planes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_ip_addresses: List of private IP addresses of the internal load balancer that proxies traffic to this data-plane group.
        :param pulumi.Input[str] provider: Name of cloud provider. Not Null; must be one of ["aws"]
        :param pulumi.Input[str] region: Region ID for cloud provider region. Not Null
        :param pulumi.Input[str] state: State of the data-plane group. must be one of ["created", "initializing", "ready", "terminating", "terminated"]
        :param pulumi.Input[str] updated_at: An RFC-3339 timestamp representation of data-plane group update date.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if cloud_gateway_network_id is not None:
            pulumi.set(__self__, "cloud_gateway_network_id", cloud_gateway_network_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if egress_ip_addresses is not None:
            pulumi.set(__self__, "egress_ip_addresses", egress_ip_addresses)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_ip_addresses is not None:
            pulumi.set(__self__, "private_ip_addresses", private_ip_addresses)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleArgs']]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="cloudGatewayNetworkId")
    def cloud_gateway_network_id(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "cloud_gateway_network_id")

    @cloud_gateway_network_id.setter
    def cloud_gateway_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_gateway_network_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of data-plane group creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="egressIpAddresses")
    def egress_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of egress IP addresses for the network that this data-plane group runs on.
        """
        return pulumi.get(self, "egress_ip_addresses")

    @egress_ip_addresses.setter
    def egress_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "egress_ip_addresses", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the data-plane group that represents a deployment target for a set of data-planes.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="privateIpAddresses")
    def private_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of private IP addresses of the internal load balancer that proxies traffic to this data-plane group.
        """
        return pulumi.get(self, "private_ip_addresses")

    @private_ip_addresses.setter
    def private_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_ip_addresses", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        Name of cloud provider. Not Null; must be one of ["aws"]
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region ID for cloud provider region. Not Null
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the data-plane group. must be one of ["created", "initializing", "ready", "terminating", "terminated"]
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of data-plane group update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupAutoscaleArgs:
    def __init__(__self__, *,
                 configuration_data_plane_group_autoscale_autopilot: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs']] = None,
                 configuration_data_plane_group_autoscale_static: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs']] = None):
        """
        :param pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs'] configuration_data_plane_group_autoscale_autopilot: Object that describes the autopilot autoscaling strategy.
        :param pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs'] configuration_data_plane_group_autoscale_static: Object that describes the static autoscaling strategy.
        """
        if configuration_data_plane_group_autoscale_autopilot is not None:
            pulumi.set(__self__, "configuration_data_plane_group_autoscale_autopilot", configuration_data_plane_group_autoscale_autopilot)
        if configuration_data_plane_group_autoscale_static is not None:
            pulumi.set(__self__, "configuration_data_plane_group_autoscale_static", configuration_data_plane_group_autoscale_static)

    @property
    @pulumi.getter(name="configurationDataPlaneGroupAutoscaleAutopilot")
    def configuration_data_plane_group_autoscale_autopilot(self) -> Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs']]:
        """
        Object that describes the autopilot autoscaling strategy.
        """
        return pulumi.get(self, "configuration_data_plane_group_autoscale_autopilot")

    @configuration_data_plane_group_autoscale_autopilot.setter
    def configuration_data_plane_group_autoscale_autopilot(self, value: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs']]):
        pulumi.set(self, "configuration_data_plane_group_autoscale_autopilot", value)

    @property
    @pulumi.getter(name="configurationDataPlaneGroupAutoscaleStatic")
    def configuration_data_plane_group_autoscale_static(self) -> Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs']]:
        """
        Object that describes the static autoscaling strategy.
        """
        return pulumi.get(self, "configuration_data_plane_group_autoscale_static")

    @configuration_data_plane_group_autoscale_static.setter
    def configuration_data_plane_group_autoscale_static(self, value: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs']]):
        pulumi.set(self, "configuration_data_plane_group_autoscale_static", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs:
    def __init__(__self__, *,
                 base_rps: Optional[pulumi.Input[int]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 max_rps: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] base_rps: Base number of requests per second that the deployment target should support. Not Null
        :param pulumi.Input[str] kind: Not Null; must be one of ["autopilot"]
        :param pulumi.Input[int] max_rps: Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.
        """
        if base_rps is not None:
            pulumi.set(__self__, "base_rps", base_rps)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if max_rps is not None:
            pulumi.set(__self__, "max_rps", max_rps)

    @property
    @pulumi.getter(name="baseRps")
    def base_rps(self) -> Optional[pulumi.Input[int]]:
        """
        Base number of requests per second that the deployment target should support. Not Null
        """
        return pulumi.get(self, "base_rps")

    @base_rps.setter
    def base_rps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_rps", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null; must be one of ["autopilot"]
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="maxRps")
    def max_rps(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.
        """
        return pulumi.get(self, "max_rps")

    @max_rps.setter
    def max_rps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_rps", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 requested_instances: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] instance_type: Instance type name to indicate capacity. Not Null; must be one of ["small", "medium", "large"]
        :param pulumi.Input[str] kind: Not Null; must be one of ["static"]
        :param pulumi.Input[int] requested_instances: Number of data-planes the deployment target will contain. Not Null
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if requested_instances is not None:
            pulumi.set(__self__, "requested_instances", requested_instances)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance type name to indicate capacity. Not Null; must be one of ["small", "medium", "large"]
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null; must be one of ["static"]
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="requestedInstances")
    def requested_instances(self) -> Optional[pulumi.Input[int]]:
        """
        Number of data-planes the deployment target will contain. Not Null
        """
        return pulumi.get(self, "requested_instances")

    @requested_instances.setter
    def requested_instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "requested_instances", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupConfigArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleArgs']] = None,
                 cloud_gateway_network_id: Optional[pulumi.Input[str]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] provider: Name of cloud provider. must be one of ["aws"]
        :param pulumi.Input[str] region: Region ID for cloud provider region.
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if cloud_gateway_network_id is not None:
            pulumi.set(__self__, "cloud_gateway_network_id", cloud_gateway_network_id)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleArgs']]:
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleArgs']]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="cloudGatewayNetworkId")
    def cloud_gateway_network_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_gateway_network_id")

    @cloud_gateway_network_id.setter
    def cloud_gateway_network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_gateway_network_id", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        Name of cloud provider. must be one of ["aws"]
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region ID for cloud provider region.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupConfigAutoscaleArgs:
    def __init__(__self__, *,
                 configuration_data_plane_group_autoscale_autopilot: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs']] = None,
                 configuration_data_plane_group_autoscale_static: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs']] = None):
        """
        :param pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs'] configuration_data_plane_group_autoscale_autopilot: Object that describes the autopilot autoscaling strategy.
        :param pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs'] configuration_data_plane_group_autoscale_static: Object that describes the static autoscaling strategy.
        """
        if configuration_data_plane_group_autoscale_autopilot is not None:
            pulumi.set(__self__, "configuration_data_plane_group_autoscale_autopilot", configuration_data_plane_group_autoscale_autopilot)
        if configuration_data_plane_group_autoscale_static is not None:
            pulumi.set(__self__, "configuration_data_plane_group_autoscale_static", configuration_data_plane_group_autoscale_static)

    @property
    @pulumi.getter(name="configurationDataPlaneGroupAutoscaleAutopilot")
    def configuration_data_plane_group_autoscale_autopilot(self) -> Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs']]:
        """
        Object that describes the autopilot autoscaling strategy.
        """
        return pulumi.get(self, "configuration_data_plane_group_autoscale_autopilot")

    @configuration_data_plane_group_autoscale_autopilot.setter
    def configuration_data_plane_group_autoscale_autopilot(self, value: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs']]):
        pulumi.set(self, "configuration_data_plane_group_autoscale_autopilot", value)

    @property
    @pulumi.getter(name="configurationDataPlaneGroupAutoscaleStatic")
    def configuration_data_plane_group_autoscale_static(self) -> Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs']]:
        """
        Object that describes the static autoscaling strategy.
        """
        return pulumi.get(self, "configuration_data_plane_group_autoscale_static")

    @configuration_data_plane_group_autoscale_static.setter
    def configuration_data_plane_group_autoscale_static(self, value: Optional[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs']]):
        pulumi.set(self, "configuration_data_plane_group_autoscale_static", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleAutopilotArgs:
    def __init__(__self__, *,
                 base_rps: Optional[pulumi.Input[int]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 max_rps: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] base_rps: Base number of requests per second that the deployment target should support.
        :param pulumi.Input[str] kind: must be one of ["autopilot"]
        :param pulumi.Input[int] max_rps: Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.
        """
        if base_rps is not None:
            pulumi.set(__self__, "base_rps", base_rps)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if max_rps is not None:
            pulumi.set(__self__, "max_rps", max_rps)

    @property
    @pulumi.getter(name="baseRps")
    def base_rps(self) -> Optional[pulumi.Input[int]]:
        """
        Base number of requests per second that the deployment target should support.
        """
        return pulumi.get(self, "base_rps")

    @base_rps.setter
    def base_rps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base_rps", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["autopilot"]
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="maxRps")
    def max_rps(self) -> Optional[pulumi.Input[int]]:
        """
        Max number of requests per second that the deployment target should support. If not set, this defaults to 10x base_rps.
        """
        return pulumi.get(self, "max_rps")

    @max_rps.setter
    def max_rps(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_rps", value)


@pulumi.input_type
class CloudGatewayConfigurationDataplaneGroupConfigAutoscaleConfigurationDataPlaneGroupAutoscaleStaticArgs:
    def __init__(__self__, *,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 requested_instances: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] instance_type: Instance type name to indicate capacity. must be one of ["small", "medium", "large"]
        :param pulumi.Input[str] kind: must be one of ["static"]
        :param pulumi.Input[int] requested_instances: Number of data-planes the deployment target will contain.
        """
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if requested_instances is not None:
            pulumi.set(__self__, "requested_instances", requested_instances)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        """
        Instance type name to indicate capacity. must be one of ["small", "medium", "large"]
        """
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["static"]
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="requestedInstances")
    def requested_instances(self) -> Optional[pulumi.Input[int]]:
        """
        Number of data-planes the deployment target will contain.
        """
        return pulumi.get(self, "requested_instances")

    @requested_instances.setter
    def requested_instances(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "requested_instances", value)


@pulumi.input_type
class CloudGatewayCustomDomainStateMetadataArgs:
    def __init__(__self__, *,
                 reason: Optional[pulumi.Input[str]] = None,
                 reported_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] reason: Reason why the custom domain may be in an erroneous state, reported from backing infrastructure.
        :param pulumi.Input[str] reported_status: Reported status of the custom domain from backing infrastructure.
        """
        if reason is not None:
            pulumi.set(__self__, "reason", reason)
        if reported_status is not None:
            pulumi.set(__self__, "reported_status", reported_status)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason why the custom domain may be in an erroneous state, reported from backing infrastructure.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)

    @property
    @pulumi.getter(name="reportedStatus")
    def reported_status(self) -> Optional[pulumi.Input[str]]:
        """
        Reported status of the custom domain from backing infrastructure.
        """
        return pulumi.get(self, "reported_status")

    @reported_status.setter
    def reported_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reported_status", value)


@pulumi.input_type
class CloudGatewayNetworkFirewallArgs:
    def __init__(__self__, *,
                 allowed_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 denied_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_cidr_blocks: List of allowed CIDR blocks to access a network.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] denied_cidr_blocks: List of denied CIDR blocks to access a network.
        """
        if allowed_cidr_blocks is not None:
            pulumi.set(__self__, "allowed_cidr_blocks", allowed_cidr_blocks)
        if denied_cidr_blocks is not None:
            pulumi.set(__self__, "denied_cidr_blocks", denied_cidr_blocks)

    @property
    @pulumi.getter(name="allowedCidrBlocks")
    def allowed_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed CIDR blocks to access a network.
        """
        return pulumi.get(self, "allowed_cidr_blocks")

    @allowed_cidr_blocks.setter
    def allowed_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_cidr_blocks", value)

    @property
    @pulumi.getter(name="deniedCidrBlocks")
    def denied_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of denied CIDR blocks to access a network.
        """
        return pulumi.get(self, "denied_cidr_blocks")

    @denied_cidr_blocks.setter
    def denied_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "denied_cidr_blocks", value)


@pulumi.input_type
class CloudGatewayNetworkProviderMetadataArgs:
    def __init__(__self__, *,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None):
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.input_type
class CloudGatewayTransitGatewayDnsConfigArgs:
    def __init__(__self__, *,
                 domain_proxy_lists: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remote_dns_server_ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_proxy_lists: Internal domain names to proxy for DNS resolution from the listed remote DNS server IP addresses,
               for a transit gateway.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remote_dns_server_ip_addresses: Remote DNS Server IP Addresses to connect to for resolving internal DNS via a transit gateway. Requires replacement if changed. ; Not Null
        """
        if domain_proxy_lists is not None:
            pulumi.set(__self__, "domain_proxy_lists", domain_proxy_lists)
        if remote_dns_server_ip_addresses is not None:
            pulumi.set(__self__, "remote_dns_server_ip_addresses", remote_dns_server_ip_addresses)

    @property
    @pulumi.getter(name="domainProxyLists")
    def domain_proxy_lists(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Internal domain names to proxy for DNS resolution from the listed remote DNS server IP addresses,
        for a transit gateway.
        """
        return pulumi.get(self, "domain_proxy_lists")

    @domain_proxy_lists.setter
    def domain_proxy_lists(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_proxy_lists", value)

    @property
    @pulumi.getter(name="remoteDnsServerIpAddresses")
    def remote_dns_server_ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Remote DNS Server IP Addresses to connect to for resolving internal DNS via a transit gateway. Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "remote_dns_server_ip_addresses")

    @remote_dns_server_ip_addresses.setter
    def remote_dns_server_ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remote_dns_server_ip_addresses", value)


@pulumi.input_type
class CloudGatewayTransitGatewayTransitGatewayAttachmentConfigArgs:
    def __init__(__self__, *,
                 aws_transit_gateway_attachment_config: Optional[pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfigArgs']] = None):
        """
        :param pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfigArgs'] aws_transit_gateway_attachment_config: Requires replacement if changed.
        """
        if aws_transit_gateway_attachment_config is not None:
            pulumi.set(__self__, "aws_transit_gateway_attachment_config", aws_transit_gateway_attachment_config)

    @property
    @pulumi.getter(name="awsTransitGatewayAttachmentConfig")
    def aws_transit_gateway_attachment_config(self) -> Optional[pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfigArgs']]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "aws_transit_gateway_attachment_config")

    @aws_transit_gateway_attachment_config.setter
    def aws_transit_gateway_attachment_config(self, value: Optional[pulumi.Input['CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfigArgs']]):
        pulumi.set(self, "aws_transit_gateway_attachment_config", value)


@pulumi.input_type
class CloudGatewayTransitGatewayTransitGatewayAttachmentConfigAwsTransitGatewayAttachmentConfigArgs:
    def __init__(__self__, *,
                 kind: Optional[pulumi.Input[str]] = None,
                 ram_share_arn: Optional[pulumi.Input[str]] = None,
                 transit_gateway_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: Requires replacement if changed. ; Not Null; must be one of ["aws-transit-gateway-attachment"]
        :param pulumi.Input[str] ram_share_arn: Resource Share ARN to verify request to create transit gateway attachment. Requires replacement if changed. ; Not Null
        :param pulumi.Input[str] transit_gateway_id: AWS Transit Gateway ID to create attachment to. Requires replacement if changed. ; Not Null
        """
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if ram_share_arn is not None:
            pulumi.set(__self__, "ram_share_arn", ram_share_arn)
        if transit_gateway_id is not None:
            pulumi.set(__self__, "transit_gateway_id", transit_gateway_id)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed. ; Not Null; must be one of ["aws-transit-gateway-attachment"]
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="ramShareArn")
    def ram_share_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Resource Share ARN to verify request to create transit gateway attachment. Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "ram_share_arn")

    @ram_share_arn.setter
    def ram_share_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ram_share_arn", value)

    @property
    @pulumi.getter(name="transitGatewayId")
    def transit_gateway_id(self) -> Optional[pulumi.Input[str]]:
        """
        AWS Transit Gateway ID to create attachment to. Requires replacement if changed. ; Not Null
        """
        return pulumi.get(self, "transit_gateway_id")

    @transit_gateway_id.setter
    def transit_gateway_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transit_gateway_id", value)


@pulumi.input_type
class GatewayAclConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayBasicAuthConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayControlPlaneConfigArgs:
    def __init__(__self__, *,
                 control_plane_endpoint: Optional[pulumi.Input[str]] = None,
                 telemetry_endpoint: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] control_plane_endpoint: Control Plane Endpoint.
        :param pulumi.Input[str] telemetry_endpoint: Telemetry Endpoint.
        """
        if control_plane_endpoint is not None:
            pulumi.set(__self__, "control_plane_endpoint", control_plane_endpoint)
        if telemetry_endpoint is not None:
            pulumi.set(__self__, "telemetry_endpoint", telemetry_endpoint)

    @property
    @pulumi.getter(name="controlPlaneEndpoint")
    def control_plane_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Control Plane Endpoint.
        """
        return pulumi.get(self, "control_plane_endpoint")

    @control_plane_endpoint.setter
    def control_plane_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_endpoint", value)

    @property
    @pulumi.getter(name="telemetryEndpoint")
    def telemetry_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Telemetry Endpoint.
        """
        return pulumi.get(self, "telemetry_endpoint")

    @telemetry_endpoint.setter
    def telemetry_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "telemetry_endpoint", value)


@pulumi.input_type
class GatewayControlPlaneMembershipMemberArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: Requires replacement if changed.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayControlPlaneProxyUrlArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 protocol: pulumi.Input[str]):
        """
        :param pulumi.Input[str] host: Hostname of the proxy URL.
        :param pulumi.Input[int] port: Port of the proxy URL.
        :param pulumi.Input[str] protocol: Protocol of the proxy URL.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        Hostname of the proxy URL.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        Port of the proxy URL.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        """
        Protocol of the proxy URL.
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class GatewayHmacAuthConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayJwtConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayKeyAuthConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayKeyPemArgs:
    def __init__(__self__, *,
                 private_key: Optional[pulumi.Input[str]] = None,
                 public_key: Optional[pulumi.Input[str]] = None):
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_key", value)


@pulumi.input_type
class GatewayKeySetArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAclConfigArgs:
    def __init__(__self__, *,
                 allows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 denies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hide_groups_header: Optional[pulumi.Input[bool]] = None,
                 include_consumer_groups: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allows: Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] denies: Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
        :param pulumi.Input[bool] hide_groups_header: If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.
        """
        if allows is not None:
            pulumi.set(__self__, "allows", allows)
        if denies is not None:
            pulumi.set(__self__, "denies", denies)
        if hide_groups_header is not None:
            pulumi.set(__self__, "hide_groups_header", hide_groups_header)
        if include_consumer_groups is not None:
            pulumi.set(__self__, "include_consumer_groups", include_consumer_groups)

    @property
    @pulumi.getter
    def allows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arbitrary group names that are allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
        """
        return pulumi.get(self, "allows")

    @allows.setter
    def allows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allows", value)

    @property
    @pulumi.getter
    def denies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Arbitrary group names that are not allowed to consume the service or route. One of `config.allow` or `config.deny` must be specified.
        """
        return pulumi.get(self, "denies")

    @denies.setter
    def denies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "denies", value)

    @property
    @pulumi.getter(name="hideGroupsHeader")
    def hide_groups_header(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled (`true`), prevents the `X-Consumer-Groups` header from being sent in the request to the upstream service.
        """
        return pulumi.get(self, "hide_groups_header")

    @hide_groups_header.setter
    def hide_groups_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_groups_header", value)

    @property
    @pulumi.getter(name="includeConsumerGroups")
    def include_consumer_groups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_consumer_groups")

    @include_consumer_groups.setter
    def include_consumer_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_consumer_groups", value)


@pulumi.input_type
class GatewayPluginAclConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAclConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAclRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAclServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorConfigArgs:
    def __init__(__self__, *,
                 prompts: Optional[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsArgs']] = None):
        if prompts is not None:
            pulumi.set(__self__, "prompts", prompts)

    @property
    @pulumi.getter
    def prompts(self) -> Optional[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsArgs']]:
        return pulumi.get(self, "prompts")

    @prompts.setter
    def prompts(self, value: Optional[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsArgs']]):
        pulumi.set(self, "prompts", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorConfigPromptsArgs:
    def __init__(__self__, *,
                 appends: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsAppendArgs']]]] = None,
                 prepends: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsPrependArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsAppendArgs']]] appends: Insert chat messages at the end of the chat message array. This array preserves exact order when adding messages.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsPrependArgs']]] prepends: Insert chat messages at the beginning of the chat message array. This array preserves exact order when adding messages.
        """
        if appends is not None:
            pulumi.set(__self__, "appends", appends)
        if prepends is not None:
            pulumi.set(__self__, "prepends", prepends)

    @property
    @pulumi.getter
    def appends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsAppendArgs']]]]:
        """
        Insert chat messages at the end of the chat message array. This array preserves exact order when adding messages.
        """
        return pulumi.get(self, "appends")

    @appends.setter
    def appends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsAppendArgs']]]]):
        pulumi.set(self, "appends", value)

    @property
    @pulumi.getter
    def prepends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsPrependArgs']]]]:
        """
        Insert chat messages at the beginning of the chat message array. This array preserves exact order when adding messages.
        """
        return pulumi.get(self, "prepends")

    @prepends.setter
    def prepends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptDecoratorConfigPromptsPrependArgs']]]]):
        pulumi.set(self, "prepends", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorConfigPromptsAppendArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Not Null
        :param pulumi.Input[str] role: must be one of ["system", "assistant", "user"]
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["system", "assistant", "user"]
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorConfigPromptsPrependArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Not Null
        :param pulumi.Input[str] role: must be one of ["system", "assistant", "user"]
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if role is not None:
            pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["system", "assistant", "user"]
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptDecoratorServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptGuardConfigArgs:
    def __init__(__self__, *,
                 allow_all_conversation_history: Optional[pulumi.Input[bool]] = None,
                 allow_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 deny_patterns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] allow_all_conversation_history: If true, will ignore all previous chat prompts from the conversation history.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_patterns: Array of valid regex patterns, or valid questions from the 'user' role in chat.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] deny_patterns: Array of invalid regex patterns, or invalid questions from the 'user' role in chat.
        """
        if allow_all_conversation_history is not None:
            pulumi.set(__self__, "allow_all_conversation_history", allow_all_conversation_history)
        if allow_patterns is not None:
            pulumi.set(__self__, "allow_patterns", allow_patterns)
        if deny_patterns is not None:
            pulumi.set(__self__, "deny_patterns", deny_patterns)

    @property
    @pulumi.getter(name="allowAllConversationHistory")
    def allow_all_conversation_history(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, will ignore all previous chat prompts from the conversation history.
        """
        return pulumi.get(self, "allow_all_conversation_history")

    @allow_all_conversation_history.setter
    def allow_all_conversation_history(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_all_conversation_history", value)

    @property
    @pulumi.getter(name="allowPatterns")
    def allow_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of valid regex patterns, or valid questions from the 'user' role in chat.
        """
        return pulumi.get(self, "allow_patterns")

    @allow_patterns.setter
    def allow_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_patterns", value)

    @property
    @pulumi.getter(name="denyPatterns")
    def deny_patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of invalid regex patterns, or invalid questions from the 'user' role in chat.
        """
        return pulumi.get(self, "deny_patterns")

    @deny_patterns.setter
    def deny_patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "deny_patterns", value)


@pulumi.input_type
class GatewayPluginAiPromptGuardConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptGuardConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptGuardRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptGuardServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptTemplateConfigArgs:
    def __init__(__self__, *,
                 allow_untemplated_requests: Optional[pulumi.Input[bool]] = None,
                 log_original_request: Optional[pulumi.Input[bool]] = None,
                 templates: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptTemplateConfigTemplateArgs']]]] = None):
        """
        :param pulumi.Input[bool] allow_untemplated_requests: Set true to allow requests that don't call or match any template.
        :param pulumi.Input[bool] log_original_request: Set true to add the original request to the Kong log plugin(s) output.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptTemplateConfigTemplateArgs']]] templates: Array of templates available to the request context.
        """
        if allow_untemplated_requests is not None:
            pulumi.set(__self__, "allow_untemplated_requests", allow_untemplated_requests)
        if log_original_request is not None:
            pulumi.set(__self__, "log_original_request", log_original_request)
        if templates is not None:
            pulumi.set(__self__, "templates", templates)

    @property
    @pulumi.getter(name="allowUntemplatedRequests")
    def allow_untemplated_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        Set true to allow requests that don't call or match any template.
        """
        return pulumi.get(self, "allow_untemplated_requests")

    @allow_untemplated_requests.setter
    def allow_untemplated_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_untemplated_requests", value)

    @property
    @pulumi.getter(name="logOriginalRequest")
    def log_original_request(self) -> Optional[pulumi.Input[bool]]:
        """
        Set true to add the original request to the Kong log plugin(s) output.
        """
        return pulumi.get(self, "log_original_request")

    @log_original_request.setter
    def log_original_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_original_request", value)

    @property
    @pulumi.getter
    def templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptTemplateConfigTemplateArgs']]]]:
        """
        Array of templates available to the request context.
        """
        return pulumi.get(self, "templates")

    @templates.setter
    def templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginAiPromptTemplateConfigTemplateArgs']]]]):
        pulumi.set(self, "templates", value)


@pulumi.input_type
class GatewayPluginAiPromptTemplateConfigTemplateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Unique name for the template, can be called with `{template://NAME}`. Not Null
        :param pulumi.Input[str] template: Template string for this request, supports mustache-style `{{placeholders}}`. Not Null
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Unique name for the template, can be called with `{template://NAME}`. Not Null
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        Template string for this request, supports mustache-style `{{placeholders}}`. Not Null
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class GatewayPluginAiPromptTemplateConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptTemplateConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptTemplateRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiPromptTemplateServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiProxyConfigArgs:
    def __init__(__self__, *,
                 auth: Optional[pulumi.Input['GatewayPluginAiProxyConfigAuthArgs']] = None,
                 logging: Optional[pulumi.Input['GatewayPluginAiProxyConfigLoggingArgs']] = None,
                 model: Optional[pulumi.Input['GatewayPluginAiProxyConfigModelArgs']] = None,
                 response_streaming: Optional[pulumi.Input[str]] = None,
                 route_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] response_streaming: Whether to 'optionally allow', 'deny', or 'always' (force) the streaming of answers via server sent events. must be one of ["allow", "deny", "always"]
        :param pulumi.Input[str] route_type: The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation. must be one of ["llm/v1/chat", "llm/v1/completions", "preserve"]
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if logging is not None:
            pulumi.set(__self__, "logging", logging)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if response_streaming is not None:
            pulumi.set(__self__, "response_streaming", response_streaming)
        if route_type is not None:
            pulumi.set(__self__, "route_type", route_type)

    @property
    @pulumi.getter
    def auth(self) -> Optional[pulumi.Input['GatewayPluginAiProxyConfigAuthArgs']]:
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: Optional[pulumi.Input['GatewayPluginAiProxyConfigAuthArgs']]):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def logging(self) -> Optional[pulumi.Input['GatewayPluginAiProxyConfigLoggingArgs']]:
        return pulumi.get(self, "logging")

    @logging.setter
    def logging(self, value: Optional[pulumi.Input['GatewayPluginAiProxyConfigLoggingArgs']]):
        pulumi.set(self, "logging", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input['GatewayPluginAiProxyConfigModelArgs']]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input['GatewayPluginAiProxyConfigModelArgs']]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="responseStreaming")
    def response_streaming(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to 'optionally allow', 'deny', or 'always' (force) the streaming of answers via server sent events. must be one of ["allow", "deny", "always"]
        """
        return pulumi.get(self, "response_streaming")

    @response_streaming.setter
    def response_streaming(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_streaming", value)

    @property
    @pulumi.getter(name="routeType")
    def route_type(self) -> Optional[pulumi.Input[str]]:
        """
        The model's operation implementation, for this provider. Set to `preserve` to pass through without transformation. must be one of ["llm/v1/chat", "llm/v1/completions", "preserve"]
        """
        return pulumi.get(self, "route_type")

    @route_type.setter
    def route_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "route_type", value)


@pulumi.input_type
class GatewayPluginAiProxyConfigAuthArgs:
    def __init__(__self__, *,
                 azure_client_id: Optional[pulumi.Input[str]] = None,
                 azure_client_secret: Optional[pulumi.Input[str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[str]] = None,
                 azure_use_managed_identity: Optional[pulumi.Input[bool]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 header_value: Optional[pulumi.Input[str]] = None,
                 param_location: Optional[pulumi.Input[str]] = None,
                 param_name: Optional[pulumi.Input[str]] = None,
                 param_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] azure_client_id: If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
        :param pulumi.Input[str] azure_client_secret: If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
        :param pulumi.Input[str] azure_tenant_id: If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
        :param pulumi.Input[bool] azure_use_managed_identity: Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
        :param pulumi.Input[str] header_name: If AI model requires authentication via Authorization or API key header, specify its name here.
        :param pulumi.Input[str] header_value: Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
        :param pulumi.Input[str] param_location: Specify whether the 'param*name' and 'param*value' options go in a query string, or the POST form/JSON body. must be one of ["query", "body"]
        :param pulumi.Input[str] param_name: If AI model requires authentication via query parameter, specify its name here.
        :param pulumi.Input[str] param_value: Specify the full parameter value for 'param_name'.
        """
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_client_secret is not None:
            pulumi.set(__self__, "azure_client_secret", azure_client_secret)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if azure_use_managed_identity is not None:
            pulumi.set(__self__, "azure_use_managed_identity", azure_use_managed_identity)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if header_value is not None:
            pulumi.set(__self__, "header_value", header_value)
        if param_location is not None:
            pulumi.set(__self__, "param_location", param_location)
        if param_name is not None:
            pulumi.set(__self__, "param_name", param_name)
        if param_value is not None:
            pulumi.set(__self__, "param_value", param_value)

    @property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[pulumi.Input[str]]:
        """
        If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.
        """
        return pulumi.get(self, "azure_client_id")

    @azure_client_id.setter
    def azure_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_id", value)

    @property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.
        """
        return pulumi.get(self, "azure_client_secret")

    @azure_client_secret.setter
    def azure_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_client_secret", value)

    @property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        If azure*use*managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.
        """
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_tenant_id", value)

    @property
    @pulumi.getter(name="azureUseManagedIdentity")
    def azure_use_managed_identity(self) -> Optional[pulumi.Input[bool]]:
        """
        Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.
        """
        return pulumi.get(self, "azure_use_managed_identity")

    @azure_use_managed_identity.setter
    def azure_use_managed_identity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "azure_use_managed_identity", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        If AI model requires authentication via Authorization or API key header, specify its name here.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.
        """
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_value", value)

    @property
    @pulumi.getter(name="paramLocation")
    def param_location(self) -> Optional[pulumi.Input[str]]:
        """
        Specify whether the 'param*name' and 'param*value' options go in a query string, or the POST form/JSON body. must be one of ["query", "body"]
        """
        return pulumi.get(self, "param_location")

    @param_location.setter
    def param_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_location", value)

    @property
    @pulumi.getter(name="paramName")
    def param_name(self) -> Optional[pulumi.Input[str]]:
        """
        If AI model requires authentication via query parameter, specify its name here.
        """
        return pulumi.get(self, "param_name")

    @param_name.setter
    def param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_name", value)

    @property
    @pulumi.getter(name="paramValue")
    def param_value(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the full parameter value for 'param_name'.
        """
        return pulumi.get(self, "param_value")

    @param_value.setter
    def param_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "param_value", value)


@pulumi.input_type
class GatewayPluginAiProxyConfigLoggingArgs:
    def __init__(__self__, *,
                 log_payloads: Optional[pulumi.Input[bool]] = None,
                 log_statistics: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] log_payloads: If enabled, will log the request and response body into the Kong log plugin(s) output.
        :param pulumi.Input[bool] log_statistics: If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.
        """
        if log_payloads is not None:
            pulumi.set(__self__, "log_payloads", log_payloads)
        if log_statistics is not None:
            pulumi.set(__self__, "log_statistics", log_statistics)

    @property
    @pulumi.getter(name="logPayloads")
    def log_payloads(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled, will log the request and response body into the Kong log plugin(s) output.
        """
        return pulumi.get(self, "log_payloads")

    @log_payloads.setter
    def log_payloads(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_payloads", value)

    @property
    @pulumi.getter(name="logStatistics")
    def log_statistics(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.
        """
        return pulumi.get(self, "log_statistics")

    @log_statistics.setter
    def log_statistics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "log_statistics", value)


@pulumi.input_type
class GatewayPluginAiProxyConfigModelArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input['GatewayPluginAiProxyConfigModelOptionsArgs']] = None,
                 provider: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Model name to execute.
        :param pulumi.Input['GatewayPluginAiProxyConfigModelOptionsArgs'] options: Key/value settings for the model
        :param pulumi.Input[str] provider: AI provider request format - Kong translates requests to and from the specified backend compatible formats. must be one of ["openai", "azure", "anthropic", "cohere", "mistral", "llama2"]
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if provider is not None:
            pulumi.set(__self__, "provider", provider)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Model name to execute.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['GatewayPluginAiProxyConfigModelOptionsArgs']]:
        """
        Key/value settings for the model
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['GatewayPluginAiProxyConfigModelOptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def provider(self) -> Optional[pulumi.Input[str]]:
        """
        AI provider request format - Kong translates requests to and from the specified backend compatible formats. must be one of ["openai", "azure", "anthropic", "cohere", "mistral", "llama2"]
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provider", value)


@pulumi.input_type
class GatewayPluginAiProxyConfigModelOptionsArgs:
    def __init__(__self__, *,
                 anthropic_version: Optional[pulumi.Input[str]] = None,
                 azure_api_version: Optional[pulumi.Input[str]] = None,
                 azure_deployment_id: Optional[pulumi.Input[str]] = None,
                 azure_instance: Optional[pulumi.Input[str]] = None,
                 llama2_format: Optional[pulumi.Input[str]] = None,
                 max_tokens: Optional[pulumi.Input[int]] = None,
                 mistral_format: Optional[pulumi.Input[str]] = None,
                 temperature: Optional[pulumi.Input[float]] = None,
                 top_k: Optional[pulumi.Input[int]] = None,
                 top_p: Optional[pulumi.Input[float]] = None,
                 upstream_path: Optional[pulumi.Input[str]] = None,
                 upstream_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] anthropic_version: Defines the schema/API version, if using Anthropic provider.
        :param pulumi.Input[str] azure_api_version: 'api-version' for Azure OpenAI instances.
        :param pulumi.Input[str] azure_deployment_id: Deployment ID for Azure OpenAI instances.
        :param pulumi.Input[str] azure_instance: Instance name for Azure OpenAI hosted models.
        :param pulumi.Input[str] llama2_format: If using llama2 provider, select the upstream message format. must be one of ["raw", "openai", "ollama"]
        :param pulumi.Input[int] max_tokens: Defines the max_tokens, if using chat or completion models.
        :param pulumi.Input[str] mistral_format: If using mistral provider, select the upstream message format. must be one of ["openai", "ollama"]
        :param pulumi.Input[float] temperature: Defines the matching temperature, if using chat or completion models.
        :param pulumi.Input[int] top_k: Defines the top-k most likely tokens, if supported.
        :param pulumi.Input[float] top_p: Defines the top-p probability mass, if supported.
        :param pulumi.Input[str] upstream_path: Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.
        :param pulumi.Input[str] upstream_url: Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.
        """
        if anthropic_version is not None:
            pulumi.set(__self__, "anthropic_version", anthropic_version)
        if azure_api_version is not None:
            pulumi.set(__self__, "azure_api_version", azure_api_version)
        if azure_deployment_id is not None:
            pulumi.set(__self__, "azure_deployment_id", azure_deployment_id)
        if azure_instance is not None:
            pulumi.set(__self__, "azure_instance", azure_instance)
        if llama2_format is not None:
            pulumi.set(__self__, "llama2_format", llama2_format)
        if max_tokens is not None:
            pulumi.set(__self__, "max_tokens", max_tokens)
        if mistral_format is not None:
            pulumi.set(__self__, "mistral_format", mistral_format)
        if temperature is not None:
            pulumi.set(__self__, "temperature", temperature)
        if top_k is not None:
            pulumi.set(__self__, "top_k", top_k)
        if top_p is not None:
            pulumi.set(__self__, "top_p", top_p)
        if upstream_path is not None:
            pulumi.set(__self__, "upstream_path", upstream_path)
        if upstream_url is not None:
            pulumi.set(__self__, "upstream_url", upstream_url)

    @property
    @pulumi.getter(name="anthropicVersion")
    def anthropic_version(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the schema/API version, if using Anthropic provider.
        """
        return pulumi.get(self, "anthropic_version")

    @anthropic_version.setter
    def anthropic_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anthropic_version", value)

    @property
    @pulumi.getter(name="azureApiVersion")
    def azure_api_version(self) -> Optional[pulumi.Input[str]]:
        """
        'api-version' for Azure OpenAI instances.
        """
        return pulumi.get(self, "azure_api_version")

    @azure_api_version.setter
    def azure_api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_api_version", value)

    @property
    @pulumi.getter(name="azureDeploymentId")
    def azure_deployment_id(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment ID for Azure OpenAI instances.
        """
        return pulumi.get(self, "azure_deployment_id")

    @azure_deployment_id.setter
    def azure_deployment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_deployment_id", value)

    @property
    @pulumi.getter(name="azureInstance")
    def azure_instance(self) -> Optional[pulumi.Input[str]]:
        """
        Instance name for Azure OpenAI hosted models.
        """
        return pulumi.get(self, "azure_instance")

    @azure_instance.setter
    def azure_instance(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_instance", value)

    @property
    @pulumi.getter(name="llama2Format")
    def llama2_format(self) -> Optional[pulumi.Input[str]]:
        """
        If using llama2 provider, select the upstream message format. must be one of ["raw", "openai", "ollama"]
        """
        return pulumi.get(self, "llama2_format")

    @llama2_format.setter
    def llama2_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "llama2_format", value)

    @property
    @pulumi.getter(name="maxTokens")
    def max_tokens(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the max_tokens, if using chat or completion models.
        """
        return pulumi.get(self, "max_tokens")

    @max_tokens.setter
    def max_tokens(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_tokens", value)

    @property
    @pulumi.getter(name="mistralFormat")
    def mistral_format(self) -> Optional[pulumi.Input[str]]:
        """
        If using mistral provider, select the upstream message format. must be one of ["openai", "ollama"]
        """
        return pulumi.get(self, "mistral_format")

    @mistral_format.setter
    def mistral_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mistral_format", value)

    @property
    @pulumi.getter
    def temperature(self) -> Optional[pulumi.Input[float]]:
        """
        Defines the matching temperature, if using chat or completion models.
        """
        return pulumi.get(self, "temperature")

    @temperature.setter
    def temperature(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "temperature", value)

    @property
    @pulumi.getter(name="topK")
    def top_k(self) -> Optional[pulumi.Input[int]]:
        """
        Defines the top-k most likely tokens, if supported.
        """
        return pulumi.get(self, "top_k")

    @top_k.setter
    def top_k(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "top_k", value)

    @property
    @pulumi.getter(name="topP")
    def top_p(self) -> Optional[pulumi.Input[float]]:
        """
        Defines the top-p probability mass, if supported.
        """
        return pulumi.get(self, "top_p")

    @top_p.setter
    def top_p(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "top_p", value)

    @property
    @pulumi.getter(name="upstreamPath")
    def upstream_path(self) -> Optional[pulumi.Input[str]]:
        """
        Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.
        """
        return pulumi.get(self, "upstream_path")

    @upstream_path.setter
    def upstream_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_path", value)

    @property
    @pulumi.getter(name="upstreamUrl")
    def upstream_url(self) -> Optional[pulumi.Input[str]]:
        """
        Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.
        """
        return pulumi.get(self, "upstream_url")

    @upstream_url.setter
    def upstream_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_url", value)


@pulumi.input_type
class GatewayPluginAiProxyConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiProxyConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiProxyRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAiProxyServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAwsLambdaConfigArgs:
    def __init__(__self__, *,
                 aws_assume_role_arn: Optional[pulumi.Input[str]] = None,
                 aws_imds_protocol_version: Optional[pulumi.Input[str]] = None,
                 aws_key: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 aws_role_session_name: Optional[pulumi.Input[str]] = None,
                 aws_secret: Optional[pulumi.Input[str]] = None,
                 awsgateway_compatible: Optional[pulumi.Input[bool]] = None,
                 base64_encode_body: Optional[pulumi.Input[bool]] = None,
                 disable_https: Optional[pulumi.Input[bool]] = None,
                 forward_request_body: Optional[pulumi.Input[bool]] = None,
                 forward_request_headers: Optional[pulumi.Input[bool]] = None,
                 forward_request_method: Optional[pulumi.Input[bool]] = None,
                 forward_request_uri: Optional[pulumi.Input[bool]] = None,
                 function_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 invocation_type: Optional[pulumi.Input[str]] = None,
                 is_proxy_integration: Optional[pulumi.Input[bool]] = None,
                 keepalive: Optional[pulumi.Input[float]] = None,
                 log_type: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 proxy_url: Optional[pulumi.Input[str]] = None,
                 qualifier: Optional[pulumi.Input[str]] = None,
                 skip_large_bodies: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[float]] = None,
                 unhandled_status: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aws_assume_role_arn: The target AWS IAM role ARN used to invoke the Lambda function.
        :param pulumi.Input[str] aws_imds_protocol_version: Identifier to select the IMDS protocol version to use: `v1` or `v2`. must be one of ["v1", "v2"]
        :param pulumi.Input[str] aws_key: The AWS key credential to be used when invoking the function.
        :param pulumi.Input[str] aws_region: A string representing a host name, such as example.com.
        :param pulumi.Input[str] aws_role_session_name: The identifier of the assumed role session.
        :param pulumi.Input[str] aws_secret: The AWS secret credential to be used when invoking the function.
        :param pulumi.Input[bool] awsgateway_compatible: An optional value that defines whether the plugin should wrap requests into the Amazon API gateway.
        :param pulumi.Input[bool] base64_encode_body: An optional value that Base64-encodes the request body.
        :param pulumi.Input[bool] forward_request_body: An optional value that defines whether the request body is sent in the request*body field of the JSON-encoded request. If the body arguments can be parsed, they are sent in the separate request*body_args field of the request.
        :param pulumi.Input[bool] forward_request_headers: An optional value that defines whether the original HTTP request headers are sent as a map in the request_headers field of the JSON-encoded request.
        :param pulumi.Input[bool] forward_request_method: An optional value that defines whether the original HTTP request method verb is sent in the request_method field of the JSON-encoded request.
        :param pulumi.Input[bool] forward_request_uri: An optional value that defines whether the original HTTP request URI is sent in the request_uri field of the JSON-encoded request.
        :param pulumi.Input[str] function_name: The AWS Lambda function to invoke. Both function name and function ARN (including partial) are supported.
        :param pulumi.Input[str] host: A string representing a host name, such as example.com.
        :param pulumi.Input[str] invocation_type: The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun. must be one of ["RequestResponse", "Event", "DryRun"]
        :param pulumi.Input[bool] is_proxy_integration: An optional value that defines whether the response format to receive from the Lambda to this format.
        :param pulumi.Input[float] keepalive: An optional value in milliseconds that defines how long an idle connection lives before being closed.
        :param pulumi.Input[str] log_type: The LogType to use when invoking the function. By default, None and Tail are supported. must be one of ["Tail", "None"]
        :param pulumi.Input[int] port: An integer representing a port number between 0 and 65535, inclusive.
        :param pulumi.Input[str] proxy_url: A string representing a URL, such as https://example.com/path/to/resource?q=search.
        :param pulumi.Input[str] qualifier: The qualifier to use when invoking the function.
        :param pulumi.Input[bool] skip_large_bodies: An optional value that defines whether Kong should send large bodies that are buffered to disk
        :param pulumi.Input[float] timeout: An optional timeout in milliseconds when invoking the function.
        :param pulumi.Input[int] unhandled_status: The response status code to use (instead of the default 200, 202, or 204) in the case of an Unhandled Function Error.
        """
        if aws_assume_role_arn is not None:
            pulumi.set(__self__, "aws_assume_role_arn", aws_assume_role_arn)
        if aws_imds_protocol_version is not None:
            pulumi.set(__self__, "aws_imds_protocol_version", aws_imds_protocol_version)
        if aws_key is not None:
            pulumi.set(__self__, "aws_key", aws_key)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if aws_role_session_name is not None:
            pulumi.set(__self__, "aws_role_session_name", aws_role_session_name)
        if aws_secret is not None:
            pulumi.set(__self__, "aws_secret", aws_secret)
        if awsgateway_compatible is not None:
            pulumi.set(__self__, "awsgateway_compatible", awsgateway_compatible)
        if base64_encode_body is not None:
            pulumi.set(__self__, "base64_encode_body", base64_encode_body)
        if disable_https is not None:
            pulumi.set(__self__, "disable_https", disable_https)
        if forward_request_body is not None:
            pulumi.set(__self__, "forward_request_body", forward_request_body)
        if forward_request_headers is not None:
            pulumi.set(__self__, "forward_request_headers", forward_request_headers)
        if forward_request_method is not None:
            pulumi.set(__self__, "forward_request_method", forward_request_method)
        if forward_request_uri is not None:
            pulumi.set(__self__, "forward_request_uri", forward_request_uri)
        if function_name is not None:
            pulumi.set(__self__, "function_name", function_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)
        if is_proxy_integration is not None:
            pulumi.set(__self__, "is_proxy_integration", is_proxy_integration)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if log_type is not None:
            pulumi.set(__self__, "log_type", log_type)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if proxy_url is not None:
            pulumi.set(__self__, "proxy_url", proxy_url)
        if qualifier is not None:
            pulumi.set(__self__, "qualifier", qualifier)
        if skip_large_bodies is not None:
            pulumi.set(__self__, "skip_large_bodies", skip_large_bodies)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhandled_status is not None:
            pulumi.set(__self__, "unhandled_status", unhandled_status)

    @property
    @pulumi.getter(name="awsAssumeRoleArn")
    def aws_assume_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The target AWS IAM role ARN used to invoke the Lambda function.
        """
        return pulumi.get(self, "aws_assume_role_arn")

    @aws_assume_role_arn.setter
    def aws_assume_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_assume_role_arn", value)

    @property
    @pulumi.getter(name="awsImdsProtocolVersion")
    def aws_imds_protocol_version(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier to select the IMDS protocol version to use: `v1` or `v2`. must be one of ["v1", "v2"]
        """
        return pulumi.get(self, "aws_imds_protocol_version")

    @aws_imds_protocol_version.setter
    def aws_imds_protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_imds_protocol_version", value)

    @property
    @pulumi.getter(name="awsKey")
    def aws_key(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS key credential to be used when invoking the function.
        """
        return pulumi.get(self, "aws_key")

    @aws_key.setter
    def aws_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_key", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a host name, such as example.com.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="awsRoleSessionName")
    def aws_role_session_name(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the assumed role session.
        """
        return pulumi.get(self, "aws_role_session_name")

    @aws_role_session_name.setter
    def aws_role_session_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_role_session_name", value)

    @property
    @pulumi.getter(name="awsSecret")
    def aws_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS secret credential to be used when invoking the function.
        """
        return pulumi.get(self, "aws_secret")

    @aws_secret.setter
    def aws_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_secret", value)

    @property
    @pulumi.getter(name="awsgatewayCompatible")
    def awsgateway_compatible(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that defines whether the plugin should wrap requests into the Amazon API gateway.
        """
        return pulumi.get(self, "awsgateway_compatible")

    @awsgateway_compatible.setter
    def awsgateway_compatible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "awsgateway_compatible", value)

    @property
    @pulumi.getter(name="base64EncodeBody")
    def base64_encode_body(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that Base64-encodes the request body.
        """
        return pulumi.get(self, "base64_encode_body")

    @base64_encode_body.setter
    def base64_encode_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "base64_encode_body", value)

    @property
    @pulumi.getter(name="disableHttps")
    def disable_https(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_https")

    @disable_https.setter
    def disable_https(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_https", value)

    @property
    @pulumi.getter(name="forwardRequestBody")
    def forward_request_body(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that defines whether the request body is sent in the request*body field of the JSON-encoded request. If the body arguments can be parsed, they are sent in the separate request*body_args field of the request.
        """
        return pulumi.get(self, "forward_request_body")

    @forward_request_body.setter
    def forward_request_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward_request_body", value)

    @property
    @pulumi.getter(name="forwardRequestHeaders")
    def forward_request_headers(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that defines whether the original HTTP request headers are sent as a map in the request_headers field of the JSON-encoded request.
        """
        return pulumi.get(self, "forward_request_headers")

    @forward_request_headers.setter
    def forward_request_headers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward_request_headers", value)

    @property
    @pulumi.getter(name="forwardRequestMethod")
    def forward_request_method(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that defines whether the original HTTP request method verb is sent in the request_method field of the JSON-encoded request.
        """
        return pulumi.get(self, "forward_request_method")

    @forward_request_method.setter
    def forward_request_method(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward_request_method", value)

    @property
    @pulumi.getter(name="forwardRequestUri")
    def forward_request_uri(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that defines whether the original HTTP request URI is sent in the request_uri field of the JSON-encoded request.
        """
        return pulumi.get(self, "forward_request_uri")

    @forward_request_uri.setter
    def forward_request_uri(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forward_request_uri", value)

    @property
    @pulumi.getter(name="functionName")
    def function_name(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS Lambda function to invoke. Both function name and function ARN (including partial) are supported.
        """
        return pulumi.get(self, "function_name")

    @function_name.setter
    def function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a host name, such as example.com.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input[str]]:
        """
        The InvocationType to use when invoking the function. Available types are RequestResponse, Event, DryRun. must be one of ["RequestResponse", "Event", "DryRun"]
        """
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invocation_type", value)

    @property
    @pulumi.getter(name="isProxyIntegration")
    def is_proxy_integration(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that defines whether the response format to receive from the Lambda to this format.
        """
        return pulumi.get(self, "is_proxy_integration")

    @is_proxy_integration.setter
    def is_proxy_integration(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_proxy_integration", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[float]]:
        """
        An optional value in milliseconds that defines how long an idle connection lives before being closed.
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> Optional[pulumi.Input[str]]:
        """
        The LogType to use when invoking the function. By default, None and Tail are supported. must be one of ["Tail", "None"]
        """
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_type", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a port number between 0 and 65535, inclusive.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="proxyUrl")
    def proxy_url(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a URL, such as https://example.com/path/to/resource?q=search.
        """
        return pulumi.get(self, "proxy_url")

    @proxy_url.setter
    def proxy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proxy_url", value)

    @property
    @pulumi.getter
    def qualifier(self) -> Optional[pulumi.Input[str]]:
        """
        The qualifier to use when invoking the function.
        """
        return pulumi.get(self, "qualifier")

    @qualifier.setter
    def qualifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qualifier", value)

    @property
    @pulumi.getter(name="skipLargeBodies")
    def skip_large_bodies(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional value that defines whether Kong should send large bodies that are buffered to disk
        """
        return pulumi.get(self, "skip_large_bodies")

    @skip_large_bodies.setter
    def skip_large_bodies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_large_bodies", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[float]]:
        """
        An optional timeout in milliseconds when invoking the function.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhandledStatus")
    def unhandled_status(self) -> Optional[pulumi.Input[int]]:
        """
        The response status code to use (instead of the default 200, 202, or 204) in the case of an Unhandled Function Error.
        """
        return pulumi.get(self, "unhandled_status")

    @unhandled_status.setter
    def unhandled_status(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "unhandled_status", value)


@pulumi.input_type
class GatewayPluginAwsLambdaConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAwsLambdaConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAwsLambdaRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginAwsLambdaServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginBasicAuthConfigArgs:
    def __init__(__self__, *,
                 anonymous: Optional[pulumi.Input[str]] = None,
                 hide_credentials: Optional[pulumi.Input[bool]] = None,
                 realm: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] anonymous: An optional string (Consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`. Please note that this value must refer to the Consumer `id` or `username` attribute, and **not** its `custom_id`.
        :param pulumi.Input[bool] hide_credentials: An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin will strip the credential from the request (i.e. the `Authorization` header) before proxying it.
        :param pulumi.Input[str] realm: When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
        """
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if hide_credentials is not None:
            pulumi.set(__self__, "hide_credentials", hide_credentials)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[pulumi.Input[str]]:
        """
        An optional string (Consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`. Please note that this value must refer to the Consumer `id` or `username` attribute, and **not** its `custom_id`.
        """
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter(name="hideCredentials")
    def hide_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin will strip the credential from the request (i.e. the `Authorization` header) before proxying it.
        """
        return pulumi.get(self, "hide_credentials")

    @hide_credentials.setter
    def hide_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_credentials", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        """
        When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)


@pulumi.input_type
class GatewayPluginBasicAuthConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginBasicAuthConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginBasicAuthRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginBasicAuthServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorrelationIdConfigArgs:
    def __init__(__self__, *,
                 echo_downstream: Optional[pulumi.Input[bool]] = None,
                 generator: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] echo_downstream: Whether to echo the header back to downstream (the client).
        :param pulumi.Input[str] generator: The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See Generators. must be one of ["uuid", "uuid#counter", "tracker"]
        :param pulumi.Input[str] header_name: The HTTP header name to use for the correlation ID.
        """
        if echo_downstream is not None:
            pulumi.set(__self__, "echo_downstream", echo_downstream)
        if generator is not None:
            pulumi.set(__self__, "generator", generator)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter(name="echoDownstream")
    def echo_downstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to echo the header back to downstream (the client).
        """
        return pulumi.get(self, "echo_downstream")

    @echo_downstream.setter
    def echo_downstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "echo_downstream", value)

    @property
    @pulumi.getter
    def generator(self) -> Optional[pulumi.Input[str]]:
        """
        The generator to use for the correlation ID. Accepted values are `uuid`, `uuid#counter`, and `tracker`. See Generators. must be one of ["uuid", "uuid#counter", "tracker"]
        """
        return pulumi.get(self, "generator")

    @generator.setter
    def generator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generator", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP header name to use for the correlation ID.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)


@pulumi.input_type
class GatewayPluginCorrelationIdConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorrelationIdConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorrelationIdRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorrelationIdServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorsConfigArgs:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input[bool]] = None,
                 exposed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age: Optional[pulumi.Input[float]] = None,
                 methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preflight_continue: Optional[pulumi.Input[bool]] = None,
                 private_network: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] credentials: Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] exposed_headers: Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] headers: Value for the `Access-Control-Allow-Headers` header.
        :param pulumi.Input[float] max_age: Indicates how long the results of the preflight request can be cached, in `seconds`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] methods: 'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'
        :param pulumi.Input[Sequence[pulumi.Input[str]]] origins: List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.
        :param pulumi.Input[bool] preflight_continue: A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.
        :param pulumi.Input[bool] private_network: Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if exposed_headers is not None:
            pulumi.set(__self__, "exposed_headers", exposed_headers)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if methods is not None:
            pulumi.set(__self__, "methods", methods)
        if origins is not None:
            pulumi.set(__self__, "origins", origins)
        if preflight_continue is not None:
            pulumi.set(__self__, "preflight_continue", preflight_continue)
        if private_network is not None:
            pulumi.set(__self__, "private_network", private_network)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to determine whether the `Access-Control-Allow-Credentials` header should be sent with `true` as the value.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="exposedHeaders")
    def exposed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value for the `Access-Control-Expose-Headers` header. If not specified, no custom headers are exposed.
        """
        return pulumi.get(self, "exposed_headers")

    @exposed_headers.setter
    def exposed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exposed_headers", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value for the `Access-Control-Allow-Headers` header.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        Indicates how long the results of the preflight request can be cached, in `seconds`.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        'Value for the `Access-Control-Allow-Methods` header. Available options include `GET`, `HEAD`, `PUT`, `PATCH`, `POST`, `DELETE`, `OPTIONS`, `TRACE`, `CONNECT`. By default, all options are allowed.'
        """
        return pulumi.get(self, "methods")

    @methods.setter
    def methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "methods", value)

    @property
    @pulumi.getter
    def origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of allowed domains for the `Access-Control-Allow-Origin` header. If you want to allow all origins, add `*` as a single value to this configuration field. The accepted values can either be flat strings or PCRE regexes.
        """
        return pulumi.get(self, "origins")

    @origins.setter
    def origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "origins", value)

    @property
    @pulumi.getter(name="preflightContinue")
    def preflight_continue(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that instructs the plugin to proxy the `OPTIONS` preflight request to the Upstream service.
        """
        return pulumi.get(self, "preflight_continue")

    @preflight_continue.setter
    def preflight_continue(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preflight_continue", value)

    @property
    @pulumi.getter(name="privateNetwork")
    def private_network(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag to determine whether the `Access-Control-Allow-Private-Network` header should be sent with `true` as the value.
        """
        return pulumi.get(self, "private_network")

    @private_network.setter
    def private_network(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_network", value)


@pulumi.input_type
class GatewayPluginCorsConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorsConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorsRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginCorsServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginExitTransformerConfigArgs:
    def __init__(__self__, *,
                 functions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 handle_unexpected: Optional[pulumi.Input[bool]] = None,
                 handle_unknown: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] handle_unexpected: Determines whether to handle unexpected errors by transforming their responses.
        :param pulumi.Input[bool] handle_unknown: Determines whether to handle unknown status codes by transforming their responses.
        """
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if handle_unexpected is not None:
            pulumi.set(__self__, "handle_unexpected", handle_unexpected)
        if handle_unknown is not None:
            pulumi.set(__self__, "handle_unknown", handle_unknown)

    @property
    @pulumi.getter
    def functions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "functions")

    @functions.setter
    def functions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functions", value)

    @property
    @pulumi.getter(name="handleUnexpected")
    def handle_unexpected(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether to handle unexpected errors by transforming their responses.
        """
        return pulumi.get(self, "handle_unexpected")

    @handle_unexpected.setter
    def handle_unexpected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_unexpected", value)

    @property
    @pulumi.getter(name="handleUnknown")
    def handle_unknown(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether to handle unknown status codes by transforming their responses.
        """
        return pulumi.get(self, "handle_unknown")

    @handle_unknown.setter
    def handle_unknown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "handle_unknown", value)


@pulumi.input_type
class GatewayPluginExitTransformerConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginExitTransformerConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginExitTransformerRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginExitTransformerServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginFileLogConfigArgs:
    def __init__(__self__, *,
                 custom_fields_by_lua: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 reopen: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_fields_by_lua: Lua code as a key-value map
        :param pulumi.Input[str] path: The file path of the output log file. The plugin creates the log file if it doesn't exist yet.
        :param pulumi.Input[bool] reopen: Determines whether the log file is closed and reopened on every request.
        """
        if custom_fields_by_lua is not None:
            pulumi.set(__self__, "custom_fields_by_lua", custom_fields_by_lua)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if reopen is not None:
            pulumi.set(__self__, "reopen", reopen)

    @property
    @pulumi.getter(name="customFieldsByLua")
    def custom_fields_by_lua(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Lua code as a key-value map
        """
        return pulumi.get(self, "custom_fields_by_lua")

    @custom_fields_by_lua.setter
    def custom_fields_by_lua(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields_by_lua", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The file path of the output log file. The plugin creates the log file if it doesn't exist yet.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def reopen(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether the log file is closed and reopened on every request.
        """
        return pulumi.get(self, "reopen")

    @reopen.setter
    def reopen(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reopen", value)


@pulumi.input_type
class GatewayPluginFileLogConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginFileLogConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginFileLogRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginFileLogServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginIpRestrictionConfigArgs:
    def __init__(__self__, *,
                 allows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 denies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allows: List of IPs or CIDR ranges to allow. One of `config.allow` or `config.deny` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] denies: List of IPs or CIDR ranges to deny. One of `config.allow` or `config.deny` must be specified.
        :param pulumi.Input[str] message: The message to send as a response body to rejected requests.
        :param pulumi.Input[float] status: The HTTP status of the requests that will be rejected by the plugin.
        """
        if allows is not None:
            pulumi.set(__self__, "allows", allows)
        if denies is not None:
            pulumi.set(__self__, "denies", denies)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def allows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPs or CIDR ranges to allow. One of `config.allow` or `config.deny` must be specified.
        """
        return pulumi.get(self, "allows")

    @allows.setter
    def allows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allows", value)

    @property
    @pulumi.getter
    def denies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of IPs or CIDR ranges to deny. One of `config.allow` or `config.deny` must be specified.
        """
        return pulumi.get(self, "denies")

    @denies.setter
    def denies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "denies", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The message to send as a response body to rejected requests.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[float]]:
        """
        The HTTP status of the requests that will be rejected by the plugin.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class GatewayPluginIpRestrictionConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginIpRestrictionConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginIpRestrictionRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginIpRestrictionServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJqConfigArgs:
    def __init__(__self__, *,
                 request_if_media_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 request_jq_program: Optional[pulumi.Input[str]] = None,
                 request_jq_program_options: Optional[pulumi.Input['GatewayPluginJqConfigRequestJqProgramOptionsArgs']] = None,
                 response_if_media_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 response_if_status_codes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 response_jq_program: Optional[pulumi.Input[str]] = None,
                 response_jq_program_options: Optional[pulumi.Input['GatewayPluginJqConfigResponseJqProgramOptionsArgs']] = None):
        if request_if_media_types is not None:
            pulumi.set(__self__, "request_if_media_types", request_if_media_types)
        if request_jq_program is not None:
            pulumi.set(__self__, "request_jq_program", request_jq_program)
        if request_jq_program_options is not None:
            pulumi.set(__self__, "request_jq_program_options", request_jq_program_options)
        if response_if_media_types is not None:
            pulumi.set(__self__, "response_if_media_types", response_if_media_types)
        if response_if_status_codes is not None:
            pulumi.set(__self__, "response_if_status_codes", response_if_status_codes)
        if response_jq_program is not None:
            pulumi.set(__self__, "response_jq_program", response_jq_program)
        if response_jq_program_options is not None:
            pulumi.set(__self__, "response_jq_program_options", response_jq_program_options)

    @property
    @pulumi.getter(name="requestIfMediaTypes")
    def request_if_media_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "request_if_media_types")

    @request_if_media_types.setter
    def request_if_media_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "request_if_media_types", value)

    @property
    @pulumi.getter(name="requestJqProgram")
    def request_jq_program(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "request_jq_program")

    @request_jq_program.setter
    def request_jq_program(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_jq_program", value)

    @property
    @pulumi.getter(name="requestJqProgramOptions")
    def request_jq_program_options(self) -> Optional[pulumi.Input['GatewayPluginJqConfigRequestJqProgramOptionsArgs']]:
        return pulumi.get(self, "request_jq_program_options")

    @request_jq_program_options.setter
    def request_jq_program_options(self, value: Optional[pulumi.Input['GatewayPluginJqConfigRequestJqProgramOptionsArgs']]):
        pulumi.set(self, "request_jq_program_options", value)

    @property
    @pulumi.getter(name="responseIfMediaTypes")
    def response_if_media_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "response_if_media_types")

    @response_if_media_types.setter
    def response_if_media_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "response_if_media_types", value)

    @property
    @pulumi.getter(name="responseIfStatusCodes")
    def response_if_status_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "response_if_status_codes")

    @response_if_status_codes.setter
    def response_if_status_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "response_if_status_codes", value)

    @property
    @pulumi.getter(name="responseJqProgram")
    def response_jq_program(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "response_jq_program")

    @response_jq_program.setter
    def response_jq_program(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_jq_program", value)

    @property
    @pulumi.getter(name="responseJqProgramOptions")
    def response_jq_program_options(self) -> Optional[pulumi.Input['GatewayPluginJqConfigResponseJqProgramOptionsArgs']]:
        return pulumi.get(self, "response_jq_program_options")

    @response_jq_program_options.setter
    def response_jq_program_options(self, value: Optional[pulumi.Input['GatewayPluginJqConfigResponseJqProgramOptionsArgs']]):
        pulumi.set(self, "response_jq_program_options", value)


@pulumi.input_type
class GatewayPluginJqConfigRequestJqProgramOptionsArgs:
    def __init__(__self__, *,
                 ascii_output: Optional[pulumi.Input[bool]] = None,
                 compact_output: Optional[pulumi.Input[bool]] = None,
                 join_output: Optional[pulumi.Input[bool]] = None,
                 raw_output: Optional[pulumi.Input[bool]] = None,
                 sort_keys: Optional[pulumi.Input[bool]] = None):
        if ascii_output is not None:
            pulumi.set(__self__, "ascii_output", ascii_output)
        if compact_output is not None:
            pulumi.set(__self__, "compact_output", compact_output)
        if join_output is not None:
            pulumi.set(__self__, "join_output", join_output)
        if raw_output is not None:
            pulumi.set(__self__, "raw_output", raw_output)
        if sort_keys is not None:
            pulumi.set(__self__, "sort_keys", sort_keys)

    @property
    @pulumi.getter(name="asciiOutput")
    def ascii_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ascii_output")

    @ascii_output.setter
    def ascii_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ascii_output", value)

    @property
    @pulumi.getter(name="compactOutput")
    def compact_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compact_output")

    @compact_output.setter
    def compact_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compact_output", value)

    @property
    @pulumi.getter(name="joinOutput")
    def join_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "join_output")

    @join_output.setter
    def join_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "join_output", value)

    @property
    @pulumi.getter(name="rawOutput")
    def raw_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "raw_output")

    @raw_output.setter
    def raw_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "raw_output", value)

    @property
    @pulumi.getter(name="sortKeys")
    def sort_keys(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sort_keys")

    @sort_keys.setter
    def sort_keys(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sort_keys", value)


@pulumi.input_type
class GatewayPluginJqConfigResponseJqProgramOptionsArgs:
    def __init__(__self__, *,
                 ascii_output: Optional[pulumi.Input[bool]] = None,
                 compact_output: Optional[pulumi.Input[bool]] = None,
                 join_output: Optional[pulumi.Input[bool]] = None,
                 raw_output: Optional[pulumi.Input[bool]] = None,
                 sort_keys: Optional[pulumi.Input[bool]] = None):
        if ascii_output is not None:
            pulumi.set(__self__, "ascii_output", ascii_output)
        if compact_output is not None:
            pulumi.set(__self__, "compact_output", compact_output)
        if join_output is not None:
            pulumi.set(__self__, "join_output", join_output)
        if raw_output is not None:
            pulumi.set(__self__, "raw_output", raw_output)
        if sort_keys is not None:
            pulumi.set(__self__, "sort_keys", sort_keys)

    @property
    @pulumi.getter(name="asciiOutput")
    def ascii_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ascii_output")

    @ascii_output.setter
    def ascii_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ascii_output", value)

    @property
    @pulumi.getter(name="compactOutput")
    def compact_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "compact_output")

    @compact_output.setter
    def compact_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compact_output", value)

    @property
    @pulumi.getter(name="joinOutput")
    def join_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "join_output")

    @join_output.setter
    def join_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "join_output", value)

    @property
    @pulumi.getter(name="rawOutput")
    def raw_output(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "raw_output")

    @raw_output.setter
    def raw_output(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "raw_output", value)

    @property
    @pulumi.getter(name="sortKeys")
    def sort_keys(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sort_keys")

    @sort_keys.setter
    def sort_keys(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sort_keys", value)


@pulumi.input_type
class GatewayPluginJqConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJqConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJqRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJqServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtConfigArgs:
    def __init__(__self__, *,
                 anonymous: Optional[pulumi.Input[str]] = None,
                 claims_to_verifies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cookie_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 header_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_claim_name: Optional[pulumi.Input[str]] = None,
                 maximum_expiration: Optional[pulumi.Input[float]] = None,
                 run_on_preflight: Optional[pulumi.Input[bool]] = None,
                 secret_is_base64: Optional[pulumi.Input[bool]] = None,
                 uri_param_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] anonymous: An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] claims_to_verifies: A list of registered claims (according to RFC 7519) that Kong can verify as well. Accepted values: one of exp or nbf.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cookie_names: A list of cookie names that Kong will inspect to retrieve JWTs.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] header_names: A list of HTTP header names that Kong will inspect to retrieve JWTs.
        :param pulumi.Input[str] key_claim_name: The name of the claim in which the key identifying the secret must be passed. The plugin will attempt to read this claim from the JWT payload and the header, in that order.
        :param pulumi.Input[float] maximum_expiration: A value between 0 and 31536000 (365 days) limiting the lifetime of the JWT to maximum_expiration seconds in the future.
        :param pulumi.Input[bool] run_on_preflight: A boolean value that indicates whether the plugin should run (and try to authenticate) on OPTIONS preflight requests. If set to false, then OPTIONS requests will always be allowed.
        :param pulumi.Input[bool] secret_is_base64: If true, the plugin assumes the credential’s secret to be base64 encoded. You will need to create a base64-encoded secret for your Consumer, and sign your JWT with the original secret.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uri_param_names: A list of querystring parameters that Kong will inspect to retrieve JWTs.
        """
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if claims_to_verifies is not None:
            pulumi.set(__self__, "claims_to_verifies", claims_to_verifies)
        if cookie_names is not None:
            pulumi.set(__self__, "cookie_names", cookie_names)
        if header_names is not None:
            pulumi.set(__self__, "header_names", header_names)
        if key_claim_name is not None:
            pulumi.set(__self__, "key_claim_name", key_claim_name)
        if maximum_expiration is not None:
            pulumi.set(__self__, "maximum_expiration", maximum_expiration)
        if run_on_preflight is not None:
            pulumi.set(__self__, "run_on_preflight", run_on_preflight)
        if secret_is_base64 is not None:
            pulumi.set(__self__, "secret_is_base64", secret_is_base64)
        if uri_param_names is not None:
            pulumi.set(__self__, "uri_param_names", uri_param_names)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[pulumi.Input[str]]:
        """
        An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
        """
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter(name="claimsToVerifies")
    def claims_to_verifies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of registered claims (according to RFC 7519) that Kong can verify as well. Accepted values: one of exp or nbf.
        """
        return pulumi.get(self, "claims_to_verifies")

    @claims_to_verifies.setter
    def claims_to_verifies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "claims_to_verifies", value)

    @property
    @pulumi.getter(name="cookieNames")
    def cookie_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of cookie names that Kong will inspect to retrieve JWTs.
        """
        return pulumi.get(self, "cookie_names")

    @cookie_names.setter
    def cookie_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cookie_names", value)

    @property
    @pulumi.getter(name="headerNames")
    def header_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of HTTP header names that Kong will inspect to retrieve JWTs.
        """
        return pulumi.get(self, "header_names")

    @header_names.setter
    def header_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "header_names", value)

    @property
    @pulumi.getter(name="keyClaimName")
    def key_claim_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the claim in which the key identifying the secret must be passed. The plugin will attempt to read this claim from the JWT payload and the header, in that order.
        """
        return pulumi.get(self, "key_claim_name")

    @key_claim_name.setter
    def key_claim_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_claim_name", value)

    @property
    @pulumi.getter(name="maximumExpiration")
    def maximum_expiration(self) -> Optional[pulumi.Input[float]]:
        """
        A value between 0 and 31536000 (365 days) limiting the lifetime of the JWT to maximum_expiration seconds in the future.
        """
        return pulumi.get(self, "maximum_expiration")

    @maximum_expiration.setter
    def maximum_expiration(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_expiration", value)

    @property
    @pulumi.getter(name="runOnPreflight")
    def run_on_preflight(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that indicates whether the plugin should run (and try to authenticate) on OPTIONS preflight requests. If set to false, then OPTIONS requests will always be allowed.
        """
        return pulumi.get(self, "run_on_preflight")

    @run_on_preflight.setter
    def run_on_preflight(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_preflight", value)

    @property
    @pulumi.getter(name="secretIsBase64")
    def secret_is_base64(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the plugin assumes the credential’s secret to be base64 encoded. You will need to create a base64-encoded secret for your Consumer, and sign your JWT with the original secret.
        """
        return pulumi.get(self, "secret_is_base64")

    @secret_is_base64.setter
    def secret_is_base64(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secret_is_base64", value)

    @property
    @pulumi.getter(name="uriParamNames")
    def uri_param_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of querystring parameters that Kong will inspect to retrieve JWTs.
        """
        return pulumi.get(self, "uri_param_names")

    @uri_param_names.setter
    def uri_param_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uri_param_names", value)


@pulumi.input_type
class GatewayPluginJwtConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtSignerConfigArgs:
    def __init__(__self__, *,
                 access_token_consumer_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_consumer_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_introspection_authorization: Optional[pulumi.Input[str]] = None,
                 access_token_introspection_body_args: Optional[pulumi.Input[str]] = None,
                 access_token_introspection_consumer_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_introspection_consumer_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_introspection_endpoint: Optional[pulumi.Input[str]] = None,
                 access_token_introspection_hint: Optional[pulumi.Input[str]] = None,
                 access_token_introspection_jwt_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_introspection_leeway: Optional[pulumi.Input[float]] = None,
                 access_token_introspection_scopes_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_introspection_scopes_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_introspection_timeout: Optional[pulumi.Input[float]] = None,
                 access_token_issuer: Optional[pulumi.Input[str]] = None,
                 access_token_jwks_uri: Optional[pulumi.Input[str]] = None,
                 access_token_jwks_uri_client_certificate: Optional[pulumi.Input[str]] = None,
                 access_token_jwks_uri_client_password: Optional[pulumi.Input[str]] = None,
                 access_token_jwks_uri_client_username: Optional[pulumi.Input[str]] = None,
                 access_token_jwks_uri_rotate_period: Optional[pulumi.Input[float]] = None,
                 access_token_keyset: Optional[pulumi.Input[str]] = None,
                 access_token_keyset_client_certificate: Optional[pulumi.Input[str]] = None,
                 access_token_keyset_client_password: Optional[pulumi.Input[str]] = None,
                 access_token_keyset_client_username: Optional[pulumi.Input[str]] = None,
                 access_token_keyset_rotate_period: Optional[pulumi.Input[float]] = None,
                 access_token_leeway: Optional[pulumi.Input[float]] = None,
                 access_token_optional: Optional[pulumi.Input[bool]] = None,
                 access_token_request_header: Optional[pulumi.Input[str]] = None,
                 access_token_scopes_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_scopes_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 access_token_signing_algorithm: Optional[pulumi.Input[str]] = None,
                 access_token_upstream_header: Optional[pulumi.Input[str]] = None,
                 access_token_upstream_leeway: Optional[pulumi.Input[float]] = None,
                 add_access_token_claims: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 add_channel_token_claims: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 add_claims: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 cache_access_token_introspection: Optional[pulumi.Input[bool]] = None,
                 cache_channel_token_introspection: Optional[pulumi.Input[bool]] = None,
                 channel_token_consumer_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_consumer_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_introspection_authorization: Optional[pulumi.Input[str]] = None,
                 channel_token_introspection_body_args: Optional[pulumi.Input[str]] = None,
                 channel_token_introspection_consumer_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_introspection_consumer_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_introspection_endpoint: Optional[pulumi.Input[str]] = None,
                 channel_token_introspection_hint: Optional[pulumi.Input[str]] = None,
                 channel_token_introspection_jwt_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_introspection_leeway: Optional[pulumi.Input[float]] = None,
                 channel_token_introspection_scopes_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_introspection_scopes_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_introspection_timeout: Optional[pulumi.Input[float]] = None,
                 channel_token_issuer: Optional[pulumi.Input[str]] = None,
                 channel_token_jwks_uri: Optional[pulumi.Input[str]] = None,
                 channel_token_jwks_uri_client_certificate: Optional[pulumi.Input[str]] = None,
                 channel_token_jwks_uri_client_password: Optional[pulumi.Input[str]] = None,
                 channel_token_jwks_uri_client_username: Optional[pulumi.Input[str]] = None,
                 channel_token_jwks_uri_rotate_period: Optional[pulumi.Input[float]] = None,
                 channel_token_keyset: Optional[pulumi.Input[str]] = None,
                 channel_token_keyset_client_certificate: Optional[pulumi.Input[str]] = None,
                 channel_token_keyset_client_password: Optional[pulumi.Input[str]] = None,
                 channel_token_keyset_client_username: Optional[pulumi.Input[str]] = None,
                 channel_token_keyset_rotate_period: Optional[pulumi.Input[float]] = None,
                 channel_token_leeway: Optional[pulumi.Input[float]] = None,
                 channel_token_optional: Optional[pulumi.Input[bool]] = None,
                 channel_token_request_header: Optional[pulumi.Input[str]] = None,
                 channel_token_scopes_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_scopes_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 channel_token_signing_algorithm: Optional[pulumi.Input[str]] = None,
                 channel_token_upstream_header: Optional[pulumi.Input[str]] = None,
                 channel_token_upstream_leeway: Optional[pulumi.Input[float]] = None,
                 enable_access_token_introspection: Optional[pulumi.Input[bool]] = None,
                 enable_channel_token_introspection: Optional[pulumi.Input[bool]] = None,
                 enable_hs_signatures: Optional[pulumi.Input[bool]] = None,
                 enable_instrumentation: Optional[pulumi.Input[bool]] = None,
                 original_access_token_upstream_header: Optional[pulumi.Input[str]] = None,
                 original_channel_token_upstream_header: Optional[pulumi.Input[str]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 remove_access_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 remove_channel_token_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 set_access_token_claims: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 set_channel_token_claims: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 set_claims: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 trust_access_token_introspection: Optional[pulumi.Input[bool]] = None,
                 trust_channel_token_introspection: Optional[pulumi.Input[bool]] = None,
                 verify_access_token_expiry: Optional[pulumi.Input[bool]] = None,
                 verify_access_token_introspection_expiry: Optional[pulumi.Input[bool]] = None,
                 verify_access_token_introspection_scopes: Optional[pulumi.Input[bool]] = None,
                 verify_access_token_scopes: Optional[pulumi.Input[bool]] = None,
                 verify_access_token_signature: Optional[pulumi.Input[bool]] = None,
                 verify_channel_token_expiry: Optional[pulumi.Input[bool]] = None,
                 verify_channel_token_introspection_expiry: Optional[pulumi.Input[bool]] = None,
                 verify_channel_token_introspection_scopes: Optional[pulumi.Input[bool]] = None,
                 verify_channel_token_scopes: Optional[pulumi.Input[bool]] = None,
                 verify_channel_token_signature: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_consumer_bies: When the plugin tries to apply an access token to a Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of alues. Valid values are `id`, `username`, and `custom_id`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_consumer_claims: When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (for example, `sub` or `username`) in an access token to Kong consumer entity.
        :param pulumi.Input[str] access_token_introspection_authorization: If the introspection endpoint requires client authentication (client being the JWT Signer plugin), you can specify the `Authorization` header's value with this configuration parameter.
        :param pulumi.Input[str] access_token_introspection_body_args: This parameter allows you to pass URL encoded request body arguments. For example: `resource=` or `a=1&b=&c`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_introspection_consumer_bies: When the plugin tries to do access token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_introspection_consumer_claims: When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in access token introspection results to the Kong consumer entity.
        :param pulumi.Input[str] access_token_introspection_endpoint: When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter.
        :param pulumi.Input[str] access_token_introspection_hint: If you need to give `hint` parameter when introspecting an access token, use this parameter to specify the value. By default, the plugin sends `hint=access_token`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_introspection_jwt_claims: If your introspection endpoint returns an access token in one of the keys (or claims) within the introspection results (`JSON`). If the key cannot be found, the plugin responds with `401 Unauthorized`. Also if the key is found but cannot be decoded as JWT, it also responds with `401 Unauthorized`.
        :param pulumi.Input[float] access_token_introspection_leeway: Adjusts clock skew between the token issuer introspection results and Kong. The value is added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time in seconds. You can disable access token introspection `expiry` verification altogether with `config.verify_access_token_introspection_expiry`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_introspection_scopes_claims: Specify the claim/property in access token introspection results (`JSON`) to be verified against values of `config.access_token_introspection_scopes_required`. This supports nested claims. For example, with Keycloak you could use `[ "realm_access", "roles" ]`, hich can be given as `realm_access,roles` (form post). If the claim is not found in access token introspection results, and you have specified `config.access_token_introspection_scopes_required`, the plugin responds with `403 Forbidden`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_introspection_scopes_requireds: Specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.access_token_introspection_scopes_claim`.
        :param pulumi.Input[float] access_token_introspection_timeout: Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on access token introspection.
        :param pulumi.Input[str] access_token_issuer: The `iss` claim of a signed or re-signed access token is set to this value. Original `iss` claim of the incoming token (possibly introspected) is stored in `original_iss` claim of the newly signed access token.
        :param pulumi.Input[str] access_token_jwks_uri: Specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the access token.
        :param pulumi.Input[str] access_token_jwks_uri_client_certificate: The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
        :param pulumi.Input[str] access_token_jwks_uri_client_password: The client password that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_username`
        :param pulumi.Input[str] access_token_jwks_uri_client_username: The client username that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_password`
        :param pulumi.Input[float] access_token_jwks_uri_rotate_period: Specify the period (in seconds) to auto-rotate the jwks for `access_token_jwks_uri`. The default value 0 means no auto-rotation.
        :param pulumi.Input[str] access_token_keyset: The name of the keyset containing signing keys.
        :param pulumi.Input[str] access_token_keyset_client_certificate: The client certificate that will be used to authenticate Kong if `access_token_keyset` is an https uri that requires mTLS Auth.
        :param pulumi.Input[str] access_token_keyset_client_password: The client password that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_username`
        :param pulumi.Input[str] access_token_keyset_client_username: The client username that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_password`
        :param pulumi.Input[float] access_token_keyset_rotate_period: Specify the period (in seconds) to auto-rotate the jwks for `access_token_keyset`. The default value 0 means no auto-rotation.
        :param pulumi.Input[float] access_token_leeway: Adjusts clock skew between the token issuer and Kong. The value is added to the token's `exp` claim before checking token expiry against Kong servers' current time in seconds. You can disable access token `expiry` verification altogether with `config.verify_access_token_expiry`.
        :param pulumi.Input[bool] access_token_optional: If an access token is not provided or no `config.access_token_request_header` is specified, the plugin cannot verify the access token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Use this parameter to allow the request to proceed even when there is no token to check. If the token is provided, then this parameter has no effect
        :param pulumi.Input[str] access_token_request_header: This parameter tells the name of the header where to look for the access token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_scopes_claims: Specify the claim in an access token to verify against values of `config.access_token_scopes_required`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] access_token_scopes_requireds: Specify the required values (or scopes) that are checked by a claim specified by `config.access_token_scopes_claim`.
        :param pulumi.Input[str] access_token_signing_algorithm: When this plugin sets the upstream header as specified with `config.access_token_upstream_header`, re-signs the original access token using the private keys of the JWT Signer plugin. Specify the algorithm that is used to sign the token. The `config.access_token_issuer` specifies which `keyset` is used to sign the new token issued by Kong using the specified signing algorithm. must be one of ["HS256", "HS384", "HS512", "RS256", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512", "EdDSA"]
        :param pulumi.Input[str] access_token_upstream_header: Removes the `config.access_token_request_header` from the request after reading its value. With `config.access_token_upstream_header`, you can specify the upstream header where the plugin adds the Kong signed token. If you don't specify a value, such as use `null` or `""` (empty string), the plugin does not even try to sign or re-sign the token.
        :param pulumi.Input[float] access_token_upstream_leeway: If you want to add or subtract (using a negative value) expiry time (in seconds) of the original access token, you can specify a value that is added to the original access token's `exp` claim.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] add_access_token_claims: Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] add_channel_token_claims: Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] add_claims: Add customized claims to both tokens if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        :param pulumi.Input[bool] cache_access_token_introspection: Whether to cache access token introspection results.
        :param pulumi.Input[bool] cache_channel_token_introspection: Whether to cache channel token introspection results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_consumer_bies: When the plugin tries to do channel token to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of valid values: `id`, `username`, and `custom_id`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_consumer_claims: When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter. Kong consumers have an `id`, a `username`, and a `custom_id`. If this parameter is enabled but the mapping fails, such as when there's a non-existent Kong consumer, the plugin responds with `403 Forbidden`.
        :param pulumi.Input[str] channel_token_introspection_authorization: When using `opaque` channel tokens, and you want to turn on channel token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise the plugin will not try introspection, and instead returns `401 Unauthorized` when using opaque channel tokens.
        :param pulumi.Input[str] channel_token_introspection_body_args: If you need to pass additional body arguments to introspection endpoint when the plugin introspects the opaque channel token, you can use this config parameter to specify them. You should URL encode the value. For example: `resource=` or `a=1&b=&c`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_introspection_consumer_bies: When the plugin tries to do channel token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values. Valid values are `id`, `username` and `custom_id`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_introspection_consumer_claims: When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in channel token introspection results to Kong consumer entity
        :param pulumi.Input[str] channel_token_introspection_endpoint: When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise, the plugin does not try introspection and returns `401 Unauthorized` instead.
        :param pulumi.Input[str] channel_token_introspection_hint: If you need to give `hint` parameter when introspecting a channel token, you can use this parameter to specify the value of such parameter. By default, a `hint` isn't sent with channel token introspection.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_introspection_jwt_claims: If your introspection endpoint returns a channel token in one of the keys (or claims) in the introspection results (`JSON`), the plugin can use that value instead of the introspection results when doing expiry verification and signing of the new token issued by Kong.
        :param pulumi.Input[float] channel_token_introspection_leeway: You can use this parameter to adjust clock skew between the token issuer introspection results and Kong. The value will be added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time (in seconds). You can disable channel token introspection `expiry` verification altogether with `config.verify_channel_token_introspection_expiry`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_introspection_scopes_claims: Use this parameter to specify the claim/property in channel token introspection results (`JSON`) to be verified against values of `config.channel_token_introspection_scopes_required`. This supports nested claims.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_introspection_scopes_requireds: Use this parameter to specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.channel_token_introspection_scopes_claim`.
        :param pulumi.Input[float] channel_token_introspection_timeout: Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on channel token introspection.
        :param pulumi.Input[str] channel_token_issuer: The `iss` claim of the re-signed channel token is set to this value, which is `kong` by default. The original `iss` claim of the incoming token (possibly introspected) is stored in the `original_iss` claim of the newly signed channel token.
        :param pulumi.Input[str] channel_token_jwks_uri: If you want to use `config.verify_channel_token_signature`, you must specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the channel token. If you don't specify a URI and you pass a JWT token to the plugin, then the plugin responds with `401 Unauthorized`.
        :param pulumi.Input[str] channel_token_jwks_uri_client_certificate: The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
        :param pulumi.Input[str] channel_token_jwks_uri_client_password: The client password that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_username`
        :param pulumi.Input[str] channel_token_jwks_uri_client_username: The client username that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_password`
        :param pulumi.Input[float] channel_token_jwks_uri_rotate_period: Specify the period (in seconds) to auto-rotate the jwks for `channel_token_jwks_uri`. The default value 0 means no auto-rotation.
        :param pulumi.Input[str] channel_token_keyset: The name of the keyset containing signing keys.
        :param pulumi.Input[str] channel_token_keyset_client_certificate: The client certificate that will be used to authenticate Kong if `channel_token_keyset` is an https uri that requires mTLS Auth.
        :param pulumi.Input[str] channel_token_keyset_client_password: The client password that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_username`
        :param pulumi.Input[str] channel_token_keyset_client_username: The client username that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_password`
        :param pulumi.Input[float] channel_token_keyset_rotate_period: Specify the period (in seconds) to auto-rotate the jwks for `channel_token_keyset`. The default value 0 means no auto-rotation.
        :param pulumi.Input[float] channel_token_leeway: Adjusts clock skew between the token issuer and Kong. The value will be added to token's `exp` claim before checking token expiry against Kong servers current time in seconds. You can disable channel token `expiry` verification altogether with `config.verify_channel_token_expiry`.
        :param pulumi.Input[bool] channel_token_optional: If a channel token is not provided or no `config.channel_token_request_header` is specified, the plugin cannot verify the channel token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Enable this parameter to allow the request to proceed even when there is no channel token to check. If the channel token is provided, then this parameter has no effect
        :param pulumi.Input[str] channel_token_request_header: This parameter tells the name of the header where to look for the channel token. If you don't want to do anything with the channel token, then you can set this to `null` or `""` (empty string).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_scopes_claims: Specify the claim in a channel token to verify against values of `config.channel_token_scopes_required`. This supports nested claims.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] channel_token_scopes_requireds: Specify the required values (or scopes) that are checked by a claim specified by `config.channel_token_scopes_claim`.
        :param pulumi.Input[str] channel_token_signing_algorithm: When this plugin sets the upstream header as specified with `config.channel_token_upstream_header`, it also re-signs the original channel token using private keys of this plugin. Specify the algorithm that is used to sign the token. must be one of ["HS256", "HS384", "HS512", "RS256", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512", "EdDSA"]
        :param pulumi.Input[str] channel_token_upstream_header: This plugin removes the `config.channel_token_request_header` from the request after reading its value.
        :param pulumi.Input[float] channel_token_upstream_leeway: If you want to add or perhaps subtract (using negative value) expiry time of the original channel token, you can specify a value that is added to the original channel token's `exp` claim.
        :param pulumi.Input[bool] enable_access_token_introspection: If you don't want to support opaque access tokens, change this configuration parameter to `false` to disable introspection.
        :param pulumi.Input[bool] enable_channel_token_introspection: If you don't want to support opaque channel tokens, disable introspection by changing this configuration parameter to `false`.
        :param pulumi.Input[bool] enable_hs_signatures: Tokens signed with HMAC algorithms such as `HS256`, `HS384`, or `HS512` are not accepted by default. If you need to accept such tokens for verification, enable this setting.
        :param pulumi.Input[bool] enable_instrumentation: Writes log entries with some added information using `ngx.CRIT` (CRITICAL) level.
        :param pulumi.Input[str] original_access_token_upstream_header: The HTTP header name used to store the original access token.
        :param pulumi.Input[str] original_channel_token_upstream_header: The HTTP header name used to store the original channel token.
        :param pulumi.Input[str] realm: When authentication or authorization fails, or there is an unexpected error, the plugin sends an `WWW-Authenticate` header with the `realm` attribute value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove_access_token_claims: remove claims. It should be an array, and each element is a claim key string.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] remove_channel_token_claims: remove claims. It should be an array, and each element is a claim key string.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] set_access_token_claims: Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] set_channel_token_claims: Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] set_claims: Set customized claims to both tokens. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        :param pulumi.Input[bool] trust_access_token_introspection: Use this parameter to enable and disable further checks on a payload before the new token is signed. If you set this to `true`, the expiry or scopes are not checked on a payload.
        :param pulumi.Input[bool] trust_channel_token_introspection: Providing an opaque channel token for plugin introspection, and verifying expiry and scopes on introspection results may make further payload checks unnecessary before the plugin signs a new token. This also applies when using a JWT token with introspection JSON as per config.channel*token*introspection*jwt*claim. Use this parameter to manage additional payload checks before signing a new token. With true (default), payload's expiry or scopes aren't checked.
        :param pulumi.Input[bool] verify_access_token_expiry: Quickly turn access token expiry verification off and on as needed.
        :param pulumi.Input[bool] verify_access_token_introspection_expiry: Quickly turn access token introspection expiry verification off and on as needed.
        :param pulumi.Input[bool] verify_access_token_introspection_scopes: Quickly turn off and on the access token introspection scopes verification, specified with `config.access_token_introspection_scopes_required`.
        :param pulumi.Input[bool] verify_access_token_scopes: Quickly turn off and on the access token required scopes verification, specified with `config.access_token_scopes_required`.
        :param pulumi.Input[bool] verify_access_token_signature: Quickly turn access token signature verification off and on as needed.
        :param pulumi.Input[bool] verify_channel_token_introspection_expiry: Quickly turn on/off the channel token introspection expiry verification.
        :param pulumi.Input[bool] verify_channel_token_introspection_scopes: Quickly turn on/off the channel token introspection scopes verification specified with `config.channel_token_introspection_scopes_required`.
        :param pulumi.Input[bool] verify_channel_token_scopes: Quickly turn on/off the channel token required scopes verification specified with `config.channel_token_scopes_required`.
        :param pulumi.Input[bool] verify_channel_token_signature: Quickly turn on/off the channel token signature verification.
        """
        if access_token_consumer_bies is not None:
            pulumi.set(__self__, "access_token_consumer_bies", access_token_consumer_bies)
        if access_token_consumer_claims is not None:
            pulumi.set(__self__, "access_token_consumer_claims", access_token_consumer_claims)
        if access_token_introspection_authorization is not None:
            pulumi.set(__self__, "access_token_introspection_authorization", access_token_introspection_authorization)
        if access_token_introspection_body_args is not None:
            pulumi.set(__self__, "access_token_introspection_body_args", access_token_introspection_body_args)
        if access_token_introspection_consumer_bies is not None:
            pulumi.set(__self__, "access_token_introspection_consumer_bies", access_token_introspection_consumer_bies)
        if access_token_introspection_consumer_claims is not None:
            pulumi.set(__self__, "access_token_introspection_consumer_claims", access_token_introspection_consumer_claims)
        if access_token_introspection_endpoint is not None:
            pulumi.set(__self__, "access_token_introspection_endpoint", access_token_introspection_endpoint)
        if access_token_introspection_hint is not None:
            pulumi.set(__self__, "access_token_introspection_hint", access_token_introspection_hint)
        if access_token_introspection_jwt_claims is not None:
            pulumi.set(__self__, "access_token_introspection_jwt_claims", access_token_introspection_jwt_claims)
        if access_token_introspection_leeway is not None:
            pulumi.set(__self__, "access_token_introspection_leeway", access_token_introspection_leeway)
        if access_token_introspection_scopes_claims is not None:
            pulumi.set(__self__, "access_token_introspection_scopes_claims", access_token_introspection_scopes_claims)
        if access_token_introspection_scopes_requireds is not None:
            pulumi.set(__self__, "access_token_introspection_scopes_requireds", access_token_introspection_scopes_requireds)
        if access_token_introspection_timeout is not None:
            pulumi.set(__self__, "access_token_introspection_timeout", access_token_introspection_timeout)
        if access_token_issuer is not None:
            pulumi.set(__self__, "access_token_issuer", access_token_issuer)
        if access_token_jwks_uri is not None:
            pulumi.set(__self__, "access_token_jwks_uri", access_token_jwks_uri)
        if access_token_jwks_uri_client_certificate is not None:
            pulumi.set(__self__, "access_token_jwks_uri_client_certificate", access_token_jwks_uri_client_certificate)
        if access_token_jwks_uri_client_password is not None:
            pulumi.set(__self__, "access_token_jwks_uri_client_password", access_token_jwks_uri_client_password)
        if access_token_jwks_uri_client_username is not None:
            pulumi.set(__self__, "access_token_jwks_uri_client_username", access_token_jwks_uri_client_username)
        if access_token_jwks_uri_rotate_period is not None:
            pulumi.set(__self__, "access_token_jwks_uri_rotate_period", access_token_jwks_uri_rotate_period)
        if access_token_keyset is not None:
            pulumi.set(__self__, "access_token_keyset", access_token_keyset)
        if access_token_keyset_client_certificate is not None:
            pulumi.set(__self__, "access_token_keyset_client_certificate", access_token_keyset_client_certificate)
        if access_token_keyset_client_password is not None:
            pulumi.set(__self__, "access_token_keyset_client_password", access_token_keyset_client_password)
        if access_token_keyset_client_username is not None:
            pulumi.set(__self__, "access_token_keyset_client_username", access_token_keyset_client_username)
        if access_token_keyset_rotate_period is not None:
            pulumi.set(__self__, "access_token_keyset_rotate_period", access_token_keyset_rotate_period)
        if access_token_leeway is not None:
            pulumi.set(__self__, "access_token_leeway", access_token_leeway)
        if access_token_optional is not None:
            pulumi.set(__self__, "access_token_optional", access_token_optional)
        if access_token_request_header is not None:
            pulumi.set(__self__, "access_token_request_header", access_token_request_header)
        if access_token_scopes_claims is not None:
            pulumi.set(__self__, "access_token_scopes_claims", access_token_scopes_claims)
        if access_token_scopes_requireds is not None:
            pulumi.set(__self__, "access_token_scopes_requireds", access_token_scopes_requireds)
        if access_token_signing_algorithm is not None:
            pulumi.set(__self__, "access_token_signing_algorithm", access_token_signing_algorithm)
        if access_token_upstream_header is not None:
            pulumi.set(__self__, "access_token_upstream_header", access_token_upstream_header)
        if access_token_upstream_leeway is not None:
            pulumi.set(__self__, "access_token_upstream_leeway", access_token_upstream_leeway)
        if add_access_token_claims is not None:
            pulumi.set(__self__, "add_access_token_claims", add_access_token_claims)
        if add_channel_token_claims is not None:
            pulumi.set(__self__, "add_channel_token_claims", add_channel_token_claims)
        if add_claims is not None:
            pulumi.set(__self__, "add_claims", add_claims)
        if cache_access_token_introspection is not None:
            pulumi.set(__self__, "cache_access_token_introspection", cache_access_token_introspection)
        if cache_channel_token_introspection is not None:
            pulumi.set(__self__, "cache_channel_token_introspection", cache_channel_token_introspection)
        if channel_token_consumer_bies is not None:
            pulumi.set(__self__, "channel_token_consumer_bies", channel_token_consumer_bies)
        if channel_token_consumer_claims is not None:
            pulumi.set(__self__, "channel_token_consumer_claims", channel_token_consumer_claims)
        if channel_token_introspection_authorization is not None:
            pulumi.set(__self__, "channel_token_introspection_authorization", channel_token_introspection_authorization)
        if channel_token_introspection_body_args is not None:
            pulumi.set(__self__, "channel_token_introspection_body_args", channel_token_introspection_body_args)
        if channel_token_introspection_consumer_bies is not None:
            pulumi.set(__self__, "channel_token_introspection_consumer_bies", channel_token_introspection_consumer_bies)
        if channel_token_introspection_consumer_claims is not None:
            pulumi.set(__self__, "channel_token_introspection_consumer_claims", channel_token_introspection_consumer_claims)
        if channel_token_introspection_endpoint is not None:
            pulumi.set(__self__, "channel_token_introspection_endpoint", channel_token_introspection_endpoint)
        if channel_token_introspection_hint is not None:
            pulumi.set(__self__, "channel_token_introspection_hint", channel_token_introspection_hint)
        if channel_token_introspection_jwt_claims is not None:
            pulumi.set(__self__, "channel_token_introspection_jwt_claims", channel_token_introspection_jwt_claims)
        if channel_token_introspection_leeway is not None:
            pulumi.set(__self__, "channel_token_introspection_leeway", channel_token_introspection_leeway)
        if channel_token_introspection_scopes_claims is not None:
            pulumi.set(__self__, "channel_token_introspection_scopes_claims", channel_token_introspection_scopes_claims)
        if channel_token_introspection_scopes_requireds is not None:
            pulumi.set(__self__, "channel_token_introspection_scopes_requireds", channel_token_introspection_scopes_requireds)
        if channel_token_introspection_timeout is not None:
            pulumi.set(__self__, "channel_token_introspection_timeout", channel_token_introspection_timeout)
        if channel_token_issuer is not None:
            pulumi.set(__self__, "channel_token_issuer", channel_token_issuer)
        if channel_token_jwks_uri is not None:
            pulumi.set(__self__, "channel_token_jwks_uri", channel_token_jwks_uri)
        if channel_token_jwks_uri_client_certificate is not None:
            pulumi.set(__self__, "channel_token_jwks_uri_client_certificate", channel_token_jwks_uri_client_certificate)
        if channel_token_jwks_uri_client_password is not None:
            pulumi.set(__self__, "channel_token_jwks_uri_client_password", channel_token_jwks_uri_client_password)
        if channel_token_jwks_uri_client_username is not None:
            pulumi.set(__self__, "channel_token_jwks_uri_client_username", channel_token_jwks_uri_client_username)
        if channel_token_jwks_uri_rotate_period is not None:
            pulumi.set(__self__, "channel_token_jwks_uri_rotate_period", channel_token_jwks_uri_rotate_period)
        if channel_token_keyset is not None:
            pulumi.set(__self__, "channel_token_keyset", channel_token_keyset)
        if channel_token_keyset_client_certificate is not None:
            pulumi.set(__self__, "channel_token_keyset_client_certificate", channel_token_keyset_client_certificate)
        if channel_token_keyset_client_password is not None:
            pulumi.set(__self__, "channel_token_keyset_client_password", channel_token_keyset_client_password)
        if channel_token_keyset_client_username is not None:
            pulumi.set(__self__, "channel_token_keyset_client_username", channel_token_keyset_client_username)
        if channel_token_keyset_rotate_period is not None:
            pulumi.set(__self__, "channel_token_keyset_rotate_period", channel_token_keyset_rotate_period)
        if channel_token_leeway is not None:
            pulumi.set(__self__, "channel_token_leeway", channel_token_leeway)
        if channel_token_optional is not None:
            pulumi.set(__self__, "channel_token_optional", channel_token_optional)
        if channel_token_request_header is not None:
            pulumi.set(__self__, "channel_token_request_header", channel_token_request_header)
        if channel_token_scopes_claims is not None:
            pulumi.set(__self__, "channel_token_scopes_claims", channel_token_scopes_claims)
        if channel_token_scopes_requireds is not None:
            pulumi.set(__self__, "channel_token_scopes_requireds", channel_token_scopes_requireds)
        if channel_token_signing_algorithm is not None:
            pulumi.set(__self__, "channel_token_signing_algorithm", channel_token_signing_algorithm)
        if channel_token_upstream_header is not None:
            pulumi.set(__self__, "channel_token_upstream_header", channel_token_upstream_header)
        if channel_token_upstream_leeway is not None:
            pulumi.set(__self__, "channel_token_upstream_leeway", channel_token_upstream_leeway)
        if enable_access_token_introspection is not None:
            pulumi.set(__self__, "enable_access_token_introspection", enable_access_token_introspection)
        if enable_channel_token_introspection is not None:
            pulumi.set(__self__, "enable_channel_token_introspection", enable_channel_token_introspection)
        if enable_hs_signatures is not None:
            pulumi.set(__self__, "enable_hs_signatures", enable_hs_signatures)
        if enable_instrumentation is not None:
            pulumi.set(__self__, "enable_instrumentation", enable_instrumentation)
        if original_access_token_upstream_header is not None:
            pulumi.set(__self__, "original_access_token_upstream_header", original_access_token_upstream_header)
        if original_channel_token_upstream_header is not None:
            pulumi.set(__self__, "original_channel_token_upstream_header", original_channel_token_upstream_header)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if remove_access_token_claims is not None:
            pulumi.set(__self__, "remove_access_token_claims", remove_access_token_claims)
        if remove_channel_token_claims is not None:
            pulumi.set(__self__, "remove_channel_token_claims", remove_channel_token_claims)
        if set_access_token_claims is not None:
            pulumi.set(__self__, "set_access_token_claims", set_access_token_claims)
        if set_channel_token_claims is not None:
            pulumi.set(__self__, "set_channel_token_claims", set_channel_token_claims)
        if set_claims is not None:
            pulumi.set(__self__, "set_claims", set_claims)
        if trust_access_token_introspection is not None:
            pulumi.set(__self__, "trust_access_token_introspection", trust_access_token_introspection)
        if trust_channel_token_introspection is not None:
            pulumi.set(__self__, "trust_channel_token_introspection", trust_channel_token_introspection)
        if verify_access_token_expiry is not None:
            pulumi.set(__self__, "verify_access_token_expiry", verify_access_token_expiry)
        if verify_access_token_introspection_expiry is not None:
            pulumi.set(__self__, "verify_access_token_introspection_expiry", verify_access_token_introspection_expiry)
        if verify_access_token_introspection_scopes is not None:
            pulumi.set(__self__, "verify_access_token_introspection_scopes", verify_access_token_introspection_scopes)
        if verify_access_token_scopes is not None:
            pulumi.set(__self__, "verify_access_token_scopes", verify_access_token_scopes)
        if verify_access_token_signature is not None:
            pulumi.set(__self__, "verify_access_token_signature", verify_access_token_signature)
        if verify_channel_token_expiry is not None:
            pulumi.set(__self__, "verify_channel_token_expiry", verify_channel_token_expiry)
        if verify_channel_token_introspection_expiry is not None:
            pulumi.set(__self__, "verify_channel_token_introspection_expiry", verify_channel_token_introspection_expiry)
        if verify_channel_token_introspection_scopes is not None:
            pulumi.set(__self__, "verify_channel_token_introspection_scopes", verify_channel_token_introspection_scopes)
        if verify_channel_token_scopes is not None:
            pulumi.set(__self__, "verify_channel_token_scopes", verify_channel_token_scopes)
        if verify_channel_token_signature is not None:
            pulumi.set(__self__, "verify_channel_token_signature", verify_channel_token_signature)

    @property
    @pulumi.getter(name="accessTokenConsumerBies")
    def access_token_consumer_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When the plugin tries to apply an access token to a Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of alues. Valid values are `id`, `username`, and `custom_id`.
        """
        return pulumi.get(self, "access_token_consumer_bies")

    @access_token_consumer_bies.setter
    def access_token_consumer_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_consumer_bies", value)

    @property
    @pulumi.getter(name="accessTokenConsumerClaims")
    def access_token_consumer_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (for example, `sub` or `username`) in an access token to Kong consumer entity.
        """
        return pulumi.get(self, "access_token_consumer_claims")

    @access_token_consumer_claims.setter
    def access_token_consumer_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_consumer_claims", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionAuthorization")
    def access_token_introspection_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        If the introspection endpoint requires client authentication (client being the JWT Signer plugin), you can specify the `Authorization` header's value with this configuration parameter.
        """
        return pulumi.get(self, "access_token_introspection_authorization")

    @access_token_introspection_authorization.setter
    def access_token_introspection_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_introspection_authorization", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionBodyArgs")
    def access_token_introspection_body_args(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter allows you to pass URL encoded request body arguments. For example: `resource=` or `a=1&b=&c`.
        """
        return pulumi.get(self, "access_token_introspection_body_args")

    @access_token_introspection_body_args.setter
    def access_token_introspection_body_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_introspection_body_args", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionConsumerBies")
    def access_token_introspection_consumer_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When the plugin tries to do access token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values.
        """
        return pulumi.get(self, "access_token_introspection_consumer_bies")

    @access_token_introspection_consumer_bies.setter
    def access_token_introspection_consumer_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_introspection_consumer_bies", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionConsumerClaims")
    def access_token_introspection_consumer_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in access token introspection results to the Kong consumer entity.
        """
        return pulumi.get(self, "access_token_introspection_consumer_claims")

    @access_token_introspection_consumer_claims.setter
    def access_token_introspection_consumer_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_introspection_consumer_claims", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionEndpoint")
    def access_token_introspection_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter.
        """
        return pulumi.get(self, "access_token_introspection_endpoint")

    @access_token_introspection_endpoint.setter
    def access_token_introspection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_introspection_endpoint", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionHint")
    def access_token_introspection_hint(self) -> Optional[pulumi.Input[str]]:
        """
        If you need to give `hint` parameter when introspecting an access token, use this parameter to specify the value. By default, the plugin sends `hint=access_token`.
        """
        return pulumi.get(self, "access_token_introspection_hint")

    @access_token_introspection_hint.setter
    def access_token_introspection_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_introspection_hint", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionJwtClaims")
    def access_token_introspection_jwt_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If your introspection endpoint returns an access token in one of the keys (or claims) within the introspection results (`JSON`). If the key cannot be found, the plugin responds with `401 Unauthorized`. Also if the key is found but cannot be decoded as JWT, it also responds with `401 Unauthorized`.
        """
        return pulumi.get(self, "access_token_introspection_jwt_claims")

    @access_token_introspection_jwt_claims.setter
    def access_token_introspection_jwt_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_introspection_jwt_claims", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionLeeway")
    def access_token_introspection_leeway(self) -> Optional[pulumi.Input[float]]:
        """
        Adjusts clock skew between the token issuer introspection results and Kong. The value is added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time in seconds. You can disable access token introspection `expiry` verification altogether with `config.verify_access_token_introspection_expiry`.
        """
        return pulumi.get(self, "access_token_introspection_leeway")

    @access_token_introspection_leeway.setter
    def access_token_introspection_leeway(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "access_token_introspection_leeway", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionScopesClaims")
    def access_token_introspection_scopes_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the claim/property in access token introspection results (`JSON`) to be verified against values of `config.access_token_introspection_scopes_required`. This supports nested claims. For example, with Keycloak you could use `[ "realm_access", "roles" ]`, hich can be given as `realm_access,roles` (form post). If the claim is not found in access token introspection results, and you have specified `config.access_token_introspection_scopes_required`, the plugin responds with `403 Forbidden`.
        """
        return pulumi.get(self, "access_token_introspection_scopes_claims")

    @access_token_introspection_scopes_claims.setter
    def access_token_introspection_scopes_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_introspection_scopes_claims", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionScopesRequireds")
    def access_token_introspection_scopes_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.access_token_introspection_scopes_claim`.
        """
        return pulumi.get(self, "access_token_introspection_scopes_requireds")

    @access_token_introspection_scopes_requireds.setter
    def access_token_introspection_scopes_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_introspection_scopes_requireds", value)

    @property
    @pulumi.getter(name="accessTokenIntrospectionTimeout")
    def access_token_introspection_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on access token introspection.
        """
        return pulumi.get(self, "access_token_introspection_timeout")

    @access_token_introspection_timeout.setter
    def access_token_introspection_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "access_token_introspection_timeout", value)

    @property
    @pulumi.getter(name="accessTokenIssuer")
    def access_token_issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The `iss` claim of a signed or re-signed access token is set to this value. Original `iss` claim of the incoming token (possibly introspected) is stored in `original_iss` claim of the newly signed access token.
        """
        return pulumi.get(self, "access_token_issuer")

    @access_token_issuer.setter
    def access_token_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_issuer", value)

    @property
    @pulumi.getter(name="accessTokenJwksUri")
    def access_token_jwks_uri(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the access token.
        """
        return pulumi.get(self, "access_token_jwks_uri")

    @access_token_jwks_uri.setter
    def access_token_jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_jwks_uri", value)

    @property
    @pulumi.getter(name="accessTokenJwksUriClientCertificate")
    def access_token_jwks_uri_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
        """
        return pulumi.get(self, "access_token_jwks_uri_client_certificate")

    @access_token_jwks_uri_client_certificate.setter
    def access_token_jwks_uri_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_jwks_uri_client_certificate", value)

    @property
    @pulumi.getter(name="accessTokenJwksUriClientPassword")
    def access_token_jwks_uri_client_password(self) -> Optional[pulumi.Input[str]]:
        """
        The client password that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_username`
        """
        return pulumi.get(self, "access_token_jwks_uri_client_password")

    @access_token_jwks_uri_client_password.setter
    def access_token_jwks_uri_client_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_jwks_uri_client_password", value)

    @property
    @pulumi.getter(name="accessTokenJwksUriClientUsername")
    def access_token_jwks_uri_client_username(self) -> Optional[pulumi.Input[str]]:
        """
        The client username that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_password`
        """
        return pulumi.get(self, "access_token_jwks_uri_client_username")

    @access_token_jwks_uri_client_username.setter
    def access_token_jwks_uri_client_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_jwks_uri_client_username", value)

    @property
    @pulumi.getter(name="accessTokenJwksUriRotatePeriod")
    def access_token_jwks_uri_rotate_period(self) -> Optional[pulumi.Input[float]]:
        """
        Specify the period (in seconds) to auto-rotate the jwks for `access_token_jwks_uri`. The default value 0 means no auto-rotation.
        """
        return pulumi.get(self, "access_token_jwks_uri_rotate_period")

    @access_token_jwks_uri_rotate_period.setter
    def access_token_jwks_uri_rotate_period(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "access_token_jwks_uri_rotate_period", value)

    @property
    @pulumi.getter(name="accessTokenKeyset")
    def access_token_keyset(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keyset containing signing keys.
        """
        return pulumi.get(self, "access_token_keyset")

    @access_token_keyset.setter
    def access_token_keyset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_keyset", value)

    @property
    @pulumi.getter(name="accessTokenKeysetClientCertificate")
    def access_token_keyset_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The client certificate that will be used to authenticate Kong if `access_token_keyset` is an https uri that requires mTLS Auth.
        """
        return pulumi.get(self, "access_token_keyset_client_certificate")

    @access_token_keyset_client_certificate.setter
    def access_token_keyset_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_keyset_client_certificate", value)

    @property
    @pulumi.getter(name="accessTokenKeysetClientPassword")
    def access_token_keyset_client_password(self) -> Optional[pulumi.Input[str]]:
        """
        The client password that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_username`
        """
        return pulumi.get(self, "access_token_keyset_client_password")

    @access_token_keyset_client_password.setter
    def access_token_keyset_client_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_keyset_client_password", value)

    @property
    @pulumi.getter(name="accessTokenKeysetClientUsername")
    def access_token_keyset_client_username(self) -> Optional[pulumi.Input[str]]:
        """
        The client username that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_password`
        """
        return pulumi.get(self, "access_token_keyset_client_username")

    @access_token_keyset_client_username.setter
    def access_token_keyset_client_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_keyset_client_username", value)

    @property
    @pulumi.getter(name="accessTokenKeysetRotatePeriod")
    def access_token_keyset_rotate_period(self) -> Optional[pulumi.Input[float]]:
        """
        Specify the period (in seconds) to auto-rotate the jwks for `access_token_keyset`. The default value 0 means no auto-rotation.
        """
        return pulumi.get(self, "access_token_keyset_rotate_period")

    @access_token_keyset_rotate_period.setter
    def access_token_keyset_rotate_period(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "access_token_keyset_rotate_period", value)

    @property
    @pulumi.getter(name="accessTokenLeeway")
    def access_token_leeway(self) -> Optional[pulumi.Input[float]]:
        """
        Adjusts clock skew between the token issuer and Kong. The value is added to the token's `exp` claim before checking token expiry against Kong servers' current time in seconds. You can disable access token `expiry` verification altogether with `config.verify_access_token_expiry`.
        """
        return pulumi.get(self, "access_token_leeway")

    @access_token_leeway.setter
    def access_token_leeway(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "access_token_leeway", value)

    @property
    @pulumi.getter(name="accessTokenOptional")
    def access_token_optional(self) -> Optional[pulumi.Input[bool]]:
        """
        If an access token is not provided or no `config.access_token_request_header` is specified, the plugin cannot verify the access token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Use this parameter to allow the request to proceed even when there is no token to check. If the token is provided, then this parameter has no effect
        """
        return pulumi.get(self, "access_token_optional")

    @access_token_optional.setter
    def access_token_optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "access_token_optional", value)

    @property
    @pulumi.getter(name="accessTokenRequestHeader")
    def access_token_request_header(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter tells the name of the header where to look for the access token.
        """
        return pulumi.get(self, "access_token_request_header")

    @access_token_request_header.setter
    def access_token_request_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_request_header", value)

    @property
    @pulumi.getter(name="accessTokenScopesClaims")
    def access_token_scopes_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the claim in an access token to verify against values of `config.access_token_scopes_required`.
        """
        return pulumi.get(self, "access_token_scopes_claims")

    @access_token_scopes_claims.setter
    def access_token_scopes_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_scopes_claims", value)

    @property
    @pulumi.getter(name="accessTokenScopesRequireds")
    def access_token_scopes_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the required values (or scopes) that are checked by a claim specified by `config.access_token_scopes_claim`.
        """
        return pulumi.get(self, "access_token_scopes_requireds")

    @access_token_scopes_requireds.setter
    def access_token_scopes_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "access_token_scopes_requireds", value)

    @property
    @pulumi.getter(name="accessTokenSigningAlgorithm")
    def access_token_signing_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        When this plugin sets the upstream header as specified with `config.access_token_upstream_header`, re-signs the original access token using the private keys of the JWT Signer plugin. Specify the algorithm that is used to sign the token. The `config.access_token_issuer` specifies which `keyset` is used to sign the new token issued by Kong using the specified signing algorithm. must be one of ["HS256", "HS384", "HS512", "RS256", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512", "EdDSA"]
        """
        return pulumi.get(self, "access_token_signing_algorithm")

    @access_token_signing_algorithm.setter
    def access_token_signing_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_signing_algorithm", value)

    @property
    @pulumi.getter(name="accessTokenUpstreamHeader")
    def access_token_upstream_header(self) -> Optional[pulumi.Input[str]]:
        """
        Removes the `config.access_token_request_header` from the request after reading its value. With `config.access_token_upstream_header`, you can specify the upstream header where the plugin adds the Kong signed token. If you don't specify a value, such as use `null` or `""` (empty string), the plugin does not even try to sign or re-sign the token.
        """
        return pulumi.get(self, "access_token_upstream_header")

    @access_token_upstream_header.setter
    def access_token_upstream_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_upstream_header", value)

    @property
    @pulumi.getter(name="accessTokenUpstreamLeeway")
    def access_token_upstream_leeway(self) -> Optional[pulumi.Input[float]]:
        """
        If you want to add or subtract (using a negative value) expiry time (in seconds) of the original access token, you can specify a value that is added to the original access token's `exp` claim.
        """
        return pulumi.get(self, "access_token_upstream_leeway")

    @access_token_upstream_leeway.setter
    def access_token_upstream_leeway(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "access_token_upstream_leeway", value)

    @property
    @pulumi.getter(name="addAccessTokenClaims")
    def add_access_token_claims(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        """
        return pulumi.get(self, "add_access_token_claims")

    @add_access_token_claims.setter
    def add_access_token_claims(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "add_access_token_claims", value)

    @property
    @pulumi.getter(name="addChannelTokenClaims")
    def add_channel_token_claims(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        """
        return pulumi.get(self, "add_channel_token_claims")

    @add_channel_token_claims.setter
    def add_channel_token_claims(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "add_channel_token_claims", value)

    @property
    @pulumi.getter(name="addClaims")
    def add_claims(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Add customized claims to both tokens if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        """
        return pulumi.get(self, "add_claims")

    @add_claims.setter
    def add_claims(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "add_claims", value)

    @property
    @pulumi.getter(name="cacheAccessTokenIntrospection")
    def cache_access_token_introspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to cache access token introspection results.
        """
        return pulumi.get(self, "cache_access_token_introspection")

    @cache_access_token_introspection.setter
    def cache_access_token_introspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_access_token_introspection", value)

    @property
    @pulumi.getter(name="cacheChannelTokenIntrospection")
    def cache_channel_token_introspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to cache channel token introspection results.
        """
        return pulumi.get(self, "cache_channel_token_introspection")

    @cache_channel_token_introspection.setter
    def cache_channel_token_introspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_channel_token_introspection", value)

    @property
    @pulumi.getter(name="channelTokenConsumerBies")
    def channel_token_consumer_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When the plugin tries to do channel token to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of valid values: `id`, `username`, and `custom_id`.
        """
        return pulumi.get(self, "channel_token_consumer_bies")

    @channel_token_consumer_bies.setter
    def channel_token_consumer_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_consumer_bies", value)

    @property
    @pulumi.getter(name="channelTokenConsumerClaims")
    def channel_token_consumer_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter. Kong consumers have an `id`, a `username`, and a `custom_id`. If this parameter is enabled but the mapping fails, such as when there's a non-existent Kong consumer, the plugin responds with `403 Forbidden`.
        """
        return pulumi.get(self, "channel_token_consumer_claims")

    @channel_token_consumer_claims.setter
    def channel_token_consumer_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_consumer_claims", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionAuthorization")
    def channel_token_introspection_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        When using `opaque` channel tokens, and you want to turn on channel token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise the plugin will not try introspection, and instead returns `401 Unauthorized` when using opaque channel tokens.
        """
        return pulumi.get(self, "channel_token_introspection_authorization")

    @channel_token_introspection_authorization.setter
    def channel_token_introspection_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_introspection_authorization", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionBodyArgs")
    def channel_token_introspection_body_args(self) -> Optional[pulumi.Input[str]]:
        """
        If you need to pass additional body arguments to introspection endpoint when the plugin introspects the opaque channel token, you can use this config parameter to specify them. You should URL encode the value. For example: `resource=` or `a=1&b=&c`.
        """
        return pulumi.get(self, "channel_token_introspection_body_args")

    @channel_token_introspection_body_args.setter
    def channel_token_introspection_body_args(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_introspection_body_args", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionConsumerBies")
    def channel_token_introspection_consumer_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When the plugin tries to do channel token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values. Valid values are `id`, `username` and `custom_id`.
        """
        return pulumi.get(self, "channel_token_introspection_consumer_bies")

    @channel_token_introspection_consumer_bies.setter
    def channel_token_introspection_consumer_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_introspection_consumer_bies", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionConsumerClaims")
    def channel_token_introspection_consumer_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in channel token introspection results to Kong consumer entity
        """
        return pulumi.get(self, "channel_token_introspection_consumer_claims")

    @channel_token_introspection_consumer_claims.setter
    def channel_token_introspection_consumer_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_introspection_consumer_claims", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionEndpoint")
    def channel_token_introspection_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise, the plugin does not try introspection and returns `401 Unauthorized` instead.
        """
        return pulumi.get(self, "channel_token_introspection_endpoint")

    @channel_token_introspection_endpoint.setter
    def channel_token_introspection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_introspection_endpoint", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionHint")
    def channel_token_introspection_hint(self) -> Optional[pulumi.Input[str]]:
        """
        If you need to give `hint` parameter when introspecting a channel token, you can use this parameter to specify the value of such parameter. By default, a `hint` isn't sent with channel token introspection.
        """
        return pulumi.get(self, "channel_token_introspection_hint")

    @channel_token_introspection_hint.setter
    def channel_token_introspection_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_introspection_hint", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionJwtClaims")
    def channel_token_introspection_jwt_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        If your introspection endpoint returns a channel token in one of the keys (or claims) in the introspection results (`JSON`), the plugin can use that value instead of the introspection results when doing expiry verification and signing of the new token issued by Kong.
        """
        return pulumi.get(self, "channel_token_introspection_jwt_claims")

    @channel_token_introspection_jwt_claims.setter
    def channel_token_introspection_jwt_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_introspection_jwt_claims", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionLeeway")
    def channel_token_introspection_leeway(self) -> Optional[pulumi.Input[float]]:
        """
        You can use this parameter to adjust clock skew between the token issuer introspection results and Kong. The value will be added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time (in seconds). You can disable channel token introspection `expiry` verification altogether with `config.verify_channel_token_introspection_expiry`.
        """
        return pulumi.get(self, "channel_token_introspection_leeway")

    @channel_token_introspection_leeway.setter
    def channel_token_introspection_leeway(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "channel_token_introspection_leeway", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionScopesClaims")
    def channel_token_introspection_scopes_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Use this parameter to specify the claim/property in channel token introspection results (`JSON`) to be verified against values of `config.channel_token_introspection_scopes_required`. This supports nested claims.
        """
        return pulumi.get(self, "channel_token_introspection_scopes_claims")

    @channel_token_introspection_scopes_claims.setter
    def channel_token_introspection_scopes_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_introspection_scopes_claims", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionScopesRequireds")
    def channel_token_introspection_scopes_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Use this parameter to specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.channel_token_introspection_scopes_claim`.
        """
        return pulumi.get(self, "channel_token_introspection_scopes_requireds")

    @channel_token_introspection_scopes_requireds.setter
    def channel_token_introspection_scopes_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_introspection_scopes_requireds", value)

    @property
    @pulumi.getter(name="channelTokenIntrospectionTimeout")
    def channel_token_introspection_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on channel token introspection.
        """
        return pulumi.get(self, "channel_token_introspection_timeout")

    @channel_token_introspection_timeout.setter
    def channel_token_introspection_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "channel_token_introspection_timeout", value)

    @property
    @pulumi.getter(name="channelTokenIssuer")
    def channel_token_issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The `iss` claim of the re-signed channel token is set to this value, which is `kong` by default. The original `iss` claim of the incoming token (possibly introspected) is stored in the `original_iss` claim of the newly signed channel token.
        """
        return pulumi.get(self, "channel_token_issuer")

    @channel_token_issuer.setter
    def channel_token_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_issuer", value)

    @property
    @pulumi.getter(name="channelTokenJwksUri")
    def channel_token_jwks_uri(self) -> Optional[pulumi.Input[str]]:
        """
        If you want to use `config.verify_channel_token_signature`, you must specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the channel token. If you don't specify a URI and you pass a JWT token to the plugin, then the plugin responds with `401 Unauthorized`.
        """
        return pulumi.get(self, "channel_token_jwks_uri")

    @channel_token_jwks_uri.setter
    def channel_token_jwks_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_jwks_uri", value)

    @property
    @pulumi.getter(name="channelTokenJwksUriClientCertificate")
    def channel_token_jwks_uri_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
        """
        return pulumi.get(self, "channel_token_jwks_uri_client_certificate")

    @channel_token_jwks_uri_client_certificate.setter
    def channel_token_jwks_uri_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_jwks_uri_client_certificate", value)

    @property
    @pulumi.getter(name="channelTokenJwksUriClientPassword")
    def channel_token_jwks_uri_client_password(self) -> Optional[pulumi.Input[str]]:
        """
        The client password that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_username`
        """
        return pulumi.get(self, "channel_token_jwks_uri_client_password")

    @channel_token_jwks_uri_client_password.setter
    def channel_token_jwks_uri_client_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_jwks_uri_client_password", value)

    @property
    @pulumi.getter(name="channelTokenJwksUriClientUsername")
    def channel_token_jwks_uri_client_username(self) -> Optional[pulumi.Input[str]]:
        """
        The client username that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_password`
        """
        return pulumi.get(self, "channel_token_jwks_uri_client_username")

    @channel_token_jwks_uri_client_username.setter
    def channel_token_jwks_uri_client_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_jwks_uri_client_username", value)

    @property
    @pulumi.getter(name="channelTokenJwksUriRotatePeriod")
    def channel_token_jwks_uri_rotate_period(self) -> Optional[pulumi.Input[float]]:
        """
        Specify the period (in seconds) to auto-rotate the jwks for `channel_token_jwks_uri`. The default value 0 means no auto-rotation.
        """
        return pulumi.get(self, "channel_token_jwks_uri_rotate_period")

    @channel_token_jwks_uri_rotate_period.setter
    def channel_token_jwks_uri_rotate_period(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "channel_token_jwks_uri_rotate_period", value)

    @property
    @pulumi.getter(name="channelTokenKeyset")
    def channel_token_keyset(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the keyset containing signing keys.
        """
        return pulumi.get(self, "channel_token_keyset")

    @channel_token_keyset.setter
    def channel_token_keyset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_keyset", value)

    @property
    @pulumi.getter(name="channelTokenKeysetClientCertificate")
    def channel_token_keyset_client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The client certificate that will be used to authenticate Kong if `channel_token_keyset` is an https uri that requires mTLS Auth.
        """
        return pulumi.get(self, "channel_token_keyset_client_certificate")

    @channel_token_keyset_client_certificate.setter
    def channel_token_keyset_client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_keyset_client_certificate", value)

    @property
    @pulumi.getter(name="channelTokenKeysetClientPassword")
    def channel_token_keyset_client_password(self) -> Optional[pulumi.Input[str]]:
        """
        The client password that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_username`
        """
        return pulumi.get(self, "channel_token_keyset_client_password")

    @channel_token_keyset_client_password.setter
    def channel_token_keyset_client_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_keyset_client_password", value)

    @property
    @pulumi.getter(name="channelTokenKeysetClientUsername")
    def channel_token_keyset_client_username(self) -> Optional[pulumi.Input[str]]:
        """
        The client username that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_password`
        """
        return pulumi.get(self, "channel_token_keyset_client_username")

    @channel_token_keyset_client_username.setter
    def channel_token_keyset_client_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_keyset_client_username", value)

    @property
    @pulumi.getter(name="channelTokenKeysetRotatePeriod")
    def channel_token_keyset_rotate_period(self) -> Optional[pulumi.Input[float]]:
        """
        Specify the period (in seconds) to auto-rotate the jwks for `channel_token_keyset`. The default value 0 means no auto-rotation.
        """
        return pulumi.get(self, "channel_token_keyset_rotate_period")

    @channel_token_keyset_rotate_period.setter
    def channel_token_keyset_rotate_period(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "channel_token_keyset_rotate_period", value)

    @property
    @pulumi.getter(name="channelTokenLeeway")
    def channel_token_leeway(self) -> Optional[pulumi.Input[float]]:
        """
        Adjusts clock skew between the token issuer and Kong. The value will be added to token's `exp` claim before checking token expiry against Kong servers current time in seconds. You can disable channel token `expiry` verification altogether with `config.verify_channel_token_expiry`.
        """
        return pulumi.get(self, "channel_token_leeway")

    @channel_token_leeway.setter
    def channel_token_leeway(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "channel_token_leeway", value)

    @property
    @pulumi.getter(name="channelTokenOptional")
    def channel_token_optional(self) -> Optional[pulumi.Input[bool]]:
        """
        If a channel token is not provided or no `config.channel_token_request_header` is specified, the plugin cannot verify the channel token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Enable this parameter to allow the request to proceed even when there is no channel token to check. If the channel token is provided, then this parameter has no effect
        """
        return pulumi.get(self, "channel_token_optional")

    @channel_token_optional.setter
    def channel_token_optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "channel_token_optional", value)

    @property
    @pulumi.getter(name="channelTokenRequestHeader")
    def channel_token_request_header(self) -> Optional[pulumi.Input[str]]:
        """
        This parameter tells the name of the header where to look for the channel token. If you don't want to do anything with the channel token, then you can set this to `null` or `""` (empty string).
        """
        return pulumi.get(self, "channel_token_request_header")

    @channel_token_request_header.setter
    def channel_token_request_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_request_header", value)

    @property
    @pulumi.getter(name="channelTokenScopesClaims")
    def channel_token_scopes_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the claim in a channel token to verify against values of `config.channel_token_scopes_required`. This supports nested claims.
        """
        return pulumi.get(self, "channel_token_scopes_claims")

    @channel_token_scopes_claims.setter
    def channel_token_scopes_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_scopes_claims", value)

    @property
    @pulumi.getter(name="channelTokenScopesRequireds")
    def channel_token_scopes_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Specify the required values (or scopes) that are checked by a claim specified by `config.channel_token_scopes_claim`.
        """
        return pulumi.get(self, "channel_token_scopes_requireds")

    @channel_token_scopes_requireds.setter
    def channel_token_scopes_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_token_scopes_requireds", value)

    @property
    @pulumi.getter(name="channelTokenSigningAlgorithm")
    def channel_token_signing_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        When this plugin sets the upstream header as specified with `config.channel_token_upstream_header`, it also re-signs the original channel token using private keys of this plugin. Specify the algorithm that is used to sign the token. must be one of ["HS256", "HS384", "HS512", "RS256", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512", "EdDSA"]
        """
        return pulumi.get(self, "channel_token_signing_algorithm")

    @channel_token_signing_algorithm.setter
    def channel_token_signing_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_signing_algorithm", value)

    @property
    @pulumi.getter(name="channelTokenUpstreamHeader")
    def channel_token_upstream_header(self) -> Optional[pulumi.Input[str]]:
        """
        This plugin removes the `config.channel_token_request_header` from the request after reading its value.
        """
        return pulumi.get(self, "channel_token_upstream_header")

    @channel_token_upstream_header.setter
    def channel_token_upstream_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "channel_token_upstream_header", value)

    @property
    @pulumi.getter(name="channelTokenUpstreamLeeway")
    def channel_token_upstream_leeway(self) -> Optional[pulumi.Input[float]]:
        """
        If you want to add or perhaps subtract (using negative value) expiry time of the original channel token, you can specify a value that is added to the original channel token's `exp` claim.
        """
        return pulumi.get(self, "channel_token_upstream_leeway")

    @channel_token_upstream_leeway.setter
    def channel_token_upstream_leeway(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "channel_token_upstream_leeway", value)

    @property
    @pulumi.getter(name="enableAccessTokenIntrospection")
    def enable_access_token_introspection(self) -> Optional[pulumi.Input[bool]]:
        """
        If you don't want to support opaque access tokens, change this configuration parameter to `false` to disable introspection.
        """
        return pulumi.get(self, "enable_access_token_introspection")

    @enable_access_token_introspection.setter
    def enable_access_token_introspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_access_token_introspection", value)

    @property
    @pulumi.getter(name="enableChannelTokenIntrospection")
    def enable_channel_token_introspection(self) -> Optional[pulumi.Input[bool]]:
        """
        If you don't want to support opaque channel tokens, disable introspection by changing this configuration parameter to `false`.
        """
        return pulumi.get(self, "enable_channel_token_introspection")

    @enable_channel_token_introspection.setter
    def enable_channel_token_introspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_channel_token_introspection", value)

    @property
    @pulumi.getter(name="enableHsSignatures")
    def enable_hs_signatures(self) -> Optional[pulumi.Input[bool]]:
        """
        Tokens signed with HMAC algorithms such as `HS256`, `HS384`, or `HS512` are not accepted by default. If you need to accept such tokens for verification, enable this setting.
        """
        return pulumi.get(self, "enable_hs_signatures")

    @enable_hs_signatures.setter
    def enable_hs_signatures(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hs_signatures", value)

    @property
    @pulumi.getter(name="enableInstrumentation")
    def enable_instrumentation(self) -> Optional[pulumi.Input[bool]]:
        """
        Writes log entries with some added information using `ngx.CRIT` (CRITICAL) level.
        """
        return pulumi.get(self, "enable_instrumentation")

    @enable_instrumentation.setter
    def enable_instrumentation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_instrumentation", value)

    @property
    @pulumi.getter(name="originalAccessTokenUpstreamHeader")
    def original_access_token_upstream_header(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP header name used to store the original access token.
        """
        return pulumi.get(self, "original_access_token_upstream_header")

    @original_access_token_upstream_header.setter
    def original_access_token_upstream_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_access_token_upstream_header", value)

    @property
    @pulumi.getter(name="originalChannelTokenUpstreamHeader")
    def original_channel_token_upstream_header(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP header name used to store the original channel token.
        """
        return pulumi.get(self, "original_channel_token_upstream_header")

    @original_channel_token_upstream_header.setter
    def original_channel_token_upstream_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "original_channel_token_upstream_header", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        """
        When authentication or authorization fails, or there is an unexpected error, the plugin sends an `WWW-Authenticate` header with the `realm` attribute value.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="removeAccessTokenClaims")
    def remove_access_token_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        remove claims. It should be an array, and each element is a claim key string.
        """
        return pulumi.get(self, "remove_access_token_claims")

    @remove_access_token_claims.setter
    def remove_access_token_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove_access_token_claims", value)

    @property
    @pulumi.getter(name="removeChannelTokenClaims")
    def remove_channel_token_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        remove claims. It should be an array, and each element is a claim key string.
        """
        return pulumi.get(self, "remove_channel_token_claims")

    @remove_channel_token_claims.setter
    def remove_channel_token_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "remove_channel_token_claims", value)

    @property
    @pulumi.getter(name="setAccessTokenClaims")
    def set_access_token_claims(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        """
        return pulumi.get(self, "set_access_token_claims")

    @set_access_token_claims.setter
    def set_access_token_claims(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "set_access_token_claims", value)

    @property
    @pulumi.getter(name="setChannelTokenClaims")
    def set_channel_token_claims(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        """
        return pulumi.get(self, "set_channel_token_claims")

    @set_channel_token_claims.setter
    def set_channel_token_claims(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "set_channel_token_claims", value)

    @property
    @pulumi.getter(name="setClaims")
    def set_claims(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Set customized claims to both tokens. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        """
        return pulumi.get(self, "set_claims")

    @set_claims.setter
    def set_claims(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "set_claims", value)

    @property
    @pulumi.getter(name="trustAccessTokenIntrospection")
    def trust_access_token_introspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Use this parameter to enable and disable further checks on a payload before the new token is signed. If you set this to `true`, the expiry or scopes are not checked on a payload.
        """
        return pulumi.get(self, "trust_access_token_introspection")

    @trust_access_token_introspection.setter
    def trust_access_token_introspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_access_token_introspection", value)

    @property
    @pulumi.getter(name="trustChannelTokenIntrospection")
    def trust_channel_token_introspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Providing an opaque channel token for plugin introspection, and verifying expiry and scopes on introspection results may make further payload checks unnecessary before the plugin signs a new token. This also applies when using a JWT token with introspection JSON as per config.channel*token*introspection*jwt*claim. Use this parameter to manage additional payload checks before signing a new token. With true (default), payload's expiry or scopes aren't checked.
        """
        return pulumi.get(self, "trust_channel_token_introspection")

    @trust_channel_token_introspection.setter
    def trust_channel_token_introspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "trust_channel_token_introspection", value)

    @property
    @pulumi.getter(name="verifyAccessTokenExpiry")
    def verify_access_token_expiry(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn access token expiry verification off and on as needed.
        """
        return pulumi.get(self, "verify_access_token_expiry")

    @verify_access_token_expiry.setter
    def verify_access_token_expiry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_access_token_expiry", value)

    @property
    @pulumi.getter(name="verifyAccessTokenIntrospectionExpiry")
    def verify_access_token_introspection_expiry(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn access token introspection expiry verification off and on as needed.
        """
        return pulumi.get(self, "verify_access_token_introspection_expiry")

    @verify_access_token_introspection_expiry.setter
    def verify_access_token_introspection_expiry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_access_token_introspection_expiry", value)

    @property
    @pulumi.getter(name="verifyAccessTokenIntrospectionScopes")
    def verify_access_token_introspection_scopes(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn off and on the access token introspection scopes verification, specified with `config.access_token_introspection_scopes_required`.
        """
        return pulumi.get(self, "verify_access_token_introspection_scopes")

    @verify_access_token_introspection_scopes.setter
    def verify_access_token_introspection_scopes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_access_token_introspection_scopes", value)

    @property
    @pulumi.getter(name="verifyAccessTokenScopes")
    def verify_access_token_scopes(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn off and on the access token required scopes verification, specified with `config.access_token_scopes_required`.
        """
        return pulumi.get(self, "verify_access_token_scopes")

    @verify_access_token_scopes.setter
    def verify_access_token_scopes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_access_token_scopes", value)

    @property
    @pulumi.getter(name="verifyAccessTokenSignature")
    def verify_access_token_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn access token signature verification off and on as needed.
        """
        return pulumi.get(self, "verify_access_token_signature")

    @verify_access_token_signature.setter
    def verify_access_token_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_access_token_signature", value)

    @property
    @pulumi.getter(name="verifyChannelTokenExpiry")
    def verify_channel_token_expiry(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "verify_channel_token_expiry")

    @verify_channel_token_expiry.setter
    def verify_channel_token_expiry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_channel_token_expiry", value)

    @property
    @pulumi.getter(name="verifyChannelTokenIntrospectionExpiry")
    def verify_channel_token_introspection_expiry(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn on/off the channel token introspection expiry verification.
        """
        return pulumi.get(self, "verify_channel_token_introspection_expiry")

    @verify_channel_token_introspection_expiry.setter
    def verify_channel_token_introspection_expiry(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_channel_token_introspection_expiry", value)

    @property
    @pulumi.getter(name="verifyChannelTokenIntrospectionScopes")
    def verify_channel_token_introspection_scopes(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn on/off the channel token introspection scopes verification specified with `config.channel_token_introspection_scopes_required`.
        """
        return pulumi.get(self, "verify_channel_token_introspection_scopes")

    @verify_channel_token_introspection_scopes.setter
    def verify_channel_token_introspection_scopes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_channel_token_introspection_scopes", value)

    @property
    @pulumi.getter(name="verifyChannelTokenScopes")
    def verify_channel_token_scopes(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn on/off the channel token required scopes verification specified with `config.channel_token_scopes_required`.
        """
        return pulumi.get(self, "verify_channel_token_scopes")

    @verify_channel_token_scopes.setter
    def verify_channel_token_scopes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_channel_token_scopes", value)

    @property
    @pulumi.getter(name="verifyChannelTokenSignature")
    def verify_channel_token_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        Quickly turn on/off the channel token signature verification.
        """
        return pulumi.get(self, "verify_channel_token_signature")

    @verify_channel_token_signature.setter
    def verify_channel_token_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_channel_token_signature", value)


@pulumi.input_type
class GatewayPluginJwtSignerConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtSignerConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtSignerRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginJwtSignerServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginKeyAuthConfigArgs:
    def __init__(__self__, *,
                 anonymous: Optional[pulumi.Input[str]] = None,
                 hide_credentials: Optional[pulumi.Input[bool]] = None,
                 key_in_body: Optional[pulumi.Input[bool]] = None,
                 key_in_header: Optional[pulumi.Input[bool]] = None,
                 key_in_query: Optional[pulumi.Input[bool]] = None,
                 key_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 realm: Optional[pulumi.Input[str]] = None,
                 run_on_preflight: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] anonymous: An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`.
        :param pulumi.Input[bool] hide_credentials: An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request.
        :param pulumi.Input[bool] key_in_body: If enabled, the plugin reads the request body. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.
        :param pulumi.Input[bool] key_in_header: If enabled (default), the plugin reads the request header and tries to find the key in it.
        :param pulumi.Input[bool] key_in_query: If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] key_names: Describes an array of parameter names where the plugin will look for a key. The key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.
        :param pulumi.Input[str] realm: When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
        :param pulumi.Input[bool] run_on_preflight: A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.
        """
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if hide_credentials is not None:
            pulumi.set(__self__, "hide_credentials", hide_credentials)
        if key_in_body is not None:
            pulumi.set(__self__, "key_in_body", key_in_body)
        if key_in_header is not None:
            pulumi.set(__self__, "key_in_header", key_in_header)
        if key_in_query is not None:
            pulumi.set(__self__, "key_in_query", key_in_query)
        if key_names is not None:
            pulumi.set(__self__, "key_names", key_names)
        if realm is not None:
            pulumi.set(__self__, "realm", realm)
        if run_on_preflight is not None:
            pulumi.set(__self__, "run_on_preflight", run_on_preflight)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[pulumi.Input[str]]:
        """
        An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request will fail with an authentication failure `4xx`.
        """
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter(name="hideCredentials")
    def hide_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value telling the plugin to show or hide the credential from the upstream service. If `true`, the plugin strips the credential from the request.
        """
        return pulumi.get(self, "hide_credentials")

    @hide_credentials.setter
    def hide_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_credentials", value)

    @property
    @pulumi.getter(name="keyInBody")
    def key_in_body(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled, the plugin reads the request body. Supported MIME types: `application/www-form-urlencoded`, `application/json`, and `multipart/form-data`.
        """
        return pulumi.get(self, "key_in_body")

    @key_in_body.setter
    def key_in_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_in_body", value)

    @property
    @pulumi.getter(name="keyInHeader")
    def key_in_header(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled (default), the plugin reads the request header and tries to find the key in it.
        """
        return pulumi.get(self, "key_in_header")

    @key_in_header.setter
    def key_in_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_in_header", value)

    @property
    @pulumi.getter(name="keyInQuery")
    def key_in_query(self) -> Optional[pulumi.Input[bool]]:
        """
        If enabled (default), the plugin reads the query parameter in the request and tries to find the key in it.
        """
        return pulumi.get(self, "key_in_query")

    @key_in_query.setter
    def key_in_query(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_in_query", value)

    @property
    @pulumi.getter(name="keyNames")
    def key_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Describes an array of parameter names where the plugin will look for a key. The key names may only contain [a-z], [A-Z], [0-9], [_] underscore, and [-] hyphen.
        """
        return pulumi.get(self, "key_names")

    @key_names.setter
    def key_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_names", value)

    @property
    @pulumi.getter
    def realm(self) -> Optional[pulumi.Input[str]]:
        """
        When authentication fails the plugin sends `WWW-Authenticate` header with `realm` attribute value.
        """
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="runOnPreflight")
    def run_on_preflight(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that indicates whether the plugin should run (and try to authenticate) on `OPTIONS` preflight requests. If set to `false`, then `OPTIONS` requests are always allowed.
        """
        return pulumi.get(self, "run_on_preflight")

    @run_on_preflight.setter
    def run_on_preflight(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_preflight", value)


@pulumi.input_type
class GatewayPluginKeyAuthConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginKeyAuthConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginKeyAuthRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginKeyAuthServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOauth2ConfigArgs:
    def __init__(__self__, *,
                 accept_http_if_already_terminated: Optional[pulumi.Input[bool]] = None,
                 anonymous: Optional[pulumi.Input[str]] = None,
                 auth_header_name: Optional[pulumi.Input[str]] = None,
                 enable_authorization_code: Optional[pulumi.Input[bool]] = None,
                 enable_client_credentials: Optional[pulumi.Input[bool]] = None,
                 enable_implicit_grant: Optional[pulumi.Input[bool]] = None,
                 enable_password_grant: Optional[pulumi.Input[bool]] = None,
                 global_credentials: Optional[pulumi.Input[bool]] = None,
                 hide_credentials: Optional[pulumi.Input[bool]] = None,
                 mandatory_scope: Optional[pulumi.Input[bool]] = None,
                 persistent_refresh_token: Optional[pulumi.Input[bool]] = None,
                 pkce: Optional[pulumi.Input[str]] = None,
                 provision_key: Optional[pulumi.Input[str]] = None,
                 refresh_token_ttl: Optional[pulumi.Input[float]] = None,
                 reuse_refresh_token: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_expiration: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[bool] accept_http_if_already_terminated: Accepts HTTPs requests that have already been terminated by a proxy or load balancer.
        :param pulumi.Input[str] anonymous: An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
        :param pulumi.Input[str] auth_header_name: The name of the header that is supposed to carry the access token.
        :param pulumi.Input[bool] enable_authorization_code: An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).
        :param pulumi.Input[bool] enable_client_credentials: An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).
        :param pulumi.Input[bool] enable_implicit_grant: An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).
        :param pulumi.Input[bool] enable_password_grant: An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).
        :param pulumi.Input[bool] global_credentials: An optional boolean value that allows using the same OAuth credentials generated by the plugin with any other service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.
        :param pulumi.Input[bool] hide_credentials: An optional boolean value telling the plugin to show or hide the credential from the upstream service.
        :param pulumi.Input[bool] mandatory_scope: An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.
        :param pulumi.Input[str] pkce: Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin. must be one of ["none", "lax", "strict"]
        :param pulumi.Input[str] provision_key: The unique key the plugin has generated when it has been added to the Service.
        :param pulumi.Input[float] refresh_token_ttl: Time-to-live value for data
        :param pulumi.Input[bool] reuse_refresh_token: An optional boolean value that indicates whether an OAuth refresh token is reused when refreshing an access token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: Describes an array of scope names that will be available to the end user. If `mandatory_scope` is set to `true`, then `scopes` are required.
        :param pulumi.Input[float] token_expiration: An optional integer value telling the plugin how many seconds a token should last, after which the client will need to refresh the token. Set to `0` to disable the expiration.
        """
        if accept_http_if_already_terminated is not None:
            pulumi.set(__self__, "accept_http_if_already_terminated", accept_http_if_already_terminated)
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if auth_header_name is not None:
            pulumi.set(__self__, "auth_header_name", auth_header_name)
        if enable_authorization_code is not None:
            pulumi.set(__self__, "enable_authorization_code", enable_authorization_code)
        if enable_client_credentials is not None:
            pulumi.set(__self__, "enable_client_credentials", enable_client_credentials)
        if enable_implicit_grant is not None:
            pulumi.set(__self__, "enable_implicit_grant", enable_implicit_grant)
        if enable_password_grant is not None:
            pulumi.set(__self__, "enable_password_grant", enable_password_grant)
        if global_credentials is not None:
            pulumi.set(__self__, "global_credentials", global_credentials)
        if hide_credentials is not None:
            pulumi.set(__self__, "hide_credentials", hide_credentials)
        if mandatory_scope is not None:
            pulumi.set(__self__, "mandatory_scope", mandatory_scope)
        if persistent_refresh_token is not None:
            pulumi.set(__self__, "persistent_refresh_token", persistent_refresh_token)
        if pkce is not None:
            pulumi.set(__self__, "pkce", pkce)
        if provision_key is not None:
            pulumi.set(__self__, "provision_key", provision_key)
        if refresh_token_ttl is not None:
            pulumi.set(__self__, "refresh_token_ttl", refresh_token_ttl)
        if reuse_refresh_token is not None:
            pulumi.set(__self__, "reuse_refresh_token", reuse_refresh_token)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if token_expiration is not None:
            pulumi.set(__self__, "token_expiration", token_expiration)

    @property
    @pulumi.getter(name="acceptHttpIfAlreadyTerminated")
    def accept_http_if_already_terminated(self) -> Optional[pulumi.Input[bool]]:
        """
        Accepts HTTPs requests that have already been terminated by a proxy or load balancer.
        """
        return pulumi.get(self, "accept_http_if_already_terminated")

    @accept_http_if_already_terminated.setter
    def accept_http_if_already_terminated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_http_if_already_terminated", value)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[pulumi.Input[str]]:
        """
        An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
        """
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter(name="authHeaderName")
    def auth_header_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the header that is supposed to carry the access token.
        """
        return pulumi.get(self, "auth_header_name")

    @auth_header_name.setter
    def auth_header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_header_name", value)

    @property
    @pulumi.getter(name="enableAuthorizationCode")
    def enable_authorization_code(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).
        """
        return pulumi.get(self, "enable_authorization_code")

    @enable_authorization_code.setter
    def enable_authorization_code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_authorization_code", value)

    @property
    @pulumi.getter(name="enableClientCredentials")
    def enable_client_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).
        """
        return pulumi.get(self, "enable_client_credentials")

    @enable_client_credentials.setter
    def enable_client_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_client_credentials", value)

    @property
    @pulumi.getter(name="enableImplicitGrant")
    def enable_implicit_grant(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).
        """
        return pulumi.get(self, "enable_implicit_grant")

    @enable_implicit_grant.setter
    def enable_implicit_grant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_implicit_grant", value)

    @property
    @pulumi.getter(name="enablePasswordGrant")
    def enable_password_grant(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).
        """
        return pulumi.get(self, "enable_password_grant")

    @enable_password_grant.setter
    def enable_password_grant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_password_grant", value)

    @property
    @pulumi.getter(name="globalCredentials")
    def global_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value that allows using the same OAuth credentials generated by the plugin with any other service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.
        """
        return pulumi.get(self, "global_credentials")

    @global_credentials.setter
    def global_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_credentials", value)

    @property
    @pulumi.getter(name="hideCredentials")
    def hide_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value telling the plugin to show or hide the credential from the upstream service.
        """
        return pulumi.get(self, "hide_credentials")

    @hide_credentials.setter
    def hide_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_credentials", value)

    @property
    @pulumi.getter(name="mandatoryScope")
    def mandatory_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.
        """
        return pulumi.get(self, "mandatory_scope")

    @mandatory_scope.setter
    def mandatory_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mandatory_scope", value)

    @property
    @pulumi.getter(name="persistentRefreshToken")
    def persistent_refresh_token(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "persistent_refresh_token")

    @persistent_refresh_token.setter
    def persistent_refresh_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persistent_refresh_token", value)

    @property
    @pulumi.getter
    def pkce(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin. must be one of ["none", "lax", "strict"]
        """
        return pulumi.get(self, "pkce")

    @pkce.setter
    def pkce(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pkce", value)

    @property
    @pulumi.getter(name="provisionKey")
    def provision_key(self) -> Optional[pulumi.Input[str]]:
        """
        The unique key the plugin has generated when it has been added to the Service.
        """
        return pulumi.get(self, "provision_key")

    @provision_key.setter
    def provision_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "provision_key", value)

    @property
    @pulumi.getter(name="refreshTokenTtl")
    def refresh_token_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        Time-to-live value for data
        """
        return pulumi.get(self, "refresh_token_ttl")

    @refresh_token_ttl.setter
    def refresh_token_ttl(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "refresh_token_ttl", value)

    @property
    @pulumi.getter(name="reuseRefreshToken")
    def reuse_refresh_token(self) -> Optional[pulumi.Input[bool]]:
        """
        An optional boolean value that indicates whether an OAuth refresh token is reused when refreshing an access token.
        """
        return pulumi.get(self, "reuse_refresh_token")

    @reuse_refresh_token.setter
    def reuse_refresh_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse_refresh_token", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Describes an array of scope names that will be available to the end user. If `mandatory_scope` is set to `true`, then `scopes` are required.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="tokenExpiration")
    def token_expiration(self) -> Optional[pulumi.Input[float]]:
        """
        An optional integer value telling the plugin how many seconds a token should last, after which the client will need to refresh the token. Set to `0` to disable the expiration.
        """
        return pulumi.get(self, "token_expiration")

    @token_expiration.setter
    def token_expiration(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "token_expiration", value)


@pulumi.input_type
class GatewayPluginOauth2ConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOauth2ConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOauth2RouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOauth2ServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpenidConnectConfigArgs:
    def __init__(__self__, *,
                 anonymous: Optional[pulumi.Input[str]] = None,
                 audience_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 audience_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auth_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authenticated_groups_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorization_cookie_domain: Optional[pulumi.Input[str]] = None,
                 authorization_cookie_http_only: Optional[pulumi.Input[bool]] = None,
                 authorization_cookie_name: Optional[pulumi.Input[str]] = None,
                 authorization_cookie_path: Optional[pulumi.Input[str]] = None,
                 authorization_cookie_same_site: Optional[pulumi.Input[str]] = None,
                 authorization_cookie_secure: Optional[pulumi.Input[bool]] = None,
                 authorization_endpoint: Optional[pulumi.Input[str]] = None,
                 authorization_query_args_clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorization_query_args_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorization_query_args_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 authorization_rolling_timeout: Optional[pulumi.Input[float]] = None,
                 bearer_token_cookie_name: Optional[pulumi.Input[str]] = None,
                 bearer_token_param_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 by_username_ignore_case: Optional[pulumi.Input[bool]] = None,
                 cache_introspection: Optional[pulumi.Input[bool]] = None,
                 cache_token_exchange: Optional[pulumi.Input[bool]] = None,
                 cache_tokens: Optional[pulumi.Input[bool]] = None,
                 cache_tokens_salt: Optional[pulumi.Input[str]] = None,
                 cache_ttl: Optional[pulumi.Input[float]] = None,
                 cache_ttl_max: Optional[pulumi.Input[float]] = None,
                 cache_ttl_min: Optional[pulumi.Input[float]] = None,
                 cache_ttl_neg: Optional[pulumi.Input[float]] = None,
                 cache_ttl_resurrect: Optional[pulumi.Input[float]] = None,
                 cache_user_info: Optional[pulumi.Input[bool]] = None,
                 client_algs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_arg: Optional[pulumi.Input[str]] = None,
                 client_auths: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_credentials_param_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_jwks: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigClientJwkArgs']]]] = None,
                 client_secrets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 consumer_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 consumer_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 consumer_optional: Optional[pulumi.Input[bool]] = None,
                 credential_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 disable_sessions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 discovery_headers_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 discovery_headers_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 display_errors: Optional[pulumi.Input[bool]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 downstream_access_token_header: Optional[pulumi.Input[str]] = None,
                 downstream_access_token_jwk_header: Optional[pulumi.Input[str]] = None,
                 downstream_headers_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 downstream_headers_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 downstream_id_token_header: Optional[pulumi.Input[str]] = None,
                 downstream_id_token_jwk_header: Optional[pulumi.Input[str]] = None,
                 downstream_introspection_header: Optional[pulumi.Input[str]] = None,
                 downstream_introspection_jwt_header: Optional[pulumi.Input[str]] = None,
                 downstream_refresh_token_header: Optional[pulumi.Input[str]] = None,
                 downstream_session_id_header: Optional[pulumi.Input[str]] = None,
                 downstream_user_info_header: Optional[pulumi.Input[str]] = None,
                 downstream_user_info_jwt_header: Optional[pulumi.Input[str]] = None,
                 dpop_proof_lifetime: Optional[pulumi.Input[float]] = None,
                 dpop_use_nonce: Optional[pulumi.Input[bool]] = None,
                 enable_hs_signatures: Optional[pulumi.Input[bool]] = None,
                 end_session_endpoint: Optional[pulumi.Input[str]] = None,
                 expose_error_code: Optional[pulumi.Input[bool]] = None,
                 extra_jwks_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 forbidden_destroy_session: Optional[pulumi.Input[bool]] = None,
                 forbidden_error_message: Optional[pulumi.Input[str]] = None,
                 forbidden_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hide_credentials: Optional[pulumi.Input[bool]] = None,
                 http_proxy: Optional[pulumi.Input[str]] = None,
                 http_proxy_authorization: Optional[pulumi.Input[str]] = None,
                 http_version: Optional[pulumi.Input[float]] = None,
                 https_proxy: Optional[pulumi.Input[str]] = None,
                 https_proxy_authorization: Optional[pulumi.Input[str]] = None,
                 id_token_param_name: Optional[pulumi.Input[str]] = None,
                 id_token_param_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_signatures: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 introspect_jwt_tokens: Optional[pulumi.Input[bool]] = None,
                 introspection_accept: Optional[pulumi.Input[str]] = None,
                 introspection_check_active: Optional[pulumi.Input[bool]] = None,
                 introspection_endpoint: Optional[pulumi.Input[str]] = None,
                 introspection_endpoint_auth_method: Optional[pulumi.Input[str]] = None,
                 introspection_headers_clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 introspection_headers_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 introspection_headers_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 introspection_hint: Optional[pulumi.Input[str]] = None,
                 introspection_post_args_clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 introspection_post_args_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 introspection_post_args_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 introspection_token_param_name: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 issuers_alloweds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jwt_session_claim: Optional[pulumi.Input[str]] = None,
                 jwt_session_cookie: Optional[pulumi.Input[str]] = None,
                 keepalive: Optional[pulumi.Input[bool]] = None,
                 leeway: Optional[pulumi.Input[float]] = None,
                 login_action: Optional[pulumi.Input[str]] = None,
                 login_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_redirect_mode: Optional[pulumi.Input[str]] = None,
                 login_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 login_tokens: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logout_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logout_post_arg: Optional[pulumi.Input[str]] = None,
                 logout_query_arg: Optional[pulumi.Input[str]] = None,
                 logout_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logout_revoke: Optional[pulumi.Input[bool]] = None,
                 logout_revoke_access_token: Optional[pulumi.Input[bool]] = None,
                 logout_revoke_refresh_token: Optional[pulumi.Input[bool]] = None,
                 logout_uri_suffix: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[float]] = None,
                 mtls_introspection_endpoint: Optional[pulumi.Input[str]] = None,
                 mtls_revocation_endpoint: Optional[pulumi.Input[str]] = None,
                 mtls_token_endpoint: Optional[pulumi.Input[str]] = None,
                 no_proxy: Optional[pulumi.Input[str]] = None,
                 password_param_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 preserve_query_args: Optional[pulumi.Input[bool]] = None,
                 proof_of_possession_auth_methods_validation: Optional[pulumi.Input[bool]] = None,
                 proof_of_possession_dpop: Optional[pulumi.Input[str]] = None,
                 proof_of_possession_mtls: Optional[pulumi.Input[str]] = None,
                 pushed_authorization_request_endpoint: Optional[pulumi.Input[str]] = None,
                 pushed_authorization_request_endpoint_auth_method: Optional[pulumi.Input[str]] = None,
                 redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rediscovery_lifetime: Optional[pulumi.Input[float]] = None,
                 refresh_token_param_name: Optional[pulumi.Input[str]] = None,
                 refresh_token_param_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 refresh_tokens: Optional[pulumi.Input[bool]] = None,
                 require_proof_key_for_code_exchange: Optional[pulumi.Input[bool]] = None,
                 require_pushed_authorization_requests: Optional[pulumi.Input[bool]] = None,
                 require_signed_request_object: Optional[pulumi.Input[bool]] = None,
                 resolve_distributed_claims: Optional[pulumi.Input[bool]] = None,
                 response_mode: Optional[pulumi.Input[str]] = None,
                 response_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 reverify: Optional[pulumi.Input[bool]] = None,
                 revocation_endpoint: Optional[pulumi.Input[str]] = None,
                 revocation_endpoint_auth_method: Optional[pulumi.Input[str]] = None,
                 revocation_token_param_name: Optional[pulumi.Input[str]] = None,
                 roles_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 roles_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 run_on_preflight: Optional[pulumi.Input[bool]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scopes_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scopes_requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search_user_info: Optional[pulumi.Input[bool]] = None,
                 session_absolute_timeout: Optional[pulumi.Input[float]] = None,
                 session_audience: Optional[pulumi.Input[str]] = None,
                 session_cookie_domain: Optional[pulumi.Input[str]] = None,
                 session_cookie_http_only: Optional[pulumi.Input[bool]] = None,
                 session_cookie_name: Optional[pulumi.Input[str]] = None,
                 session_cookie_path: Optional[pulumi.Input[str]] = None,
                 session_cookie_same_site: Optional[pulumi.Input[str]] = None,
                 session_cookie_secure: Optional[pulumi.Input[bool]] = None,
                 session_enforce_same_subject: Optional[pulumi.Input[bool]] = None,
                 session_hash_storage_key: Optional[pulumi.Input[bool]] = None,
                 session_hash_subject: Optional[pulumi.Input[bool]] = None,
                 session_idling_timeout: Optional[pulumi.Input[float]] = None,
                 session_memcached_host: Optional[pulumi.Input[str]] = None,
                 session_memcached_port: Optional[pulumi.Input[int]] = None,
                 session_memcached_prefix: Optional[pulumi.Input[str]] = None,
                 session_memcached_socket: Optional[pulumi.Input[str]] = None,
                 session_redis_cluster_max_redirections: Optional[pulumi.Input[int]] = None,
                 session_redis_cluster_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigSessionRedisClusterNodeArgs']]]] = None,
                 session_redis_connect_timeout: Optional[pulumi.Input[int]] = None,
                 session_redis_host: Optional[pulumi.Input[str]] = None,
                 session_redis_password: Optional[pulumi.Input[str]] = None,
                 session_redis_port: Optional[pulumi.Input[int]] = None,
                 session_redis_prefix: Optional[pulumi.Input[str]] = None,
                 session_redis_read_timeout: Optional[pulumi.Input[int]] = None,
                 session_redis_send_timeout: Optional[pulumi.Input[int]] = None,
                 session_redis_server_name: Optional[pulumi.Input[str]] = None,
                 session_redis_socket: Optional[pulumi.Input[str]] = None,
                 session_redis_ssl: Optional[pulumi.Input[bool]] = None,
                 session_redis_ssl_verify: Optional[pulumi.Input[bool]] = None,
                 session_redis_username: Optional[pulumi.Input[str]] = None,
                 session_remember: Optional[pulumi.Input[bool]] = None,
                 session_remember_absolute_timeout: Optional[pulumi.Input[float]] = None,
                 session_remember_cookie_name: Optional[pulumi.Input[str]] = None,
                 session_remember_rolling_timeout: Optional[pulumi.Input[float]] = None,
                 session_request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 session_response_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 session_rolling_timeout: Optional[pulumi.Input[float]] = None,
                 session_secret: Optional[pulumi.Input[str]] = None,
                 session_storage: Optional[pulumi.Input[str]] = None,
                 session_store_metadata: Optional[pulumi.Input[bool]] = None,
                 ssl_verify: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[float]] = None,
                 tls_client_auth_cert_id: Optional[pulumi.Input[str]] = None,
                 tls_client_auth_ssl_verify: Optional[pulumi.Input[bool]] = None,
                 token_cache_key_include_scope: Optional[pulumi.Input[bool]] = None,
                 token_endpoint: Optional[pulumi.Input[str]] = None,
                 token_endpoint_auth_method: Optional[pulumi.Input[str]] = None,
                 token_exchange_endpoint: Optional[pulumi.Input[str]] = None,
                 token_headers_clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_headers_grants: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_headers_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_headers_prefix: Optional[pulumi.Input[str]] = None,
                 token_headers_replays: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_headers_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_post_args_clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_post_args_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_post_args_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unauthorized_destroy_session: Optional[pulumi.Input[bool]] = None,
                 unauthorized_error_message: Optional[pulumi.Input[str]] = None,
                 unauthorized_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 unexpected_redirect_uris: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upstream_access_token_header: Optional[pulumi.Input[str]] = None,
                 upstream_access_token_jwk_header: Optional[pulumi.Input[str]] = None,
                 upstream_headers_claims: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upstream_headers_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 upstream_id_token_header: Optional[pulumi.Input[str]] = None,
                 upstream_id_token_jwk_header: Optional[pulumi.Input[str]] = None,
                 upstream_introspection_header: Optional[pulumi.Input[str]] = None,
                 upstream_introspection_jwt_header: Optional[pulumi.Input[str]] = None,
                 upstream_refresh_token_header: Optional[pulumi.Input[str]] = None,
                 upstream_session_id_header: Optional[pulumi.Input[str]] = None,
                 upstream_user_info_header: Optional[pulumi.Input[str]] = None,
                 upstream_user_info_jwt_header: Optional[pulumi.Input[str]] = None,
                 userinfo_accept: Optional[pulumi.Input[str]] = None,
                 userinfo_endpoint: Optional[pulumi.Input[str]] = None,
                 userinfo_headers_clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 userinfo_headers_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 userinfo_headers_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 userinfo_query_args_clients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 userinfo_query_args_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 userinfo_query_args_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 using_pseudo_issuer: Optional[pulumi.Input[bool]] = None,
                 verify_claims: Optional[pulumi.Input[bool]] = None,
                 verify_nonce: Optional[pulumi.Input[bool]] = None,
                 verify_parameters: Optional[pulumi.Input[bool]] = None,
                 verify_signature: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] anonymous: An optional string (consumer UUID or username) value that functions as an “anonymous” consumer if authentication fails. If empty (default null), requests that fail authentication will return a `4xx` HTTP status code. This value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audience_claims: The claim that contains the audience. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audience_requireds: The audiences (`audience_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] audiences: The audience passed to the authorization endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] auth_methods: Types of credentials/grants to enable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authenticated_groups_claims: The claim that contains authenticated groups. This setting can be used together with ACL plugin, but it also enables IdP managed groups with other applications and integrations. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[str] authorization_cookie_domain: The authorization cookie Domain flag.
        :param pulumi.Input[bool] authorization_cookie_http_only: Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        :param pulumi.Input[str] authorization_cookie_name: The authorization cookie name.
        :param pulumi.Input[str] authorization_cookie_path: The authorization cookie Path flag.
        :param pulumi.Input[str] authorization_cookie_same_site: Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        :param pulumi.Input[bool] authorization_cookie_secure: Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        :param pulumi.Input[str] authorization_endpoint: The authorization endpoint. If set it overrides the value in `authorization_endpoint` returned by the discovery endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authorization_query_args_clients: Extra query arguments passed from the client to the authorization endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authorization_query_args_names: Extra query argument names passed to the authorization endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] authorization_query_args_values: Extra query argument values passed to the authorization endpoint.
        :param pulumi.Input[float] authorization_rolling_timeout: Specifies how long the session used for the authorization code flow can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.
        :param pulumi.Input[str] bearer_token_cookie_name: The name of the cookie in which the bearer token is passed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] bearer_token_param_types: Where to look for the bearer token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body - `cookie`: search the HTTP request cookies specified with `config.bearer_token_cookie_name`.
        :param pulumi.Input[bool] by_username_ignore_case: If `consumer_by` is set to `username`, specify whether `username` can match consumers case-insensitively.
        :param pulumi.Input[bool] cache_introspection: Cache the introspection endpoint requests.
        :param pulumi.Input[bool] cache_token_exchange: Cache the token exchange endpoint requests.
        :param pulumi.Input[bool] cache_tokens: Cache the token endpoint requests.
        :param pulumi.Input[str] cache_tokens_salt: Salt used for generating the cache key that is used for caching the token endpoint requests.
        :param pulumi.Input[float] cache_ttl: The default cache ttl in seconds that is used in case the cached object does not specify the expiry.
        :param pulumi.Input[float] cache_ttl_max: The maximum cache ttl in seconds (enforced).
        :param pulumi.Input[float] cache_ttl_min: The minimum cache ttl in seconds (enforced).
        :param pulumi.Input[float] cache_ttl_neg: The negative cache ttl in seconds.
        :param pulumi.Input[float] cache_ttl_resurrect: The resurrection ttl in seconds.
        :param pulumi.Input[bool] cache_user_info: Cache the user info requests.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_algs: The algorithm to use for client*secret*jwt (only HS***) or private*key*jwt authentication.
        :param pulumi.Input[str] client_arg: The client to use for this request (the selection is made with a request parameter with the same name).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_auths: The default OpenID Connect client authentication method is 'client*secret*basic' (using 'Authorization: Basic' header), 'client*secret*post' (credentials in body), 'client*secret*jwt' (signed client assertion in body), 'private*key*jwt' (private key-signed assertion), 'tls*client*auth' (client certificate), 'self*signed*tls*client*auth' (self-signed client certificate), and 'none' (no authentication).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_credentials_param_types: Where to look for the client credentials: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search from the HTTP request body.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_ids: The client id(s) that the plugin uses when it calls authenticated endpoints on the identity provider.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigClientJwkArgs']]] client_jwks: The JWK used for the private*key*jwt authentication.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] client_secrets: The client secret.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] consumer_bies: Consumer fields used for mapping: - `id`: try to find the matching Consumer by `id` - `username`: try to find the matching Consumer by `username` - `custom_id`: try to find the matching Consumer by `custom_id`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] consumer_claims: The claim used for consumer mapping. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[bool] consumer_optional: Do not terminate the request if consumer mapping fails.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] credential_claims: The claim used to derive virtual credentials (e.g. to be consumed by the rate-limiting plugin), in case the consumer mapping is not used. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] disable_sessions: Disable issuing the session cookie with the specified grants.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] discovery_headers_names: Extra header names passed to the discovery endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] discovery_headers_values: Extra header values passed to the discovery endpoint.
        :param pulumi.Input[bool] display_errors: Display errors on failure responses.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: The allowed values for the `hd` claim.
        :param pulumi.Input[str] downstream_access_token_header: The downstream access token header.
        :param pulumi.Input[str] downstream_access_token_jwk_header: The downstream access token JWK header.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] downstream_headers_claims: The downstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] downstream_headers_names: The downstream header names for the claim values.
        :param pulumi.Input[str] downstream_id_token_header: The downstream id token header.
        :param pulumi.Input[str] downstream_id_token_jwk_header: The downstream id token JWK header.
        :param pulumi.Input[str] downstream_introspection_header: The downstream introspection header.
        :param pulumi.Input[str] downstream_introspection_jwt_header: The downstream introspection JWT header.
        :param pulumi.Input[str] downstream_refresh_token_header: The downstream refresh token header.
        :param pulumi.Input[str] downstream_session_id_header: The downstream session id header.
        :param pulumi.Input[str] downstream_user_info_header: The downstream user info header.
        :param pulumi.Input[str] downstream_user_info_jwt_header: The downstream user info JWT header (in case the user info returns a JWT response).
        :param pulumi.Input[float] dpop_proof_lifetime: Specifies the lifetime in seconds of the DPoP proof. It determines how long the same proof can be used after creation. The creation time is determined by the nonce creation time if a nonce is used, and the iat claim otherwise.
        :param pulumi.Input[bool] dpop_use_nonce: Specifies whether to challenge the client with a nonce value for DPoP proof. When enabled it will also be used to calculate the DPoP proof lifetime.
        :param pulumi.Input[bool] enable_hs_signatures: Enable shared secret, for example, HS256, signatures (when disabled they will not be accepted).
        :param pulumi.Input[str] end_session_endpoint: The end session endpoint. If set it overrides the value in `end_session_endpoint` returned by the discovery endpoint.
        :param pulumi.Input[bool] expose_error_code: Specifies whether to expose the error code header, as defined in RFC 6750. If an authorization request fails, this header is sent in the response. Set to `false` to disable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extra_jwks_uris: JWKS URIs whose public keys are trusted (in addition to the keys found with the discovery).
        :param pulumi.Input[bool] forbidden_destroy_session: Destroy any active session for the forbidden requests.
        :param pulumi.Input[str] forbidden_error_message: The error message for the forbidden requests (when not using the redirection).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] forbidden_redirect_uris: Where to redirect the client on forbidden requests.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups_claims: The claim that contains the groups. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups_requireds: The groups (`groups_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        :param pulumi.Input[bool] hide_credentials: Remove the credentials used for authentication from the request. If multiple credentials are sent with the same request, the plugin will remove those that were used for successful authentication.
        :param pulumi.Input[str] http_proxy: The HTTP proxy.
        :param pulumi.Input[str] http_proxy_authorization: The HTTP proxy authorization.
        :param pulumi.Input[float] http_version: The HTTP version used for the requests by this plugin: - `1.1`: HTTP 1.1 (the default) - `1.0`: HTTP 1.0.
        :param pulumi.Input[str] https_proxy: The HTTPS proxy.
        :param pulumi.Input[str] https_proxy_authorization: The HTTPS proxy authorization.
        :param pulumi.Input[str] id_token_param_name: The name of the parameter used to pass the id token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_token_param_types: Where to look for the id token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ignore_signatures: Skip the token signature verification on certain grants: - `password`: OAuth password grant - `client_credentials`: OAuth client credentials grant - `authorization_code`: authorization code flow - `refresh_token`: OAuth refresh token grant - `session`: session cookie authentication - `introspection`: OAuth introspection - `userinfo`: OpenID Connect user info endpoint authentication.
        :param pulumi.Input[bool] introspect_jwt_tokens: Specifies whether to introspect the JWT access tokens (can be used to check for revocations).
        :param pulumi.Input[str] introspection_accept: The value of `Accept` header for introspection requests: - `application/json`: introspection response as JSON - `application/token-introspection+jwt`: introspection response as JWT (from the current IETF draft document) - `application/jwt`: introspection response as JWT (from the obsolete IETF draft document). must be one of ["application/json", "application/token-introspection+jwt", "application/jwt"]
        :param pulumi.Input[bool] introspection_check_active: Check that the introspection response has an `active` claim with a value of `true`.
        :param pulumi.Input[str] introspection_endpoint: The introspection endpoint. If set it overrides the value in `introspection_endpoint` returned by the discovery endpoint.
        :param pulumi.Input[str] introspection_endpoint_auth_method: The introspection endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client*secret*basic", "client*secret*post", "client*secret*jwt", "private*key*jwt", "tls*client*auth", "self*signed*tls*client*auth", "none"]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] introspection_headers_clients: Extra headers passed from the client to the introspection endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] introspection_headers_names: Extra header names passed to the introspection endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] introspection_headers_values: Extra header values passed to the introspection endpoint.
        :param pulumi.Input[str] introspection_hint: Introspection hint parameter value passed to the introspection endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] introspection_post_args_clients: Extra post arguments passed from the client to the introspection endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] introspection_post_args_names: Extra post argument names passed to the introspection endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] introspection_post_args_values: Extra post argument values passed to the introspection endpoint.
        :param pulumi.Input[str] introspection_token_param_name: Designate token's parameter name for introspection.
        :param pulumi.Input[str] issuer: The discovery endpoint (or the issuer identifier). When there is no discovery endpoint, please also configure `config.using_pseudo_issuer=true`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] issuers_alloweds: The issuers allowed to be present in the tokens (`iss` claim).
        :param pulumi.Input[str] jwt_session_claim: The claim to match against the JWT session cookie.
        :param pulumi.Input[str] jwt_session_cookie: The name of the JWT session cookie.
        :param pulumi.Input[bool] keepalive: Use keepalive with the HTTP client.
        :param pulumi.Input[float] leeway: Defines leeway time (in seconds) for `auth_time`, `exp`, `iat`, and `nbf` claims
        :param pulumi.Input[str] login_action: What to do after successful login: - `upstream`: proxy request to upstream service - `response`: terminate request with a response - `redirect`: redirect to a different location. must be one of ["upstream", "response", "redirect"]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] login_methods: Enable login functionality with specified grants.
        :param pulumi.Input[str] login_redirect_mode: Where to place `login_tokens` when using `redirect` `login_action`: - `query`: place tokens in query string - `fragment`: place tokens in url fragment (not readable by servers). must be one of ["query", "fragment"]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] login_redirect_uris: Where to redirect the client when `login_action` is set to `redirect`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] login_tokens: What tokens to include in `response` body or `redirect` query string or fragment: - `id_token`: include id token - `access_token`: include access token - `refresh_token`: include refresh token - `tokens`: include the full token endpoint response - `introspection`: include introspection response.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] logout_methods: The request methods that can activate the logout: - `POST`: HTTP POST method - `GET`: HTTP GET method - `DELETE`: HTTP DELETE method.
        :param pulumi.Input[str] logout_post_arg: The request body argument that activates the logout.
        :param pulumi.Input[str] logout_query_arg: The request query argument that activates the logout.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] logout_redirect_uris: Where to redirect the client after the logout.
        :param pulumi.Input[bool] logout_revoke: Revoke tokens as part of the logout.
        :param pulumi.Input[bool] logout_revoke_access_token: Revoke the access token as part of the logout. Requires `logout_revoke` to be set to `true`.
        :param pulumi.Input[bool] logout_revoke_refresh_token: Revoke the refresh token as part of the logout. Requires `logout_revoke` to be set to `true`.
        :param pulumi.Input[str] logout_uri_suffix: The request URI suffix that activates the logout.
        :param pulumi.Input[float] max_age: The maximum age (in seconds) compared to the `auth_time` claim.
        :param pulumi.Input[str] mtls_introspection_endpoint: Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        :param pulumi.Input[str] mtls_revocation_endpoint: Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        :param pulumi.Input[str] mtls_token_endpoint: Alias for the token endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        :param pulumi.Input[str] no_proxy: Do not use proxy with these hosts.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] password_param_types: Where to look for the username and password: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        :param pulumi.Input[bool] preserve_query_args: With this parameter, you can preserve request query arguments even when doing authorization code flow.
        :param pulumi.Input[bool] proof_of_possession_auth_methods_validation: If set to true, only the auth_methods that are compatible with Proof of Possession (PoP) can be configured when PoP is enabled. If set to false, all auth_methods will be configurable and PoP checks will be silently skipped for those auth_methods that are not compatible with PoP.
        :param pulumi.Input[str] proof_of_possession_dpop: Enable Demonstrating Proof-of-Possession (DPoP). If set to strict, all request are verified despite the presence of the DPoP key claim (cnf.jkt). If set to optional, only tokens bound with DPoP's key are verified with the proof. must be one of ["off", "strict", "optional"]
        :param pulumi.Input[str] proof_of_possession_mtls: Enable mtls proof of possession. If set to strict, all tokens (from supported auth_methods: bearer, introspection, and session granted with bearer or introspection) are verified, if set to optional, only tokens that contain the certificate hash claim are verified. If the verification fails, the request will be rejected with 401. must be one of ["off", "strict", "optional"]
        :param pulumi.Input[str] pushed_authorization_request_endpoint: The pushed authorization endpoint. If set it overrides the value in `pushed_authorization_request_endpoint` returned by the discovery endpoint.
        :param pulumi.Input[str] pushed_authorization_request_endpoint_auth_method: The pushed authorization request endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] redirect_uris: The redirect URI passed to the authorization and token endpoints.
        :param pulumi.Input[float] rediscovery_lifetime: Specifies how long (in seconds) the plugin waits between discovery attempts. Discovery is still triggered on an as-needed basis.
        :param pulumi.Input[str] refresh_token_param_name: The name of the parameter used to pass the refresh token.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] refresh_token_param_types: Where to look for the refresh token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        :param pulumi.Input[bool] refresh_tokens: Specifies whether the plugin should try to refresh (soon to be) expired access tokens if the plugin has a `refresh_token` available.
        :param pulumi.Input[bool] require_proof_key_for_code_exchange: Forcibly enable or disable the proof key for code exchange. When not set the value is determined through the discovery using the value of `code_challenge_methods_supported`, and enabled automatically (in case the `code_challenge_methods_supported` is missing, the PKCE will not be enabled).
        :param pulumi.Input[bool] require_pushed_authorization_requests: Forcibly enable or disable the pushed authorization requests. When not set the value is determined through the discovery using the value of `require_pushed_authorization_requests` (which defaults to `false`).
        :param pulumi.Input[bool] require_signed_request_object: Forcibly enable or disable the usage of signed request object on authorization or pushed authorization endpoint. When not set the value is determined through the discovery using the value of `require_signed_request_object`, and enabled automatically (in case the `require_signed_request_object` is missing, the feature will not be enabled).
        :param pulumi.Input[bool] resolve_distributed_claims: Distributed claims are represented by the `_claim_names` and `_claim_sources` members of the JSON object containing the claims. If this parameter is set to `true`, the plugin explicitly resolves these distributed claims.
        :param pulumi.Input[str] response_mode: Response mode passed to the authorization endpoint: - `query`: for parameters in query string - `form_post`: for parameters in request body - `fragment`: for parameters in uri fragment (rarely useful as the plugin itself cannot read it) - `query.jwt`, `form_post.jwt`, `fragment.jwt`: similar to `query`, `form_post` and `fragment` but the parameters are encoded in a JWT - `jwt`: shortcut that indicates the default encoding for the requested response type. must be one of ["query", "form_post", "fragment", "query.jwt", "form_post.jwt", "fragment.jwt", "jwt"]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] response_types: The response type passed to the authorization endpoint.
        :param pulumi.Input[bool] reverify: Specifies whether to always verify tokens stored in the session.
        :param pulumi.Input[str] revocation_endpoint: The revocation endpoint. If set it overrides the value in `revocation_endpoint` returned by the discovery endpoint.
        :param pulumi.Input[str] revocation_endpoint_auth_method: The revocation endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        :param pulumi.Input[str] revocation_token_param_name: Designate token's parameter name for revocation.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles_claims: The claim that contains the roles. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles_requireds: The roles (`roles_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        :param pulumi.Input[bool] run_on_preflight: Specifies whether to run this plugin on pre-flight (`OPTIONS`) requests.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: The scopes passed to the authorization and token endpoints.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes_claims: The claim that contains the scopes. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes_requireds: The scopes (`scopes_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        :param pulumi.Input[bool] search_user_info: Specify whether to use the user info endpoint to get additional claims for consumer mapping, credential mapping, authenticated groups, and upstream and downstream headers.
        :param pulumi.Input[float] session_absolute_timeout: Limits how long the session can be renewed in seconds, until re-authentication is required. 0 disables the checks.
        :param pulumi.Input[str] session_audience: The session audience, which is the intended target application. For example `"my-application"`.
        :param pulumi.Input[str] session_cookie_domain: The session cookie Domain flag.
        :param pulumi.Input[bool] session_cookie_http_only: Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        :param pulumi.Input[str] session_cookie_name: The session cookie name.
        :param pulumi.Input[str] session_cookie_path: The session cookie Path flag.
        :param pulumi.Input[str] session_cookie_same_site: Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        :param pulumi.Input[bool] session_cookie_secure: Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        :param pulumi.Input[bool] session_enforce_same_subject: When set to `true`, audiences are forced to share the same subject.
        :param pulumi.Input[bool] session_hash_storage_key: When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.
        :param pulumi.Input[bool] session_hash_subject: When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.
        :param pulumi.Input[float] session_idling_timeout: Specifies how long the session can be inactive until it is considered invalid in seconds. 0 disables the checks and touching.
        :param pulumi.Input[str] session_memcached_host: The memcached host.
        :param pulumi.Input[int] session_memcached_port: The memcached port.
        :param pulumi.Input[str] session_memcached_prefix: The memcached session key prefix.
        :param pulumi.Input[str] session_memcached_socket: The memcached unix socket path.
        :param pulumi.Input[int] session_redis_cluster_max_redirections: The Redis cluster maximum redirects.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigSessionRedisClusterNodeArgs']]] session_redis_cluster_nodes: The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.
        :param pulumi.Input[int] session_redis_connect_timeout: Session redis connection timeout in milliseconds.
        :param pulumi.Input[str] session_redis_host: The Redis host.
        :param pulumi.Input[str] session_redis_password: Password to use for Redis connection when the `redis` session storage is defined. If undefined, no AUTH commands are sent to Redis.
        :param pulumi.Input[int] session_redis_port: The Redis port.
        :param pulumi.Input[str] session_redis_prefix: The Redis session key prefix.
        :param pulumi.Input[int] session_redis_read_timeout: Session redis read timeout in milliseconds.
        :param pulumi.Input[int] session_redis_send_timeout: Session redis send timeout in milliseconds.
        :param pulumi.Input[str] session_redis_server_name: The SNI used for connecting the Redis server.
        :param pulumi.Input[str] session_redis_socket: The Redis unix socket path.
        :param pulumi.Input[bool] session_redis_ssl: Use SSL/TLS for Redis connection.
        :param pulumi.Input[bool] session_redis_ssl_verify: Verify identity provider server certificate.
        :param pulumi.Input[str] session_redis_username: Username to use for Redis connection when the `redis` session storage is defined and ACL authentication is desired. If undefined, ACL authentication will not be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        :param pulumi.Input[bool] session_remember: Enables or disables persistent sessions.
        :param pulumi.Input[float] session_remember_absolute_timeout: Limits how long the persistent session can be renewed in seconds, until re-authentication is required. 0 disables the checks.
        :param pulumi.Input[str] session_remember_cookie_name: Persistent session cookie name. Use with the `remember` configuration parameter.
        :param pulumi.Input[float] session_remember_rolling_timeout: Specifies how long the persistent session is considered valid in seconds. 0 disables the checks and rolling.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] session_request_headers: Set of headers to send to upstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ "id", "timeout" ]` will set Session-Id and Session-Timeout request headers.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] session_response_headers: Set of headers to send to downstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ "id", "timeout" ]` will set Session-Id and Session-Timeout response headers.
        :param pulumi.Input[float] session_rolling_timeout: Specifies how long the session can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.
        :param pulumi.Input[str] session_secret: The session secret.
        :param pulumi.Input[str] session_storage: The session storage for session data: - `cookie`: stores session data with the session cookie (the session cannot be invalidated or revoked without changing session secret, but is stateless, and doesn't require a database) - `memcache`: stores session data in memcached - `redis`: stores session data in Redis. must be one of ["cookie", "memcache", "memcached", "redis"]
        :param pulumi.Input[bool] session_store_metadata: Configures whether or not session metadata should be stored. This metadata includes information about the active sessions for a specific audience belonging to a specific subject.
        :param pulumi.Input[bool] ssl_verify: Verify identity provider server certificate. If set to `true`, the plugin uses the CA certificate set in the `kong.conf` config parameter `lua_ssl_trusted_certificate`.
        :param pulumi.Input[float] timeout: Network IO timeout in milliseconds.
        :param pulumi.Input[str] tls_client_auth_cert_id: ID of the Certificate entity representing the client certificate to use for mTLS client authentication for connections between Kong and the Auth Server.
        :param pulumi.Input[bool] tls_client_auth_ssl_verify: Verify identity provider server certificate during mTLS client authentication.
        :param pulumi.Input[bool] token_cache_key_include_scope: Include the scope in the token cache key, so token with different scopes are considered diffrent tokens.
        :param pulumi.Input[str] token_endpoint: The token endpoint. If set it overrides the value in `token_endpoint` returned by the discovery endpoint.
        :param pulumi.Input[str] token_endpoint_auth_method: The token endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        :param pulumi.Input[str] token_exchange_endpoint: The token exchange endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_headers_clients: Extra headers passed from the client to the token endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_headers_grants: Enable the sending of the token endpoint response headers only with certain grants: - `password`: with OAuth password grant - `client_credentials`: with OAuth client credentials grant - `authorization_code`: with authorization code flow - `refresh_token` with refresh token grant.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_headers_names: Extra header names passed to the token endpoint.
        :param pulumi.Input[str] token_headers_prefix: Add a prefix to the token endpoint response headers before forwarding them to the downstream client.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_headers_replays: The names of token endpoint response headers to forward to the downstream client.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_headers_values: Extra header values passed to the token endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_post_args_clients: Pass extra arguments from the client to the OpenID-Connect plugin. If arguments exist, the client can pass them using: - Query parameters - Request Body - Request Header  This parameter can be used with `scope` values, like this:  `config.token_post_args_client=scope`  In this case, the token would take the `scope` value from the query parameter or from the request body or from the header and send it to the token endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_post_args_names: Extra post argument names passed to the token endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] token_post_args_values: Extra post argument values passed to the token endpoint.
        :param pulumi.Input[bool] unauthorized_destroy_session: Destroy any active session for the unauthorized requests.
        :param pulumi.Input[str] unauthorized_error_message: The error message for the unauthorized requests (when not using the redirection).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] unauthorized_redirect_uris: Where to redirect the client on unauthorized requests.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] unexpected_redirect_uris: Where to redirect the client when unexpected errors happen with the requests.
        :param pulumi.Input[str] upstream_access_token_header: The upstream access token header.
        :param pulumi.Input[str] upstream_access_token_jwk_header: The upstream access token JWK header.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] upstream_headers_claims: The upstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] upstream_headers_names: The upstream header names for the claim values.
        :param pulumi.Input[str] upstream_id_token_header: The upstream id token header.
        :param pulumi.Input[str] upstream_id_token_jwk_header: The upstream id token JWK header.
        :param pulumi.Input[str] upstream_introspection_header: The upstream introspection header.
        :param pulumi.Input[str] upstream_introspection_jwt_header: The upstream introspection JWT header.
        :param pulumi.Input[str] upstream_refresh_token_header: The upstream refresh token header.
        :param pulumi.Input[str] upstream_session_id_header: The upstream session id header.
        :param pulumi.Input[str] upstream_user_info_header: The upstream user info header.
        :param pulumi.Input[str] upstream_user_info_jwt_header: The upstream user info JWT header (in case the user info returns a JWT response).
        :param pulumi.Input[str] userinfo_accept: The value of `Accept` header for user info requests: - `application/json`: user info response as JSON - `application/jwt`: user info response as JWT (from the obsolete IETF draft document). must be one of ["application/json", "application/jwt"]
        :param pulumi.Input[str] userinfo_endpoint: The user info endpoint. If set it overrides the value in `userinfo_endpoint` returned by the discovery endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] userinfo_headers_clients: Extra headers passed from the client to the user info endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] userinfo_headers_names: Extra header names passed to the user info endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] userinfo_headers_values: Extra header values passed to the user info endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] userinfo_query_args_clients: Extra query arguments passed from the client to the user info endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] userinfo_query_args_names: Extra query argument names passed to the user info endpoint.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] userinfo_query_args_values: Extra query argument values passed to the user info endpoint.
        :param pulumi.Input[bool] using_pseudo_issuer: If the plugin uses a pseudo issuer. When set to true, the plugin will not discover the configuration from the issuer URL specified with `config.issuer`.
        :param pulumi.Input[bool] verify_claims: Verify tokens for standard claims.
        :param pulumi.Input[bool] verify_nonce: Verify nonce on authorization code flow.
        :param pulumi.Input[bool] verify_parameters: Verify plugin configuration against discovery.
        :param pulumi.Input[bool] verify_signature: Verify signature of tokens.
        """
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if audience_claims is not None:
            pulumi.set(__self__, "audience_claims", audience_claims)
        if audience_requireds is not None:
            pulumi.set(__self__, "audience_requireds", audience_requireds)
        if audiences is not None:
            pulumi.set(__self__, "audiences", audiences)
        if auth_methods is not None:
            pulumi.set(__self__, "auth_methods", auth_methods)
        if authenticated_groups_claims is not None:
            pulumi.set(__self__, "authenticated_groups_claims", authenticated_groups_claims)
        if authorization_cookie_domain is not None:
            pulumi.set(__self__, "authorization_cookie_domain", authorization_cookie_domain)
        if authorization_cookie_http_only is not None:
            pulumi.set(__self__, "authorization_cookie_http_only", authorization_cookie_http_only)
        if authorization_cookie_name is not None:
            pulumi.set(__self__, "authorization_cookie_name", authorization_cookie_name)
        if authorization_cookie_path is not None:
            pulumi.set(__self__, "authorization_cookie_path", authorization_cookie_path)
        if authorization_cookie_same_site is not None:
            pulumi.set(__self__, "authorization_cookie_same_site", authorization_cookie_same_site)
        if authorization_cookie_secure is not None:
            pulumi.set(__self__, "authorization_cookie_secure", authorization_cookie_secure)
        if authorization_endpoint is not None:
            pulumi.set(__self__, "authorization_endpoint", authorization_endpoint)
        if authorization_query_args_clients is not None:
            pulumi.set(__self__, "authorization_query_args_clients", authorization_query_args_clients)
        if authorization_query_args_names is not None:
            pulumi.set(__self__, "authorization_query_args_names", authorization_query_args_names)
        if authorization_query_args_values is not None:
            pulumi.set(__self__, "authorization_query_args_values", authorization_query_args_values)
        if authorization_rolling_timeout is not None:
            pulumi.set(__self__, "authorization_rolling_timeout", authorization_rolling_timeout)
        if bearer_token_cookie_name is not None:
            pulumi.set(__self__, "bearer_token_cookie_name", bearer_token_cookie_name)
        if bearer_token_param_types is not None:
            pulumi.set(__self__, "bearer_token_param_types", bearer_token_param_types)
        if by_username_ignore_case is not None:
            pulumi.set(__self__, "by_username_ignore_case", by_username_ignore_case)
        if cache_introspection is not None:
            pulumi.set(__self__, "cache_introspection", cache_introspection)
        if cache_token_exchange is not None:
            pulumi.set(__self__, "cache_token_exchange", cache_token_exchange)
        if cache_tokens is not None:
            pulumi.set(__self__, "cache_tokens", cache_tokens)
        if cache_tokens_salt is not None:
            pulumi.set(__self__, "cache_tokens_salt", cache_tokens_salt)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)
        if cache_ttl_max is not None:
            pulumi.set(__self__, "cache_ttl_max", cache_ttl_max)
        if cache_ttl_min is not None:
            pulumi.set(__self__, "cache_ttl_min", cache_ttl_min)
        if cache_ttl_neg is not None:
            pulumi.set(__self__, "cache_ttl_neg", cache_ttl_neg)
        if cache_ttl_resurrect is not None:
            pulumi.set(__self__, "cache_ttl_resurrect", cache_ttl_resurrect)
        if cache_user_info is not None:
            pulumi.set(__self__, "cache_user_info", cache_user_info)
        if client_algs is not None:
            pulumi.set(__self__, "client_algs", client_algs)
        if client_arg is not None:
            pulumi.set(__self__, "client_arg", client_arg)
        if client_auths is not None:
            pulumi.set(__self__, "client_auths", client_auths)
        if client_credentials_param_types is not None:
            pulumi.set(__self__, "client_credentials_param_types", client_credentials_param_types)
        if client_ids is not None:
            pulumi.set(__self__, "client_ids", client_ids)
        if client_jwks is not None:
            pulumi.set(__self__, "client_jwks", client_jwks)
        if client_secrets is not None:
            pulumi.set(__self__, "client_secrets", client_secrets)
        if consumer_bies is not None:
            pulumi.set(__self__, "consumer_bies", consumer_bies)
        if consumer_claims is not None:
            pulumi.set(__self__, "consumer_claims", consumer_claims)
        if consumer_optional is not None:
            pulumi.set(__self__, "consumer_optional", consumer_optional)
        if credential_claims is not None:
            pulumi.set(__self__, "credential_claims", credential_claims)
        if disable_sessions is not None:
            pulumi.set(__self__, "disable_sessions", disable_sessions)
        if discovery_headers_names is not None:
            pulumi.set(__self__, "discovery_headers_names", discovery_headers_names)
        if discovery_headers_values is not None:
            pulumi.set(__self__, "discovery_headers_values", discovery_headers_values)
        if display_errors is not None:
            pulumi.set(__self__, "display_errors", display_errors)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if downstream_access_token_header is not None:
            pulumi.set(__self__, "downstream_access_token_header", downstream_access_token_header)
        if downstream_access_token_jwk_header is not None:
            pulumi.set(__self__, "downstream_access_token_jwk_header", downstream_access_token_jwk_header)
        if downstream_headers_claims is not None:
            pulumi.set(__self__, "downstream_headers_claims", downstream_headers_claims)
        if downstream_headers_names is not None:
            pulumi.set(__self__, "downstream_headers_names", downstream_headers_names)
        if downstream_id_token_header is not None:
            pulumi.set(__self__, "downstream_id_token_header", downstream_id_token_header)
        if downstream_id_token_jwk_header is not None:
            pulumi.set(__self__, "downstream_id_token_jwk_header", downstream_id_token_jwk_header)
        if downstream_introspection_header is not None:
            pulumi.set(__self__, "downstream_introspection_header", downstream_introspection_header)
        if downstream_introspection_jwt_header is not None:
            pulumi.set(__self__, "downstream_introspection_jwt_header", downstream_introspection_jwt_header)
        if downstream_refresh_token_header is not None:
            pulumi.set(__self__, "downstream_refresh_token_header", downstream_refresh_token_header)
        if downstream_session_id_header is not None:
            pulumi.set(__self__, "downstream_session_id_header", downstream_session_id_header)
        if downstream_user_info_header is not None:
            pulumi.set(__self__, "downstream_user_info_header", downstream_user_info_header)
        if downstream_user_info_jwt_header is not None:
            pulumi.set(__self__, "downstream_user_info_jwt_header", downstream_user_info_jwt_header)
        if dpop_proof_lifetime is not None:
            pulumi.set(__self__, "dpop_proof_lifetime", dpop_proof_lifetime)
        if dpop_use_nonce is not None:
            pulumi.set(__self__, "dpop_use_nonce", dpop_use_nonce)
        if enable_hs_signatures is not None:
            pulumi.set(__self__, "enable_hs_signatures", enable_hs_signatures)
        if end_session_endpoint is not None:
            pulumi.set(__self__, "end_session_endpoint", end_session_endpoint)
        if expose_error_code is not None:
            pulumi.set(__self__, "expose_error_code", expose_error_code)
        if extra_jwks_uris is not None:
            pulumi.set(__self__, "extra_jwks_uris", extra_jwks_uris)
        if forbidden_destroy_session is not None:
            pulumi.set(__self__, "forbidden_destroy_session", forbidden_destroy_session)
        if forbidden_error_message is not None:
            pulumi.set(__self__, "forbidden_error_message", forbidden_error_message)
        if forbidden_redirect_uris is not None:
            pulumi.set(__self__, "forbidden_redirect_uris", forbidden_redirect_uris)
        if groups_claims is not None:
            pulumi.set(__self__, "groups_claims", groups_claims)
        if groups_requireds is not None:
            pulumi.set(__self__, "groups_requireds", groups_requireds)
        if hide_credentials is not None:
            pulumi.set(__self__, "hide_credentials", hide_credentials)
        if http_proxy is not None:
            pulumi.set(__self__, "http_proxy", http_proxy)
        if http_proxy_authorization is not None:
            pulumi.set(__self__, "http_proxy_authorization", http_proxy_authorization)
        if http_version is not None:
            pulumi.set(__self__, "http_version", http_version)
        if https_proxy is not None:
            pulumi.set(__self__, "https_proxy", https_proxy)
        if https_proxy_authorization is not None:
            pulumi.set(__self__, "https_proxy_authorization", https_proxy_authorization)
        if id_token_param_name is not None:
            pulumi.set(__self__, "id_token_param_name", id_token_param_name)
        if id_token_param_types is not None:
            pulumi.set(__self__, "id_token_param_types", id_token_param_types)
        if ignore_signatures is not None:
            pulumi.set(__self__, "ignore_signatures", ignore_signatures)
        if introspect_jwt_tokens is not None:
            pulumi.set(__self__, "introspect_jwt_tokens", introspect_jwt_tokens)
        if introspection_accept is not None:
            pulumi.set(__self__, "introspection_accept", introspection_accept)
        if introspection_check_active is not None:
            pulumi.set(__self__, "introspection_check_active", introspection_check_active)
        if introspection_endpoint is not None:
            pulumi.set(__self__, "introspection_endpoint", introspection_endpoint)
        if introspection_endpoint_auth_method is not None:
            pulumi.set(__self__, "introspection_endpoint_auth_method", introspection_endpoint_auth_method)
        if introspection_headers_clients is not None:
            pulumi.set(__self__, "introspection_headers_clients", introspection_headers_clients)
        if introspection_headers_names is not None:
            pulumi.set(__self__, "introspection_headers_names", introspection_headers_names)
        if introspection_headers_values is not None:
            pulumi.set(__self__, "introspection_headers_values", introspection_headers_values)
        if introspection_hint is not None:
            pulumi.set(__self__, "introspection_hint", introspection_hint)
        if introspection_post_args_clients is not None:
            pulumi.set(__self__, "introspection_post_args_clients", introspection_post_args_clients)
        if introspection_post_args_names is not None:
            pulumi.set(__self__, "introspection_post_args_names", introspection_post_args_names)
        if introspection_post_args_values is not None:
            pulumi.set(__self__, "introspection_post_args_values", introspection_post_args_values)
        if introspection_token_param_name is not None:
            pulumi.set(__self__, "introspection_token_param_name", introspection_token_param_name)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if issuers_alloweds is not None:
            pulumi.set(__self__, "issuers_alloweds", issuers_alloweds)
        if jwt_session_claim is not None:
            pulumi.set(__self__, "jwt_session_claim", jwt_session_claim)
        if jwt_session_cookie is not None:
            pulumi.set(__self__, "jwt_session_cookie", jwt_session_cookie)
        if keepalive is not None:
            pulumi.set(__self__, "keepalive", keepalive)
        if leeway is not None:
            pulumi.set(__self__, "leeway", leeway)
        if login_action is not None:
            pulumi.set(__self__, "login_action", login_action)
        if login_methods is not None:
            pulumi.set(__self__, "login_methods", login_methods)
        if login_redirect_mode is not None:
            pulumi.set(__self__, "login_redirect_mode", login_redirect_mode)
        if login_redirect_uris is not None:
            pulumi.set(__self__, "login_redirect_uris", login_redirect_uris)
        if login_tokens is not None:
            pulumi.set(__self__, "login_tokens", login_tokens)
        if logout_methods is not None:
            pulumi.set(__self__, "logout_methods", logout_methods)
        if logout_post_arg is not None:
            pulumi.set(__self__, "logout_post_arg", logout_post_arg)
        if logout_query_arg is not None:
            pulumi.set(__self__, "logout_query_arg", logout_query_arg)
        if logout_redirect_uris is not None:
            pulumi.set(__self__, "logout_redirect_uris", logout_redirect_uris)
        if logout_revoke is not None:
            pulumi.set(__self__, "logout_revoke", logout_revoke)
        if logout_revoke_access_token is not None:
            pulumi.set(__self__, "logout_revoke_access_token", logout_revoke_access_token)
        if logout_revoke_refresh_token is not None:
            pulumi.set(__self__, "logout_revoke_refresh_token", logout_revoke_refresh_token)
        if logout_uri_suffix is not None:
            pulumi.set(__self__, "logout_uri_suffix", logout_uri_suffix)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if mtls_introspection_endpoint is not None:
            pulumi.set(__self__, "mtls_introspection_endpoint", mtls_introspection_endpoint)
        if mtls_revocation_endpoint is not None:
            pulumi.set(__self__, "mtls_revocation_endpoint", mtls_revocation_endpoint)
        if mtls_token_endpoint is not None:
            pulumi.set(__self__, "mtls_token_endpoint", mtls_token_endpoint)
        if no_proxy is not None:
            pulumi.set(__self__, "no_proxy", no_proxy)
        if password_param_types is not None:
            pulumi.set(__self__, "password_param_types", password_param_types)
        if preserve_query_args is not None:
            pulumi.set(__self__, "preserve_query_args", preserve_query_args)
        if proof_of_possession_auth_methods_validation is not None:
            pulumi.set(__self__, "proof_of_possession_auth_methods_validation", proof_of_possession_auth_methods_validation)
        if proof_of_possession_dpop is not None:
            pulumi.set(__self__, "proof_of_possession_dpop", proof_of_possession_dpop)
        if proof_of_possession_mtls is not None:
            pulumi.set(__self__, "proof_of_possession_mtls", proof_of_possession_mtls)
        if pushed_authorization_request_endpoint is not None:
            pulumi.set(__self__, "pushed_authorization_request_endpoint", pushed_authorization_request_endpoint)
        if pushed_authorization_request_endpoint_auth_method is not None:
            pulumi.set(__self__, "pushed_authorization_request_endpoint_auth_method", pushed_authorization_request_endpoint_auth_method)
        if redirect_uris is not None:
            pulumi.set(__self__, "redirect_uris", redirect_uris)
        if rediscovery_lifetime is not None:
            pulumi.set(__self__, "rediscovery_lifetime", rediscovery_lifetime)
        if refresh_token_param_name is not None:
            pulumi.set(__self__, "refresh_token_param_name", refresh_token_param_name)
        if refresh_token_param_types is not None:
            pulumi.set(__self__, "refresh_token_param_types", refresh_token_param_types)
        if refresh_tokens is not None:
            pulumi.set(__self__, "refresh_tokens", refresh_tokens)
        if require_proof_key_for_code_exchange is not None:
            pulumi.set(__self__, "require_proof_key_for_code_exchange", require_proof_key_for_code_exchange)
        if require_pushed_authorization_requests is not None:
            pulumi.set(__self__, "require_pushed_authorization_requests", require_pushed_authorization_requests)
        if require_signed_request_object is not None:
            pulumi.set(__self__, "require_signed_request_object", require_signed_request_object)
        if resolve_distributed_claims is not None:
            pulumi.set(__self__, "resolve_distributed_claims", resolve_distributed_claims)
        if response_mode is not None:
            pulumi.set(__self__, "response_mode", response_mode)
        if response_types is not None:
            pulumi.set(__self__, "response_types", response_types)
        if reverify is not None:
            pulumi.set(__self__, "reverify", reverify)
        if revocation_endpoint is not None:
            pulumi.set(__self__, "revocation_endpoint", revocation_endpoint)
        if revocation_endpoint_auth_method is not None:
            pulumi.set(__self__, "revocation_endpoint_auth_method", revocation_endpoint_auth_method)
        if revocation_token_param_name is not None:
            pulumi.set(__self__, "revocation_token_param_name", revocation_token_param_name)
        if roles_claims is not None:
            pulumi.set(__self__, "roles_claims", roles_claims)
        if roles_requireds is not None:
            pulumi.set(__self__, "roles_requireds", roles_requireds)
        if run_on_preflight is not None:
            pulumi.set(__self__, "run_on_preflight", run_on_preflight)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if scopes_claims is not None:
            pulumi.set(__self__, "scopes_claims", scopes_claims)
        if scopes_requireds is not None:
            pulumi.set(__self__, "scopes_requireds", scopes_requireds)
        if search_user_info is not None:
            pulumi.set(__self__, "search_user_info", search_user_info)
        if session_absolute_timeout is not None:
            pulumi.set(__self__, "session_absolute_timeout", session_absolute_timeout)
        if session_audience is not None:
            pulumi.set(__self__, "session_audience", session_audience)
        if session_cookie_domain is not None:
            pulumi.set(__self__, "session_cookie_domain", session_cookie_domain)
        if session_cookie_http_only is not None:
            pulumi.set(__self__, "session_cookie_http_only", session_cookie_http_only)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_cookie_path is not None:
            pulumi.set(__self__, "session_cookie_path", session_cookie_path)
        if session_cookie_same_site is not None:
            pulumi.set(__self__, "session_cookie_same_site", session_cookie_same_site)
        if session_cookie_secure is not None:
            pulumi.set(__self__, "session_cookie_secure", session_cookie_secure)
        if session_enforce_same_subject is not None:
            pulumi.set(__self__, "session_enforce_same_subject", session_enforce_same_subject)
        if session_hash_storage_key is not None:
            pulumi.set(__self__, "session_hash_storage_key", session_hash_storage_key)
        if session_hash_subject is not None:
            pulumi.set(__self__, "session_hash_subject", session_hash_subject)
        if session_idling_timeout is not None:
            pulumi.set(__self__, "session_idling_timeout", session_idling_timeout)
        if session_memcached_host is not None:
            pulumi.set(__self__, "session_memcached_host", session_memcached_host)
        if session_memcached_port is not None:
            pulumi.set(__self__, "session_memcached_port", session_memcached_port)
        if session_memcached_prefix is not None:
            pulumi.set(__self__, "session_memcached_prefix", session_memcached_prefix)
        if session_memcached_socket is not None:
            pulumi.set(__self__, "session_memcached_socket", session_memcached_socket)
        if session_redis_cluster_max_redirections is not None:
            pulumi.set(__self__, "session_redis_cluster_max_redirections", session_redis_cluster_max_redirections)
        if session_redis_cluster_nodes is not None:
            pulumi.set(__self__, "session_redis_cluster_nodes", session_redis_cluster_nodes)
        if session_redis_connect_timeout is not None:
            pulumi.set(__self__, "session_redis_connect_timeout", session_redis_connect_timeout)
        if session_redis_host is not None:
            pulumi.set(__self__, "session_redis_host", session_redis_host)
        if session_redis_password is not None:
            pulumi.set(__self__, "session_redis_password", session_redis_password)
        if session_redis_port is not None:
            pulumi.set(__self__, "session_redis_port", session_redis_port)
        if session_redis_prefix is not None:
            pulumi.set(__self__, "session_redis_prefix", session_redis_prefix)
        if session_redis_read_timeout is not None:
            pulumi.set(__self__, "session_redis_read_timeout", session_redis_read_timeout)
        if session_redis_send_timeout is not None:
            pulumi.set(__self__, "session_redis_send_timeout", session_redis_send_timeout)
        if session_redis_server_name is not None:
            pulumi.set(__self__, "session_redis_server_name", session_redis_server_name)
        if session_redis_socket is not None:
            pulumi.set(__self__, "session_redis_socket", session_redis_socket)
        if session_redis_ssl is not None:
            pulumi.set(__self__, "session_redis_ssl", session_redis_ssl)
        if session_redis_ssl_verify is not None:
            pulumi.set(__self__, "session_redis_ssl_verify", session_redis_ssl_verify)
        if session_redis_username is not None:
            pulumi.set(__self__, "session_redis_username", session_redis_username)
        if session_remember is not None:
            pulumi.set(__self__, "session_remember", session_remember)
        if session_remember_absolute_timeout is not None:
            pulumi.set(__self__, "session_remember_absolute_timeout", session_remember_absolute_timeout)
        if session_remember_cookie_name is not None:
            pulumi.set(__self__, "session_remember_cookie_name", session_remember_cookie_name)
        if session_remember_rolling_timeout is not None:
            pulumi.set(__self__, "session_remember_rolling_timeout", session_remember_rolling_timeout)
        if session_request_headers is not None:
            pulumi.set(__self__, "session_request_headers", session_request_headers)
        if session_response_headers is not None:
            pulumi.set(__self__, "session_response_headers", session_response_headers)
        if session_rolling_timeout is not None:
            pulumi.set(__self__, "session_rolling_timeout", session_rolling_timeout)
        if session_secret is not None:
            pulumi.set(__self__, "session_secret", session_secret)
        if session_storage is not None:
            pulumi.set(__self__, "session_storage", session_storage)
        if session_store_metadata is not None:
            pulumi.set(__self__, "session_store_metadata", session_store_metadata)
        if ssl_verify is not None:
            pulumi.set(__self__, "ssl_verify", ssl_verify)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if tls_client_auth_cert_id is not None:
            pulumi.set(__self__, "tls_client_auth_cert_id", tls_client_auth_cert_id)
        if tls_client_auth_ssl_verify is not None:
            pulumi.set(__self__, "tls_client_auth_ssl_verify", tls_client_auth_ssl_verify)
        if token_cache_key_include_scope is not None:
            pulumi.set(__self__, "token_cache_key_include_scope", token_cache_key_include_scope)
        if token_endpoint is not None:
            pulumi.set(__self__, "token_endpoint", token_endpoint)
        if token_endpoint_auth_method is not None:
            pulumi.set(__self__, "token_endpoint_auth_method", token_endpoint_auth_method)
        if token_exchange_endpoint is not None:
            pulumi.set(__self__, "token_exchange_endpoint", token_exchange_endpoint)
        if token_headers_clients is not None:
            pulumi.set(__self__, "token_headers_clients", token_headers_clients)
        if token_headers_grants is not None:
            pulumi.set(__self__, "token_headers_grants", token_headers_grants)
        if token_headers_names is not None:
            pulumi.set(__self__, "token_headers_names", token_headers_names)
        if token_headers_prefix is not None:
            pulumi.set(__self__, "token_headers_prefix", token_headers_prefix)
        if token_headers_replays is not None:
            pulumi.set(__self__, "token_headers_replays", token_headers_replays)
        if token_headers_values is not None:
            pulumi.set(__self__, "token_headers_values", token_headers_values)
        if token_post_args_clients is not None:
            pulumi.set(__self__, "token_post_args_clients", token_post_args_clients)
        if token_post_args_names is not None:
            pulumi.set(__self__, "token_post_args_names", token_post_args_names)
        if token_post_args_values is not None:
            pulumi.set(__self__, "token_post_args_values", token_post_args_values)
        if unauthorized_destroy_session is not None:
            pulumi.set(__self__, "unauthorized_destroy_session", unauthorized_destroy_session)
        if unauthorized_error_message is not None:
            pulumi.set(__self__, "unauthorized_error_message", unauthorized_error_message)
        if unauthorized_redirect_uris is not None:
            pulumi.set(__self__, "unauthorized_redirect_uris", unauthorized_redirect_uris)
        if unexpected_redirect_uris is not None:
            pulumi.set(__self__, "unexpected_redirect_uris", unexpected_redirect_uris)
        if upstream_access_token_header is not None:
            pulumi.set(__self__, "upstream_access_token_header", upstream_access_token_header)
        if upstream_access_token_jwk_header is not None:
            pulumi.set(__self__, "upstream_access_token_jwk_header", upstream_access_token_jwk_header)
        if upstream_headers_claims is not None:
            pulumi.set(__self__, "upstream_headers_claims", upstream_headers_claims)
        if upstream_headers_names is not None:
            pulumi.set(__self__, "upstream_headers_names", upstream_headers_names)
        if upstream_id_token_header is not None:
            pulumi.set(__self__, "upstream_id_token_header", upstream_id_token_header)
        if upstream_id_token_jwk_header is not None:
            pulumi.set(__self__, "upstream_id_token_jwk_header", upstream_id_token_jwk_header)
        if upstream_introspection_header is not None:
            pulumi.set(__self__, "upstream_introspection_header", upstream_introspection_header)
        if upstream_introspection_jwt_header is not None:
            pulumi.set(__self__, "upstream_introspection_jwt_header", upstream_introspection_jwt_header)
        if upstream_refresh_token_header is not None:
            pulumi.set(__self__, "upstream_refresh_token_header", upstream_refresh_token_header)
        if upstream_session_id_header is not None:
            pulumi.set(__self__, "upstream_session_id_header", upstream_session_id_header)
        if upstream_user_info_header is not None:
            pulumi.set(__self__, "upstream_user_info_header", upstream_user_info_header)
        if upstream_user_info_jwt_header is not None:
            pulumi.set(__self__, "upstream_user_info_jwt_header", upstream_user_info_jwt_header)
        if userinfo_accept is not None:
            pulumi.set(__self__, "userinfo_accept", userinfo_accept)
        if userinfo_endpoint is not None:
            pulumi.set(__self__, "userinfo_endpoint", userinfo_endpoint)
        if userinfo_headers_clients is not None:
            pulumi.set(__self__, "userinfo_headers_clients", userinfo_headers_clients)
        if userinfo_headers_names is not None:
            pulumi.set(__self__, "userinfo_headers_names", userinfo_headers_names)
        if userinfo_headers_values is not None:
            pulumi.set(__self__, "userinfo_headers_values", userinfo_headers_values)
        if userinfo_query_args_clients is not None:
            pulumi.set(__self__, "userinfo_query_args_clients", userinfo_query_args_clients)
        if userinfo_query_args_names is not None:
            pulumi.set(__self__, "userinfo_query_args_names", userinfo_query_args_names)
        if userinfo_query_args_values is not None:
            pulumi.set(__self__, "userinfo_query_args_values", userinfo_query_args_values)
        if using_pseudo_issuer is not None:
            pulumi.set(__self__, "using_pseudo_issuer", using_pseudo_issuer)
        if verify_claims is not None:
            pulumi.set(__self__, "verify_claims", verify_claims)
        if verify_nonce is not None:
            pulumi.set(__self__, "verify_nonce", verify_nonce)
        if verify_parameters is not None:
            pulumi.set(__self__, "verify_parameters", verify_parameters)
        if verify_signature is not None:
            pulumi.set(__self__, "verify_signature", verify_signature)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[pulumi.Input[str]]:
        """
        An optional string (consumer UUID or username) value that functions as an “anonymous” consumer if authentication fails. If empty (default null), requests that fail authentication will return a `4xx` HTTP status code. This value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
        """
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter(name="audienceClaims")
    def audience_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The claim that contains the audience. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "audience_claims")

    @audience_claims.setter
    def audience_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audience_claims", value)

    @property
    @pulumi.getter(name="audienceRequireds")
    def audience_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The audiences (`audience_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        """
        return pulumi.get(self, "audience_requireds")

    @audience_requireds.setter
    def audience_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audience_requireds", value)

    @property
    @pulumi.getter
    def audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The audience passed to the authorization endpoint.
        """
        return pulumi.get(self, "audiences")

    @audiences.setter
    def audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "audiences", value)

    @property
    @pulumi.getter(name="authMethods")
    def auth_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Types of credentials/grants to enable.
        """
        return pulumi.get(self, "auth_methods")

    @auth_methods.setter
    def auth_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auth_methods", value)

    @property
    @pulumi.getter(name="authenticatedGroupsClaims")
    def authenticated_groups_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The claim that contains authenticated groups. This setting can be used together with ACL plugin, but it also enables IdP managed groups with other applications and integrations. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "authenticated_groups_claims")

    @authenticated_groups_claims.setter
    def authenticated_groups_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authenticated_groups_claims", value)

    @property
    @pulumi.getter(name="authorizationCookieDomain")
    def authorization_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The authorization cookie Domain flag.
        """
        return pulumi.get(self, "authorization_cookie_domain")

    @authorization_cookie_domain.setter
    def authorization_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_cookie_domain", value)

    @property
    @pulumi.getter(name="authorizationCookieHttpOnly")
    def authorization_cookie_http_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        """
        return pulumi.get(self, "authorization_cookie_http_only")

    @authorization_cookie_http_only.setter
    def authorization_cookie_http_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authorization_cookie_http_only", value)

    @property
    @pulumi.getter(name="authorizationCookieName")
    def authorization_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        The authorization cookie name.
        """
        return pulumi.get(self, "authorization_cookie_name")

    @authorization_cookie_name.setter
    def authorization_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_cookie_name", value)

    @property
    @pulumi.getter(name="authorizationCookiePath")
    def authorization_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        The authorization cookie Path flag.
        """
        return pulumi.get(self, "authorization_cookie_path")

    @authorization_cookie_path.setter
    def authorization_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_cookie_path", value)

    @property
    @pulumi.getter(name="authorizationCookieSameSite")
    def authorization_cookie_same_site(self) -> Optional[pulumi.Input[str]]:
        """
        Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        """
        return pulumi.get(self, "authorization_cookie_same_site")

    @authorization_cookie_same_site.setter
    def authorization_cookie_same_site(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_cookie_same_site", value)

    @property
    @pulumi.getter(name="authorizationCookieSecure")
    def authorization_cookie_secure(self) -> Optional[pulumi.Input[bool]]:
        """
        Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        """
        return pulumi.get(self, "authorization_cookie_secure")

    @authorization_cookie_secure.setter
    def authorization_cookie_secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authorization_cookie_secure", value)

    @property
    @pulumi.getter(name="authorizationEndpoint")
    def authorization_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The authorization endpoint. If set it overrides the value in `authorization_endpoint` returned by the discovery endpoint.
        """
        return pulumi.get(self, "authorization_endpoint")

    @authorization_endpoint.setter
    def authorization_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_endpoint", value)

    @property
    @pulumi.getter(name="authorizationQueryArgsClients")
    def authorization_query_args_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra query arguments passed from the client to the authorization endpoint.
        """
        return pulumi.get(self, "authorization_query_args_clients")

    @authorization_query_args_clients.setter
    def authorization_query_args_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorization_query_args_clients", value)

    @property
    @pulumi.getter(name="authorizationQueryArgsNames")
    def authorization_query_args_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra query argument names passed to the authorization endpoint.
        """
        return pulumi.get(self, "authorization_query_args_names")

    @authorization_query_args_names.setter
    def authorization_query_args_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorization_query_args_names", value)

    @property
    @pulumi.getter(name="authorizationQueryArgsValues")
    def authorization_query_args_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra query argument values passed to the authorization endpoint.
        """
        return pulumi.get(self, "authorization_query_args_values")

    @authorization_query_args_values.setter
    def authorization_query_args_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "authorization_query_args_values", value)

    @property
    @pulumi.getter(name="authorizationRollingTimeout")
    def authorization_rolling_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long the session used for the authorization code flow can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.
        """
        return pulumi.get(self, "authorization_rolling_timeout")

    @authorization_rolling_timeout.setter
    def authorization_rolling_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "authorization_rolling_timeout", value)

    @property
    @pulumi.getter(name="bearerTokenCookieName")
    def bearer_token_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the cookie in which the bearer token is passed.
        """
        return pulumi.get(self, "bearer_token_cookie_name")

    @bearer_token_cookie_name.setter
    def bearer_token_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_token_cookie_name", value)

    @property
    @pulumi.getter(name="bearerTokenParamTypes")
    def bearer_token_param_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to look for the bearer token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body - `cookie`: search the HTTP request cookies specified with `config.bearer_token_cookie_name`.
        """
        return pulumi.get(self, "bearer_token_param_types")

    @bearer_token_param_types.setter
    def bearer_token_param_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bearer_token_param_types", value)

    @property
    @pulumi.getter(name="byUsernameIgnoreCase")
    def by_username_ignore_case(self) -> Optional[pulumi.Input[bool]]:
        """
        If `consumer_by` is set to `username`, specify whether `username` can match consumers case-insensitively.
        """
        return pulumi.get(self, "by_username_ignore_case")

    @by_username_ignore_case.setter
    def by_username_ignore_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "by_username_ignore_case", value)

    @property
    @pulumi.getter(name="cacheIntrospection")
    def cache_introspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Cache the introspection endpoint requests.
        """
        return pulumi.get(self, "cache_introspection")

    @cache_introspection.setter
    def cache_introspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_introspection", value)

    @property
    @pulumi.getter(name="cacheTokenExchange")
    def cache_token_exchange(self) -> Optional[pulumi.Input[bool]]:
        """
        Cache the token exchange endpoint requests.
        """
        return pulumi.get(self, "cache_token_exchange")

    @cache_token_exchange.setter
    def cache_token_exchange(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_token_exchange", value)

    @property
    @pulumi.getter(name="cacheTokens")
    def cache_tokens(self) -> Optional[pulumi.Input[bool]]:
        """
        Cache the token endpoint requests.
        """
        return pulumi.get(self, "cache_tokens")

    @cache_tokens.setter
    def cache_tokens(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_tokens", value)

    @property
    @pulumi.getter(name="cacheTokensSalt")
    def cache_tokens_salt(self) -> Optional[pulumi.Input[str]]:
        """
        Salt used for generating the cache key that is used for caching the token endpoint requests.
        """
        return pulumi.get(self, "cache_tokens_salt")

    @cache_tokens_salt.setter
    def cache_tokens_salt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cache_tokens_salt", value)

    @property
    @pulumi.getter(name="cacheTtl")
    def cache_ttl(self) -> Optional[pulumi.Input[float]]:
        """
        The default cache ttl in seconds that is used in case the cached object does not specify the expiry.
        """
        return pulumi.get(self, "cache_ttl")

    @cache_ttl.setter
    def cache_ttl(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cache_ttl", value)

    @property
    @pulumi.getter(name="cacheTtlMax")
    def cache_ttl_max(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum cache ttl in seconds (enforced).
        """
        return pulumi.get(self, "cache_ttl_max")

    @cache_ttl_max.setter
    def cache_ttl_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cache_ttl_max", value)

    @property
    @pulumi.getter(name="cacheTtlMin")
    def cache_ttl_min(self) -> Optional[pulumi.Input[float]]:
        """
        The minimum cache ttl in seconds (enforced).
        """
        return pulumi.get(self, "cache_ttl_min")

    @cache_ttl_min.setter
    def cache_ttl_min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cache_ttl_min", value)

    @property
    @pulumi.getter(name="cacheTtlNeg")
    def cache_ttl_neg(self) -> Optional[pulumi.Input[float]]:
        """
        The negative cache ttl in seconds.
        """
        return pulumi.get(self, "cache_ttl_neg")

    @cache_ttl_neg.setter
    def cache_ttl_neg(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cache_ttl_neg", value)

    @property
    @pulumi.getter(name="cacheTtlResurrect")
    def cache_ttl_resurrect(self) -> Optional[pulumi.Input[float]]:
        """
        The resurrection ttl in seconds.
        """
        return pulumi.get(self, "cache_ttl_resurrect")

    @cache_ttl_resurrect.setter
    def cache_ttl_resurrect(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "cache_ttl_resurrect", value)

    @property
    @pulumi.getter(name="cacheUserInfo")
    def cache_user_info(self) -> Optional[pulumi.Input[bool]]:
        """
        Cache the user info requests.
        """
        return pulumi.get(self, "cache_user_info")

    @cache_user_info.setter
    def cache_user_info(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_user_info", value)

    @property
    @pulumi.getter(name="clientAlgs")
    def client_algs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The algorithm to use for client*secret*jwt (only HS***) or private*key*jwt authentication.
        """
        return pulumi.get(self, "client_algs")

    @client_algs.setter
    def client_algs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_algs", value)

    @property
    @pulumi.getter(name="clientArg")
    def client_arg(self) -> Optional[pulumi.Input[str]]:
        """
        The client to use for this request (the selection is made with a request parameter with the same name).
        """
        return pulumi.get(self, "client_arg")

    @client_arg.setter
    def client_arg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_arg", value)

    @property
    @pulumi.getter(name="clientAuths")
    def client_auths(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The default OpenID Connect client authentication method is 'client*secret*basic' (using 'Authorization: Basic' header), 'client*secret*post' (credentials in body), 'client*secret*jwt' (signed client assertion in body), 'private*key*jwt' (private key-signed assertion), 'tls*client*auth' (client certificate), 'self*signed*tls*client*auth' (self-signed client certificate), and 'none' (no authentication).
        """
        return pulumi.get(self, "client_auths")

    @client_auths.setter
    def client_auths(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_auths", value)

    @property
    @pulumi.getter(name="clientCredentialsParamTypes")
    def client_credentials_param_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to look for the client credentials: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search from the HTTP request body.
        """
        return pulumi.get(self, "client_credentials_param_types")

    @client_credentials_param_types.setter
    def client_credentials_param_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_credentials_param_types", value)

    @property
    @pulumi.getter(name="clientIds")
    def client_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The client id(s) that the plugin uses when it calls authenticated endpoints on the identity provider.
        """
        return pulumi.get(self, "client_ids")

    @client_ids.setter
    def client_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_ids", value)

    @property
    @pulumi.getter(name="clientJwks")
    def client_jwks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigClientJwkArgs']]]]:
        """
        The JWK used for the private*key*jwt authentication.
        """
        return pulumi.get(self, "client_jwks")

    @client_jwks.setter
    def client_jwks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigClientJwkArgs']]]]):
        pulumi.set(self, "client_jwks", value)

    @property
    @pulumi.getter(name="clientSecrets")
    def client_secrets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The client secret.
        """
        return pulumi.get(self, "client_secrets")

    @client_secrets.setter
    def client_secrets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "client_secrets", value)

    @property
    @pulumi.getter(name="consumerBies")
    def consumer_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Consumer fields used for mapping: - `id`: try to find the matching Consumer by `id` - `username`: try to find the matching Consumer by `username` - `custom_id`: try to find the matching Consumer by `custom_id`.
        """
        return pulumi.get(self, "consumer_bies")

    @consumer_bies.setter
    def consumer_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "consumer_bies", value)

    @property
    @pulumi.getter(name="consumerClaims")
    def consumer_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The claim used for consumer mapping. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "consumer_claims")

    @consumer_claims.setter
    def consumer_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "consumer_claims", value)

    @property
    @pulumi.getter(name="consumerOptional")
    def consumer_optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not terminate the request if consumer mapping fails.
        """
        return pulumi.get(self, "consumer_optional")

    @consumer_optional.setter
    def consumer_optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "consumer_optional", value)

    @property
    @pulumi.getter(name="credentialClaims")
    def credential_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The claim used to derive virtual credentials (e.g. to be consumed by the rate-limiting plugin), in case the consumer mapping is not used. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "credential_claims")

    @credential_claims.setter
    def credential_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "credential_claims", value)

    @property
    @pulumi.getter(name="disableSessions")
    def disable_sessions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Disable issuing the session cookie with the specified grants.
        """
        return pulumi.get(self, "disable_sessions")

    @disable_sessions.setter
    def disable_sessions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "disable_sessions", value)

    @property
    @pulumi.getter(name="discoveryHeadersNames")
    def discovery_headers_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header names passed to the discovery endpoint.
        """
        return pulumi.get(self, "discovery_headers_names")

    @discovery_headers_names.setter
    def discovery_headers_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "discovery_headers_names", value)

    @property
    @pulumi.getter(name="discoveryHeadersValues")
    def discovery_headers_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header values passed to the discovery endpoint.
        """
        return pulumi.get(self, "discovery_headers_values")

    @discovery_headers_values.setter
    def discovery_headers_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "discovery_headers_values", value)

    @property
    @pulumi.getter(name="displayErrors")
    def display_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Display errors on failure responses.
        """
        return pulumi.get(self, "display_errors")

    @display_errors.setter
    def display_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "display_errors", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The allowed values for the `hd` claim.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="downstreamAccessTokenHeader")
    def downstream_access_token_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream access token header.
        """
        return pulumi.get(self, "downstream_access_token_header")

    @downstream_access_token_header.setter
    def downstream_access_token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_access_token_header", value)

    @property
    @pulumi.getter(name="downstreamAccessTokenJwkHeader")
    def downstream_access_token_jwk_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream access token JWK header.
        """
        return pulumi.get(self, "downstream_access_token_jwk_header")

    @downstream_access_token_jwk_header.setter
    def downstream_access_token_jwk_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_access_token_jwk_header", value)

    @property
    @pulumi.getter(name="downstreamHeadersClaims")
    def downstream_headers_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The downstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "downstream_headers_claims")

    @downstream_headers_claims.setter
    def downstream_headers_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "downstream_headers_claims", value)

    @property
    @pulumi.getter(name="downstreamHeadersNames")
    def downstream_headers_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The downstream header names for the claim values.
        """
        return pulumi.get(self, "downstream_headers_names")

    @downstream_headers_names.setter
    def downstream_headers_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "downstream_headers_names", value)

    @property
    @pulumi.getter(name="downstreamIdTokenHeader")
    def downstream_id_token_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream id token header.
        """
        return pulumi.get(self, "downstream_id_token_header")

    @downstream_id_token_header.setter
    def downstream_id_token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_id_token_header", value)

    @property
    @pulumi.getter(name="downstreamIdTokenJwkHeader")
    def downstream_id_token_jwk_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream id token JWK header.
        """
        return pulumi.get(self, "downstream_id_token_jwk_header")

    @downstream_id_token_jwk_header.setter
    def downstream_id_token_jwk_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_id_token_jwk_header", value)

    @property
    @pulumi.getter(name="downstreamIntrospectionHeader")
    def downstream_introspection_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream introspection header.
        """
        return pulumi.get(self, "downstream_introspection_header")

    @downstream_introspection_header.setter
    def downstream_introspection_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_introspection_header", value)

    @property
    @pulumi.getter(name="downstreamIntrospectionJwtHeader")
    def downstream_introspection_jwt_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream introspection JWT header.
        """
        return pulumi.get(self, "downstream_introspection_jwt_header")

    @downstream_introspection_jwt_header.setter
    def downstream_introspection_jwt_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_introspection_jwt_header", value)

    @property
    @pulumi.getter(name="downstreamRefreshTokenHeader")
    def downstream_refresh_token_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream refresh token header.
        """
        return pulumi.get(self, "downstream_refresh_token_header")

    @downstream_refresh_token_header.setter
    def downstream_refresh_token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_refresh_token_header", value)

    @property
    @pulumi.getter(name="downstreamSessionIdHeader")
    def downstream_session_id_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream session id header.
        """
        return pulumi.get(self, "downstream_session_id_header")

    @downstream_session_id_header.setter
    def downstream_session_id_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_session_id_header", value)

    @property
    @pulumi.getter(name="downstreamUserInfoHeader")
    def downstream_user_info_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream user info header.
        """
        return pulumi.get(self, "downstream_user_info_header")

    @downstream_user_info_header.setter
    def downstream_user_info_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_user_info_header", value)

    @property
    @pulumi.getter(name="downstreamUserInfoJwtHeader")
    def downstream_user_info_jwt_header(self) -> Optional[pulumi.Input[str]]:
        """
        The downstream user info JWT header (in case the user info returns a JWT response).
        """
        return pulumi.get(self, "downstream_user_info_jwt_header")

    @downstream_user_info_jwt_header.setter
    def downstream_user_info_jwt_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "downstream_user_info_jwt_header", value)

    @property
    @pulumi.getter(name="dpopProofLifetime")
    def dpop_proof_lifetime(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the lifetime in seconds of the DPoP proof. It determines how long the same proof can be used after creation. The creation time is determined by the nonce creation time if a nonce is used, and the iat claim otherwise.
        """
        return pulumi.get(self, "dpop_proof_lifetime")

    @dpop_proof_lifetime.setter
    def dpop_proof_lifetime(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "dpop_proof_lifetime", value)

    @property
    @pulumi.getter(name="dpopUseNonce")
    def dpop_use_nonce(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to challenge the client with a nonce value for DPoP proof. When enabled it will also be used to calculate the DPoP proof lifetime.
        """
        return pulumi.get(self, "dpop_use_nonce")

    @dpop_use_nonce.setter
    def dpop_use_nonce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dpop_use_nonce", value)

    @property
    @pulumi.getter(name="enableHsSignatures")
    def enable_hs_signatures(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable shared secret, for example, HS256, signatures (when disabled they will not be accepted).
        """
        return pulumi.get(self, "enable_hs_signatures")

    @enable_hs_signatures.setter
    def enable_hs_signatures(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_hs_signatures", value)

    @property
    @pulumi.getter(name="endSessionEndpoint")
    def end_session_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The end session endpoint. If set it overrides the value in `end_session_endpoint` returned by the discovery endpoint.
        """
        return pulumi.get(self, "end_session_endpoint")

    @end_session_endpoint.setter
    def end_session_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_session_endpoint", value)

    @property
    @pulumi.getter(name="exposeErrorCode")
    def expose_error_code(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to expose the error code header, as defined in RFC 6750. If an authorization request fails, this header is sent in the response. Set to `false` to disable.
        """
        return pulumi.get(self, "expose_error_code")

    @expose_error_code.setter
    def expose_error_code(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expose_error_code", value)

    @property
    @pulumi.getter(name="extraJwksUris")
    def extra_jwks_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        JWKS URIs whose public keys are trusted (in addition to the keys found with the discovery).
        """
        return pulumi.get(self, "extra_jwks_uris")

    @extra_jwks_uris.setter
    def extra_jwks_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extra_jwks_uris", value)

    @property
    @pulumi.getter(name="forbiddenDestroySession")
    def forbidden_destroy_session(self) -> Optional[pulumi.Input[bool]]:
        """
        Destroy any active session for the forbidden requests.
        """
        return pulumi.get(self, "forbidden_destroy_session")

    @forbidden_destroy_session.setter
    def forbidden_destroy_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "forbidden_destroy_session", value)

    @property
    @pulumi.getter(name="forbiddenErrorMessage")
    def forbidden_error_message(self) -> Optional[pulumi.Input[str]]:
        """
        The error message for the forbidden requests (when not using the redirection).
        """
        return pulumi.get(self, "forbidden_error_message")

    @forbidden_error_message.setter
    def forbidden_error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "forbidden_error_message", value)

    @property
    @pulumi.getter(name="forbiddenRedirectUris")
    def forbidden_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to redirect the client on forbidden requests.
        """
        return pulumi.get(self, "forbidden_redirect_uris")

    @forbidden_redirect_uris.setter
    def forbidden_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "forbidden_redirect_uris", value)

    @property
    @pulumi.getter(name="groupsClaims")
    def groups_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The claim that contains the groups. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "groups_claims")

    @groups_claims.setter
    def groups_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups_claims", value)

    @property
    @pulumi.getter(name="groupsRequireds")
    def groups_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The groups (`groups_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        """
        return pulumi.get(self, "groups_requireds")

    @groups_requireds.setter
    def groups_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups_requireds", value)

    @property
    @pulumi.getter(name="hideCredentials")
    def hide_credentials(self) -> Optional[pulumi.Input[bool]]:
        """
        Remove the credentials used for authentication from the request. If multiple credentials are sent with the same request, the plugin will remove those that were used for successful authentication.
        """
        return pulumi.get(self, "hide_credentials")

    @hide_credentials.setter
    def hide_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_credentials", value)

    @property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP proxy.
        """
        return pulumi.get(self, "http_proxy")

    @http_proxy.setter
    def http_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy", value)

    @property
    @pulumi.getter(name="httpProxyAuthorization")
    def http_proxy_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP proxy authorization.
        """
        return pulumi.get(self, "http_proxy_authorization")

    @http_proxy_authorization.setter
    def http_proxy_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_proxy_authorization", value)

    @property
    @pulumi.getter(name="httpVersion")
    def http_version(self) -> Optional[pulumi.Input[float]]:
        """
        The HTTP version used for the requests by this plugin: - `1.1`: HTTP 1.1 (the default) - `1.0`: HTTP 1.0.
        """
        return pulumi.get(self, "http_version")

    @http_version.setter
    def http_version(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "http_version", value)

    @property
    @pulumi.getter(name="httpsProxy")
    def https_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTPS proxy.
        """
        return pulumi.get(self, "https_proxy")

    @https_proxy.setter
    def https_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_proxy", value)

    @property
    @pulumi.getter(name="httpsProxyAuthorization")
    def https_proxy_authorization(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTPS proxy authorization.
        """
        return pulumi.get(self, "https_proxy_authorization")

    @https_proxy_authorization.setter
    def https_proxy_authorization(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_proxy_authorization", value)

    @property
    @pulumi.getter(name="idTokenParamName")
    def id_token_param_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the parameter used to pass the id token.
        """
        return pulumi.get(self, "id_token_param_name")

    @id_token_param_name.setter
    def id_token_param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id_token_param_name", value)

    @property
    @pulumi.getter(name="idTokenParamTypes")
    def id_token_param_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to look for the id token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        """
        return pulumi.get(self, "id_token_param_types")

    @id_token_param_types.setter
    def id_token_param_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_token_param_types", value)

    @property
    @pulumi.getter(name="ignoreSignatures")
    def ignore_signatures(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Skip the token signature verification on certain grants: - `password`: OAuth password grant - `client_credentials`: OAuth client credentials grant - `authorization_code`: authorization code flow - `refresh_token`: OAuth refresh token grant - `session`: session cookie authentication - `introspection`: OAuth introspection - `userinfo`: OpenID Connect user info endpoint authentication.
        """
        return pulumi.get(self, "ignore_signatures")

    @ignore_signatures.setter
    def ignore_signatures(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ignore_signatures", value)

    @property
    @pulumi.getter(name="introspectJwtTokens")
    def introspect_jwt_tokens(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to introspect the JWT access tokens (can be used to check for revocations).
        """
        return pulumi.get(self, "introspect_jwt_tokens")

    @introspect_jwt_tokens.setter
    def introspect_jwt_tokens(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "introspect_jwt_tokens", value)

    @property
    @pulumi.getter(name="introspectionAccept")
    def introspection_accept(self) -> Optional[pulumi.Input[str]]:
        """
        The value of `Accept` header for introspection requests: - `application/json`: introspection response as JSON - `application/token-introspection+jwt`: introspection response as JWT (from the current IETF draft document) - `application/jwt`: introspection response as JWT (from the obsolete IETF draft document). must be one of ["application/json", "application/token-introspection+jwt", "application/jwt"]
        """
        return pulumi.get(self, "introspection_accept")

    @introspection_accept.setter
    def introspection_accept(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "introspection_accept", value)

    @property
    @pulumi.getter(name="introspectionCheckActive")
    def introspection_check_active(self) -> Optional[pulumi.Input[bool]]:
        """
        Check that the introspection response has an `active` claim with a value of `true`.
        """
        return pulumi.get(self, "introspection_check_active")

    @introspection_check_active.setter
    def introspection_check_active(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "introspection_check_active", value)

    @property
    @pulumi.getter(name="introspectionEndpoint")
    def introspection_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The introspection endpoint. If set it overrides the value in `introspection_endpoint` returned by the discovery endpoint.
        """
        return pulumi.get(self, "introspection_endpoint")

    @introspection_endpoint.setter
    def introspection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "introspection_endpoint", value)

    @property
    @pulumi.getter(name="introspectionEndpointAuthMethod")
    def introspection_endpoint_auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        The introspection endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client*secret*basic", "client*secret*post", "client*secret*jwt", "private*key*jwt", "tls*client*auth", "self*signed*tls*client*auth", "none"]
        """
        return pulumi.get(self, "introspection_endpoint_auth_method")

    @introspection_endpoint_auth_method.setter
    def introspection_endpoint_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "introspection_endpoint_auth_method", value)

    @property
    @pulumi.getter(name="introspectionHeadersClients")
    def introspection_headers_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra headers passed from the client to the introspection endpoint.
        """
        return pulumi.get(self, "introspection_headers_clients")

    @introspection_headers_clients.setter
    def introspection_headers_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "introspection_headers_clients", value)

    @property
    @pulumi.getter(name="introspectionHeadersNames")
    def introspection_headers_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header names passed to the introspection endpoint.
        """
        return pulumi.get(self, "introspection_headers_names")

    @introspection_headers_names.setter
    def introspection_headers_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "introspection_headers_names", value)

    @property
    @pulumi.getter(name="introspectionHeadersValues")
    def introspection_headers_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header values passed to the introspection endpoint.
        """
        return pulumi.get(self, "introspection_headers_values")

    @introspection_headers_values.setter
    def introspection_headers_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "introspection_headers_values", value)

    @property
    @pulumi.getter(name="introspectionHint")
    def introspection_hint(self) -> Optional[pulumi.Input[str]]:
        """
        Introspection hint parameter value passed to the introspection endpoint.
        """
        return pulumi.get(self, "introspection_hint")

    @introspection_hint.setter
    def introspection_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "introspection_hint", value)

    @property
    @pulumi.getter(name="introspectionPostArgsClients")
    def introspection_post_args_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra post arguments passed from the client to the introspection endpoint.
        """
        return pulumi.get(self, "introspection_post_args_clients")

    @introspection_post_args_clients.setter
    def introspection_post_args_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "introspection_post_args_clients", value)

    @property
    @pulumi.getter(name="introspectionPostArgsNames")
    def introspection_post_args_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra post argument names passed to the introspection endpoint.
        """
        return pulumi.get(self, "introspection_post_args_names")

    @introspection_post_args_names.setter
    def introspection_post_args_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "introspection_post_args_names", value)

    @property
    @pulumi.getter(name="introspectionPostArgsValues")
    def introspection_post_args_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra post argument values passed to the introspection endpoint.
        """
        return pulumi.get(self, "introspection_post_args_values")

    @introspection_post_args_values.setter
    def introspection_post_args_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "introspection_post_args_values", value)

    @property
    @pulumi.getter(name="introspectionTokenParamName")
    def introspection_token_param_name(self) -> Optional[pulumi.Input[str]]:
        """
        Designate token's parameter name for introspection.
        """
        return pulumi.get(self, "introspection_token_param_name")

    @introspection_token_param_name.setter
    def introspection_token_param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "introspection_token_param_name", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The discovery endpoint (or the issuer identifier). When there is no discovery endpoint, please also configure `config.using_pseudo_issuer=true`.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="issuersAlloweds")
    def issuers_alloweds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The issuers allowed to be present in the tokens (`iss` claim).
        """
        return pulumi.get(self, "issuers_alloweds")

    @issuers_alloweds.setter
    def issuers_alloweds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "issuers_alloweds", value)

    @property
    @pulumi.getter(name="jwtSessionClaim")
    def jwt_session_claim(self) -> Optional[pulumi.Input[str]]:
        """
        The claim to match against the JWT session cookie.
        """
        return pulumi.get(self, "jwt_session_claim")

    @jwt_session_claim.setter
    def jwt_session_claim(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_session_claim", value)

    @property
    @pulumi.getter(name="jwtSessionCookie")
    def jwt_session_cookie(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the JWT session cookie.
        """
        return pulumi.get(self, "jwt_session_cookie")

    @jwt_session_cookie.setter
    def jwt_session_cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_session_cookie", value)

    @property
    @pulumi.getter
    def keepalive(self) -> Optional[pulumi.Input[bool]]:
        """
        Use keepalive with the HTTP client.
        """
        return pulumi.get(self, "keepalive")

    @keepalive.setter
    def keepalive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "keepalive", value)

    @property
    @pulumi.getter
    def leeway(self) -> Optional[pulumi.Input[float]]:
        """
        Defines leeway time (in seconds) for `auth_time`, `exp`, `iat`, and `nbf` claims
        """
        return pulumi.get(self, "leeway")

    @leeway.setter
    def leeway(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "leeway", value)

    @property
    @pulumi.getter(name="loginAction")
    def login_action(self) -> Optional[pulumi.Input[str]]:
        """
        What to do after successful login: - `upstream`: proxy request to upstream service - `response`: terminate request with a response - `redirect`: redirect to a different location. must be one of ["upstream", "response", "redirect"]
        """
        return pulumi.get(self, "login_action")

    @login_action.setter
    def login_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_action", value)

    @property
    @pulumi.getter(name="loginMethods")
    def login_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Enable login functionality with specified grants.
        """
        return pulumi.get(self, "login_methods")

    @login_methods.setter
    def login_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_methods", value)

    @property
    @pulumi.getter(name="loginRedirectMode")
    def login_redirect_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Where to place `login_tokens` when using `redirect` `login_action`: - `query`: place tokens in query string - `fragment`: place tokens in url fragment (not readable by servers). must be one of ["query", "fragment"]
        """
        return pulumi.get(self, "login_redirect_mode")

    @login_redirect_mode.setter
    def login_redirect_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_redirect_mode", value)

    @property
    @pulumi.getter(name="loginRedirectUris")
    def login_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to redirect the client when `login_action` is set to `redirect`.
        """
        return pulumi.get(self, "login_redirect_uris")

    @login_redirect_uris.setter
    def login_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_redirect_uris", value)

    @property
    @pulumi.getter(name="loginTokens")
    def login_tokens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        What tokens to include in `response` body or `redirect` query string or fragment: - `id_token`: include id token - `access_token`: include access token - `refresh_token`: include refresh token - `tokens`: include the full token endpoint response - `introspection`: include introspection response.
        """
        return pulumi.get(self, "login_tokens")

    @login_tokens.setter
    def login_tokens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "login_tokens", value)

    @property
    @pulumi.getter(name="logoutMethods")
    def logout_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The request methods that can activate the logout: - `POST`: HTTP POST method - `GET`: HTTP GET method - `DELETE`: HTTP DELETE method.
        """
        return pulumi.get(self, "logout_methods")

    @logout_methods.setter
    def logout_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "logout_methods", value)

    @property
    @pulumi.getter(name="logoutPostArg")
    def logout_post_arg(self) -> Optional[pulumi.Input[str]]:
        """
        The request body argument that activates the logout.
        """
        return pulumi.get(self, "logout_post_arg")

    @logout_post_arg.setter
    def logout_post_arg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_post_arg", value)

    @property
    @pulumi.getter(name="logoutQueryArg")
    def logout_query_arg(self) -> Optional[pulumi.Input[str]]:
        """
        The request query argument that activates the logout.
        """
        return pulumi.get(self, "logout_query_arg")

    @logout_query_arg.setter
    def logout_query_arg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_query_arg", value)

    @property
    @pulumi.getter(name="logoutRedirectUris")
    def logout_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to redirect the client after the logout.
        """
        return pulumi.get(self, "logout_redirect_uris")

    @logout_redirect_uris.setter
    def logout_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "logout_redirect_uris", value)

    @property
    @pulumi.getter(name="logoutRevoke")
    def logout_revoke(self) -> Optional[pulumi.Input[bool]]:
        """
        Revoke tokens as part of the logout.
        """
        return pulumi.get(self, "logout_revoke")

    @logout_revoke.setter
    def logout_revoke(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logout_revoke", value)

    @property
    @pulumi.getter(name="logoutRevokeAccessToken")
    def logout_revoke_access_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Revoke the access token as part of the logout. Requires `logout_revoke` to be set to `true`.
        """
        return pulumi.get(self, "logout_revoke_access_token")

    @logout_revoke_access_token.setter
    def logout_revoke_access_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logout_revoke_access_token", value)

    @property
    @pulumi.getter(name="logoutRevokeRefreshToken")
    def logout_revoke_refresh_token(self) -> Optional[pulumi.Input[bool]]:
        """
        Revoke the refresh token as part of the logout. Requires `logout_revoke` to be set to `true`.
        """
        return pulumi.get(self, "logout_revoke_refresh_token")

    @logout_revoke_refresh_token.setter
    def logout_revoke_refresh_token(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "logout_revoke_refresh_token", value)

    @property
    @pulumi.getter(name="logoutUriSuffix")
    def logout_uri_suffix(self) -> Optional[pulumi.Input[str]]:
        """
        The request URI suffix that activates the logout.
        """
        return pulumi.get(self, "logout_uri_suffix")

    @logout_uri_suffix.setter
    def logout_uri_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logout_uri_suffix", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[float]]:
        """
        The maximum age (in seconds) compared to the `auth_time` claim.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter(name="mtlsIntrospectionEndpoint")
    def mtls_introspection_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        """
        return pulumi.get(self, "mtls_introspection_endpoint")

    @mtls_introspection_endpoint.setter
    def mtls_introspection_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtls_introspection_endpoint", value)

    @property
    @pulumi.getter(name="mtlsRevocationEndpoint")
    def mtls_revocation_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        """
        return pulumi.get(self, "mtls_revocation_endpoint")

    @mtls_revocation_endpoint.setter
    def mtls_revocation_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtls_revocation_endpoint", value)

    @property
    @pulumi.getter(name="mtlsTokenEndpoint")
    def mtls_token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Alias for the token endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        """
        return pulumi.get(self, "mtls_token_endpoint")

    @mtls_token_endpoint.setter
    def mtls_token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mtls_token_endpoint", value)

    @property
    @pulumi.getter(name="noProxy")
    def no_proxy(self) -> Optional[pulumi.Input[str]]:
        """
        Do not use proxy with these hosts.
        """
        return pulumi.get(self, "no_proxy")

    @no_proxy.setter
    def no_proxy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "no_proxy", value)

    @property
    @pulumi.getter(name="passwordParamTypes")
    def password_param_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to look for the username and password: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        """
        return pulumi.get(self, "password_param_types")

    @password_param_types.setter
    def password_param_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "password_param_types", value)

    @property
    @pulumi.getter(name="preserveQueryArgs")
    def preserve_query_args(self) -> Optional[pulumi.Input[bool]]:
        """
        With this parameter, you can preserve request query arguments even when doing authorization code flow.
        """
        return pulumi.get(self, "preserve_query_args")

    @preserve_query_args.setter
    def preserve_query_args(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_query_args", value)

    @property
    @pulumi.getter(name="proofOfPossessionAuthMethodsValidation")
    def proof_of_possession_auth_methods_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, only the auth_methods that are compatible with Proof of Possession (PoP) can be configured when PoP is enabled. If set to false, all auth_methods will be configurable and PoP checks will be silently skipped for those auth_methods that are not compatible with PoP.
        """
        return pulumi.get(self, "proof_of_possession_auth_methods_validation")

    @proof_of_possession_auth_methods_validation.setter
    def proof_of_possession_auth_methods_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "proof_of_possession_auth_methods_validation", value)

    @property
    @pulumi.getter(name="proofOfPossessionDpop")
    def proof_of_possession_dpop(self) -> Optional[pulumi.Input[str]]:
        """
        Enable Demonstrating Proof-of-Possession (DPoP). If set to strict, all request are verified despite the presence of the DPoP key claim (cnf.jkt). If set to optional, only tokens bound with DPoP's key are verified with the proof. must be one of ["off", "strict", "optional"]
        """
        return pulumi.get(self, "proof_of_possession_dpop")

    @proof_of_possession_dpop.setter
    def proof_of_possession_dpop(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proof_of_possession_dpop", value)

    @property
    @pulumi.getter(name="proofOfPossessionMtls")
    def proof_of_possession_mtls(self) -> Optional[pulumi.Input[str]]:
        """
        Enable mtls proof of possession. If set to strict, all tokens (from supported auth_methods: bearer, introspection, and session granted with bearer or introspection) are verified, if set to optional, only tokens that contain the certificate hash claim are verified. If the verification fails, the request will be rejected with 401. must be one of ["off", "strict", "optional"]
        """
        return pulumi.get(self, "proof_of_possession_mtls")

    @proof_of_possession_mtls.setter
    def proof_of_possession_mtls(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "proof_of_possession_mtls", value)

    @property
    @pulumi.getter(name="pushedAuthorizationRequestEndpoint")
    def pushed_authorization_request_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The pushed authorization endpoint. If set it overrides the value in `pushed_authorization_request_endpoint` returned by the discovery endpoint.
        """
        return pulumi.get(self, "pushed_authorization_request_endpoint")

    @pushed_authorization_request_endpoint.setter
    def pushed_authorization_request_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pushed_authorization_request_endpoint", value)

    @property
    @pulumi.getter(name="pushedAuthorizationRequestEndpointAuthMethod")
    def pushed_authorization_request_endpoint_auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        The pushed authorization request endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        """
        return pulumi.get(self, "pushed_authorization_request_endpoint_auth_method")

    @pushed_authorization_request_endpoint_auth_method.setter
    def pushed_authorization_request_endpoint_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pushed_authorization_request_endpoint_auth_method", value)

    @property
    @pulumi.getter(name="redirectUris")
    def redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The redirect URI passed to the authorization and token endpoints.
        """
        return pulumi.get(self, "redirect_uris")

    @redirect_uris.setter
    def redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "redirect_uris", value)

    @property
    @pulumi.getter(name="rediscoveryLifetime")
    def rediscovery_lifetime(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long (in seconds) the plugin waits between discovery attempts. Discovery is still triggered on an as-needed basis.
        """
        return pulumi.get(self, "rediscovery_lifetime")

    @rediscovery_lifetime.setter
    def rediscovery_lifetime(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rediscovery_lifetime", value)

    @property
    @pulumi.getter(name="refreshTokenParamName")
    def refresh_token_param_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the parameter used to pass the refresh token.
        """
        return pulumi.get(self, "refresh_token_param_name")

    @refresh_token_param_name.setter
    def refresh_token_param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token_param_name", value)

    @property
    @pulumi.getter(name="refreshTokenParamTypes")
    def refresh_token_param_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to look for the refresh token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        """
        return pulumi.get(self, "refresh_token_param_types")

    @refresh_token_param_types.setter
    def refresh_token_param_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "refresh_token_param_types", value)

    @property
    @pulumi.getter(name="refreshTokens")
    def refresh_tokens(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the plugin should try to refresh (soon to be) expired access tokens if the plugin has a `refresh_token` available.
        """
        return pulumi.get(self, "refresh_tokens")

    @refresh_tokens.setter
    def refresh_tokens(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "refresh_tokens", value)

    @property
    @pulumi.getter(name="requireProofKeyForCodeExchange")
    def require_proof_key_for_code_exchange(self) -> Optional[pulumi.Input[bool]]:
        """
        Forcibly enable or disable the proof key for code exchange. When not set the value is determined through the discovery using the value of `code_challenge_methods_supported`, and enabled automatically (in case the `code_challenge_methods_supported` is missing, the PKCE will not be enabled).
        """
        return pulumi.get(self, "require_proof_key_for_code_exchange")

    @require_proof_key_for_code_exchange.setter
    def require_proof_key_for_code_exchange(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_proof_key_for_code_exchange", value)

    @property
    @pulumi.getter(name="requirePushedAuthorizationRequests")
    def require_pushed_authorization_requests(self) -> Optional[pulumi.Input[bool]]:
        """
        Forcibly enable or disable the pushed authorization requests. When not set the value is determined through the discovery using the value of `require_pushed_authorization_requests` (which defaults to `false`).
        """
        return pulumi.get(self, "require_pushed_authorization_requests")

    @require_pushed_authorization_requests.setter
    def require_pushed_authorization_requests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_pushed_authorization_requests", value)

    @property
    @pulumi.getter(name="requireSignedRequestObject")
    def require_signed_request_object(self) -> Optional[pulumi.Input[bool]]:
        """
        Forcibly enable or disable the usage of signed request object on authorization or pushed authorization endpoint. When not set the value is determined through the discovery using the value of `require_signed_request_object`, and enabled automatically (in case the `require_signed_request_object` is missing, the feature will not be enabled).
        """
        return pulumi.get(self, "require_signed_request_object")

    @require_signed_request_object.setter
    def require_signed_request_object(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_signed_request_object", value)

    @property
    @pulumi.getter(name="resolveDistributedClaims")
    def resolve_distributed_claims(self) -> Optional[pulumi.Input[bool]]:
        """
        Distributed claims are represented by the `_claim_names` and `_claim_sources` members of the JSON object containing the claims. If this parameter is set to `true`, the plugin explicitly resolves these distributed claims.
        """
        return pulumi.get(self, "resolve_distributed_claims")

    @resolve_distributed_claims.setter
    def resolve_distributed_claims(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "resolve_distributed_claims", value)

    @property
    @pulumi.getter(name="responseMode")
    def response_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Response mode passed to the authorization endpoint: - `query`: for parameters in query string - `form_post`: for parameters in request body - `fragment`: for parameters in uri fragment (rarely useful as the plugin itself cannot read it) - `query.jwt`, `form_post.jwt`, `fragment.jwt`: similar to `query`, `form_post` and `fragment` but the parameters are encoded in a JWT - `jwt`: shortcut that indicates the default encoding for the requested response type. must be one of ["query", "form_post", "fragment", "query.jwt", "form_post.jwt", "fragment.jwt", "jwt"]
        """
        return pulumi.get(self, "response_mode")

    @response_mode.setter
    def response_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_mode", value)

    @property
    @pulumi.getter(name="responseTypes")
    def response_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The response type passed to the authorization endpoint.
        """
        return pulumi.get(self, "response_types")

    @response_types.setter
    def response_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "response_types", value)

    @property
    @pulumi.getter
    def reverify(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to always verify tokens stored in the session.
        """
        return pulumi.get(self, "reverify")

    @reverify.setter
    def reverify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reverify", value)

    @property
    @pulumi.getter(name="revocationEndpoint")
    def revocation_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The revocation endpoint. If set it overrides the value in `revocation_endpoint` returned by the discovery endpoint.
        """
        return pulumi.get(self, "revocation_endpoint")

    @revocation_endpoint.setter
    def revocation_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revocation_endpoint", value)

    @property
    @pulumi.getter(name="revocationEndpointAuthMethod")
    def revocation_endpoint_auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        The revocation endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        """
        return pulumi.get(self, "revocation_endpoint_auth_method")

    @revocation_endpoint_auth_method.setter
    def revocation_endpoint_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revocation_endpoint_auth_method", value)

    @property
    @pulumi.getter(name="revocationTokenParamName")
    def revocation_token_param_name(self) -> Optional[pulumi.Input[str]]:
        """
        Designate token's parameter name for revocation.
        """
        return pulumi.get(self, "revocation_token_param_name")

    @revocation_token_param_name.setter
    def revocation_token_param_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "revocation_token_param_name", value)

    @property
    @pulumi.getter(name="rolesClaims")
    def roles_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The claim that contains the roles. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "roles_claims")

    @roles_claims.setter
    def roles_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles_claims", value)

    @property
    @pulumi.getter(name="rolesRequireds")
    def roles_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The roles (`roles_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        """
        return pulumi.get(self, "roles_requireds")

    @roles_requireds.setter
    def roles_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles_requireds", value)

    @property
    @pulumi.getter(name="runOnPreflight")
    def run_on_preflight(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to run this plugin on pre-flight (`OPTIONS`) requests.
        """
        return pulumi.get(self, "run_on_preflight")

    @run_on_preflight.setter
    def run_on_preflight(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "run_on_preflight", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The scopes passed to the authorization and token endpoints.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="scopesClaims")
    def scopes_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The claim that contains the scopes. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "scopes_claims")

    @scopes_claims.setter
    def scopes_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes_claims", value)

    @property
    @pulumi.getter(name="scopesRequireds")
    def scopes_requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The scopes (`scopes_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        """
        return pulumi.get(self, "scopes_requireds")

    @scopes_requireds.setter
    def scopes_requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes_requireds", value)

    @property
    @pulumi.getter(name="searchUserInfo")
    def search_user_info(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether to use the user info endpoint to get additional claims for consumer mapping, credential mapping, authenticated groups, and upstream and downstream headers.
        """
        return pulumi.get(self, "search_user_info")

    @search_user_info.setter
    def search_user_info(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "search_user_info", value)

    @property
    @pulumi.getter(name="sessionAbsoluteTimeout")
    def session_absolute_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Limits how long the session can be renewed in seconds, until re-authentication is required. 0 disables the checks.
        """
        return pulumi.get(self, "session_absolute_timeout")

    @session_absolute_timeout.setter
    def session_absolute_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_absolute_timeout", value)

    @property
    @pulumi.getter(name="sessionAudience")
    def session_audience(self) -> Optional[pulumi.Input[str]]:
        """
        The session audience, which is the intended target application. For example `"my-application"`.
        """
        return pulumi.get(self, "session_audience")

    @session_audience.setter
    def session_audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_audience", value)

    @property
    @pulumi.getter(name="sessionCookieDomain")
    def session_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The session cookie Domain flag.
        """
        return pulumi.get(self, "session_cookie_domain")

    @session_cookie_domain.setter
    def session_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_domain", value)

    @property
    @pulumi.getter(name="sessionCookieHttpOnly")
    def session_cookie_http_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        """
        return pulumi.get(self, "session_cookie_http_only")

    @session_cookie_http_only.setter
    def session_cookie_http_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_cookie_http_only", value)

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        The session cookie name.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_name", value)

    @property
    @pulumi.getter(name="sessionCookiePath")
    def session_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        The session cookie Path flag.
        """
        return pulumi.get(self, "session_cookie_path")

    @session_cookie_path.setter
    def session_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_path", value)

    @property
    @pulumi.getter(name="sessionCookieSameSite")
    def session_cookie_same_site(self) -> Optional[pulumi.Input[str]]:
        """
        Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        """
        return pulumi.get(self, "session_cookie_same_site")

    @session_cookie_same_site.setter
    def session_cookie_same_site(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_same_site", value)

    @property
    @pulumi.getter(name="sessionCookieSecure")
    def session_cookie_secure(self) -> Optional[pulumi.Input[bool]]:
        """
        Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        """
        return pulumi.get(self, "session_cookie_secure")

    @session_cookie_secure.setter
    def session_cookie_secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_cookie_secure", value)

    @property
    @pulumi.getter(name="sessionEnforceSameSubject")
    def session_enforce_same_subject(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to `true`, audiences are forced to share the same subject.
        """
        return pulumi.get(self, "session_enforce_same_subject")

    @session_enforce_same_subject.setter
    def session_enforce_same_subject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_enforce_same_subject", value)

    @property
    @pulumi.getter(name="sessionHashStorageKey")
    def session_hash_storage_key(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.
        """
        return pulumi.get(self, "session_hash_storage_key")

    @session_hash_storage_key.setter
    def session_hash_storage_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_hash_storage_key", value)

    @property
    @pulumi.getter(name="sessionHashSubject")
    def session_hash_subject(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.
        """
        return pulumi.get(self, "session_hash_subject")

    @session_hash_subject.setter
    def session_hash_subject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_hash_subject", value)

    @property
    @pulumi.getter(name="sessionIdlingTimeout")
    def session_idling_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long the session can be inactive until it is considered invalid in seconds. 0 disables the checks and touching.
        """
        return pulumi.get(self, "session_idling_timeout")

    @session_idling_timeout.setter
    def session_idling_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_idling_timeout", value)

    @property
    @pulumi.getter(name="sessionMemcachedHost")
    def session_memcached_host(self) -> Optional[pulumi.Input[str]]:
        """
        The memcached host.
        """
        return pulumi.get(self, "session_memcached_host")

    @session_memcached_host.setter
    def session_memcached_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_memcached_host", value)

    @property
    @pulumi.getter(name="sessionMemcachedPort")
    def session_memcached_port(self) -> Optional[pulumi.Input[int]]:
        """
        The memcached port.
        """
        return pulumi.get(self, "session_memcached_port")

    @session_memcached_port.setter
    def session_memcached_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_memcached_port", value)

    @property
    @pulumi.getter(name="sessionMemcachedPrefix")
    def session_memcached_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The memcached session key prefix.
        """
        return pulumi.get(self, "session_memcached_prefix")

    @session_memcached_prefix.setter
    def session_memcached_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_memcached_prefix", value)

    @property
    @pulumi.getter(name="sessionMemcachedSocket")
    def session_memcached_socket(self) -> Optional[pulumi.Input[str]]:
        """
        The memcached unix socket path.
        """
        return pulumi.get(self, "session_memcached_socket")

    @session_memcached_socket.setter
    def session_memcached_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_memcached_socket", value)

    @property
    @pulumi.getter(name="sessionRedisClusterMaxRedirections")
    def session_redis_cluster_max_redirections(self) -> Optional[pulumi.Input[int]]:
        """
        The Redis cluster maximum redirects.
        """
        return pulumi.get(self, "session_redis_cluster_max_redirections")

    @session_redis_cluster_max_redirections.setter
    def session_redis_cluster_max_redirections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_cluster_max_redirections", value)

    @property
    @pulumi.getter(name="sessionRedisClusterNodes")
    def session_redis_cluster_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigSessionRedisClusterNodeArgs']]]]:
        """
        The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.
        """
        return pulumi.get(self, "session_redis_cluster_nodes")

    @session_redis_cluster_nodes.setter
    def session_redis_cluster_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginOpenidConnectConfigSessionRedisClusterNodeArgs']]]]):
        pulumi.set(self, "session_redis_cluster_nodes", value)

    @property
    @pulumi.getter(name="sessionRedisConnectTimeout")
    def session_redis_connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Session redis connection timeout in milliseconds.
        """
        return pulumi.get(self, "session_redis_connect_timeout")

    @session_redis_connect_timeout.setter
    def session_redis_connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_connect_timeout", value)

    @property
    @pulumi.getter(name="sessionRedisHost")
    def session_redis_host(self) -> Optional[pulumi.Input[str]]:
        """
        The Redis host.
        """
        return pulumi.get(self, "session_redis_host")

    @session_redis_host.setter
    def session_redis_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_host", value)

    @property
    @pulumi.getter(name="sessionRedisPassword")
    def session_redis_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to use for Redis connection when the `redis` session storage is defined. If undefined, no AUTH commands are sent to Redis.
        """
        return pulumi.get(self, "session_redis_password")

    @session_redis_password.setter
    def session_redis_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_password", value)

    @property
    @pulumi.getter(name="sessionRedisPort")
    def session_redis_port(self) -> Optional[pulumi.Input[int]]:
        """
        The Redis port.
        """
        return pulumi.get(self, "session_redis_port")

    @session_redis_port.setter
    def session_redis_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_port", value)

    @property
    @pulumi.getter(name="sessionRedisPrefix")
    def session_redis_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The Redis session key prefix.
        """
        return pulumi.get(self, "session_redis_prefix")

    @session_redis_prefix.setter
    def session_redis_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_prefix", value)

    @property
    @pulumi.getter(name="sessionRedisReadTimeout")
    def session_redis_read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Session redis read timeout in milliseconds.
        """
        return pulumi.get(self, "session_redis_read_timeout")

    @session_redis_read_timeout.setter
    def session_redis_read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_read_timeout", value)

    @property
    @pulumi.getter(name="sessionRedisSendTimeout")
    def session_redis_send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Session redis send timeout in milliseconds.
        """
        return pulumi.get(self, "session_redis_send_timeout")

    @session_redis_send_timeout.setter
    def session_redis_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_send_timeout", value)

    @property
    @pulumi.getter(name="sessionRedisServerName")
    def session_redis_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SNI used for connecting the Redis server.
        """
        return pulumi.get(self, "session_redis_server_name")

    @session_redis_server_name.setter
    def session_redis_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_server_name", value)

    @property
    @pulumi.getter(name="sessionRedisSocket")
    def session_redis_socket(self) -> Optional[pulumi.Input[str]]:
        """
        The Redis unix socket path.
        """
        return pulumi.get(self, "session_redis_socket")

    @session_redis_socket.setter
    def session_redis_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_socket", value)

    @property
    @pulumi.getter(name="sessionRedisSsl")
    def session_redis_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL/TLS for Redis connection.
        """
        return pulumi.get(self, "session_redis_ssl")

    @session_redis_ssl.setter
    def session_redis_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_redis_ssl", value)

    @property
    @pulumi.getter(name="sessionRedisSslVerify")
    def session_redis_ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify identity provider server certificate.
        """
        return pulumi.get(self, "session_redis_ssl_verify")

    @session_redis_ssl_verify.setter
    def session_redis_ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_redis_ssl_verify", value)

    @property
    @pulumi.getter(name="sessionRedisUsername")
    def session_redis_username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for Redis connection when the `redis` session storage is defined and ACL authentication is desired. If undefined, ACL authentication will not be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        """
        return pulumi.get(self, "session_redis_username")

    @session_redis_username.setter
    def session_redis_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_username", value)

    @property
    @pulumi.getter(name="sessionRemember")
    def session_remember(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables persistent sessions.
        """
        return pulumi.get(self, "session_remember")

    @session_remember.setter
    def session_remember(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_remember", value)

    @property
    @pulumi.getter(name="sessionRememberAbsoluteTimeout")
    def session_remember_absolute_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Limits how long the persistent session can be renewed in seconds, until re-authentication is required. 0 disables the checks.
        """
        return pulumi.get(self, "session_remember_absolute_timeout")

    @session_remember_absolute_timeout.setter
    def session_remember_absolute_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_remember_absolute_timeout", value)

    @property
    @pulumi.getter(name="sessionRememberCookieName")
    def session_remember_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        Persistent session cookie name. Use with the `remember` configuration parameter.
        """
        return pulumi.get(self, "session_remember_cookie_name")

    @session_remember_cookie_name.setter
    def session_remember_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_remember_cookie_name", value)

    @property
    @pulumi.getter(name="sessionRememberRollingTimeout")
    def session_remember_rolling_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long the persistent session is considered valid in seconds. 0 disables the checks and rolling.
        """
        return pulumi.get(self, "session_remember_rolling_timeout")

    @session_remember_rolling_timeout.setter
    def session_remember_rolling_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_remember_rolling_timeout", value)

    @property
    @pulumi.getter(name="sessionRequestHeaders")
    def session_request_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of headers to send to upstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ "id", "timeout" ]` will set Session-Id and Session-Timeout request headers.
        """
        return pulumi.get(self, "session_request_headers")

    @session_request_headers.setter
    def session_request_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "session_request_headers", value)

    @property
    @pulumi.getter(name="sessionResponseHeaders")
    def session_response_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Set of headers to send to downstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ "id", "timeout" ]` will set Session-Id and Session-Timeout response headers.
        """
        return pulumi.get(self, "session_response_headers")

    @session_response_headers.setter
    def session_response_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "session_response_headers", value)

    @property
    @pulumi.getter(name="sessionRollingTimeout")
    def session_rolling_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies how long the session can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.
        """
        return pulumi.get(self, "session_rolling_timeout")

    @session_rolling_timeout.setter
    def session_rolling_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_rolling_timeout", value)

    @property
    @pulumi.getter(name="sessionSecret")
    def session_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The session secret.
        """
        return pulumi.get(self, "session_secret")

    @session_secret.setter
    def session_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_secret", value)

    @property
    @pulumi.getter(name="sessionStorage")
    def session_storage(self) -> Optional[pulumi.Input[str]]:
        """
        The session storage for session data: - `cookie`: stores session data with the session cookie (the session cannot be invalidated or revoked without changing session secret, but is stateless, and doesn't require a database) - `memcache`: stores session data in memcached - `redis`: stores session data in Redis. must be one of ["cookie", "memcache", "memcached", "redis"]
        """
        return pulumi.get(self, "session_storage")

    @session_storage.setter
    def session_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_storage", value)

    @property
    @pulumi.getter(name="sessionStoreMetadata")
    def session_store_metadata(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures whether or not session metadata should be stored. This metadata includes information about the active sessions for a specific audience belonging to a specific subject.
        """
        return pulumi.get(self, "session_store_metadata")

    @session_store_metadata.setter
    def session_store_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_store_metadata", value)

    @property
    @pulumi.getter(name="sslVerify")
    def ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify identity provider server certificate. If set to `true`, the plugin uses the CA certificate set in the `kong.conf` config parameter `lua_ssl_trusted_certificate`.
        """
        return pulumi.get(self, "ssl_verify")

    @ssl_verify.setter
    def ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_verify", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Network IO timeout in milliseconds.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="tlsClientAuthCertId")
    def tls_client_auth_cert_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Certificate entity representing the client certificate to use for mTLS client authentication for connections between Kong and the Auth Server.
        """
        return pulumi.get(self, "tls_client_auth_cert_id")

    @tls_client_auth_cert_id.setter
    def tls_client_auth_cert_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_client_auth_cert_id", value)

    @property
    @pulumi.getter(name="tlsClientAuthSslVerify")
    def tls_client_auth_ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify identity provider server certificate during mTLS client authentication.
        """
        return pulumi.get(self, "tls_client_auth_ssl_verify")

    @tls_client_auth_ssl_verify.setter
    def tls_client_auth_ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_client_auth_ssl_verify", value)

    @property
    @pulumi.getter(name="tokenCacheKeyIncludeScope")
    def token_cache_key_include_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        Include the scope in the token cache key, so token with different scopes are considered diffrent tokens.
        """
        return pulumi.get(self, "token_cache_key_include_scope")

    @token_cache_key_include_scope.setter
    def token_cache_key_include_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "token_cache_key_include_scope", value)

    @property
    @pulumi.getter(name="tokenEndpoint")
    def token_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The token endpoint. If set it overrides the value in `token_endpoint` returned by the discovery endpoint.
        """
        return pulumi.get(self, "token_endpoint")

    @token_endpoint.setter
    def token_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint", value)

    @property
    @pulumi.getter(name="tokenEndpointAuthMethod")
    def token_endpoint_auth_method(self) -> Optional[pulumi.Input[str]]:
        """
        The token endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        """
        return pulumi.get(self, "token_endpoint_auth_method")

    @token_endpoint_auth_method.setter
    def token_endpoint_auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_endpoint_auth_method", value)

    @property
    @pulumi.getter(name="tokenExchangeEndpoint")
    def token_exchange_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The token exchange endpoint.
        """
        return pulumi.get(self, "token_exchange_endpoint")

    @token_exchange_endpoint.setter
    def token_exchange_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_exchange_endpoint", value)

    @property
    @pulumi.getter(name="tokenHeadersClients")
    def token_headers_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra headers passed from the client to the token endpoint.
        """
        return pulumi.get(self, "token_headers_clients")

    @token_headers_clients.setter
    def token_headers_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_headers_clients", value)

    @property
    @pulumi.getter(name="tokenHeadersGrants")
    def token_headers_grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Enable the sending of the token endpoint response headers only with certain grants: - `password`: with OAuth password grant - `client_credentials`: with OAuth client credentials grant - `authorization_code`: with authorization code flow - `refresh_token` with refresh token grant.
        """
        return pulumi.get(self, "token_headers_grants")

    @token_headers_grants.setter
    def token_headers_grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_headers_grants", value)

    @property
    @pulumi.getter(name="tokenHeadersNames")
    def token_headers_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header names passed to the token endpoint.
        """
        return pulumi.get(self, "token_headers_names")

    @token_headers_names.setter
    def token_headers_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_headers_names", value)

    @property
    @pulumi.getter(name="tokenHeadersPrefix")
    def token_headers_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Add a prefix to the token endpoint response headers before forwarding them to the downstream client.
        """
        return pulumi.get(self, "token_headers_prefix")

    @token_headers_prefix.setter
    def token_headers_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_headers_prefix", value)

    @property
    @pulumi.getter(name="tokenHeadersReplays")
    def token_headers_replays(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The names of token endpoint response headers to forward to the downstream client.
        """
        return pulumi.get(self, "token_headers_replays")

    @token_headers_replays.setter
    def token_headers_replays(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_headers_replays", value)

    @property
    @pulumi.getter(name="tokenHeadersValues")
    def token_headers_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header values passed to the token endpoint.
        """
        return pulumi.get(self, "token_headers_values")

    @token_headers_values.setter
    def token_headers_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_headers_values", value)

    @property
    @pulumi.getter(name="tokenPostArgsClients")
    def token_post_args_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Pass extra arguments from the client to the OpenID-Connect plugin. If arguments exist, the client can pass them using: - Query parameters - Request Body - Request Header  This parameter can be used with `scope` values, like this:  `config.token_post_args_client=scope`  In this case, the token would take the `scope` value from the query parameter or from the request body or from the header and send it to the token endpoint.
        """
        return pulumi.get(self, "token_post_args_clients")

    @token_post_args_clients.setter
    def token_post_args_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_post_args_clients", value)

    @property
    @pulumi.getter(name="tokenPostArgsNames")
    def token_post_args_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra post argument names passed to the token endpoint.
        """
        return pulumi.get(self, "token_post_args_names")

    @token_post_args_names.setter
    def token_post_args_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_post_args_names", value)

    @property
    @pulumi.getter(name="tokenPostArgsValues")
    def token_post_args_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra post argument values passed to the token endpoint.
        """
        return pulumi.get(self, "token_post_args_values")

    @token_post_args_values.setter
    def token_post_args_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "token_post_args_values", value)

    @property
    @pulumi.getter(name="unauthorizedDestroySession")
    def unauthorized_destroy_session(self) -> Optional[pulumi.Input[bool]]:
        """
        Destroy any active session for the unauthorized requests.
        """
        return pulumi.get(self, "unauthorized_destroy_session")

    @unauthorized_destroy_session.setter
    def unauthorized_destroy_session(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unauthorized_destroy_session", value)

    @property
    @pulumi.getter(name="unauthorizedErrorMessage")
    def unauthorized_error_message(self) -> Optional[pulumi.Input[str]]:
        """
        The error message for the unauthorized requests (when not using the redirection).
        """
        return pulumi.get(self, "unauthorized_error_message")

    @unauthorized_error_message.setter
    def unauthorized_error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unauthorized_error_message", value)

    @property
    @pulumi.getter(name="unauthorizedRedirectUris")
    def unauthorized_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to redirect the client on unauthorized requests.
        """
        return pulumi.get(self, "unauthorized_redirect_uris")

    @unauthorized_redirect_uris.setter
    def unauthorized_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "unauthorized_redirect_uris", value)

    @property
    @pulumi.getter(name="unexpectedRedirectUris")
    def unexpected_redirect_uris(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Where to redirect the client when unexpected errors happen with the requests.
        """
        return pulumi.get(self, "unexpected_redirect_uris")

    @unexpected_redirect_uris.setter
    def unexpected_redirect_uris(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "unexpected_redirect_uris", value)

    @property
    @pulumi.getter(name="upstreamAccessTokenHeader")
    def upstream_access_token_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream access token header.
        """
        return pulumi.get(self, "upstream_access_token_header")

    @upstream_access_token_header.setter
    def upstream_access_token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_access_token_header", value)

    @property
    @pulumi.getter(name="upstreamAccessTokenJwkHeader")
    def upstream_access_token_jwk_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream access token JWK header.
        """
        return pulumi.get(self, "upstream_access_token_jwk_header")

    @upstream_access_token_jwk_header.setter
    def upstream_access_token_jwk_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_access_token_jwk_header", value)

    @property
    @pulumi.getter(name="upstreamHeadersClaims")
    def upstream_headers_claims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The upstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.
        """
        return pulumi.get(self, "upstream_headers_claims")

    @upstream_headers_claims.setter
    def upstream_headers_claims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "upstream_headers_claims", value)

    @property
    @pulumi.getter(name="upstreamHeadersNames")
    def upstream_headers_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The upstream header names for the claim values.
        """
        return pulumi.get(self, "upstream_headers_names")

    @upstream_headers_names.setter
    def upstream_headers_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "upstream_headers_names", value)

    @property
    @pulumi.getter(name="upstreamIdTokenHeader")
    def upstream_id_token_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream id token header.
        """
        return pulumi.get(self, "upstream_id_token_header")

    @upstream_id_token_header.setter
    def upstream_id_token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_id_token_header", value)

    @property
    @pulumi.getter(name="upstreamIdTokenJwkHeader")
    def upstream_id_token_jwk_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream id token JWK header.
        """
        return pulumi.get(self, "upstream_id_token_jwk_header")

    @upstream_id_token_jwk_header.setter
    def upstream_id_token_jwk_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_id_token_jwk_header", value)

    @property
    @pulumi.getter(name="upstreamIntrospectionHeader")
    def upstream_introspection_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream introspection header.
        """
        return pulumi.get(self, "upstream_introspection_header")

    @upstream_introspection_header.setter
    def upstream_introspection_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_introspection_header", value)

    @property
    @pulumi.getter(name="upstreamIntrospectionJwtHeader")
    def upstream_introspection_jwt_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream introspection JWT header.
        """
        return pulumi.get(self, "upstream_introspection_jwt_header")

    @upstream_introspection_jwt_header.setter
    def upstream_introspection_jwt_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_introspection_jwt_header", value)

    @property
    @pulumi.getter(name="upstreamRefreshTokenHeader")
    def upstream_refresh_token_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream refresh token header.
        """
        return pulumi.get(self, "upstream_refresh_token_header")

    @upstream_refresh_token_header.setter
    def upstream_refresh_token_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_refresh_token_header", value)

    @property
    @pulumi.getter(name="upstreamSessionIdHeader")
    def upstream_session_id_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream session id header.
        """
        return pulumi.get(self, "upstream_session_id_header")

    @upstream_session_id_header.setter
    def upstream_session_id_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_session_id_header", value)

    @property
    @pulumi.getter(name="upstreamUserInfoHeader")
    def upstream_user_info_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream user info header.
        """
        return pulumi.get(self, "upstream_user_info_header")

    @upstream_user_info_header.setter
    def upstream_user_info_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_user_info_header", value)

    @property
    @pulumi.getter(name="upstreamUserInfoJwtHeader")
    def upstream_user_info_jwt_header(self) -> Optional[pulumi.Input[str]]:
        """
        The upstream user info JWT header (in case the user info returns a JWT response).
        """
        return pulumi.get(self, "upstream_user_info_jwt_header")

    @upstream_user_info_jwt_header.setter
    def upstream_user_info_jwt_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upstream_user_info_jwt_header", value)

    @property
    @pulumi.getter(name="userinfoAccept")
    def userinfo_accept(self) -> Optional[pulumi.Input[str]]:
        """
        The value of `Accept` header for user info requests: - `application/json`: user info response as JSON - `application/jwt`: user info response as JWT (from the obsolete IETF draft document). must be one of ["application/json", "application/jwt"]
        """
        return pulumi.get(self, "userinfo_accept")

    @userinfo_accept.setter
    def userinfo_accept(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userinfo_accept", value)

    @property
    @pulumi.getter(name="userinfoEndpoint")
    def userinfo_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The user info endpoint. If set it overrides the value in `userinfo_endpoint` returned by the discovery endpoint.
        """
        return pulumi.get(self, "userinfo_endpoint")

    @userinfo_endpoint.setter
    def userinfo_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "userinfo_endpoint", value)

    @property
    @pulumi.getter(name="userinfoHeadersClients")
    def userinfo_headers_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra headers passed from the client to the user info endpoint.
        """
        return pulumi.get(self, "userinfo_headers_clients")

    @userinfo_headers_clients.setter
    def userinfo_headers_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "userinfo_headers_clients", value)

    @property
    @pulumi.getter(name="userinfoHeadersNames")
    def userinfo_headers_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header names passed to the user info endpoint.
        """
        return pulumi.get(self, "userinfo_headers_names")

    @userinfo_headers_names.setter
    def userinfo_headers_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "userinfo_headers_names", value)

    @property
    @pulumi.getter(name="userinfoHeadersValues")
    def userinfo_headers_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra header values passed to the user info endpoint.
        """
        return pulumi.get(self, "userinfo_headers_values")

    @userinfo_headers_values.setter
    def userinfo_headers_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "userinfo_headers_values", value)

    @property
    @pulumi.getter(name="userinfoQueryArgsClients")
    def userinfo_query_args_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra query arguments passed from the client to the user info endpoint.
        """
        return pulumi.get(self, "userinfo_query_args_clients")

    @userinfo_query_args_clients.setter
    def userinfo_query_args_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "userinfo_query_args_clients", value)

    @property
    @pulumi.getter(name="userinfoQueryArgsNames")
    def userinfo_query_args_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra query argument names passed to the user info endpoint.
        """
        return pulumi.get(self, "userinfo_query_args_names")

    @userinfo_query_args_names.setter
    def userinfo_query_args_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "userinfo_query_args_names", value)

    @property
    @pulumi.getter(name="userinfoQueryArgsValues")
    def userinfo_query_args_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Extra query argument values passed to the user info endpoint.
        """
        return pulumi.get(self, "userinfo_query_args_values")

    @userinfo_query_args_values.setter
    def userinfo_query_args_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "userinfo_query_args_values", value)

    @property
    @pulumi.getter(name="usingPseudoIssuer")
    def using_pseudo_issuer(self) -> Optional[pulumi.Input[bool]]:
        """
        If the plugin uses a pseudo issuer. When set to true, the plugin will not discover the configuration from the issuer URL specified with `config.issuer`.
        """
        return pulumi.get(self, "using_pseudo_issuer")

    @using_pseudo_issuer.setter
    def using_pseudo_issuer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "using_pseudo_issuer", value)

    @property
    @pulumi.getter(name="verifyClaims")
    def verify_claims(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify tokens for standard claims.
        """
        return pulumi.get(self, "verify_claims")

    @verify_claims.setter
    def verify_claims(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_claims", value)

    @property
    @pulumi.getter(name="verifyNonce")
    def verify_nonce(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify nonce on authorization code flow.
        """
        return pulumi.get(self, "verify_nonce")

    @verify_nonce.setter
    def verify_nonce(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_nonce", value)

    @property
    @pulumi.getter(name="verifyParameters")
    def verify_parameters(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify plugin configuration against discovery.
        """
        return pulumi.get(self, "verify_parameters")

    @verify_parameters.setter
    def verify_parameters(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_parameters", value)

    @property
    @pulumi.getter(name="verifySignature")
    def verify_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify signature of tokens.
        """
        return pulumi.get(self, "verify_signature")

    @verify_signature.setter
    def verify_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_signature", value)


@pulumi.input_type
class GatewayPluginOpenidConnectConfigClientJwkArgs:
    def __init__(__self__, *,
                 alg: Optional[pulumi.Input[str]] = None,
                 crv: Optional[pulumi.Input[str]] = None,
                 d: Optional[pulumi.Input[str]] = None,
                 dp: Optional[pulumi.Input[str]] = None,
                 dq: Optional[pulumi.Input[str]] = None,
                 e: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 k: Optional[pulumi.Input[str]] = None,
                 key_ops: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 kid: Optional[pulumi.Input[str]] = None,
                 kty: Optional[pulumi.Input[str]] = None,
                 n: Optional[pulumi.Input[str]] = None,
                 oth: Optional[pulumi.Input[str]] = None,
                 p: Optional[pulumi.Input[str]] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 qi: Optional[pulumi.Input[str]] = None,
                 r: Optional[pulumi.Input[str]] = None,
                 t: Optional[pulumi.Input[str]] = None,
                 use: Optional[pulumi.Input[str]] = None,
                 x: Optional[pulumi.Input[str]] = None,
                 x5cs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 x5t: Optional[pulumi.Input[str]] = None,
                 x5t_number_s256: Optional[pulumi.Input[str]] = None,
                 x5u: Optional[pulumi.Input[str]] = None,
                 y: Optional[pulumi.Input[str]] = None):
        if alg is not None:
            pulumi.set(__self__, "alg", alg)
        if crv is not None:
            pulumi.set(__self__, "crv", crv)
        if d is not None:
            pulumi.set(__self__, "d", d)
        if dp is not None:
            pulumi.set(__self__, "dp", dp)
        if dq is not None:
            pulumi.set(__self__, "dq", dq)
        if e is not None:
            pulumi.set(__self__, "e", e)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if k is not None:
            pulumi.set(__self__, "k", k)
        if key_ops is not None:
            pulumi.set(__self__, "key_ops", key_ops)
        if kid is not None:
            pulumi.set(__self__, "kid", kid)
        if kty is not None:
            pulumi.set(__self__, "kty", kty)
        if n is not None:
            pulumi.set(__self__, "n", n)
        if oth is not None:
            pulumi.set(__self__, "oth", oth)
        if p is not None:
            pulumi.set(__self__, "p", p)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if qi is not None:
            pulumi.set(__self__, "qi", qi)
        if r is not None:
            pulumi.set(__self__, "r", r)
        if t is not None:
            pulumi.set(__self__, "t", t)
        if use is not None:
            pulumi.set(__self__, "use", use)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if x5cs is not None:
            pulumi.set(__self__, "x5cs", x5cs)
        if x5t is not None:
            pulumi.set(__self__, "x5t", x5t)
        if x5t_number_s256 is not None:
            pulumi.set(__self__, "x5t_number_s256", x5t_number_s256)
        if x5u is not None:
            pulumi.set(__self__, "x5u", x5u)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def alg(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alg")

    @alg.setter
    def alg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alg", value)

    @property
    @pulumi.getter
    def crv(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "crv")

    @crv.setter
    def crv(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crv", value)

    @property
    @pulumi.getter
    def d(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d")

    @d.setter
    def d(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d", value)

    @property
    @pulumi.getter
    def dp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dp")

    @dp.setter
    def dp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dp", value)

    @property
    @pulumi.getter
    def dq(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dq")

    @dq.setter
    def dq(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dq", value)

    @property
    @pulumi.getter
    def e(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "e")

    @e.setter
    def e(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "e", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def k(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "k")

    @k.setter
    def k(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "k", value)

    @property
    @pulumi.getter(name="keyOps")
    def key_ops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "key_ops")

    @key_ops.setter
    def key_ops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "key_ops", value)

    @property
    @pulumi.getter
    def kid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kid")

    @kid.setter
    def kid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kid", value)

    @property
    @pulumi.getter
    def kty(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kty")

    @kty.setter
    def kty(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kty", value)

    @property
    @pulumi.getter
    def n(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "n")

    @n.setter
    def n(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "n", value)

    @property
    @pulumi.getter
    def oth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oth")

    @oth.setter
    def oth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oth", value)

    @property
    @pulumi.getter
    def p(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "p")

    @p.setter
    def p(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "p", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def qi(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "qi")

    @qi.setter
    def qi(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "qi", value)

    @property
    @pulumi.getter
    def r(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "r")

    @r.setter
    def r(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "r", value)

    @property
    @pulumi.getter
    def t(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "t")

    @t.setter
    def t(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "t", value)

    @property
    @pulumi.getter
    def use(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use")

    @use.setter
    def use(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use", value)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def x5cs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "x5cs")

    @x5cs.setter
    def x5cs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "x5cs", value)

    @property
    @pulumi.getter
    def x5t(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x5t")

    @x5t.setter
    def x5t(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x5t", value)

    @property
    @pulumi.getter(name="x5tNumberS256")
    def x5t_number_s256(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x5t_number_s256")

    @x5t_number_s256.setter
    def x5t_number_s256(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x5t_number_s256", value)

    @property
    @pulumi.getter
    def x5u(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x5u")

    @x5u.setter
    def x5u(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x5u", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class GatewayPluginOpenidConnectConfigSessionRedisClusterNodeArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] ip: A string representing a host name, such as example.com.
        :param pulumi.Input[int] port: An integer representing a port number between 0 and 65535, inclusive.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a host name, such as example.com.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a port number between 0 and 65535, inclusive.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GatewayPluginOpenidConnectConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpenidConnectConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpenidConnectRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpenidConnectServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpentelemetryConfigArgs:
    def __init__(__self__, *,
                 batch_flush_delay: Optional[pulumi.Input[int]] = None,
                 batch_span_count: Optional[pulumi.Input[int]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 header_type: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 http_response_header_for_traceid: Optional[pulumi.Input[str]] = None,
                 propagation: Optional[pulumi.Input['GatewayPluginOpentelemetryConfigPropagationArgs']] = None,
                 queue: Optional[pulumi.Input['GatewayPluginOpentelemetryConfigQueueArgs']] = None,
                 read_timeout: Optional[pulumi.Input[int]] = None,
                 resource_attributes: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 sampling_rate: Optional[pulumi.Input[float]] = None,
                 send_timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] batch_flush_delay: The delay, in seconds, between two consecutive batches.
        :param pulumi.Input[int] batch_span_count: The number of spans to be sent in a single batch.
        :param pulumi.Input[int] connect_timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        :param pulumi.Input[str] endpoint: A string representing a URL, such as https://example.com/path/to/resource?q=search.
        :param pulumi.Input[str] header_type: must be one of ["preserve", "ignore", "b3", "b3-single", "w3c", "jaeger", "ot", "aws", "gcp", "datadog"]
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] headers: The custom headers to be added in the HTTP request sent to the OTLP server. This setting is useful for adding the authentication headers (token) for the APM backend.
        :param pulumi.Input[int] read_timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        :param pulumi.Input[float] sampling_rate: Tracing sampling rate for configuring the probability-based sampler. When set, this value supersedes the global `tracing_sampling_rate` setting from kong.conf.
        :param pulumi.Input[int] send_timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        if batch_flush_delay is not None:
            pulumi.set(__self__, "batch_flush_delay", batch_flush_delay)
        if batch_span_count is not None:
            pulumi.set(__self__, "batch_span_count", batch_span_count)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if header_type is not None:
            pulumi.set(__self__, "header_type", header_type)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_response_header_for_traceid is not None:
            pulumi.set(__self__, "http_response_header_for_traceid", http_response_header_for_traceid)
        if propagation is not None:
            pulumi.set(__self__, "propagation", propagation)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if resource_attributes is not None:
            pulumi.set(__self__, "resource_attributes", resource_attributes)
        if sampling_rate is not None:
            pulumi.set(__self__, "sampling_rate", sampling_rate)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)

    @property
    @pulumi.getter(name="batchFlushDelay")
    def batch_flush_delay(self) -> Optional[pulumi.Input[int]]:
        """
        The delay, in seconds, between two consecutive batches.
        """
        return pulumi.get(self, "batch_flush_delay")

    @batch_flush_delay.setter
    def batch_flush_delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_flush_delay", value)

    @property
    @pulumi.getter(name="batchSpanCount")
    def batch_span_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of spans to be sent in a single batch.
        """
        return pulumi.get(self, "batch_span_count")

    @batch_span_count.setter
    def batch_span_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_span_count", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a URL, such as https://example.com/path/to/resource?q=search.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="headerType")
    def header_type(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["preserve", "ignore", "b3", "b3-single", "w3c", "jaeger", "ot", "aws", "gcp", "datadog"]
        """
        return pulumi.get(self, "header_type")

    @header_type.setter
    def header_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_type", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The custom headers to be added in the HTTP request sent to the OTLP server. This setting is useful for adding the authentication headers (token) for the APM backend.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="httpResponseHeaderForTraceid")
    def http_response_header_for_traceid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_response_header_for_traceid")

    @http_response_header_for_traceid.setter
    def http_response_header_for_traceid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_response_header_for_traceid", value)

    @property
    @pulumi.getter
    def propagation(self) -> Optional[pulumi.Input['GatewayPluginOpentelemetryConfigPropagationArgs']]:
        return pulumi.get(self, "propagation")

    @propagation.setter
    def propagation(self, value: Optional[pulumi.Input['GatewayPluginOpentelemetryConfigPropagationArgs']]):
        pulumi.set(self, "propagation", value)

    @property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input['GatewayPluginOpentelemetryConfigQueueArgs']]:
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input['GatewayPluginOpentelemetryConfigQueueArgs']]):
        pulumi.set(self, "queue", value)

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="resourceAttributes")
    def resource_attributes(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_attributes")

    @resource_attributes.setter
    def resource_attributes(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "resource_attributes", value)

    @property
    @pulumi.getter(name="samplingRate")
    def sampling_rate(self) -> Optional[pulumi.Input[float]]:
        """
        Tracing sampling rate for configuring the probability-based sampler. When set, this value supersedes the global `tracing_sampling_rate` setting from kong.conf.
        """
        return pulumi.get(self, "sampling_rate")

    @sampling_rate.setter
    def sampling_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sampling_rate", value)

    @property
    @pulumi.getter(name="sendTimeout")
    def send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "send_timeout")

    @send_timeout.setter
    def send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "send_timeout", value)


@pulumi.input_type
class GatewayPluginOpentelemetryConfigPropagationArgs:
    def __init__(__self__, *,
                 clears: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_format: Optional[pulumi.Input[str]] = None,
                 extracts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 injects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] clears: Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.
        :param pulumi.Input[str] default_format: The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`. Not Null; must be one of ["b3", "gcp", "b3-single", "jaeger", "aws", "ot", "w3c", "datadog"]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] extracts: Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] injects: Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.
        """
        if clears is not None:
            pulumi.set(__self__, "clears", clears)
        if default_format is not None:
            pulumi.set(__self__, "default_format", default_format)
        if extracts is not None:
            pulumi.set(__self__, "extracts", extracts)
        if injects is not None:
            pulumi.set(__self__, "injects", injects)

    @property
    @pulumi.getter
    def clears(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.
        """
        return pulumi.get(self, "clears")

    @clears.setter
    def clears(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "clears", value)

    @property
    @pulumi.getter(name="defaultFormat")
    def default_format(self) -> Optional[pulumi.Input[str]]:
        """
        The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`. Not Null; must be one of ["b3", "gcp", "b3-single", "jaeger", "aws", "ot", "w3c", "datadog"]
        """
        return pulumi.get(self, "default_format")

    @default_format.setter
    def default_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_format", value)

    @property
    @pulumi.getter
    def extracts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.
        """
        return pulumi.get(self, "extracts")

    @extracts.setter
    def extracts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "extracts", value)

    @property
    @pulumi.getter
    def injects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.
        """
        return pulumi.get(self, "injects")

    @injects.setter
    def injects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "injects", value)


@pulumi.input_type
class GatewayPluginOpentelemetryConfigQueueArgs:
    def __init__(__self__, *,
                 initial_retry_delay: Optional[pulumi.Input[float]] = None,
                 max_batch_size: Optional[pulumi.Input[int]] = None,
                 max_bytes: Optional[pulumi.Input[int]] = None,
                 max_coalescing_delay: Optional[pulumi.Input[float]] = None,
                 max_entries: Optional[pulumi.Input[int]] = None,
                 max_retry_delay: Optional[pulumi.Input[float]] = None,
                 max_retry_time: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] initial_retry_delay: Time in seconds before the initial retry is made for a failing batch.
        :param pulumi.Input[int] max_batch_size: Maximum number of entries that can be processed at a time.
        :param pulumi.Input[int] max_bytes: Maximum number of bytes that can be waiting on a queue, requires string content.
        :param pulumi.Input[float] max_coalescing_delay: Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
        :param pulumi.Input[int] max_entries: Maximum number of entries that can be waiting on the queue.
        :param pulumi.Input[float] max_retry_delay: Maximum time in seconds between retries, caps exponential backoff.
        :param pulumi.Input[float] max_retry_time: Time in seconds before the queue gives up calling a failed handler for a batch.
        """
        if initial_retry_delay is not None:
            pulumi.set(__self__, "initial_retry_delay", initial_retry_delay)
        if max_batch_size is not None:
            pulumi.set(__self__, "max_batch_size", max_batch_size)
        if max_bytes is not None:
            pulumi.set(__self__, "max_bytes", max_bytes)
        if max_coalescing_delay is not None:
            pulumi.set(__self__, "max_coalescing_delay", max_coalescing_delay)
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_retry_delay is not None:
            pulumi.set(__self__, "max_retry_delay", max_retry_delay)
        if max_retry_time is not None:
            pulumi.set(__self__, "max_retry_time", max_retry_time)

    @property
    @pulumi.getter(name="initialRetryDelay")
    def initial_retry_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Time in seconds before the initial retry is made for a failing batch.
        """
        return pulumi.get(self, "initial_retry_delay")

    @initial_retry_delay.setter
    def initial_retry_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_retry_delay", value)

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of entries that can be processed at a time.
        """
        return pulumi.get(self, "max_batch_size")

    @max_batch_size.setter
    def max_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_batch_size", value)

    @property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of bytes that can be waiting on a queue, requires string content.
        """
        return pulumi.get(self, "max_bytes")

    @max_bytes.setter
    def max_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bytes", value)

    @property
    @pulumi.getter(name="maxCoalescingDelay")
    def max_coalescing_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
        """
        return pulumi.get(self, "max_coalescing_delay")

    @max_coalescing_delay.setter
    def max_coalescing_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_coalescing_delay", value)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of entries that can be waiting on the queue.
        """
        return pulumi.get(self, "max_entries")

    @max_entries.setter
    def max_entries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_entries", value)

    @property
    @pulumi.getter(name="maxRetryDelay")
    def max_retry_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum time in seconds between retries, caps exponential backoff.
        """
        return pulumi.get(self, "max_retry_delay")

    @max_retry_delay.setter
    def max_retry_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_retry_delay", value)

    @property
    @pulumi.getter(name="maxRetryTime")
    def max_retry_time(self) -> Optional[pulumi.Input[float]]:
        """
        Time in seconds before the queue gives up calling a failed handler for a batch.
        """
        return pulumi.get(self, "max_retry_time")

    @max_retry_time.setter
    def max_retry_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_retry_time", value)


@pulumi.input_type
class GatewayPluginOpentelemetryConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpentelemetryConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpentelemetryRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginOpentelemetryServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPostFunctionConfigArgs:
    def __init__(__self__, *,
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 body_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 header_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rewrites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_client_frames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_closes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_handshakes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_upstream_frames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if body_filters is not None:
            pulumi.set(__self__, "body_filters", body_filters)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if header_filters is not None:
            pulumi.set(__self__, "header_filters", header_filters)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if rewrites is not None:
            pulumi.set(__self__, "rewrites", rewrites)
        if ws_client_frames is not None:
            pulumi.set(__self__, "ws_client_frames", ws_client_frames)
        if ws_closes is not None:
            pulumi.set(__self__, "ws_closes", ws_closes)
        if ws_handshakes is not None:
            pulumi.set(__self__, "ws_handshakes", ws_handshakes)
        if ws_upstream_frames is not None:
            pulumi.set(__self__, "ws_upstream_frames", ws_upstream_frames)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "accesses")

    @accesses.setter
    def accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "accesses", value)

    @property
    @pulumi.getter(name="bodyFilters")
    def body_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "body_filters")

    @body_filters.setter
    def body_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "body_filters", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="headerFilters")
    def header_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "header_filters")

    @header_filters.setter
    def header_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "header_filters", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def rewrites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rewrites")

    @rewrites.setter
    def rewrites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rewrites", value)

    @property
    @pulumi.getter(name="wsClientFrames")
    def ws_client_frames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_client_frames")

    @ws_client_frames.setter
    def ws_client_frames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_client_frames", value)

    @property
    @pulumi.getter(name="wsCloses")
    def ws_closes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_closes")

    @ws_closes.setter
    def ws_closes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_closes", value)

    @property
    @pulumi.getter(name="wsHandshakes")
    def ws_handshakes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_handshakes")

    @ws_handshakes.setter
    def ws_handshakes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_handshakes", value)

    @property
    @pulumi.getter(name="wsUpstreamFrames")
    def ws_upstream_frames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_upstream_frames")

    @ws_upstream_frames.setter
    def ws_upstream_frames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_upstream_frames", value)


@pulumi.input_type
class GatewayPluginPostFunctionConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPostFunctionConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPostFunctionRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPostFunctionServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPreFunctionConfigArgs:
    def __init__(__self__, *,
                 accesses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 body_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 header_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 logs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rewrites: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_client_frames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_closes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_handshakes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ws_upstream_frames: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if accesses is not None:
            pulumi.set(__self__, "accesses", accesses)
        if body_filters is not None:
            pulumi.set(__self__, "body_filters", body_filters)
        if certificates is not None:
            pulumi.set(__self__, "certificates", certificates)
        if header_filters is not None:
            pulumi.set(__self__, "header_filters", header_filters)
        if logs is not None:
            pulumi.set(__self__, "logs", logs)
        if rewrites is not None:
            pulumi.set(__self__, "rewrites", rewrites)
        if ws_client_frames is not None:
            pulumi.set(__self__, "ws_client_frames", ws_client_frames)
        if ws_closes is not None:
            pulumi.set(__self__, "ws_closes", ws_closes)
        if ws_handshakes is not None:
            pulumi.set(__self__, "ws_handshakes", ws_handshakes)
        if ws_upstream_frames is not None:
            pulumi.set(__self__, "ws_upstream_frames", ws_upstream_frames)

    @property
    @pulumi.getter
    def accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "accesses")

    @accesses.setter
    def accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "accesses", value)

    @property
    @pulumi.getter(name="bodyFilters")
    def body_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "body_filters")

    @body_filters.setter
    def body_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "body_filters", value)

    @property
    @pulumi.getter
    def certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "certificates")

    @certificates.setter
    def certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificates", value)

    @property
    @pulumi.getter(name="headerFilters")
    def header_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "header_filters")

    @header_filters.setter
    def header_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "header_filters", value)

    @property
    @pulumi.getter
    def logs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "logs")

    @logs.setter
    def logs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "logs", value)

    @property
    @pulumi.getter
    def rewrites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "rewrites")

    @rewrites.setter
    def rewrites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "rewrites", value)

    @property
    @pulumi.getter(name="wsClientFrames")
    def ws_client_frames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_client_frames")

    @ws_client_frames.setter
    def ws_client_frames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_client_frames", value)

    @property
    @pulumi.getter(name="wsCloses")
    def ws_closes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_closes")

    @ws_closes.setter
    def ws_closes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_closes", value)

    @property
    @pulumi.getter(name="wsHandshakes")
    def ws_handshakes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_handshakes")

    @ws_handshakes.setter
    def ws_handshakes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_handshakes", value)

    @property
    @pulumi.getter(name="wsUpstreamFrames")
    def ws_upstream_frames(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ws_upstream_frames")

    @ws_upstream_frames.setter
    def ws_upstream_frames(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ws_upstream_frames", value)


@pulumi.input_type
class GatewayPluginPreFunctionConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPreFunctionConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPreFunctionRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPreFunctionServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPrometheusConfigArgs:
    def __init__(__self__, *,
                 bandwidth_metrics: Optional[pulumi.Input[bool]] = None,
                 latency_metrics: Optional[pulumi.Input[bool]] = None,
                 per_consumer: Optional[pulumi.Input[bool]] = None,
                 status_code_metrics: Optional[pulumi.Input[bool]] = None,
                 upstream_health_metrics: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] bandwidth_metrics: A boolean value that determines if bandwidth metrics should be collected. If enabled, `bandwidth_bytes` and `stream_sessions_total` metrics will be exported.
        :param pulumi.Input[bool] latency_metrics: A boolean value that determines if latency metrics should be collected. If enabled, `kong_latency_ms`, `upstream_latency_ms` and `request_latency_ms` metrics will be exported.
        :param pulumi.Input[bool] per_consumer: A boolean value that determines if per-consumer metrics should be collected. If enabled, the `kong_http_requests_total` and `kong_bandwidth_bytes` metrics fill in the consumer label when available.
        :param pulumi.Input[bool] status_code_metrics: A boolean value that determines if status code metrics should be collected. If enabled, `http_requests_total`, `stream_sessions_total` metrics will be exported.
        :param pulumi.Input[bool] upstream_health_metrics: A boolean value that determines if upstream metrics should be collected. If enabled, `upstream_target_health` metric will be exported.
        """
        if bandwidth_metrics is not None:
            pulumi.set(__self__, "bandwidth_metrics", bandwidth_metrics)
        if latency_metrics is not None:
            pulumi.set(__self__, "latency_metrics", latency_metrics)
        if per_consumer is not None:
            pulumi.set(__self__, "per_consumer", per_consumer)
        if status_code_metrics is not None:
            pulumi.set(__self__, "status_code_metrics", status_code_metrics)
        if upstream_health_metrics is not None:
            pulumi.set(__self__, "upstream_health_metrics", upstream_health_metrics)

    @property
    @pulumi.getter(name="bandwidthMetrics")
    def bandwidth_metrics(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that determines if bandwidth metrics should be collected. If enabled, `bandwidth_bytes` and `stream_sessions_total` metrics will be exported.
        """
        return pulumi.get(self, "bandwidth_metrics")

    @bandwidth_metrics.setter
    def bandwidth_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "bandwidth_metrics", value)

    @property
    @pulumi.getter(name="latencyMetrics")
    def latency_metrics(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that determines if latency metrics should be collected. If enabled, `kong_latency_ms`, `upstream_latency_ms` and `request_latency_ms` metrics will be exported.
        """
        return pulumi.get(self, "latency_metrics")

    @latency_metrics.setter
    def latency_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "latency_metrics", value)

    @property
    @pulumi.getter(name="perConsumer")
    def per_consumer(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that determines if per-consumer metrics should be collected. If enabled, the `kong_http_requests_total` and `kong_bandwidth_bytes` metrics fill in the consumer label when available.
        """
        return pulumi.get(self, "per_consumer")

    @per_consumer.setter
    def per_consumer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "per_consumer", value)

    @property
    @pulumi.getter(name="statusCodeMetrics")
    def status_code_metrics(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that determines if status code metrics should be collected. If enabled, `http_requests_total`, `stream_sessions_total` metrics will be exported.
        """
        return pulumi.get(self, "status_code_metrics")

    @status_code_metrics.setter
    def status_code_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "status_code_metrics", value)

    @property
    @pulumi.getter(name="upstreamHealthMetrics")
    def upstream_health_metrics(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that determines if upstream metrics should be collected. If enabled, `upstream_target_health` metric will be exported.
        """
        return pulumi.get(self, "upstream_health_metrics")

    @upstream_health_metrics.setter
    def upstream_health_metrics(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upstream_health_metrics", value)


@pulumi.input_type
class GatewayPluginPrometheusConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPrometheusConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPrometheusRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginPrometheusServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginProxyCacheConfigArgs:
    def __init__(__self__, *,
                 cache_control: Optional[pulumi.Input[bool]] = None,
                 cache_ttl: Optional[pulumi.Input[int]] = None,
                 content_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ignore_uri_case: Optional[pulumi.Input[bool]] = None,
                 memory: Optional[pulumi.Input['GatewayPluginProxyCacheConfigMemoryArgs']] = None,
                 request_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 response_codes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 response_headers: Optional[pulumi.Input['GatewayPluginProxyCacheConfigResponseHeadersArgs']] = None,
                 storage_ttl: Optional[pulumi.Input[int]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 vary_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vary_query_params: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[bool] cache_control: When enabled, respect the Cache-Control behaviors defined in RFC7234.
        :param pulumi.Input[int] cache_ttl: TTL, in seconds, of cache entities.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] content_types: Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] request_methods: Downstream request methods considered cacheable.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] response_codes: Upstream response status code considered cacheable.
        :param pulumi.Input['GatewayPluginProxyCacheConfigResponseHeadersArgs'] response_headers: Caching related diagnostic headers that should be included in cached responses
        :param pulumi.Input[int] storage_ttl: Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors.
        :param pulumi.Input[str] strategy: The backing data store in which to hold cache entities. must be one of ["memory"]
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vary_headers: Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vary_query_params: Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.
        """
        if cache_control is not None:
            pulumi.set(__self__, "cache_control", cache_control)
        if cache_ttl is not None:
            pulumi.set(__self__, "cache_ttl", cache_ttl)
        if content_types is not None:
            pulumi.set(__self__, "content_types", content_types)
        if ignore_uri_case is not None:
            pulumi.set(__self__, "ignore_uri_case", ignore_uri_case)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if request_methods is not None:
            pulumi.set(__self__, "request_methods", request_methods)
        if response_codes is not None:
            pulumi.set(__self__, "response_codes", response_codes)
        if response_headers is not None:
            pulumi.set(__self__, "response_headers", response_headers)
        if storage_ttl is not None:
            pulumi.set(__self__, "storage_ttl", storage_ttl)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if vary_headers is not None:
            pulumi.set(__self__, "vary_headers", vary_headers)
        if vary_query_params is not None:
            pulumi.set(__self__, "vary_query_params", vary_query_params)

    @property
    @pulumi.getter(name="cacheControl")
    def cache_control(self) -> Optional[pulumi.Input[bool]]:
        """
        When enabled, respect the Cache-Control behaviors defined in RFC7234.
        """
        return pulumi.get(self, "cache_control")

    @cache_control.setter
    def cache_control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cache_control", value)

    @property
    @pulumi.getter(name="cacheTtl")
    def cache_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        TTL, in seconds, of cache entities.
        """
        return pulumi.get(self, "cache_ttl")

    @cache_ttl.setter
    def cache_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cache_ttl", value)

    @property
    @pulumi.getter(name="contentTypes")
    def content_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value.
        """
        return pulumi.get(self, "content_types")

    @content_types.setter
    def content_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "content_types", value)

    @property
    @pulumi.getter(name="ignoreUriCase")
    def ignore_uri_case(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_uri_case")

    @ignore_uri_case.setter
    def ignore_uri_case(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_uri_case", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input['GatewayPluginProxyCacheConfigMemoryArgs']]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input['GatewayPluginProxyCacheConfigMemoryArgs']]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="requestMethods")
    def request_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Downstream request methods considered cacheable.
        """
        return pulumi.get(self, "request_methods")

    @request_methods.setter
    def request_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "request_methods", value)

    @property
    @pulumi.getter(name="responseCodes")
    def response_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Upstream response status code considered cacheable.
        """
        return pulumi.get(self, "response_codes")

    @response_codes.setter
    def response_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "response_codes", value)

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Optional[pulumi.Input['GatewayPluginProxyCacheConfigResponseHeadersArgs']]:
        """
        Caching related diagnostic headers that should be included in cached responses
        """
        return pulumi.get(self, "response_headers")

    @response_headers.setter
    def response_headers(self, value: Optional[pulumi.Input['GatewayPluginProxyCacheConfigResponseHeadersArgs']]):
        pulumi.set(self, "response_headers", value)

    @property
    @pulumi.getter(name="storageTtl")
    def storage_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors.
        """
        return pulumi.get(self, "storage_ttl")

    @storage_ttl.setter
    def storage_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_ttl", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The backing data store in which to hold cache entities. must be one of ["memory"]
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter(name="varyHeaders")
    def vary_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.
        """
        return pulumi.get(self, "vary_headers")

    @vary_headers.setter
    def vary_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vary_headers", value)

    @property
    @pulumi.getter(name="varyQueryParams")
    def vary_query_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.
        """
        return pulumi.get(self, "vary_query_params")

    @vary_query_params.setter
    def vary_query_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vary_query_params", value)


@pulumi.input_type
class GatewayPluginProxyCacheConfigMemoryArgs:
    def __init__(__self__, *,
                 dictionary_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dictionary_name: The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.
        """
        if dictionary_name is not None:
            pulumi.set(__self__, "dictionary_name", dictionary_name)

    @property
    @pulumi.getter(name="dictionaryName")
    def dictionary_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.
        """
        return pulumi.get(self, "dictionary_name")

    @dictionary_name.setter
    def dictionary_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dictionary_name", value)


@pulumi.input_type
class GatewayPluginProxyCacheConfigResponseHeadersArgs:
    def __init__(__self__, *,
                 age: Optional[pulumi.Input[bool]] = None,
                 x_cache_key: Optional[pulumi.Input[bool]] = None,
                 x_cache_status: Optional[pulumi.Input[bool]] = None):
        if age is not None:
            pulumi.set(__self__, "age", age)
        if x_cache_key is not None:
            pulumi.set(__self__, "x_cache_key", x_cache_key)
        if x_cache_status is not None:
            pulumi.set(__self__, "x_cache_status", x_cache_status)

    @property
    @pulumi.getter
    def age(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "age")

    @age.setter
    def age(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "age", value)

    @property
    @pulumi.getter(name="xCacheKey")
    def x_cache_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x_cache_key")

    @x_cache_key.setter
    def x_cache_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_cache_key", value)

    @property
    @pulumi.getter(name="xCacheStatus")
    def x_cache_status(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x_cache_status")

    @x_cache_status.setter
    def x_cache_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x_cache_status", value)


@pulumi.input_type
class GatewayPluginProxyCacheConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginProxyCacheConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginProxyCacheRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginProxyCacheServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingAdvancedConfigArgs:
    def __init__(__self__, *,
                 consumer_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dictionary_name: Optional[pulumi.Input[str]] = None,
                 disable_penalty: Optional[pulumi.Input[bool]] = None,
                 enforce_consumer_groups: Optional[pulumi.Input[bool]] = None,
                 error_code: Optional[pulumi.Input[float]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 hide_client_headers: Optional[pulumi.Input[bool]] = None,
                 identifier: Optional[pulumi.Input[str]] = None,
                 limits: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input['GatewayPluginRateLimitingAdvancedConfigRedisArgs']] = None,
                 retry_after_jitter_max: Optional[pulumi.Input[float]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 sync_rate: Optional[pulumi.Input[float]] = None,
                 window_sizes: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 window_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] consumer_groups: List of consumer groups allowed to override the rate limiting settings for the given Route or Service. Required if `enforce_consumer_groups` is set to `true`.
        :param pulumi.Input[str] dictionary_name: The shared dictionary where counters are stored. When the plugin is configured to synchronize counter data externally (that is `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't `-1`), this dictionary serves as a buffer to populate counters in the data store on each synchronization cycle.
        :param pulumi.Input[bool] disable_penalty: If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type.
        :param pulumi.Input[bool] enforce_consumer_groups: Determines if consumer groups are allowed to override the rate limiting settings for the given Route or Service. Flipping `enforce_consumer_groups` from `true` to `false` disables the group override, but does not clear the list of consumer groups. You can then flip `enforce_consumer_groups` to `true` to re-enforce the groups.
        :param pulumi.Input[float] error_code: Set a custom error code to return when the rate limit is exceeded.
        :param pulumi.Input[str] error_message: Set a custom error message to return when the rate limit is exceeded.
        :param pulumi.Input[str] header_name: A string representing an HTTP header name.
        :param pulumi.Input[bool] hide_client_headers: Optionally hide informative response headers that would otherwise provide information about the current status of limits and counters.
        :param pulumi.Input[str] identifier: The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. must be one of ["ip", "credential", "consumer", "service", "header", "path", "consumer-group"]
        :param pulumi.Input[Sequence[pulumi.Input[float]]] limits: One or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
        :param pulumi.Input[str] namespace: The rate limiting library namespace to use for this plugin instance. Counter data and sync configuration is isolated in each namespace. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `window_size`, `dictionary_name`, need to be the same.
        :param pulumi.Input[str] path: A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        :param pulumi.Input[float] retry_after_jitter_max: The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After` header of denied requests (status = `429`) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is `0`; in this case, the `Retry-After` header is equal to the `RateLimit-Reset` header.
        :param pulumi.Input[str] strategy: The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`. must be one of ["cluster", "redis", "local"]
        :param pulumi.Input[float] sync_rate: How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 will sync the counters in the specified number of seconds. The minimum allowed interval is 0.02 seconds (20ms).
        :param pulumi.Input[Sequence[pulumi.Input[float]]] window_sizes: One or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
        :param pulumi.Input[str] window_type: Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters. must be one of ["fixed", "sliding"]
        """
        if consumer_groups is not None:
            pulumi.set(__self__, "consumer_groups", consumer_groups)
        if dictionary_name is not None:
            pulumi.set(__self__, "dictionary_name", dictionary_name)
        if disable_penalty is not None:
            pulumi.set(__self__, "disable_penalty", disable_penalty)
        if enforce_consumer_groups is not None:
            pulumi.set(__self__, "enforce_consumer_groups", enforce_consumer_groups)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if hide_client_headers is not None:
            pulumi.set(__self__, "hide_client_headers", hide_client_headers)
        if identifier is not None:
            pulumi.set(__self__, "identifier", identifier)
        if limits is not None:
            pulumi.set(__self__, "limits", limits)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if retry_after_jitter_max is not None:
            pulumi.set(__self__, "retry_after_jitter_max", retry_after_jitter_max)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)
        if sync_rate is not None:
            pulumi.set(__self__, "sync_rate", sync_rate)
        if window_sizes is not None:
            pulumi.set(__self__, "window_sizes", window_sizes)
        if window_type is not None:
            pulumi.set(__self__, "window_type", window_type)

    @property
    @pulumi.getter(name="consumerGroups")
    def consumer_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of consumer groups allowed to override the rate limiting settings for the given Route or Service. Required if `enforce_consumer_groups` is set to `true`.
        """
        return pulumi.get(self, "consumer_groups")

    @consumer_groups.setter
    def consumer_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "consumer_groups", value)

    @property
    @pulumi.getter(name="dictionaryName")
    def dictionary_name(self) -> Optional[pulumi.Input[str]]:
        """
        The shared dictionary where counters are stored. When the plugin is configured to synchronize counter data externally (that is `config.strategy` is `cluster` or `redis` and `config.sync_rate` isn't `-1`), this dictionary serves as a buffer to populate counters in the data store on each synchronization cycle.
        """
        return pulumi.get(self, "dictionary_name")

    @dictionary_name.setter
    def dictionary_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dictionary_name", value)

    @property
    @pulumi.getter(name="disablePenalty")
    def disable_penalty(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, this doesn't count denied requests (status = `429`). If set to `false`, all requests, including denied ones, are counted. This parameter only affects the `sliding` window_type.
        """
        return pulumi.get(self, "disable_penalty")

    @disable_penalty.setter
    def disable_penalty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_penalty", value)

    @property
    @pulumi.getter(name="enforceConsumerGroups")
    def enforce_consumer_groups(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines if consumer groups are allowed to override the rate limiting settings for the given Route or Service. Flipping `enforce_consumer_groups` from `true` to `false` disables the group override, but does not clear the list of consumer groups. You can then flip `enforce_consumer_groups` to `true` to re-enforce the groups.
        """
        return pulumi.get(self, "enforce_consumer_groups")

    @enforce_consumer_groups.setter
    def enforce_consumer_groups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enforce_consumer_groups", value)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[float]]:
        """
        Set a custom error code to return when the rate limit is exceeded.
        """
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        Set a custom error message to return when the rate limit is exceeded.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing an HTTP header name.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="hideClientHeaders")
    def hide_client_headers(self) -> Optional[pulumi.Input[bool]]:
        """
        Optionally hide informative response headers that would otherwise provide information about the current status of limits and counters.
        """
        return pulumi.get(self, "hide_client_headers")

    @hide_client_headers.setter
    def hide_client_headers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_client_headers", value)

    @property
    @pulumi.getter
    def identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The type of identifier used to generate the rate limit key. Defines the scope used to increment the rate limiting counters. Can be `ip`, `credential`, `consumer`, `service`, `header`, `path` or `consumer-group`. must be one of ["ip", "credential", "consumer", "service", "header", "path", "consumer-group"]
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def limits(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        One or more requests-per-window limits to apply. There must be a matching number of window limits and sizes specified.
        """
        return pulumi.get(self, "limits")

    @limits.setter
    def limits(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "limits", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The rate limiting library namespace to use for this plugin instance. Counter data and sync configuration is isolated in each namespace. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `window_size`, `dictionary_name`, need to be the same.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input['GatewayPluginRateLimitingAdvancedConfigRedisArgs']]:
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input['GatewayPluginRateLimitingAdvancedConfigRedisArgs']]):
        pulumi.set(self, "redis", value)

    @property
    @pulumi.getter(name="retryAfterJitterMax")
    def retry_after_jitter_max(self) -> Optional[pulumi.Input[float]]:
        """
        The upper bound of a jitter (random delay) in seconds to be added to the `Retry-After` header of denied requests (status = `429`) in order to prevent all the clients from coming back at the same time. The lower bound of the jitter is `0`; in this case, the `Retry-After` header is equal to the `RateLimit-Reset` header.
        """
        return pulumi.get(self, "retry_after_jitter_max")

    @retry_after_jitter_max.setter
    def retry_after_jitter_max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "retry_after_jitter_max", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        """
        The rate-limiting strategy to use for retrieving and incrementing the limits. Available values are: `local` and `cluster`. must be one of ["cluster", "redis", "local"]
        """
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter(name="syncRate")
    def sync_rate(self) -> Optional[pulumi.Input[float]]:
        """
        How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 will sync the counters in the specified number of seconds. The minimum allowed interval is 0.02 seconds (20ms).
        """
        return pulumi.get(self, "sync_rate")

    @sync_rate.setter
    def sync_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sync_rate", value)

    @property
    @pulumi.getter(name="windowSizes")
    def window_sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        One or more window sizes to apply a limit to (defined in seconds). There must be a matching number of window limits and sizes specified.
        """
        return pulumi.get(self, "window_sizes")

    @window_sizes.setter
    def window_sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "window_sizes", value)

    @property
    @pulumi.getter(name="windowType")
    def window_type(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the time window type to either `sliding` (default) or `fixed`. Sliding windows apply the rate limiting logic while taking into account previous hit rates (from the window that immediately precedes the current) using a dynamic weight. Fixed windows consist of buckets that are statically assigned to a definitive time range, each request is mapped to only one fixed window based on its timestamp and will affect only that window's counters. must be one of ["fixed", "sliding"]
        """
        return pulumi.get(self, "window_type")

    @window_type.setter
    def window_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window_type", value)


@pulumi.input_type
class GatewayPluginRateLimitingAdvancedConfigRedisArgs:
    def __init__(__self__, *,
                 cluster_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 database: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 keepalive_backlog: Optional[pulumi.Input[int]] = None,
                 keepalive_pool_size: Optional[pulumi.Input[int]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 read_timeout: Optional[pulumi.Input[int]] = None,
                 send_timeout: Optional[pulumi.Input[int]] = None,
                 sentinel_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sentinel_master: Optional[pulumi.Input[str]] = None,
                 sentinel_password: Optional[pulumi.Input[str]] = None,
                 sentinel_role: Optional[pulumi.Input[str]] = None,
                 sentinel_username: Optional[pulumi.Input[str]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 ssl_verify: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cluster_addresses: Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Cluster. Each string element must be a hostname. The minimum length of the array is 1 element.
        :param pulumi.Input[int] connect_timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        :param pulumi.Input[int] database: Database to use for the Redis connection when using the `redis` strategy
        :param pulumi.Input[str] host: A string representing a host name, such as example.com.
        :param pulumi.Input[int] keepalive_backlog: Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
        :param pulumi.Input[int] keepalive_pool_size: The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
        :param pulumi.Input[str] password: Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
        :param pulumi.Input[int] port: An integer representing a port number between 0 and 65535, inclusive.
        :param pulumi.Input[int] read_timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        :param pulumi.Input[int] send_timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sentinel_addresses: Sentinel addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. Each string element must be a hostname. The minimum length of the array is 1 element.
        :param pulumi.Input[str] sentinel_master: Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
        :param pulumi.Input[str] sentinel_password: Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
        :param pulumi.Input[str] sentinel_role: Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. must be one of ["master", "slave", "any"]
        :param pulumi.Input[str] sentinel_username: Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
        :param pulumi.Input[str] server_name: A string representing an SNI (server name indication) value for TLS.
        :param pulumi.Input[bool] ssl: If set to true, uses SSL to connect to Redis.
        :param pulumi.Input[bool] ssl_verify: If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
        :param pulumi.Input[int] timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        :param pulumi.Input[str] username: Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        """
        if cluster_addresses is not None:
            pulumi.set(__self__, "cluster_addresses", cluster_addresses)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if keepalive_backlog is not None:
            pulumi.set(__self__, "keepalive_backlog", keepalive_backlog)
        if keepalive_pool_size is not None:
            pulumi.set(__self__, "keepalive_pool_size", keepalive_pool_size)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if sentinel_addresses is not None:
            pulumi.set(__self__, "sentinel_addresses", sentinel_addresses)
        if sentinel_master is not None:
            pulumi.set(__self__, "sentinel_master", sentinel_master)
        if sentinel_password is not None:
            pulumi.set(__self__, "sentinel_password", sentinel_password)
        if sentinel_role is not None:
            pulumi.set(__self__, "sentinel_role", sentinel_role)
        if sentinel_username is not None:
            pulumi.set(__self__, "sentinel_username", sentinel_username)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_verify is not None:
            pulumi.set(__self__, "ssl_verify", ssl_verify)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="clusterAddresses")
    def cluster_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Cluster. Each string element must be a hostname. The minimum length of the array is 1 element.
        """
        return pulumi.get(self, "cluster_addresses")

    @cluster_addresses.setter
    def cluster_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cluster_addresses", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[int]]:
        """
        Database to use for the Redis connection when using the `redis` strategy
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a host name, such as example.com.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="keepaliveBacklog")
    def keepalive_backlog(self) -> Optional[pulumi.Input[int]]:
        """
        Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
        """
        return pulumi.get(self, "keepalive_backlog")

    @keepalive_backlog.setter
    def keepalive_backlog(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_backlog", value)

    @property
    @pulumi.getter(name="keepalivePoolSize")
    def keepalive_pool_size(self) -> Optional[pulumi.Input[int]]:
        """
        The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
        """
        return pulumi.get(self, "keepalive_pool_size")

    @keepalive_pool_size.setter
    def keepalive_pool_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "keepalive_pool_size", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a port number between 0 and 65535, inclusive.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter(name="sendTimeout")
    def send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "send_timeout")

    @send_timeout.setter
    def send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "send_timeout", value)

    @property
    @pulumi.getter(name="sentinelAddresses")
    def sentinel_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Sentinel addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. Each string element must be a hostname. The minimum length of the array is 1 element.
        """
        return pulumi.get(self, "sentinel_addresses")

    @sentinel_addresses.setter
    def sentinel_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sentinel_addresses", value)

    @property
    @pulumi.getter(name="sentinelMaster")
    def sentinel_master(self) -> Optional[pulumi.Input[str]]:
        """
        Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
        """
        return pulumi.get(self, "sentinel_master")

    @sentinel_master.setter
    def sentinel_master(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sentinel_master", value)

    @property
    @pulumi.getter(name="sentinelPassword")
    def sentinel_password(self) -> Optional[pulumi.Input[str]]:
        """
        Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
        """
        return pulumi.get(self, "sentinel_password")

    @sentinel_password.setter
    def sentinel_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sentinel_password", value)

    @property
    @pulumi.getter(name="sentinelRole")
    def sentinel_role(self) -> Optional[pulumi.Input[str]]:
        """
        Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. must be one of ["master", "slave", "any"]
        """
        return pulumi.get(self, "sentinel_role")

    @sentinel_role.setter
    def sentinel_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sentinel_role", value)

    @property
    @pulumi.getter(name="sentinelUsername")
    def sentinel_username(self) -> Optional[pulumi.Input[str]]:
        """
        Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
        """
        return pulumi.get(self, "sentinel_username")

    @sentinel_username.setter
    def sentinel_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sentinel_username", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing an SNI (server name indication) value for TLS.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, uses SSL to connect to Redis.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslVerify")
    def ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
        """
        return pulumi.get(self, "ssl_verify")

    @ssl_verify.setter
    def ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_verify", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GatewayPluginRateLimitingAdvancedConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingAdvancedConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingAdvancedRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingAdvancedServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingConfigArgs:
    def __init__(__self__, *,
                 day: Optional[pulumi.Input[float]] = None,
                 error_code: Optional[pulumi.Input[float]] = None,
                 error_message: Optional[pulumi.Input[str]] = None,
                 fault_tolerant: Optional[pulumi.Input[bool]] = None,
                 header_name: Optional[pulumi.Input[str]] = None,
                 hide_client_headers: Optional[pulumi.Input[bool]] = None,
                 hour: Optional[pulumi.Input[float]] = None,
                 limit_by: Optional[pulumi.Input[str]] = None,
                 minute: Optional[pulumi.Input[float]] = None,
                 month: Optional[pulumi.Input[float]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 redis: Optional[pulumi.Input['GatewayPluginRateLimitingConfigRedisArgs']] = None,
                 second: Optional[pulumi.Input[float]] = None,
                 sync_rate: Optional[pulumi.Input[float]] = None,
                 year: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] day: The number of HTTP requests that can be made per day.
        :param pulumi.Input[float] error_code: Set a custom error code to return when the rate limit is exceeded.
        :param pulumi.Input[str] error_message: Set a custom error message to return when the rate limit is exceeded.
        :param pulumi.Input[bool] fault_tolerant: A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
        :param pulumi.Input[str] header_name: A string representing an HTTP header name.
        :param pulumi.Input[bool] hide_client_headers: Optionally hide informative response headers.
        :param pulumi.Input[float] hour: The number of HTTP requests that can be made per hour.
        :param pulumi.Input[str] limit_by: The entity that is used when aggregating the limits. must be one of ["consumer", "credential", "ip", "service", "header", "path", "consumer-group"]
        :param pulumi.Input[float] minute: The number of HTTP requests that can be made per minute.
        :param pulumi.Input[float] month: The number of HTTP requests that can be made per month.
        :param pulumi.Input[str] path: A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        :param pulumi.Input[str] policy: The rate-limiting policies to use for retrieving and incrementing the limits. must be one of ["local", "cluster", "redis"]
        :param pulumi.Input['GatewayPluginRateLimitingConfigRedisArgs'] redis: Redis configuration
        :param pulumi.Input[float] second: The number of HTTP requests that can be made per second.
        :param pulumi.Input[float] sync_rate: How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
        :param pulumi.Input[float] year: The number of HTTP requests that can be made per year.
        """
        if day is not None:
            pulumi.set(__self__, "day", day)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if fault_tolerant is not None:
            pulumi.set(__self__, "fault_tolerant", fault_tolerant)
        if header_name is not None:
            pulumi.set(__self__, "header_name", header_name)
        if hide_client_headers is not None:
            pulumi.set(__self__, "hide_client_headers", hide_client_headers)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if limit_by is not None:
            pulumi.set(__self__, "limit_by", limit_by)
        if minute is not None:
            pulumi.set(__self__, "minute", minute)
        if month is not None:
            pulumi.set(__self__, "month", month)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if redis is not None:
            pulumi.set(__self__, "redis", redis)
        if second is not None:
            pulumi.set(__self__, "second", second)
        if sync_rate is not None:
            pulumi.set(__self__, "sync_rate", sync_rate)
        if year is not None:
            pulumi.set(__self__, "year", year)

    @property
    @pulumi.getter
    def day(self) -> Optional[pulumi.Input[float]]:
        """
        The number of HTTP requests that can be made per day.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[float]]:
        """
        Set a custom error code to return when the rate limit is exceeded.
        """
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[str]]:
        """
        Set a custom error message to return when the rate limit is exceeded.
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="faultTolerant")
    def fault_tolerant(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
        """
        return pulumi.get(self, "fault_tolerant")

    @fault_tolerant.setter
    def fault_tolerant(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fault_tolerant", value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing an HTTP header name.
        """
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="hideClientHeaders")
    def hide_client_headers(self) -> Optional[pulumi.Input[bool]]:
        """
        Optionally hide informative response headers.
        """
        return pulumi.get(self, "hide_client_headers")

    @hide_client_headers.setter
    def hide_client_headers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_client_headers", value)

    @property
    @pulumi.getter
    def hour(self) -> Optional[pulumi.Input[float]]:
        """
        The number of HTTP requests that can be made per hour.
        """
        return pulumi.get(self, "hour")

    @hour.setter
    def hour(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "hour", value)

    @property
    @pulumi.getter(name="limitBy")
    def limit_by(self) -> Optional[pulumi.Input[str]]:
        """
        The entity that is used when aggregating the limits. must be one of ["consumer", "credential", "ip", "service", "header", "path", "consumer-group"]
        """
        return pulumi.get(self, "limit_by")

    @limit_by.setter
    def limit_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit_by", value)

    @property
    @pulumi.getter
    def minute(self) -> Optional[pulumi.Input[float]]:
        """
        The number of HTTP requests that can be made per minute.
        """
        return pulumi.get(self, "minute")

    @minute.setter
    def minute(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minute", value)

    @property
    @pulumi.getter
    def month(self) -> Optional[pulumi.Input[float]]:
        """
        The number of HTTP requests that can be made per month.
        """
        return pulumi.get(self, "month")

    @month.setter
    def month(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "month", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        """
        The rate-limiting policies to use for retrieving and incrementing the limits. must be one of ["local", "cluster", "redis"]
        """
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def redis(self) -> Optional[pulumi.Input['GatewayPluginRateLimitingConfigRedisArgs']]:
        """
        Redis configuration
        """
        return pulumi.get(self, "redis")

    @redis.setter
    def redis(self, value: Optional[pulumi.Input['GatewayPluginRateLimitingConfigRedisArgs']]):
        pulumi.set(self, "redis", value)

    @property
    @pulumi.getter
    def second(self) -> Optional[pulumi.Input[float]]:
        """
        The number of HTTP requests that can be made per second.
        """
        return pulumi.get(self, "second")

    @second.setter
    def second(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "second", value)

    @property
    @pulumi.getter(name="syncRate")
    def sync_rate(self) -> Optional[pulumi.Input[float]]:
        """
        How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
        """
        return pulumi.get(self, "sync_rate")

    @sync_rate.setter
    def sync_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sync_rate", value)

    @property
    @pulumi.getter
    def year(self) -> Optional[pulumi.Input[float]]:
        """
        The number of HTTP requests that can be made per year.
        """
        return pulumi.get(self, "year")

    @year.setter
    def year(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "year", value)


@pulumi.input_type
class GatewayPluginRateLimitingConfigRedisArgs:
    def __init__(__self__, *,
                 database: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 server_name: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 ssl_verify: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] database: Database to use for the Redis connection when using the `redis` strategy
        :param pulumi.Input[str] host: A string representing a host name, such as example.com.
        :param pulumi.Input[str] password: Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
        :param pulumi.Input[int] port: An integer representing a port number between 0 and 65535, inclusive.
        :param pulumi.Input[str] server_name: A string representing an SNI (server name indication) value for TLS.
        :param pulumi.Input[bool] ssl: If set to true, uses SSL to connect to Redis.
        :param pulumi.Input[bool] ssl_verify: If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
        :param pulumi.Input[int] timeout: An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        :param pulumi.Input[str] username: Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_verify is not None:
            pulumi.set(__self__, "ssl_verify", ssl_verify)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[int]]:
        """
        Database to use for the Redis connection when using the `redis` strategy
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a host name, such as example.com.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a port number between 0 and 65535, inclusive.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing an SNI (server name indication) value for TLS.
        """
        return pulumi.get(self, "server_name")

    @server_name.setter
    def server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_name", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, uses SSL to connect to Redis.
        """
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslVerify")
    def ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
        """
        return pulumi.get(self, "ssl_verify")

    @ssl_verify.setter
    def ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl_verify", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GatewayPluginRateLimitingConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRateLimitingServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTerminationConfigArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 echo: Optional[pulumi.Input[bool]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 status_code: Optional[pulumi.Input[int]] = None,
                 trigger: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] body: The raw response body to send. This is mutually exclusive with the `config.message` field.
        :param pulumi.Input[str] content_type: Content type of the raw response configured with `config.body`.
        :param pulumi.Input[bool] echo: When set, the plugin will echo a copy of the request back to the client. The main usecase for this is debugging. It can be combined with `trigger` in order to debug requests on live systems without disturbing real traffic.
        :param pulumi.Input[str] message: The message to send, if using the default response generator.
        :param pulumi.Input[int] status_code: The response code to send. Must be an integer between 100 and 599.
        :param pulumi.Input[str] trigger: A string representing an HTTP header name.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if echo is not None:
            pulumi.set(__self__, "echo", echo)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if status_code is not None:
            pulumi.set(__self__, "status_code", status_code)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The raw response body to send. This is mutually exclusive with the `config.message` field.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        """
        Content type of the raw response configured with `config.body`.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def echo(self) -> Optional[pulumi.Input[bool]]:
        """
        When set, the plugin will echo a copy of the request back to the client. The main usecase for this is debugging. It can be combined with `trigger` in order to debug requests on live systems without disturbing real traffic.
        """
        return pulumi.get(self, "echo")

    @echo.setter
    def echo(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "echo", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        The message to send, if using the default response generator.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[int]]:
        """
        The response code to send. Must be an integer between 100 and 599.
        """
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter
    def trigger(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing an HTTP header name.
        """
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger", value)


@pulumi.input_type
class GatewayPluginRequestTerminationConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTerminationConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTerminationRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTerminationServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConfigArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAddArgs']] = None,
                 allow: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAllowArgs']] = None,
                 append: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAppendArgs']] = None,
                 dots_in_keys: Optional[pulumi.Input[bool]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 remove: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigRemoveArgs']] = None,
                 rename: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigRenameArgs']] = None,
                 replace: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigReplaceArgs']] = None):
        """
        :param pulumi.Input[bool] dots_in_keys: Specify whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects.  See Arrays and nested objects.
        :param pulumi.Input[str] http_method: A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if dots_in_keys is not None:
            pulumi.set(__self__, "dots_in_keys", dots_in_keys)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rename is not None:
            pulumi.set(__self__, "rename", rename)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAddArgs']]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAddArgs']]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAllowArgs']]:
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAllowArgs']]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAppendArgs']]:
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigAppendArgs']]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter(name="dotsInKeys")
    def dots_in_keys(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects.  See Arrays and nested objects.
        """
        return pulumi.get(self, "dots_in_keys")

    @dots_in_keys.setter
    def dots_in_keys(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dots_in_keys", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigRemoveArgs']]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigRemoveArgs']]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def rename(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigRenameArgs']]:
        return pulumi.get(self, "rename")

    @rename.setter
    def rename(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigRenameArgs']]):
        pulumi.set(self, "rename", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigReplaceArgs']]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerAdvancedConfigReplaceArgs']]):
        pulumi.set(self, "replace", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConfigAddArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConfigAllowArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConfigAppendArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConfigRemoveArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConfigRenameArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConfigReplaceArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerAdvancedServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConfigArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigAddArgs']] = None,
                 append: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigAppendArgs']] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 remove: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigRemoveArgs']] = None,
                 rename: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigRenameArgs']] = None,
                 replace: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigReplaceArgs']] = None):
        """
        :param pulumi.Input[str] http_method: A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rename is not None:
            pulumi.set(__self__, "rename", rename)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerConfigAddArgs']]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigAddArgs']]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerConfigAppendArgs']]:
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigAppendArgs']]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerConfigRemoveArgs']]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigRemoveArgs']]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def rename(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerConfigRenameArgs']]:
        return pulumi.get(self, "rename")

    @rename.setter
    def rename(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigRenameArgs']]):
        pulumi.set(self, "rename", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input['GatewayPluginRequestTransformerConfigReplaceArgs']]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input['GatewayPluginRequestTransformerConfigReplaceArgs']]):
        pulumi.set(self, "replace", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConfigAddArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConfigAppendArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConfigRemoveArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConfigRenameArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConfigReplaceArgs:
    def __init__(__self__, *,
                 bodies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 querystrings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        if bodies is not None:
            pulumi.set(__self__, "bodies", bodies)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if querystrings is not None:
            pulumi.set(__self__, "querystrings", querystrings)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def bodies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bodies")

    @bodies.setter
    def bodies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bodies", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def querystrings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "querystrings")

    @querystrings.setter
    def querystrings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "querystrings", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginRequestTransformerServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAddArgs']] = None,
                 allow: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAllowArgs']] = None,
                 append: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAppendArgs']] = None,
                 dots_in_keys: Optional[pulumi.Input[bool]] = None,
                 remove: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigRemoveArgs']] = None,
                 rename: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigRenameArgs']] = None,
                 replace: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigReplaceArgs']] = None,
                 transform: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigTransformArgs']] = None):
        """
        :param pulumi.Input[bool] dots_in_keys: Whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects..
        """
        if add is not None:
            pulumi.set(__self__, "add", add)
        if allow is not None:
            pulumi.set(__self__, "allow", allow)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if dots_in_keys is not None:
            pulumi.set(__self__, "dots_in_keys", dots_in_keys)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rename is not None:
            pulumi.set(__self__, "rename", rename)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)
        if transform is not None:
            pulumi.set(__self__, "transform", transform)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAddArgs']]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAddArgs']]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def allow(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAllowArgs']]:
        return pulumi.get(self, "allow")

    @allow.setter
    def allow(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAllowArgs']]):
        pulumi.set(self, "allow", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAppendArgs']]:
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigAppendArgs']]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter(name="dotsInKeys")
    def dots_in_keys(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects..
        """
        return pulumi.get(self, "dots_in_keys")

    @dots_in_keys.setter
    def dots_in_keys(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dots_in_keys", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigRemoveArgs']]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigRemoveArgs']]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def rename(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigRenameArgs']]:
        return pulumi.get(self, "rename")

    @rename.setter
    def rename(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigRenameArgs']]):
        pulumi.set(self, "rename", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigReplaceArgs']]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigReplaceArgs']]):
        pulumi.set(self, "replace", value)

    @property
    @pulumi.getter
    def transform(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigTransformArgs']]:
        return pulumi.get(self, "transform")

    @transform.setter
    def transform(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerAdvancedConfigTransformArgs']]):
        pulumi.set(self, "transform", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigAddArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 if_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if if_statuses is not None:
            pulumi.set(__self__, "if_statuses", if_statuses)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ifStatuses")
    def if_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "if_statuses")

    @if_statuses.setter
    def if_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "if_statuses", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigAllowArgs:
    def __init__(__self__, *,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigAppendArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 if_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if if_statuses is not None:
            pulumi.set(__self__, "if_statuses", if_statuses)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ifStatuses")
    def if_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "if_statuses")

    @if_statuses.setter
    def if_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "if_statuses", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigRemoveArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 if_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if if_statuses is not None:
            pulumi.set(__self__, "if_statuses", if_statuses)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ifStatuses")
    def if_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "if_statuses")

    @if_statuses.setter
    def if_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "if_statuses", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigRenameArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 if_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if if_statuses is not None:
            pulumi.set(__self__, "if_statuses", if_statuses)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ifStatuses")
    def if_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "if_statuses")

    @if_statuses.setter
    def if_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "if_statuses", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigReplaceArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 if_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] body: String with which to replace the entire response body.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if if_statuses is not None:
            pulumi.set(__self__, "if_statuses", if_statuses)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        String with which to replace the entire response body.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="ifStatuses")
    def if_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "if_statuses")

    @if_statuses.setter
    def if_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "if_statuses", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConfigTransformArgs:
    def __init__(__self__, *,
                 functions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 if_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if functions is not None:
            pulumi.set(__self__, "functions", functions)
        if if_statuses is not None:
            pulumi.set(__self__, "if_statuses", if_statuses)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def functions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "functions")

    @functions.setter
    def functions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functions", value)

    @property
    @pulumi.getter(name="ifStatuses")
    def if_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "if_statuses")

    @if_statuses.setter
    def if_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "if_statuses", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerAdvancedServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConfigArgs:
    def __init__(__self__, *,
                 add: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigAddArgs']] = None,
                 append: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigAppendArgs']] = None,
                 remove: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigRemoveArgs']] = None,
                 rename: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigRenameArgs']] = None,
                 replace: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigReplaceArgs']] = None):
        if add is not None:
            pulumi.set(__self__, "add", add)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if rename is not None:
            pulumi.set(__self__, "rename", rename)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def add(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerConfigAddArgs']]:
        return pulumi.get(self, "add")

    @add.setter
    def add(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigAddArgs']]):
        pulumi.set(self, "add", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerConfigAppendArgs']]:
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigAppendArgs']]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter
    def remove(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerConfigRemoveArgs']]:
        return pulumi.get(self, "remove")

    @remove.setter
    def remove(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigRemoveArgs']]):
        pulumi.set(self, "remove", value)

    @property
    @pulumi.getter
    def rename(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerConfigRenameArgs']]:
        return pulumi.get(self, "rename")

    @rename.setter
    def rename(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigRenameArgs']]):
        pulumi.set(self, "rename", value)

    @property
    @pulumi.getter
    def replace(self) -> Optional[pulumi.Input['GatewayPluginResponseTransformerConfigReplaceArgs']]:
        return pulumi.get(self, "replace")

    @replace.setter
    def replace(self, value: Optional[pulumi.Input['GatewayPluginResponseTransformerConfigReplaceArgs']]):
        pulumi.set(self, "replace", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConfigAddArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] json_types: List of JSON type names. Specify the types of the JSON values returned when appending
               JSON properties. Each string element can be one of: boolean, number, or string.
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of JSON type names. Specify the types of the JSON values returned when appending
        JSON properties. Each string element can be one of: boolean, number, or string.
        """
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConfigAppendArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] json_types: List of JSON type names. Specify the types of the JSON values returned when appending
               JSON properties. Each string element can be one of: boolean, number, or string.
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of JSON type names. Specify the types of the JSON values returned when appending
        JSON properties. Each string element can be one of: boolean, number, or string.
        """
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConfigRemoveArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConfigRenameArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConfigReplaceArgs:
    def __init__(__self__, *,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 json_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 jsons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] json_types: List of JSON type names. Specify the types of the JSON values returned when appending
               JSON properties. Each string element can be one of: boolean, number, or string.
        """
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if json_types is not None:
            pulumi.set(__self__, "json_types", json_types)
        if jsons is not None:
            pulumi.set(__self__, "jsons", jsons)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter(name="jsonTypes")
    def json_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of JSON type names. Specify the types of the JSON values returned when appending
        JSON properties. Each string element can be one of: boolean, number, or string.
        """
        return pulumi.get(self, "json_types")

    @json_types.setter
    def json_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "json_types", value)

    @property
    @pulumi.getter
    def jsons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "jsons")

    @jsons.setter
    def jsons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "jsons", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginResponseTransformerServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginSamlConfigArgs:
    def __init__(__self__, *,
                 anonymous: Optional[pulumi.Input[str]] = None,
                 assertion_consumer_path: Optional[pulumi.Input[str]] = None,
                 idp_certificate: Optional[pulumi.Input[str]] = None,
                 idp_sso_url: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 nameid_format: Optional[pulumi.Input[str]] = None,
                 request_digest_algorithm: Optional[pulumi.Input[str]] = None,
                 request_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 request_signing_certificate: Optional[pulumi.Input[str]] = None,
                 request_signing_key: Optional[pulumi.Input[str]] = None,
                 response_digest_algorithm: Optional[pulumi.Input[str]] = None,
                 response_encryption_key: Optional[pulumi.Input[str]] = None,
                 response_signature_algorithm: Optional[pulumi.Input[str]] = None,
                 session_absolute_timeout: Optional[pulumi.Input[float]] = None,
                 session_audience: Optional[pulumi.Input[str]] = None,
                 session_cookie_domain: Optional[pulumi.Input[str]] = None,
                 session_cookie_http_only: Optional[pulumi.Input[bool]] = None,
                 session_cookie_name: Optional[pulumi.Input[str]] = None,
                 session_cookie_path: Optional[pulumi.Input[str]] = None,
                 session_cookie_same_site: Optional[pulumi.Input[str]] = None,
                 session_cookie_secure: Optional[pulumi.Input[bool]] = None,
                 session_enforce_same_subject: Optional[pulumi.Input[bool]] = None,
                 session_hash_storage_key: Optional[pulumi.Input[bool]] = None,
                 session_hash_subject: Optional[pulumi.Input[bool]] = None,
                 session_idling_timeout: Optional[pulumi.Input[float]] = None,
                 session_memcached_host: Optional[pulumi.Input[str]] = None,
                 session_memcached_port: Optional[pulumi.Input[int]] = None,
                 session_memcached_prefix: Optional[pulumi.Input[str]] = None,
                 session_memcached_socket: Optional[pulumi.Input[str]] = None,
                 session_redis_cluster_max_redirections: Optional[pulumi.Input[int]] = None,
                 session_redis_cluster_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginSamlConfigSessionRedisClusterNodeArgs']]]] = None,
                 session_redis_connect_timeout: Optional[pulumi.Input[int]] = None,
                 session_redis_host: Optional[pulumi.Input[str]] = None,
                 session_redis_password: Optional[pulumi.Input[str]] = None,
                 session_redis_port: Optional[pulumi.Input[int]] = None,
                 session_redis_prefix: Optional[pulumi.Input[str]] = None,
                 session_redis_read_timeout: Optional[pulumi.Input[int]] = None,
                 session_redis_send_timeout: Optional[pulumi.Input[int]] = None,
                 session_redis_server_name: Optional[pulumi.Input[str]] = None,
                 session_redis_socket: Optional[pulumi.Input[str]] = None,
                 session_redis_ssl: Optional[pulumi.Input[bool]] = None,
                 session_redis_ssl_verify: Optional[pulumi.Input[bool]] = None,
                 session_redis_username: Optional[pulumi.Input[str]] = None,
                 session_remember: Optional[pulumi.Input[bool]] = None,
                 session_remember_absolute_timeout: Optional[pulumi.Input[float]] = None,
                 session_remember_cookie_name: Optional[pulumi.Input[str]] = None,
                 session_remember_rolling_timeout: Optional[pulumi.Input[float]] = None,
                 session_request_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 session_response_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 session_rolling_timeout: Optional[pulumi.Input[float]] = None,
                 session_secret: Optional[pulumi.Input[str]] = None,
                 session_storage: Optional[pulumi.Input[str]] = None,
                 session_store_metadata: Optional[pulumi.Input[bool]] = None,
                 validate_assertion_signature: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] anonymous: An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.
        :param pulumi.Input[str] assertion_consumer_path: A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        :param pulumi.Input[str] idp_certificate: The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.
        :param pulumi.Input[str] idp_sso_url: A string representing a URL, such as https://example.com/path/to/resource?q=search.
        :param pulumi.Input[str] issuer: The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.
        :param pulumi.Input[str] nameid_format: The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`. must be one of ["Unspecified", "EmailAddress", "Persistent", "Transient"]
        :param pulumi.Input[str] request_digest_algorithm: The digest algorithm for Authn requests: - `SHA256` - `SHA1`. must be one of ["SHA256", "SHA1"]
        :param pulumi.Input[str] request_signature_algorithm: The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of ["SHA256", "SHA384", "SHA512"]
        :param pulumi.Input[str] request_signing_certificate: The certificate for signing requests.
        :param pulumi.Input[str] request_signing_key: The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.
        :param pulumi.Input[str] response_digest_algorithm: The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`. must be one of ["SHA256", "SHA1"]
        :param pulumi.Input[str] response_encryption_key: The private encryption key required to decrypt encrypted assertions.
        :param pulumi.Input[str] response_signature_algorithm: The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of ["SHA256", "SHA384", "SHA512"]
        :param pulumi.Input[float] session_absolute_timeout: The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
        :param pulumi.Input[str] session_audience: The session audience, for example "my-application"
        :param pulumi.Input[str] session_cookie_domain: The session cookie domain flag.
        :param pulumi.Input[bool] session_cookie_http_only: Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        :param pulumi.Input[str] session_cookie_name: The session cookie name.
        :param pulumi.Input[str] session_cookie_path: A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        :param pulumi.Input[str] session_cookie_same_site: Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        :param pulumi.Input[bool] session_cookie_secure: The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        :param pulumi.Input[bool] session_enforce_same_subject: When set to `true`, audiences are forced to share the same subject.
        :param pulumi.Input[bool] session_hash_storage_key: When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.
        :param pulumi.Input[bool] session_hash_subject: When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.
        :param pulumi.Input[float] session_idling_timeout: The session cookie idle time in seconds.
        :param pulumi.Input[str] session_memcached_host: The memcached host.
        :param pulumi.Input[int] session_memcached_port: An integer representing a port number between 0 and 65535, inclusive.
        :param pulumi.Input[str] session_memcached_prefix: The memcached session key prefix.
        :param pulumi.Input[str] session_memcached_socket: The memcached unix socket path.
        :param pulumi.Input[int] session_redis_cluster_max_redirections: The Redis cluster maximum redirects.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayPluginSamlConfigSessionRedisClusterNodeArgs']]] session_redis_cluster_nodes: The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.
        :param pulumi.Input[int] session_redis_connect_timeout: The Redis connection timeout in milliseconds.
        :param pulumi.Input[str] session_redis_host: The Redis host IP.
        :param pulumi.Input[str] session_redis_password: Password to use for Redis connection when the `redis` session storage is defined. If undefined, no auth commands are sent to Redis. This value is pulled from
        :param pulumi.Input[int] session_redis_port: An integer representing a port number between 0 and 65535, inclusive.
        :param pulumi.Input[str] session_redis_prefix: The Redis session key prefix.
        :param pulumi.Input[int] session_redis_read_timeout: The Redis read timeout in milliseconds.
        :param pulumi.Input[int] session_redis_send_timeout: The Redis send timeout in milliseconds.
        :param pulumi.Input[str] session_redis_server_name: The SNI used for connecting to the Redis server.
        :param pulumi.Input[str] session_redis_socket: The Redis unix socket path.
        :param pulumi.Input[bool] session_redis_ssl: Use SSL/TLS for the Redis connection.
        :param pulumi.Input[bool] session_redis_ssl_verify: Verify the Redis server certificate.
        :param pulumi.Input[str] session_redis_username: Redis username if the `redis` session storage is defined and ACL authentication is desired.If undefined, ACL authentication will not be performed.  This requires Redis v6.0.0+. The username **cannot** be set to `default`.
        :param pulumi.Input[bool] session_remember: Enables or disables persistent sessions
        :param pulumi.Input[float] session_remember_absolute_timeout: Persistent session absolute timeout in seconds.
        :param pulumi.Input[str] session_remember_cookie_name: Persistent session cookie name
        :param pulumi.Input[float] session_remember_rolling_timeout: Persistent session rolling timeout in seconds.
        :param pulumi.Input[float] session_rolling_timeout: The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
        :param pulumi.Input[str] session_secret: The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.
        :param pulumi.Input[str] session_storage: The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis. must be one of ["cookie", "memcache", "memcached", "redis"]
        :param pulumi.Input[bool] session_store_metadata: Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.
        :param pulumi.Input[bool] validate_assertion_signature: Enable signature validation for SAML responses.
        """
        if anonymous is not None:
            pulumi.set(__self__, "anonymous", anonymous)
        if assertion_consumer_path is not None:
            pulumi.set(__self__, "assertion_consumer_path", assertion_consumer_path)
        if idp_certificate is not None:
            pulumi.set(__self__, "idp_certificate", idp_certificate)
        if idp_sso_url is not None:
            pulumi.set(__self__, "idp_sso_url", idp_sso_url)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if nameid_format is not None:
            pulumi.set(__self__, "nameid_format", nameid_format)
        if request_digest_algorithm is not None:
            pulumi.set(__self__, "request_digest_algorithm", request_digest_algorithm)
        if request_signature_algorithm is not None:
            pulumi.set(__self__, "request_signature_algorithm", request_signature_algorithm)
        if request_signing_certificate is not None:
            pulumi.set(__self__, "request_signing_certificate", request_signing_certificate)
        if request_signing_key is not None:
            pulumi.set(__self__, "request_signing_key", request_signing_key)
        if response_digest_algorithm is not None:
            pulumi.set(__self__, "response_digest_algorithm", response_digest_algorithm)
        if response_encryption_key is not None:
            pulumi.set(__self__, "response_encryption_key", response_encryption_key)
        if response_signature_algorithm is not None:
            pulumi.set(__self__, "response_signature_algorithm", response_signature_algorithm)
        if session_absolute_timeout is not None:
            pulumi.set(__self__, "session_absolute_timeout", session_absolute_timeout)
        if session_audience is not None:
            pulumi.set(__self__, "session_audience", session_audience)
        if session_cookie_domain is not None:
            pulumi.set(__self__, "session_cookie_domain", session_cookie_domain)
        if session_cookie_http_only is not None:
            pulumi.set(__self__, "session_cookie_http_only", session_cookie_http_only)
        if session_cookie_name is not None:
            pulumi.set(__self__, "session_cookie_name", session_cookie_name)
        if session_cookie_path is not None:
            pulumi.set(__self__, "session_cookie_path", session_cookie_path)
        if session_cookie_same_site is not None:
            pulumi.set(__self__, "session_cookie_same_site", session_cookie_same_site)
        if session_cookie_secure is not None:
            pulumi.set(__self__, "session_cookie_secure", session_cookie_secure)
        if session_enforce_same_subject is not None:
            pulumi.set(__self__, "session_enforce_same_subject", session_enforce_same_subject)
        if session_hash_storage_key is not None:
            pulumi.set(__self__, "session_hash_storage_key", session_hash_storage_key)
        if session_hash_subject is not None:
            pulumi.set(__self__, "session_hash_subject", session_hash_subject)
        if session_idling_timeout is not None:
            pulumi.set(__self__, "session_idling_timeout", session_idling_timeout)
        if session_memcached_host is not None:
            pulumi.set(__self__, "session_memcached_host", session_memcached_host)
        if session_memcached_port is not None:
            pulumi.set(__self__, "session_memcached_port", session_memcached_port)
        if session_memcached_prefix is not None:
            pulumi.set(__self__, "session_memcached_prefix", session_memcached_prefix)
        if session_memcached_socket is not None:
            pulumi.set(__self__, "session_memcached_socket", session_memcached_socket)
        if session_redis_cluster_max_redirections is not None:
            pulumi.set(__self__, "session_redis_cluster_max_redirections", session_redis_cluster_max_redirections)
        if session_redis_cluster_nodes is not None:
            pulumi.set(__self__, "session_redis_cluster_nodes", session_redis_cluster_nodes)
        if session_redis_connect_timeout is not None:
            pulumi.set(__self__, "session_redis_connect_timeout", session_redis_connect_timeout)
        if session_redis_host is not None:
            pulumi.set(__self__, "session_redis_host", session_redis_host)
        if session_redis_password is not None:
            pulumi.set(__self__, "session_redis_password", session_redis_password)
        if session_redis_port is not None:
            pulumi.set(__self__, "session_redis_port", session_redis_port)
        if session_redis_prefix is not None:
            pulumi.set(__self__, "session_redis_prefix", session_redis_prefix)
        if session_redis_read_timeout is not None:
            pulumi.set(__self__, "session_redis_read_timeout", session_redis_read_timeout)
        if session_redis_send_timeout is not None:
            pulumi.set(__self__, "session_redis_send_timeout", session_redis_send_timeout)
        if session_redis_server_name is not None:
            pulumi.set(__self__, "session_redis_server_name", session_redis_server_name)
        if session_redis_socket is not None:
            pulumi.set(__self__, "session_redis_socket", session_redis_socket)
        if session_redis_ssl is not None:
            pulumi.set(__self__, "session_redis_ssl", session_redis_ssl)
        if session_redis_ssl_verify is not None:
            pulumi.set(__self__, "session_redis_ssl_verify", session_redis_ssl_verify)
        if session_redis_username is not None:
            pulumi.set(__self__, "session_redis_username", session_redis_username)
        if session_remember is not None:
            pulumi.set(__self__, "session_remember", session_remember)
        if session_remember_absolute_timeout is not None:
            pulumi.set(__self__, "session_remember_absolute_timeout", session_remember_absolute_timeout)
        if session_remember_cookie_name is not None:
            pulumi.set(__self__, "session_remember_cookie_name", session_remember_cookie_name)
        if session_remember_rolling_timeout is not None:
            pulumi.set(__self__, "session_remember_rolling_timeout", session_remember_rolling_timeout)
        if session_request_headers is not None:
            pulumi.set(__self__, "session_request_headers", session_request_headers)
        if session_response_headers is not None:
            pulumi.set(__self__, "session_response_headers", session_response_headers)
        if session_rolling_timeout is not None:
            pulumi.set(__self__, "session_rolling_timeout", session_rolling_timeout)
        if session_secret is not None:
            pulumi.set(__self__, "session_secret", session_secret)
        if session_storage is not None:
            pulumi.set(__self__, "session_storage", session_storage)
        if session_store_metadata is not None:
            pulumi.set(__self__, "session_store_metadata", session_store_metadata)
        if validate_assertion_signature is not None:
            pulumi.set(__self__, "validate_assertion_signature", validate_assertion_signature)

    @property
    @pulumi.getter
    def anonymous(self) -> Optional[pulumi.Input[str]]:
        """
        An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.
        """
        return pulumi.get(self, "anonymous")

    @anonymous.setter
    def anonymous(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "anonymous", value)

    @property
    @pulumi.getter(name="assertionConsumerPath")
    def assertion_consumer_path(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        """
        return pulumi.get(self, "assertion_consumer_path")

    @assertion_consumer_path.setter
    def assertion_consumer_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assertion_consumer_path", value)

    @property
    @pulumi.getter(name="idpCertificate")
    def idp_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.
        """
        return pulumi.get(self, "idp_certificate")

    @idp_certificate.setter
    def idp_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_certificate", value)

    @property
    @pulumi.getter(name="idpSsoUrl")
    def idp_sso_url(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a URL, such as https://example.com/path/to/resource?q=search.
        """
        return pulumi.get(self, "idp_sso_url")

    @idp_sso_url.setter
    def idp_sso_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "idp_sso_url", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="nameidFormat")
    def nameid_format(self) -> Optional[pulumi.Input[str]]:
        """
        The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`. must be one of ["Unspecified", "EmailAddress", "Persistent", "Transient"]
        """
        return pulumi.get(self, "nameid_format")

    @nameid_format.setter
    def nameid_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nameid_format", value)

    @property
    @pulumi.getter(name="requestDigestAlgorithm")
    def request_digest_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The digest algorithm for Authn requests: - `SHA256` - `SHA1`. must be one of ["SHA256", "SHA1"]
        """
        return pulumi.get(self, "request_digest_algorithm")

    @request_digest_algorithm.setter
    def request_digest_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_digest_algorithm", value)

    @property
    @pulumi.getter(name="requestSignatureAlgorithm")
    def request_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of ["SHA256", "SHA384", "SHA512"]
        """
        return pulumi.get(self, "request_signature_algorithm")

    @request_signature_algorithm.setter
    def request_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_signature_algorithm", value)

    @property
    @pulumi.getter(name="requestSigningCertificate")
    def request_signing_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        The certificate for signing requests.
        """
        return pulumi.get(self, "request_signing_certificate")

    @request_signing_certificate.setter
    def request_signing_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_signing_certificate", value)

    @property
    @pulumi.getter(name="requestSigningKey")
    def request_signing_key(self) -> Optional[pulumi.Input[str]]:
        """
        The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.
        """
        return pulumi.get(self, "request_signing_key")

    @request_signing_key.setter
    def request_signing_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request_signing_key", value)

    @property
    @pulumi.getter(name="responseDigestAlgorithm")
    def response_digest_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`. must be one of ["SHA256", "SHA1"]
        """
        return pulumi.get(self, "response_digest_algorithm")

    @response_digest_algorithm.setter
    def response_digest_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_digest_algorithm", value)

    @property
    @pulumi.getter(name="responseEncryptionKey")
    def response_encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        The private encryption key required to decrypt encrypted assertions.
        """
        return pulumi.get(self, "response_encryption_key")

    @response_encryption_key.setter
    def response_encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_encryption_key", value)

    @property
    @pulumi.getter(name="responseSignatureAlgorithm")
    def response_signature_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of ["SHA256", "SHA384", "SHA512"]
        """
        return pulumi.get(self, "response_signature_algorithm")

    @response_signature_algorithm.setter
    def response_signature_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "response_signature_algorithm", value)

    @property
    @pulumi.getter(name="sessionAbsoluteTimeout")
    def session_absolute_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
        """
        return pulumi.get(self, "session_absolute_timeout")

    @session_absolute_timeout.setter
    def session_absolute_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_absolute_timeout", value)

    @property
    @pulumi.getter(name="sessionAudience")
    def session_audience(self) -> Optional[pulumi.Input[str]]:
        """
        The session audience, for example "my-application"
        """
        return pulumi.get(self, "session_audience")

    @session_audience.setter
    def session_audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_audience", value)

    @property
    @pulumi.getter(name="sessionCookieDomain")
    def session_cookie_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The session cookie domain flag.
        """
        return pulumi.get(self, "session_cookie_domain")

    @session_cookie_domain.setter
    def session_cookie_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_domain", value)

    @property
    @pulumi.getter(name="sessionCookieHttpOnly")
    def session_cookie_http_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        """
        return pulumi.get(self, "session_cookie_http_only")

    @session_cookie_http_only.setter
    def session_cookie_http_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_cookie_http_only", value)

    @property
    @pulumi.getter(name="sessionCookieName")
    def session_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        The session cookie name.
        """
        return pulumi.get(self, "session_cookie_name")

    @session_cookie_name.setter
    def session_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_name", value)

    @property
    @pulumi.getter(name="sessionCookiePath")
    def session_cookie_path(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        """
        return pulumi.get(self, "session_cookie_path")

    @session_cookie_path.setter
    def session_cookie_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_path", value)

    @property
    @pulumi.getter(name="sessionCookieSameSite")
    def session_cookie_same_site(self) -> Optional[pulumi.Input[str]]:
        """
        Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        """
        return pulumi.get(self, "session_cookie_same_site")

    @session_cookie_same_site.setter
    def session_cookie_same_site(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_cookie_same_site", value)

    @property
    @pulumi.getter(name="sessionCookieSecure")
    def session_cookie_secure(self) -> Optional[pulumi.Input[bool]]:
        """
        The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        """
        return pulumi.get(self, "session_cookie_secure")

    @session_cookie_secure.setter
    def session_cookie_secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_cookie_secure", value)

    @property
    @pulumi.getter(name="sessionEnforceSameSubject")
    def session_enforce_same_subject(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to `true`, audiences are forced to share the same subject.
        """
        return pulumi.get(self, "session_enforce_same_subject")

    @session_enforce_same_subject.setter
    def session_enforce_same_subject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_enforce_same_subject", value)

    @property
    @pulumi.getter(name="sessionHashStorageKey")
    def session_hash_storage_key(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.
        """
        return pulumi.get(self, "session_hash_storage_key")

    @session_hash_storage_key.setter
    def session_hash_storage_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_hash_storage_key", value)

    @property
    @pulumi.getter(name="sessionHashSubject")
    def session_hash_subject(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.
        """
        return pulumi.get(self, "session_hash_subject")

    @session_hash_subject.setter
    def session_hash_subject(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_hash_subject", value)

    @property
    @pulumi.getter(name="sessionIdlingTimeout")
    def session_idling_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        The session cookie idle time in seconds.
        """
        return pulumi.get(self, "session_idling_timeout")

    @session_idling_timeout.setter
    def session_idling_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_idling_timeout", value)

    @property
    @pulumi.getter(name="sessionMemcachedHost")
    def session_memcached_host(self) -> Optional[pulumi.Input[str]]:
        """
        The memcached host.
        """
        return pulumi.get(self, "session_memcached_host")

    @session_memcached_host.setter
    def session_memcached_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_memcached_host", value)

    @property
    @pulumi.getter(name="sessionMemcachedPort")
    def session_memcached_port(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a port number between 0 and 65535, inclusive.
        """
        return pulumi.get(self, "session_memcached_port")

    @session_memcached_port.setter
    def session_memcached_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_memcached_port", value)

    @property
    @pulumi.getter(name="sessionMemcachedPrefix")
    def session_memcached_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The memcached session key prefix.
        """
        return pulumi.get(self, "session_memcached_prefix")

    @session_memcached_prefix.setter
    def session_memcached_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_memcached_prefix", value)

    @property
    @pulumi.getter(name="sessionMemcachedSocket")
    def session_memcached_socket(self) -> Optional[pulumi.Input[str]]:
        """
        The memcached unix socket path.
        """
        return pulumi.get(self, "session_memcached_socket")

    @session_memcached_socket.setter
    def session_memcached_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_memcached_socket", value)

    @property
    @pulumi.getter(name="sessionRedisClusterMaxRedirections")
    def session_redis_cluster_max_redirections(self) -> Optional[pulumi.Input[int]]:
        """
        The Redis cluster maximum redirects.
        """
        return pulumi.get(self, "session_redis_cluster_max_redirections")

    @session_redis_cluster_max_redirections.setter
    def session_redis_cluster_max_redirections(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_cluster_max_redirections", value)

    @property
    @pulumi.getter(name="sessionRedisClusterNodes")
    def session_redis_cluster_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginSamlConfigSessionRedisClusterNodeArgs']]]]:
        """
        The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.
        """
        return pulumi.get(self, "session_redis_cluster_nodes")

    @session_redis_cluster_nodes.setter
    def session_redis_cluster_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginSamlConfigSessionRedisClusterNodeArgs']]]]):
        pulumi.set(self, "session_redis_cluster_nodes", value)

    @property
    @pulumi.getter(name="sessionRedisConnectTimeout")
    def session_redis_connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The Redis connection timeout in milliseconds.
        """
        return pulumi.get(self, "session_redis_connect_timeout")

    @session_redis_connect_timeout.setter
    def session_redis_connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_connect_timeout", value)

    @property
    @pulumi.getter(name="sessionRedisHost")
    def session_redis_host(self) -> Optional[pulumi.Input[str]]:
        """
        The Redis host IP.
        """
        return pulumi.get(self, "session_redis_host")

    @session_redis_host.setter
    def session_redis_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_host", value)

    @property
    @pulumi.getter(name="sessionRedisPassword")
    def session_redis_password(self) -> Optional[pulumi.Input[str]]:
        """
        Password to use for Redis connection when the `redis` session storage is defined. If undefined, no auth commands are sent to Redis. This value is pulled from
        """
        return pulumi.get(self, "session_redis_password")

    @session_redis_password.setter
    def session_redis_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_password", value)

    @property
    @pulumi.getter(name="sessionRedisPort")
    def session_redis_port(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a port number between 0 and 65535, inclusive.
        """
        return pulumi.get(self, "session_redis_port")

    @session_redis_port.setter
    def session_redis_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_port", value)

    @property
    @pulumi.getter(name="sessionRedisPrefix")
    def session_redis_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The Redis session key prefix.
        """
        return pulumi.get(self, "session_redis_prefix")

    @session_redis_prefix.setter
    def session_redis_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_prefix", value)

    @property
    @pulumi.getter(name="sessionRedisReadTimeout")
    def session_redis_read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The Redis read timeout in milliseconds.
        """
        return pulumi.get(self, "session_redis_read_timeout")

    @session_redis_read_timeout.setter
    def session_redis_read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_read_timeout", value)

    @property
    @pulumi.getter(name="sessionRedisSendTimeout")
    def session_redis_send_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The Redis send timeout in milliseconds.
        """
        return pulumi.get(self, "session_redis_send_timeout")

    @session_redis_send_timeout.setter
    def session_redis_send_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_redis_send_timeout", value)

    @property
    @pulumi.getter(name="sessionRedisServerName")
    def session_redis_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SNI used for connecting to the Redis server.
        """
        return pulumi.get(self, "session_redis_server_name")

    @session_redis_server_name.setter
    def session_redis_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_server_name", value)

    @property
    @pulumi.getter(name="sessionRedisSocket")
    def session_redis_socket(self) -> Optional[pulumi.Input[str]]:
        """
        The Redis unix socket path.
        """
        return pulumi.get(self, "session_redis_socket")

    @session_redis_socket.setter
    def session_redis_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_socket", value)

    @property
    @pulumi.getter(name="sessionRedisSsl")
    def session_redis_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        Use SSL/TLS for the Redis connection.
        """
        return pulumi.get(self, "session_redis_ssl")

    @session_redis_ssl.setter
    def session_redis_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_redis_ssl", value)

    @property
    @pulumi.getter(name="sessionRedisSslVerify")
    def session_redis_ssl_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Verify the Redis server certificate.
        """
        return pulumi.get(self, "session_redis_ssl_verify")

    @session_redis_ssl_verify.setter
    def session_redis_ssl_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_redis_ssl_verify", value)

    @property
    @pulumi.getter(name="sessionRedisUsername")
    def session_redis_username(self) -> Optional[pulumi.Input[str]]:
        """
        Redis username if the `redis` session storage is defined and ACL authentication is desired.If undefined, ACL authentication will not be performed.  This requires Redis v6.0.0+. The username **cannot** be set to `default`.
        """
        return pulumi.get(self, "session_redis_username")

    @session_redis_username.setter
    def session_redis_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_redis_username", value)

    @property
    @pulumi.getter(name="sessionRemember")
    def session_remember(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables persistent sessions
        """
        return pulumi.get(self, "session_remember")

    @session_remember.setter
    def session_remember(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_remember", value)

    @property
    @pulumi.getter(name="sessionRememberAbsoluteTimeout")
    def session_remember_absolute_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Persistent session absolute timeout in seconds.
        """
        return pulumi.get(self, "session_remember_absolute_timeout")

    @session_remember_absolute_timeout.setter
    def session_remember_absolute_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_remember_absolute_timeout", value)

    @property
    @pulumi.getter(name="sessionRememberCookieName")
    def session_remember_cookie_name(self) -> Optional[pulumi.Input[str]]:
        """
        Persistent session cookie name
        """
        return pulumi.get(self, "session_remember_cookie_name")

    @session_remember_cookie_name.setter
    def session_remember_cookie_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_remember_cookie_name", value)

    @property
    @pulumi.getter(name="sessionRememberRollingTimeout")
    def session_remember_rolling_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        Persistent session rolling timeout in seconds.
        """
        return pulumi.get(self, "session_remember_rolling_timeout")

    @session_remember_rolling_timeout.setter
    def session_remember_rolling_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_remember_rolling_timeout", value)

    @property
    @pulumi.getter(name="sessionRequestHeaders")
    def session_request_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "session_request_headers")

    @session_request_headers.setter
    def session_request_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "session_request_headers", value)

    @property
    @pulumi.getter(name="sessionResponseHeaders")
    def session_response_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "session_response_headers")

    @session_response_headers.setter
    def session_response_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "session_response_headers", value)

    @property
    @pulumi.getter(name="sessionRollingTimeout")
    def session_rolling_timeout(self) -> Optional[pulumi.Input[float]]:
        """
        The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
        """
        return pulumi.get(self, "session_rolling_timeout")

    @session_rolling_timeout.setter
    def session_rolling_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "session_rolling_timeout", value)

    @property
    @pulumi.getter(name="sessionSecret")
    def session_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.
        """
        return pulumi.get(self, "session_secret")

    @session_secret.setter
    def session_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_secret", value)

    @property
    @pulumi.getter(name="sessionStorage")
    def session_storage(self) -> Optional[pulumi.Input[str]]:
        """
        The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis. must be one of ["cookie", "memcache", "memcached", "redis"]
        """
        return pulumi.get(self, "session_storage")

    @session_storage.setter
    def session_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_storage", value)

    @property
    @pulumi.getter(name="sessionStoreMetadata")
    def session_store_metadata(self) -> Optional[pulumi.Input[bool]]:
        """
        Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.
        """
        return pulumi.get(self, "session_store_metadata")

    @session_store_metadata.setter
    def session_store_metadata(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "session_store_metadata", value)

    @property
    @pulumi.getter(name="validateAssertionSignature")
    def validate_assertion_signature(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable signature validation for SAML responses.
        """
        return pulumi.get(self, "validate_assertion_signature")

    @validate_assertion_signature.setter
    def validate_assertion_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_assertion_signature", value)


@pulumi.input_type
class GatewayPluginSamlConfigSessionRedisClusterNodeArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] ip: A string representing a host name, such as example.com.
        :param pulumi.Input[int] port: An integer representing a port number between 0 and 65535, inclusive.
        """
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        """
        A string representing a host name, such as example.com.
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        An integer representing a port number between 0 and 65535, inclusive.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GatewayPluginSamlConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginSamlConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginSamlRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginSamlServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginStatsdConfigArgs:
    def __init__(__self__, *,
                 allow_status_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 consumer_identifier_default: Optional[pulumi.Input[str]] = None,
                 flush_timeout: Optional[pulumi.Input[float]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 hostname_in_prefix: Optional[pulumi.Input[bool]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginStatsdConfigMetricArgs']]]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 queue: Optional[pulumi.Input['GatewayPluginStatsdConfigQueueArgs']] = None,
                 queue_size: Optional[pulumi.Input[int]] = None,
                 retry_count: Optional[pulumi.Input[int]] = None,
                 service_identifier_default: Optional[pulumi.Input[str]] = None,
                 tag_style: Optional[pulumi.Input[str]] = None,
                 udp_packet_size: Optional[pulumi.Input[float]] = None,
                 use_tcp: Optional[pulumi.Input[bool]] = None,
                 workspace_identifier_default: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allow_status_codes: List of status code ranges that are allowed to be logged in metrics.
        :param pulumi.Input[str] consumer_identifier_default: must be one of ["consumer*id", "custom*id", "username"]
        :param pulumi.Input[str] host: The IP address or hostname of StatsD server to send data to.
        :param pulumi.Input[Sequence[pulumi.Input['GatewayPluginStatsdConfigMetricArgs']]] metrics: List of metrics to be logged.
        :param pulumi.Input[int] port: The port of StatsD server to send data to.
        :param pulumi.Input[str] prefix: String to prefix to each metric's name.
        :param pulumi.Input[str] service_identifier_default: must be one of ["service*id", "service*name", "service*host", "service*name*or*host"]
        :param pulumi.Input[str] tag_style: must be one of ["dogstatsd", "influxdb", "librato", "signalfx"]
        :param pulumi.Input[str] workspace_identifier_default: must be one of ["workspace*id", "workspace*name"]
        """
        if allow_status_codes is not None:
            pulumi.set(__self__, "allow_status_codes", allow_status_codes)
        if consumer_identifier_default is not None:
            pulumi.set(__self__, "consumer_identifier_default", consumer_identifier_default)
        if flush_timeout is not None:
            pulumi.set(__self__, "flush_timeout", flush_timeout)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hostname_in_prefix is not None:
            pulumi.set(__self__, "hostname_in_prefix", hostname_in_prefix)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)
        if retry_count is not None:
            pulumi.set(__self__, "retry_count", retry_count)
        if service_identifier_default is not None:
            pulumi.set(__self__, "service_identifier_default", service_identifier_default)
        if tag_style is not None:
            pulumi.set(__self__, "tag_style", tag_style)
        if udp_packet_size is not None:
            pulumi.set(__self__, "udp_packet_size", udp_packet_size)
        if use_tcp is not None:
            pulumi.set(__self__, "use_tcp", use_tcp)
        if workspace_identifier_default is not None:
            pulumi.set(__self__, "workspace_identifier_default", workspace_identifier_default)

    @property
    @pulumi.getter(name="allowStatusCodes")
    def allow_status_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of status code ranges that are allowed to be logged in metrics.
        """
        return pulumi.get(self, "allow_status_codes")

    @allow_status_codes.setter
    def allow_status_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_status_codes", value)

    @property
    @pulumi.getter(name="consumerIdentifierDefault")
    def consumer_identifier_default(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["consumer*id", "custom*id", "username"]
        """
        return pulumi.get(self, "consumer_identifier_default")

    @consumer_identifier_default.setter
    def consumer_identifier_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_identifier_default", value)

    @property
    @pulumi.getter(name="flushTimeout")
    def flush_timeout(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "flush_timeout")

    @flush_timeout.setter
    def flush_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "flush_timeout", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The IP address or hostname of StatsD server to send data to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="hostnameInPrefix")
    def hostname_in_prefix(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "hostname_in_prefix")

    @hostname_in_prefix.setter
    def hostname_in_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hostname_in_prefix", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginStatsdConfigMetricArgs']]]]:
        """
        List of metrics to be logged.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GatewayPluginStatsdConfigMetricArgs']]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The port of StatsD server to send data to.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        String to prefix to each metric's name.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input['GatewayPluginStatsdConfigQueueArgs']]:
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input['GatewayPluginStatsdConfigQueueArgs']]):
        pulumi.set(self, "queue", value)

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "queue_size")

    @queue_size.setter
    def queue_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_size", value)

    @property
    @pulumi.getter(name="retryCount")
    def retry_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "retry_count")

    @retry_count.setter
    def retry_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retry_count", value)

    @property
    @pulumi.getter(name="serviceIdentifierDefault")
    def service_identifier_default(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["service*id", "service*name", "service*host", "service*name*or*host"]
        """
        return pulumi.get(self, "service_identifier_default")

    @service_identifier_default.setter
    def service_identifier_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_identifier_default", value)

    @property
    @pulumi.getter(name="tagStyle")
    def tag_style(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["dogstatsd", "influxdb", "librato", "signalfx"]
        """
        return pulumi.get(self, "tag_style")

    @tag_style.setter
    def tag_style(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_style", value)

    @property
    @pulumi.getter(name="udpPacketSize")
    def udp_packet_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "udp_packet_size")

    @udp_packet_size.setter
    def udp_packet_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "udp_packet_size", value)

    @property
    @pulumi.getter(name="useTcp")
    def use_tcp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_tcp")

    @use_tcp.setter
    def use_tcp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_tcp", value)

    @property
    @pulumi.getter(name="workspaceIdentifierDefault")
    def workspace_identifier_default(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["workspace*id", "workspace*name"]
        """
        return pulumi.get(self, "workspace_identifier_default")

    @workspace_identifier_default.setter
    def workspace_identifier_default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_identifier_default", value)


@pulumi.input_type
class GatewayPluginStatsdConfigMetricArgs:
    def __init__(__self__, *,
                 consumer_identifier: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[float]] = None,
                 service_identifier: Optional[pulumi.Input[str]] = None,
                 stat_type: Optional[pulumi.Input[str]] = None,
                 workspace_identifier: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] consumer_identifier: Authenticated user detail. must be one of ["consumer*id", "custom*id", "username"]
        :param pulumi.Input[str] name: StatsD metric’s name. Not Null; must be one of ["kong*latency", "latency", "request*count", "request*per*user", "request*size", "response*size", "status*count", "status*count*per*user", "unique*users", "upstream*latency", "status*count*per*workspace", "status*count*per*user*per*route", "shdict*usage", "cache*datastore*hits*total", "cache*datastore*misses_total"]
        :param pulumi.Input[float] sample_rate: Sampling rate
        :param pulumi.Input[str] service_identifier: Service detail. must be one of ["service*id", "service*name", "service*host", "service*name*or*host"]
        :param pulumi.Input[str] stat_type: Determines what sort of event a metric represents. Not Null; must be one of ["counter", "gauge", "histogram", "meter", "set", "timer"]
        :param pulumi.Input[str] workspace_identifier: Workspace detail. must be one of ["workspace*id", "workspace*name"]
        """
        if consumer_identifier is not None:
            pulumi.set(__self__, "consumer_identifier", consumer_identifier)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)
        if service_identifier is not None:
            pulumi.set(__self__, "service_identifier", service_identifier)
        if stat_type is not None:
            pulumi.set(__self__, "stat_type", stat_type)
        if workspace_identifier is not None:
            pulumi.set(__self__, "workspace_identifier", workspace_identifier)

    @property
    @pulumi.getter(name="consumerIdentifier")
    def consumer_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Authenticated user detail. must be one of ["consumer*id", "custom*id", "username"]
        """
        return pulumi.get(self, "consumer_identifier")

    @consumer_identifier.setter
    def consumer_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_identifier", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        StatsD metric’s name. Not Null; must be one of ["kong*latency", "latency", "request*count", "request*per*user", "request*size", "response*size", "status*count", "status*count*per*user", "unique*users", "upstream*latency", "status*count*per*workspace", "status*count*per*user*per*route", "shdict*usage", "cache*datastore*hits*total", "cache*datastore*misses_total"]
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[float]]:
        """
        Sampling rate
        """
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sample_rate", value)

    @property
    @pulumi.getter(name="serviceIdentifier")
    def service_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Service detail. must be one of ["service*id", "service*name", "service*host", "service*name*or*host"]
        """
        return pulumi.get(self, "service_identifier")

    @service_identifier.setter
    def service_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_identifier", value)

    @property
    @pulumi.getter(name="statType")
    def stat_type(self) -> Optional[pulumi.Input[str]]:
        """
        Determines what sort of event a metric represents. Not Null; must be one of ["counter", "gauge", "histogram", "meter", "set", "timer"]
        """
        return pulumi.get(self, "stat_type")

    @stat_type.setter
    def stat_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stat_type", value)

    @property
    @pulumi.getter(name="workspaceIdentifier")
    def workspace_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Workspace detail. must be one of ["workspace*id", "workspace*name"]
        """
        return pulumi.get(self, "workspace_identifier")

    @workspace_identifier.setter
    def workspace_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workspace_identifier", value)


@pulumi.input_type
class GatewayPluginStatsdConfigQueueArgs:
    def __init__(__self__, *,
                 initial_retry_delay: Optional[pulumi.Input[float]] = None,
                 max_batch_size: Optional[pulumi.Input[int]] = None,
                 max_bytes: Optional[pulumi.Input[int]] = None,
                 max_coalescing_delay: Optional[pulumi.Input[float]] = None,
                 max_entries: Optional[pulumi.Input[int]] = None,
                 max_retry_delay: Optional[pulumi.Input[float]] = None,
                 max_retry_time: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[float] initial_retry_delay: Time in seconds before the initial retry is made for a failing batch.
        :param pulumi.Input[int] max_batch_size: Maximum number of entries that can be processed at a time.
        :param pulumi.Input[int] max_bytes: Maximum number of bytes that can be waiting on a queue, requires string content.
        :param pulumi.Input[float] max_coalescing_delay: Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
        :param pulumi.Input[int] max_entries: Maximum number of entries that can be waiting on the queue.
        :param pulumi.Input[float] max_retry_delay: Maximum time in seconds between retries, caps exponential backoff.
        :param pulumi.Input[float] max_retry_time: Time in seconds before the queue gives up calling a failed handler for a batch.
        """
        if initial_retry_delay is not None:
            pulumi.set(__self__, "initial_retry_delay", initial_retry_delay)
        if max_batch_size is not None:
            pulumi.set(__self__, "max_batch_size", max_batch_size)
        if max_bytes is not None:
            pulumi.set(__self__, "max_bytes", max_bytes)
        if max_coalescing_delay is not None:
            pulumi.set(__self__, "max_coalescing_delay", max_coalescing_delay)
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_retry_delay is not None:
            pulumi.set(__self__, "max_retry_delay", max_retry_delay)
        if max_retry_time is not None:
            pulumi.set(__self__, "max_retry_time", max_retry_time)

    @property
    @pulumi.getter(name="initialRetryDelay")
    def initial_retry_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Time in seconds before the initial retry is made for a failing batch.
        """
        return pulumi.get(self, "initial_retry_delay")

    @initial_retry_delay.setter
    def initial_retry_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "initial_retry_delay", value)

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of entries that can be processed at a time.
        """
        return pulumi.get(self, "max_batch_size")

    @max_batch_size.setter
    def max_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_batch_size", value)

    @property
    @pulumi.getter(name="maxBytes")
    def max_bytes(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of bytes that can be waiting on a queue, requires string content.
        """
        return pulumi.get(self, "max_bytes")

    @max_bytes.setter
    def max_bytes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_bytes", value)

    @property
    @pulumi.getter(name="maxCoalescingDelay")
    def max_coalescing_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.
        """
        return pulumi.get(self, "max_coalescing_delay")

    @max_coalescing_delay.setter
    def max_coalescing_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_coalescing_delay", value)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum number of entries that can be waiting on the queue.
        """
        return pulumi.get(self, "max_entries")

    @max_entries.setter
    def max_entries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_entries", value)

    @property
    @pulumi.getter(name="maxRetryDelay")
    def max_retry_delay(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum time in seconds between retries, caps exponential backoff.
        """
        return pulumi.get(self, "max_retry_delay")

    @max_retry_delay.setter
    def max_retry_delay(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_retry_delay", value)

    @property
    @pulumi.getter(name="maxRetryTime")
    def max_retry_time(self) -> Optional[pulumi.Input[float]]:
        """
        Time in seconds before the queue gives up calling a failed handler for a batch.
        """
        return pulumi.get(self, "max_retry_time")

    @max_retry_time.setter
    def max_retry_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_retry_time", value)


@pulumi.input_type
class GatewayPluginStatsdConsumerArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginStatsdConsumerGroupArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginStatsdRouteArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayPluginStatsdServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayRouteDestinationArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GatewayRouteServiceArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayRouteSourceArgs:
    def __init__(__self__, *,
                 ip: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None):
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class GatewayServiceClientCertificateArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewaySniCertificateArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayTargetUpstreamArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayUpstreamClientCertificateArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class GatewayUpstreamHealthchecksArgs:
    def __init__(__self__, *,
                 active: Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveArgs']] = None,
                 passive: Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveArgs']] = None,
                 threshold: Optional[pulumi.Input[float]] = None):
        if active is not None:
            pulumi.set(__self__, "active", active)
        if passive is not None:
            pulumi.set(__self__, "passive", passive)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def active(self) -> Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveArgs']]:
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveArgs']]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter
    def passive(self) -> Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveArgs']]:
        return pulumi.get(self, "passive")

    @passive.setter
    def passive(self, value: Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveArgs']]):
        pulumi.set(self, "passive", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class GatewayUpstreamHealthchecksActiveArgs:
    def __init__(__self__, *,
                 concurrency: Optional[pulumi.Input[int]] = None,
                 headers: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 healthy: Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveHealthyArgs']] = None,
                 http_path: Optional[pulumi.Input[str]] = None,
                 https_sni: Optional[pulumi.Input[str]] = None,
                 https_verify_certificate: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[float]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unhealthy: Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveUnhealthyArgs']] = None):
        """
        :param pulumi.Input[str] type: must be one of ["tcp", "http", "https", "grpc", "grpcs"]
        """
        if concurrency is not None:
            pulumi.set(__self__, "concurrency", concurrency)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if http_path is not None:
            pulumi.set(__self__, "http_path", http_path)
        if https_sni is not None:
            pulumi.set(__self__, "https_sni", https_sni)
        if https_verify_certificate is not None:
            pulumi.set(__self__, "https_verify_certificate", https_verify_certificate)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unhealthy is not None:
            pulumi.set(__self__, "unhealthy", unhealthy)

    @property
    @pulumi.getter
    def concurrency(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveHealthyArgs']]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveHealthyArgs']]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter(name="httpPath")
    def http_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "http_path")

    @http_path.setter
    def http_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_path", value)

    @property
    @pulumi.getter(name="httpsSni")
    def https_sni(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "https_sni")

    @https_sni.setter
    def https_sni(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "https_sni", value)

    @property
    @pulumi.getter(name="httpsVerifyCertificate")
    def https_verify_certificate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "https_verify_certificate")

    @https_verify_certificate.setter
    def https_verify_certificate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "https_verify_certificate", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["tcp", "http", "https", "grpc", "grpcs"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unhealthy(self) -> Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveUnhealthyArgs']]:
        return pulumi.get(self, "unhealthy")

    @unhealthy.setter
    def unhealthy(self, value: Optional[pulumi.Input['GatewayUpstreamHealthchecksActiveUnhealthyArgs']]):
        pulumi.set(self, "unhealthy", value)


@pulumi.input_type
class GatewayUpstreamHealthchecksActiveHealthyArgs:
    def __init__(__self__, *,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 interval: Optional[pulumi.Input[float]] = None,
                 successes: Optional[pulumi.Input[int]] = None):
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successes", value)


@pulumi.input_type
class GatewayUpstreamHealthchecksActiveUnhealthyArgs:
    def __init__(__self__, *,
                 http_failures: Optional[pulumi.Input[int]] = None,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 interval: Optional[pulumi.Input[float]] = None,
                 tcp_failures: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[int]] = None):
        if http_failures is not None:
            pulumi.set(__self__, "http_failures", http_failures)
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if tcp_failures is not None:
            pulumi.set(__self__, "tcp_failures", tcp_failures)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_failures")

    @http_failures.setter
    def http_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_failures", value)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_failures")

    @tcp_failures.setter
    def tcp_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_failures", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class GatewayUpstreamHealthchecksPassiveArgs:
    def __init__(__self__, *,
                 healthy: Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveHealthyArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 unhealthy: Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveUnhealthyArgs']] = None):
        """
        :param pulumi.Input[str] type: must be one of ["tcp", "http", "https", "grpc", "grpcs"]
        """
        if healthy is not None:
            pulumi.set(__self__, "healthy", healthy)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unhealthy is not None:
            pulumi.set(__self__, "unhealthy", unhealthy)

    @property
    @pulumi.getter
    def healthy(self) -> Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveHealthyArgs']]:
        return pulumi.get(self, "healthy")

    @healthy.setter
    def healthy(self, value: Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveHealthyArgs']]):
        pulumi.set(self, "healthy", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["tcp", "http", "https", "grpc", "grpcs"]
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unhealthy(self) -> Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveUnhealthyArgs']]:
        return pulumi.get(self, "unhealthy")

    @unhealthy.setter
    def unhealthy(self, value: Optional[pulumi.Input['GatewayUpstreamHealthchecksPassiveUnhealthyArgs']]):
        pulumi.set(self, "unhealthy", value)


@pulumi.input_type
class GatewayUpstreamHealthchecksPassiveHealthyArgs:
    def __init__(__self__, *,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 successes: Optional[pulumi.Input[int]] = None):
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if successes is not None:
            pulumi.set(__self__, "successes", successes)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter
    def successes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "successes")

    @successes.setter
    def successes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "successes", value)


@pulumi.input_type
class GatewayUpstreamHealthchecksPassiveUnhealthyArgs:
    def __init__(__self__, *,
                 http_failures: Optional[pulumi.Input[int]] = None,
                 http_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 tcp_failures: Optional[pulumi.Input[int]] = None,
                 timeouts: Optional[pulumi.Input[int]] = None):
        if http_failures is not None:
            pulumi.set(__self__, "http_failures", http_failures)
        if http_statuses is not None:
            pulumi.set(__self__, "http_statuses", http_statuses)
        if tcp_failures is not None:
            pulumi.set(__self__, "tcp_failures", tcp_failures)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter(name="httpFailures")
    def http_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "http_failures")

    @http_failures.setter
    def http_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "http_failures", value)

    @property
    @pulumi.getter(name="httpStatuses")
    def http_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "http_statuses")

    @http_statuses.setter
    def http_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "http_statuses", value)

    @property
    @pulumi.getter(name="tcpFailures")
    def tcp_failures(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tcp_failures")

    @tcp_failures.setter
    def tcp_failures(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tcp_failures", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class PortalAppearanceCustomFontsArgs:
    def __init__(__self__, *,
                 base: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[str]] = None,
                 headings: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base: The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]
        :param pulumi.Input[str] code: The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]
        :param pulumi.Input[str] headings: The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]
        """
        if base is not None:
            pulumi.set(__self__, "base", base)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if headings is not None:
            pulumi.set(__self__, "headings", headings)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]
        """
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def headings(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the font to render in the browser. Not Null; must be one of ["Roboto", "Inter", "Open Sans", "Lato", "Slabo 27px", "Slabo 13px", "Oswald", "Source Sans Pro", "Montserrat", "Raleway", "PT Sans", "Lora", "Roboto Mono", "Inconsolata", "Source Code Pro", "PT Mono", "Ubuntu Mono", "IBM Plex Mono"]
        """
        return pulumi.get(self, "headings")

    @headings.setter
    def headings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "headings", value)


@pulumi.input_type
class PortalAppearanceCustomThemeArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsArgs']] = None):
        """
        :param pulumi.Input['PortalAppearanceCustomThemeColorsArgs'] colors: Not Null
        """
        if colors is not None:
            pulumi.set(__self__, "colors", colors)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsArgs']]):
        pulumi.set(self, "colors", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsArgs:
    def __init__(__self__, *,
                 button: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonArgs']] = None,
                 section: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionArgs']] = None,
                 text: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextArgs']] = None):
        """
        :param pulumi.Input['PortalAppearanceCustomThemeColorsButtonArgs'] button: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionArgs'] section: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextArgs'] text: Not Null
        """
        if button is not None:
            pulumi.set(__self__, "button", button)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def button(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "button")

    @button.setter
    def button(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonArgs']]):
        pulumi.set(self, "button", value)

    @property
    @pulumi.getter
    def section(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "section")

    @section.setter
    def section(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionArgs']]):
        pulumi.set(self, "section", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextArgs']]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsButtonArgs:
    def __init__(__self__, *,
                 primary_fill: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryFillArgs']] = None,
                 primary_text: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryTextArgs']] = None):
        """
        :param pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryFillArgs'] primary_fill: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryTextArgs'] primary_text: Not Null
        """
        if primary_fill is not None:
            pulumi.set(__self__, "primary_fill", primary_fill)
        if primary_text is not None:
            pulumi.set(__self__, "primary_text", primary_text)

    @property
    @pulumi.getter(name="primaryFill")
    def primary_fill(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryFillArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "primary_fill")

    @primary_fill.setter
    def primary_fill(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryFillArgs']]):
        pulumi.set(self, "primary_fill", value)

    @property
    @pulumi.getter(name="primaryText")
    def primary_text(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryTextArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "primary_text")

    @primary_text.setter
    def primary_text(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsButtonPrimaryTextArgs']]):
        pulumi.set(self, "primary_text", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsButtonPrimaryFillArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsButtonPrimaryTextArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionArgs:
    def __init__(__self__, *,
                 accent: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionAccentArgs']] = None,
                 body: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionBodyArgs']] = None,
                 footer: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionFooterArgs']] = None,
                 header: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeaderArgs']] = None,
                 hero: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeroArgs']] = None,
                 stroke: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionStrokeArgs']] = None,
                 tertiary: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionTertiaryArgs']] = None):
        """
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionAccentArgs'] accent: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionBodyArgs'] body: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionFooterArgs'] footer: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeaderArgs'] header: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeroArgs'] hero: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionStrokeArgs'] stroke: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsSectionTertiaryArgs'] tertiary: Not Null
        """
        if accent is not None:
            pulumi.set(__self__, "accent", accent)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if hero is not None:
            pulumi.set(__self__, "hero", hero)
        if stroke is not None:
            pulumi.set(__self__, "stroke", stroke)
        if tertiary is not None:
            pulumi.set(__self__, "tertiary", tertiary)

    @property
    @pulumi.getter
    def accent(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionAccentArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "accent")

    @accent.setter
    def accent(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionAccentArgs']]):
        pulumi.set(self, "accent", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionBodyArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionBodyArgs']]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionFooterArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionFooterArgs']]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeaderArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def hero(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeroArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "hero")

    @hero.setter
    def hero(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionHeroArgs']]):
        pulumi.set(self, "hero", value)

    @property
    @pulumi.getter
    def stroke(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionStrokeArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "stroke")

    @stroke.setter
    def stroke(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionStrokeArgs']]):
        pulumi.set(self, "stroke", value)

    @property
    @pulumi.getter
    def tertiary(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionTertiaryArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "tertiary")

    @tertiary.setter
    def tertiary(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsSectionTertiaryArgs']]):
        pulumi.set(self, "tertiary", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionAccentArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionBodyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionFooterArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionHeaderArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionHeroArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionStrokeArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsSectionTertiaryArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextArgs:
    def __init__(__self__, *,
                 accent: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextAccentArgs']] = None,
                 footer: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextFooterArgs']] = None,
                 header: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeaderArgs']] = None,
                 headings: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeadingsArgs']] = None,
                 hero: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeroArgs']] = None,
                 link: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextLinkArgs']] = None,
                 primary: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextPrimaryArgs']] = None,
                 secondary: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextSecondaryArgs']] = None):
        """
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextAccentArgs'] accent: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextFooterArgs'] footer: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextHeaderArgs'] header: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextHeadingsArgs'] headings: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextHeroArgs'] hero: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextLinkArgs'] link: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextPrimaryArgs'] primary: Not Null
        :param pulumi.Input['PortalAppearanceCustomThemeColorsTextSecondaryArgs'] secondary: Not Null
        """
        if accent is not None:
            pulumi.set(__self__, "accent", accent)
        if footer is not None:
            pulumi.set(__self__, "footer", footer)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if headings is not None:
            pulumi.set(__self__, "headings", headings)
        if hero is not None:
            pulumi.set(__self__, "hero", hero)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if secondary is not None:
            pulumi.set(__self__, "secondary", secondary)

    @property
    @pulumi.getter
    def accent(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextAccentArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "accent")

    @accent.setter
    def accent(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextAccentArgs']]):
        pulumi.set(self, "accent", value)

    @property
    @pulumi.getter
    def footer(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextFooterArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "footer")

    @footer.setter
    def footer(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextFooterArgs']]):
        pulumi.set(self, "footer", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeaderArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeaderArgs']]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter
    def headings(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeadingsArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "headings")

    @headings.setter
    def headings(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeadingsArgs']]):
        pulumi.set(self, "headings", value)

    @property
    @pulumi.getter
    def hero(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeroArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "hero")

    @hero.setter
    def hero(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextHeroArgs']]):
        pulumi.set(self, "hero", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextLinkArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextLinkArgs']]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextPrimaryArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextPrimaryArgs']]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def secondary(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextSecondaryArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "secondary")

    @secondary.setter
    def secondary(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeColorsTextSecondaryArgs']]):
        pulumi.set(self, "secondary", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextAccentArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextFooterArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextHeaderArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextHeadingsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextHeroArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextLinkArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextPrimaryArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceCustomThemeColorsTextSecondaryArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Not Null
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PortalAppearanceImagesArgs:
    def __init__(__self__, *,
                 catalog_cover: Optional[pulumi.Input['PortalAppearanceImagesCatalogCoverArgs']] = None,
                 favicon: Optional[pulumi.Input['PortalAppearanceImagesFaviconArgs']] = None,
                 logo: Optional[pulumi.Input['PortalAppearanceImagesLogoArgs']] = None):
        """
        :param pulumi.Input['PortalAppearanceImagesCatalogCoverArgs'] catalog_cover: The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data*URLs.
        :param pulumi.Input['PortalAppearanceImagesFaviconArgs'] favicon: The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data_URLs.
        :param pulumi.Input['PortalAppearanceImagesLogoArgs'] logo: The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data_URLs.
        """
        if catalog_cover is not None:
            pulumi.set(__self__, "catalog_cover", catalog_cover)
        if favicon is not None:
            pulumi.set(__self__, "favicon", favicon)
        if logo is not None:
            pulumi.set(__self__, "logo", logo)

    @property
    @pulumi.getter(name="catalogCover")
    def catalog_cover(self) -> Optional[pulumi.Input['PortalAppearanceImagesCatalogCoverArgs']]:
        """
        The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data*URLs.
        """
        return pulumi.get(self, "catalog_cover")

    @catalog_cover.setter
    def catalog_cover(self, value: Optional[pulumi.Input['PortalAppearanceImagesCatalogCoverArgs']]):
        pulumi.set(self, "catalog_cover", value)

    @property
    @pulumi.getter
    def favicon(self) -> Optional[pulumi.Input['PortalAppearanceImagesFaviconArgs']]:
        """
        The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data_URLs.
        """
        return pulumi.get(self, "favicon")

    @favicon.setter
    def favicon(self, value: Optional[pulumi.Input['PortalAppearanceImagesFaviconArgs']]):
        pulumi.set(self, "favicon", value)

    @property
    @pulumi.getter
    def logo(self) -> Optional[pulumi.Input['PortalAppearanceImagesLogoArgs']]:
        """
        The image data to upload, along with an optional filename. Images must be a data URL with binary image data in base 64 format. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics*of*HTTP/Data_URLs.
        """
        return pulumi.get(self, "logo")

    @logo.setter
    def logo(self, value: Optional[pulumi.Input['PortalAppearanceImagesLogoArgs']]):
        pulumi.set(self, "logo", value)


@pulumi.input_type
class PortalAppearanceImagesCatalogCoverArgs:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data: must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class PortalAppearanceImagesFaviconArgs:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data: must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class PortalAppearanceImagesLogoArgs:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[str]] = None,
                 filename: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data: must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null
        """
        if data is not None:
            pulumi.set(__self__, "data", data)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        must be a data URL with base64 image data, e.g., data:image/jpeg;base64,\\n\\n. Not Null
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class PortalAppearanceTextArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input['PortalAppearanceTextCatalogArgs']] = None):
        """
        :param pulumi.Input['PortalAppearanceTextCatalogArgs'] catalog: Not Null
        """
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input['PortalAppearanceTextCatalogArgs']]:
        """
        Not Null
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input['PortalAppearanceTextCatalogArgs']]):
        pulumi.set(self, "catalog", value)


@pulumi.input_type
class PortalAppearanceTextCatalogArgs:
    def __init__(__self__, *,
                 primary_header: Optional[pulumi.Input[str]] = None,
                 welcome_message: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] primary_header: Not Null
        :param pulumi.Input[str] welcome_message: Not Null
        """
        if primary_header is not None:
            pulumi.set(__self__, "primary_header", primary_header)
        if welcome_message is not None:
            pulumi.set(__self__, "welcome_message", welcome_message)

    @property
    @pulumi.getter(name="primaryHeader")
    def primary_header(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "primary_header")

    @primary_header.setter
    def primary_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_header", value)

    @property
    @pulumi.getter(name="welcomeMessage")
    def welcome_message(self) -> Optional[pulumi.Input[str]]:
        """
        Not Null
        """
        return pulumi.get(self, "welcome_message")

    @welcome_message.setter
    def welcome_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "welcome_message", value)


@pulumi.input_type
class PortalAuthOidcClaimMappingsArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalAuthOidcConfigArgs:
    def __init__(__self__, *,
                 claim_mappings: Optional[pulumi.Input['PortalAuthOidcConfigClaimMappingsArgs']] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['PortalAuthOidcConfigClaimMappingsArgs'] claim_mappings: Mappings from a portal developer atribute to an Identity Provider claim.
        """
        if claim_mappings is not None:
            pulumi.set(__self__, "claim_mappings", claim_mappings)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)

    @property
    @pulumi.getter(name="claimMappings")
    def claim_mappings(self) -> Optional[pulumi.Input['PortalAuthOidcConfigClaimMappingsArgs']]:
        """
        Mappings from a portal developer atribute to an Identity Provider claim.
        """
        return pulumi.get(self, "claim_mappings")

    @claim_mappings.setter
    def claim_mappings(self, value: Optional[pulumi.Input['PortalAuthOidcConfigClaimMappingsArgs']]):
        pulumi.set(self, "claim_mappings", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)


@pulumi.input_type
class PortalAuthOidcConfigClaimMappingsArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if email is not None:
            pulumi.set(__self__, "email", email)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalProductVersionAuthStrategyArgs:
    def __init__(__self__, *,
                 client_credentials: Optional[pulumi.Input['PortalProductVersionAuthStrategyClientCredentialsArgs']] = None,
                 key_auth: Optional[pulumi.Input['PortalProductVersionAuthStrategyKeyAuthArgs']] = None):
        """
        :param pulumi.Input['PortalProductVersionAuthStrategyClientCredentialsArgs'] client_credentials: Client Credential Auth strategy that the application uses.
        :param pulumi.Input['PortalProductVersionAuthStrategyKeyAuthArgs'] key_auth: KeyAuth Auth strategy that the application uses.
        """
        if client_credentials is not None:
            pulumi.set(__self__, "client_credentials", client_credentials)
        if key_auth is not None:
            pulumi.set(__self__, "key_auth", key_auth)

    @property
    @pulumi.getter(name="clientCredentials")
    def client_credentials(self) -> Optional[pulumi.Input['PortalProductVersionAuthStrategyClientCredentialsArgs']]:
        """
        Client Credential Auth strategy that the application uses.
        """
        return pulumi.get(self, "client_credentials")

    @client_credentials.setter
    def client_credentials(self, value: Optional[pulumi.Input['PortalProductVersionAuthStrategyClientCredentialsArgs']]):
        pulumi.set(self, "client_credentials", value)

    @property
    @pulumi.getter(name="keyAuth")
    def key_auth(self) -> Optional[pulumi.Input['PortalProductVersionAuthStrategyKeyAuthArgs']]:
        """
        KeyAuth Auth strategy that the application uses.
        """
        return pulumi.get(self, "key_auth")

    @key_auth.setter
    def key_auth(self, value: Optional[pulumi.Input['PortalProductVersionAuthStrategyKeyAuthArgs']]):
        pulumi.set(self, "key_auth", value)


@pulumi.input_type
class PortalProductVersionAuthStrategyClientCredentialsArgs:
    def __init__(__self__, *,
                 auth_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] credential_type: must be one of ["client*credentials", "self*managed*client*credentials"]
        :param pulumi.Input[str] id: The Application Auth Strategy ID.
        """
        if auth_methods is not None:
            pulumi.set(__self__, "auth_methods", auth_methods)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="authMethods")
    def auth_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "auth_methods")

    @auth_methods.setter
    def auth_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "auth_methods", value)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["client*credentials", "self*managed*client*credentials"]
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The Application Auth Strategy ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PortalProductVersionAuthStrategyKeyAuthArgs:
    def __init__(__self__, *,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] credential_type: must be one of ["key_auth"]
        :param pulumi.Input[str] id: The Application Auth Strategy ID.
        """
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        must be one of ["key_auth"]
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        The Application Auth Strategy ID.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServerlessCloudGatewayControlPlaneArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 prefix: pulumi.Input[str],
                 region: pulumi.Input[str]):
        """
        :param pulumi.Input[str] id: ID of the serverless cloud gateway CP. Requires replacement if changed.
        :param pulumi.Input[str] prefix: The prefix of the serverless cloud gateway CP. Requires replacement if changed.
        :param pulumi.Input[str] region: The control plane region. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        ID of the serverless cloud gateway CP. Requires replacement if changed.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        The prefix of the serverless cloud gateway CP. Requires replacement if changed.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        The control plane region. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)


