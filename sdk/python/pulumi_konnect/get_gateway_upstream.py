# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetGatewayUpstreamResult',
    'AwaitableGetGatewayUpstreamResult',
    'get_gateway_upstream',
    'get_gateway_upstream_output',
]

@pulumi.output_type
class GetGatewayUpstreamResult:
    """
    A collection of values returned by getGatewayUpstream.
    """
    def __init__(__self__, algorithm=None, client_certificate=None, control_plane_id=None, created_at=None, hash_fallback=None, hash_fallback_header=None, hash_fallback_query_arg=None, hash_fallback_uri_capture=None, hash_on=None, hash_on_cookie=None, hash_on_cookie_path=None, hash_on_header=None, hash_on_query_arg=None, hash_on_uri_capture=None, healthchecks=None, host_header=None, id=None, name=None, slots=None, tags=None, updated_at=None, use_srv_name=None):
        if algorithm and not isinstance(algorithm, str):
            raise TypeError("Expected argument 'algorithm' to be a str")
        pulumi.set(__self__, "algorithm", algorithm)
        if client_certificate and not isinstance(client_certificate, dict):
            raise TypeError("Expected argument 'client_certificate' to be a dict")
        pulumi.set(__self__, "client_certificate", client_certificate)
        if control_plane_id and not isinstance(control_plane_id, str):
            raise TypeError("Expected argument 'control_plane_id' to be a str")
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at and not isinstance(created_at, int):
            raise TypeError("Expected argument 'created_at' to be a int")
        pulumi.set(__self__, "created_at", created_at)
        if hash_fallback and not isinstance(hash_fallback, str):
            raise TypeError("Expected argument 'hash_fallback' to be a str")
        pulumi.set(__self__, "hash_fallback", hash_fallback)
        if hash_fallback_header and not isinstance(hash_fallback_header, str):
            raise TypeError("Expected argument 'hash_fallback_header' to be a str")
        pulumi.set(__self__, "hash_fallback_header", hash_fallback_header)
        if hash_fallback_query_arg and not isinstance(hash_fallback_query_arg, str):
            raise TypeError("Expected argument 'hash_fallback_query_arg' to be a str")
        pulumi.set(__self__, "hash_fallback_query_arg", hash_fallback_query_arg)
        if hash_fallback_uri_capture and not isinstance(hash_fallback_uri_capture, str):
            raise TypeError("Expected argument 'hash_fallback_uri_capture' to be a str")
        pulumi.set(__self__, "hash_fallback_uri_capture", hash_fallback_uri_capture)
        if hash_on and not isinstance(hash_on, str):
            raise TypeError("Expected argument 'hash_on' to be a str")
        pulumi.set(__self__, "hash_on", hash_on)
        if hash_on_cookie and not isinstance(hash_on_cookie, str):
            raise TypeError("Expected argument 'hash_on_cookie' to be a str")
        pulumi.set(__self__, "hash_on_cookie", hash_on_cookie)
        if hash_on_cookie_path and not isinstance(hash_on_cookie_path, str):
            raise TypeError("Expected argument 'hash_on_cookie_path' to be a str")
        pulumi.set(__self__, "hash_on_cookie_path", hash_on_cookie_path)
        if hash_on_header and not isinstance(hash_on_header, str):
            raise TypeError("Expected argument 'hash_on_header' to be a str")
        pulumi.set(__self__, "hash_on_header", hash_on_header)
        if hash_on_query_arg and not isinstance(hash_on_query_arg, str):
            raise TypeError("Expected argument 'hash_on_query_arg' to be a str")
        pulumi.set(__self__, "hash_on_query_arg", hash_on_query_arg)
        if hash_on_uri_capture and not isinstance(hash_on_uri_capture, str):
            raise TypeError("Expected argument 'hash_on_uri_capture' to be a str")
        pulumi.set(__self__, "hash_on_uri_capture", hash_on_uri_capture)
        if healthchecks and not isinstance(healthchecks, dict):
            raise TypeError("Expected argument 'healthchecks' to be a dict")
        pulumi.set(__self__, "healthchecks", healthchecks)
        if host_header and not isinstance(host_header, str):
            raise TypeError("Expected argument 'host_header' to be a str")
        pulumi.set(__self__, "host_header", host_header)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slots and not isinstance(slots, int):
            raise TypeError("Expected argument 'slots' to be a int")
        pulumi.set(__self__, "slots", slots)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, int):
            raise TypeError("Expected argument 'updated_at' to be a int")
        pulumi.set(__self__, "updated_at", updated_at)
        if use_srv_name and not isinstance(use_srv_name, bool):
            raise TypeError("Expected argument 'use_srv_name' to be a bool")
        pulumi.set(__self__, "use_srv_name", use_srv_name)

    @property
    @pulumi.getter
    def algorithm(self) -> str:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> 'outputs.GetGatewayUpstreamClientCertificateResult':
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> str:
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> int:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="hashFallback")
    def hash_fallback(self) -> str:
        return pulumi.get(self, "hash_fallback")

    @property
    @pulumi.getter(name="hashFallbackHeader")
    def hash_fallback_header(self) -> str:
        return pulumi.get(self, "hash_fallback_header")

    @property
    @pulumi.getter(name="hashFallbackQueryArg")
    def hash_fallback_query_arg(self) -> str:
        return pulumi.get(self, "hash_fallback_query_arg")

    @property
    @pulumi.getter(name="hashFallbackUriCapture")
    def hash_fallback_uri_capture(self) -> str:
        return pulumi.get(self, "hash_fallback_uri_capture")

    @property
    @pulumi.getter(name="hashOn")
    def hash_on(self) -> str:
        return pulumi.get(self, "hash_on")

    @property
    @pulumi.getter(name="hashOnCookie")
    def hash_on_cookie(self) -> str:
        return pulumi.get(self, "hash_on_cookie")

    @property
    @pulumi.getter(name="hashOnCookiePath")
    def hash_on_cookie_path(self) -> str:
        return pulumi.get(self, "hash_on_cookie_path")

    @property
    @pulumi.getter(name="hashOnHeader")
    def hash_on_header(self) -> str:
        return pulumi.get(self, "hash_on_header")

    @property
    @pulumi.getter(name="hashOnQueryArg")
    def hash_on_query_arg(self) -> str:
        return pulumi.get(self, "hash_on_query_arg")

    @property
    @pulumi.getter(name="hashOnUriCapture")
    def hash_on_uri_capture(self) -> str:
        return pulumi.get(self, "hash_on_uri_capture")

    @property
    @pulumi.getter
    def healthchecks(self) -> 'outputs.GetGatewayUpstreamHealthchecksResult':
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter(name="hostHeader")
    def host_header(self) -> str:
        return pulumi.get(self, "host_header")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slots(self) -> int:
        return pulumi.get(self, "slots")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> int:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="useSrvName")
    def use_srv_name(self) -> bool:
        return pulumi.get(self, "use_srv_name")


class AwaitableGetGatewayUpstreamResult(GetGatewayUpstreamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewayUpstreamResult(
            algorithm=self.algorithm,
            client_certificate=self.client_certificate,
            control_plane_id=self.control_plane_id,
            created_at=self.created_at,
            hash_fallback=self.hash_fallback,
            hash_fallback_header=self.hash_fallback_header,
            hash_fallback_query_arg=self.hash_fallback_query_arg,
            hash_fallback_uri_capture=self.hash_fallback_uri_capture,
            hash_on=self.hash_on,
            hash_on_cookie=self.hash_on_cookie,
            hash_on_cookie_path=self.hash_on_cookie_path,
            hash_on_header=self.hash_on_header,
            hash_on_query_arg=self.hash_on_query_arg,
            hash_on_uri_capture=self.hash_on_uri_capture,
            healthchecks=self.healthchecks,
            host_header=self.host_header,
            id=self.id,
            name=self.name,
            slots=self.slots,
            tags=self.tags,
            updated_at=self.updated_at,
            use_srv_name=self.use_srv_name)


def get_gateway_upstream(control_plane_id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewayUpstreamResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['controlPlaneId'] = control_plane_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getGatewayUpstream:getGatewayUpstream', __args__, opts=opts, typ=GetGatewayUpstreamResult).value

    return AwaitableGetGatewayUpstreamResult(
        algorithm=pulumi.get(__ret__, 'algorithm'),
        client_certificate=pulumi.get(__ret__, 'client_certificate'),
        control_plane_id=pulumi.get(__ret__, 'control_plane_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        hash_fallback=pulumi.get(__ret__, 'hash_fallback'),
        hash_fallback_header=pulumi.get(__ret__, 'hash_fallback_header'),
        hash_fallback_query_arg=pulumi.get(__ret__, 'hash_fallback_query_arg'),
        hash_fallback_uri_capture=pulumi.get(__ret__, 'hash_fallback_uri_capture'),
        hash_on=pulumi.get(__ret__, 'hash_on'),
        hash_on_cookie=pulumi.get(__ret__, 'hash_on_cookie'),
        hash_on_cookie_path=pulumi.get(__ret__, 'hash_on_cookie_path'),
        hash_on_header=pulumi.get(__ret__, 'hash_on_header'),
        hash_on_query_arg=pulumi.get(__ret__, 'hash_on_query_arg'),
        hash_on_uri_capture=pulumi.get(__ret__, 'hash_on_uri_capture'),
        healthchecks=pulumi.get(__ret__, 'healthchecks'),
        host_header=pulumi.get(__ret__, 'host_header'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        slots=pulumi.get(__ret__, 'slots'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        use_srv_name=pulumi.get(__ret__, 'use_srv_name'))


@_utilities.lift_output_func(get_gateway_upstream)
def get_gateway_upstream_output(control_plane_id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGatewayUpstreamResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
