# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SystemAccountRoleArgs', 'SystemAccountRole']

@pulumi.input_type
class SystemAccountRoleArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_region: Optional[pulumi.Input[str]] = None,
                 entity_type_name: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a SystemAccountRole resource.
        :param pulumi.Input[str] account_id: ID of the system account. Requires replacement if changed.
        :param pulumi.Input[str] entity_id: The ID of the entity. Requires replacement if changed.
        :param pulumi.Input[str] entity_region: The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
        :param pulumi.Input[str] entity_type_name: The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
        :param pulumi.Input[str] role_name: The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
        """
        pulumi.set(__self__, "account_id", account_id)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_region is not None:
            pulumi.set(__self__, "entity_region", entity_region)
        if entity_type_name is not None:
            pulumi.set(__self__, "entity_type_name", entity_type_name)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        ID of the system account. Requires replacement if changed.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the entity. Requires replacement if changed.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityRegion")
    def entity_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
        """
        return pulumi.get(self, "entity_region")

    @entity_region.setter
    def entity_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_region", value)

    @property
    @pulumi.getter(name="entityTypeName")
    def entity_type_name(self) -> Optional[pulumi.Input[str]]:
        """
        The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
        """
        return pulumi.get(self, "entity_type_name")

    @entity_type_name.setter
    def entity_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type_name", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


@pulumi.input_type
class _SystemAccountRoleState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_region: Optional[pulumi.Input[str]] = None,
                 entity_type_name: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering SystemAccountRole resources.
        :param pulumi.Input[str] account_id: ID of the system account. Requires replacement if changed.
        :param pulumi.Input[str] entity_id: The ID of the entity. Requires replacement if changed.
        :param pulumi.Input[str] entity_region: The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
        :param pulumi.Input[str] entity_type_name: The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
        :param pulumi.Input[str] role_name: The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if entity_id is not None:
            pulumi.set(__self__, "entity_id", entity_id)
        if entity_region is not None:
            pulumi.set(__self__, "entity_region", entity_region)
        if entity_type_name is not None:
            pulumi.set(__self__, "entity_type_name", entity_type_name)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the system account. Requires replacement if changed.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the entity. Requires replacement if changed.
        """
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="entityRegion")
    def entity_region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
        """
        return pulumi.get(self, "entity_region")

    @entity_region.setter
    def entity_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_region", value)

    @property
    @pulumi.getter(name="entityTypeName")
    def entity_type_name(self) -> Optional[pulumi.Input[str]]:
        """
        The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
        """
        return pulumi.get(self, "entity_type_name")

    @entity_type_name.setter
    def entity_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_type_name", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[str]]:
        """
        The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_name", value)


class SystemAccountRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_region: Optional[pulumi.Input[str]] = None,
                 entity_type_name: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        SystemAccountRole Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: ID of the system account. Requires replacement if changed.
        :param pulumi.Input[str] entity_id: The ID of the entity. Requires replacement if changed.
        :param pulumi.Input[str] entity_region: The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
        :param pulumi.Input[str] entity_type_name: The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
        :param pulumi.Input[str] role_name: The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SystemAccountRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        SystemAccountRole Resource

        :param str resource_name: The name of the resource.
        :param SystemAccountRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SystemAccountRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 entity_region: Optional[pulumi.Input[str]] = None,
                 entity_type_name: Optional[pulumi.Input[str]] = None,
                 role_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SystemAccountRoleArgs.__new__(SystemAccountRoleArgs)

            if account_id is None and not opts.urn:
                raise TypeError("Missing required property 'account_id'")
            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["entity_id"] = entity_id
            __props__.__dict__["entity_region"] = entity_region
            __props__.__dict__["entity_type_name"] = entity_type_name
            __props__.__dict__["role_name"] = role_name
        super(SystemAccountRole, __self__).__init__(
            'konnect:index/systemAccountRole:SystemAccountRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[str]] = None,
            entity_id: Optional[pulumi.Input[str]] = None,
            entity_region: Optional[pulumi.Input[str]] = None,
            entity_type_name: Optional[pulumi.Input[str]] = None,
            role_name: Optional[pulumi.Input[str]] = None) -> 'SystemAccountRole':
        """
        Get an existing SystemAccountRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] account_id: ID of the system account. Requires replacement if changed.
        :param pulumi.Input[str] entity_id: The ID of the entity. Requires replacement if changed.
        :param pulumi.Input[str] entity_region: The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
        :param pulumi.Input[str] entity_type_name: The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
        :param pulumi.Input[str] role_name: The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _SystemAccountRoleState.__new__(_SystemAccountRoleState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["entity_id"] = entity_id
        __props__.__dict__["entity_region"] = entity_region
        __props__.__dict__["entity_type_name"] = entity_type_name
        __props__.__dict__["role_name"] = role_name
        return SystemAccountRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        ID of the system account. Requires replacement if changed.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> pulumi.Output[str]:
        """
        The ID of the entity. Requires replacement if changed.
        """
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="entityRegion")
    def entity_region(self) -> pulumi.Output[str]:
        """
        The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
        """
        return pulumi.get(self, "entity_region")

    @property
    @pulumi.getter(name="entityTypeName")
    def entity_type_name(self) -> pulumi.Output[str]:
        """
        The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
        """
        return pulumi.get(self, "entity_type_name")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[str]:
        """
        The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
        """
        return pulumi.get(self, "role_name")

