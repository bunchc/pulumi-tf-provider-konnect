# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetCloudGatewayConfigurationResult',
    'AwaitableGetCloudGatewayConfigurationResult',
    'get_cloud_gateway_configuration',
    'get_cloud_gateway_configuration_output',
]

@pulumi.output_type
class GetCloudGatewayConfigurationResult:
    """
    A collection of values returned by getCloudGatewayConfiguration.
    """
    def __init__(__self__, api_access=None, control_plane_geo=None, control_plane_id=None, created_at=None, dataplane_group_configs=None, dataplane_groups=None, entity_version=None, id=None, updated_at=None, version=None):
        if api_access and not isinstance(api_access, str):
            raise TypeError("Expected argument 'api_access' to be a str")
        pulumi.set(__self__, "api_access", api_access)
        if control_plane_geo and not isinstance(control_plane_geo, str):
            raise TypeError("Expected argument 'control_plane_geo' to be a str")
        pulumi.set(__self__, "control_plane_geo", control_plane_geo)
        if control_plane_id and not isinstance(control_plane_id, str):
            raise TypeError("Expected argument 'control_plane_id' to be a str")
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if dataplane_group_configs and not isinstance(dataplane_group_configs, list):
            raise TypeError("Expected argument 'dataplane_group_configs' to be a list")
        pulumi.set(__self__, "dataplane_group_configs", dataplane_group_configs)
        if dataplane_groups and not isinstance(dataplane_groups, list):
            raise TypeError("Expected argument 'dataplane_groups' to be a list")
        pulumi.set(__self__, "dataplane_groups", dataplane_groups)
        if entity_version and not isinstance(entity_version, float):
            raise TypeError("Expected argument 'entity_version' to be a float")
        pulumi.set(__self__, "entity_version", entity_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="apiAccess")
    def api_access(self) -> str:
        return pulumi.get(self, "api_access")

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> str:
        return pulumi.get(self, "control_plane_geo")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> str:
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataplaneGroupConfigs")
    def dataplane_group_configs(self) -> Sequence['outputs.GetCloudGatewayConfigurationDataplaneGroupConfigResult']:
        return pulumi.get(self, "dataplane_group_configs")

    @property
    @pulumi.getter(name="dataplaneGroups")
    def dataplane_groups(self) -> Sequence['outputs.GetCloudGatewayConfigurationDataplaneGroupResult']:
        return pulumi.get(self, "dataplane_groups")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> float:
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


class AwaitableGetCloudGatewayConfigurationResult(GetCloudGatewayConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudGatewayConfigurationResult(
            api_access=self.api_access,
            control_plane_geo=self.control_plane_geo,
            control_plane_id=self.control_plane_id,
            created_at=self.created_at,
            dataplane_group_configs=self.dataplane_group_configs,
            dataplane_groups=self.dataplane_groups,
            entity_version=self.entity_version,
            id=self.id,
            updated_at=self.updated_at,
            version=self.version)


def get_cloud_gateway_configuration(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudGatewayConfigurationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getCloudGatewayConfiguration:getCloudGatewayConfiguration', __args__, opts=opts, typ=GetCloudGatewayConfigurationResult).value

    return AwaitableGetCloudGatewayConfigurationResult(
        api_access=pulumi.get(__ret__, 'api_access'),
        control_plane_geo=pulumi.get(__ret__, 'control_plane_geo'),
        control_plane_id=pulumi.get(__ret__, 'control_plane_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        dataplane_group_configs=pulumi.get(__ret__, 'dataplane_group_configs'),
        dataplane_groups=pulumi.get(__ret__, 'dataplane_groups'),
        entity_version=pulumi.get(__ret__, 'entity_version'),
        id=pulumi.get(__ret__, 'id'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        version=pulumi.get(__ret__, 'version'))


@_utilities.lift_output_func(get_cloud_gateway_configuration)
def get_cloud_gateway_configuration_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudGatewayConfigurationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
