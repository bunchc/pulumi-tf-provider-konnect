# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudGatewayConfigurationArgs', 'CloudGatewayConfiguration']

@pulumi.input_type
class CloudGatewayConfigurationArgs:
    def __init__(__self__, *,
                 control_plane_geo: pulumi.Input[str],
                 control_plane_id: pulumi.Input[str],
                 dataplane_groups: pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]],
                 version: pulumi.Input[str],
                 api_access: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a CloudGatewayConfiguration resource.
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        :param pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]] dataplane_groups: List of data-plane groups that describe where to deploy instances, along with how many instances.
        :param pulumi.Input[str] version: Supported gateway version.
        :param pulumi.Input[str] api_access: Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        """
        pulumi.set(__self__, "control_plane_geo", control_plane_geo)
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        pulumi.set(__self__, "dataplane_groups", dataplane_groups)
        pulumi.set(__self__, "version", version)
        if api_access is not None:
            pulumi.set(__self__, "api_access", api_access)

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> pulumi.Input[str]:
        """
        Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        """
        return pulumi.get(self, "control_plane_geo")

    @control_plane_geo.setter
    def control_plane_geo(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_plane_geo", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter(name="dataplaneGroups")
    def dataplane_groups(self) -> pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]]:
        """
        List of data-plane groups that describe where to deploy instances, along with how many instances.
        """
        return pulumi.get(self, "dataplane_groups")

    @dataplane_groups.setter
    def dataplane_groups(self, value: pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]]):
        pulumi.set(self, "dataplane_groups", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        Supported gateway version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="apiAccess")
    def api_access(self) -> Optional[pulumi.Input[str]]:
        """
        Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        """
        return pulumi.get(self, "api_access")

    @api_access.setter
    def api_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_access", value)


@pulumi.input_type
class _CloudGatewayConfigurationState:
    def __init__(__self__, *,
                 api_access: Optional[pulumi.Input[str]] = None,
                 control_plane_geo: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 dataplane_group_configs: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigArgs']]]] = None,
                 dataplane_groups: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]]] = None,
                 entity_version: Optional[pulumi.Input[float]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudGatewayConfiguration resources.
        :param pulumi.Input[str] api_access: Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        :param pulumi.Input[str] created_at: An RFC-3339 timestamp representation of configuration creation date.
        :param pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigArgs']]] dataplane_group_configs: Object that describes where data-planes will be deployed to, along with how many instances.
        :param pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]] dataplane_groups: List of data-plane groups that describe where to deploy instances, along with how many instances.
        :param pulumi.Input[float] entity_version: Positive, monotonically increasing version integer, to serialize configuration changes.
        :param pulumi.Input[str] updated_at: An RFC-3339 timestamp representation of configuration update date.
        :param pulumi.Input[str] version: Supported gateway version.
        """
        if api_access is not None:
            pulumi.set(__self__, "api_access", api_access)
        if control_plane_geo is not None:
            pulumi.set(__self__, "control_plane_geo", control_plane_geo)
        if control_plane_id is not None:
            pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dataplane_group_configs is not None:
            pulumi.set(__self__, "dataplane_group_configs", dataplane_group_configs)
        if dataplane_groups is not None:
            pulumi.set(__self__, "dataplane_groups", dataplane_groups)
        if entity_version is not None:
            pulumi.set(__self__, "entity_version", entity_version)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="apiAccess")
    def api_access(self) -> Optional[pulumi.Input[str]]:
        """
        Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        """
        return pulumi.get(self, "api_access")

    @api_access.setter
    def api_access(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_access", value)

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> Optional[pulumi.Input[str]]:
        """
        Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        """
        return pulumi.get(self, "control_plane_geo")

    @control_plane_geo.setter
    def control_plane_geo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_geo", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of configuration creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="dataplaneGroupConfigs")
    def dataplane_group_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigArgs']]]]:
        """
        Object that describes where data-planes will be deployed to, along with how many instances.
        """
        return pulumi.get(self, "dataplane_group_configs")

    @dataplane_group_configs.setter
    def dataplane_group_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupConfigArgs']]]]):
        pulumi.set(self, "dataplane_group_configs", value)

    @property
    @pulumi.getter(name="dataplaneGroups")
    def dataplane_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]]]:
        """
        List of data-plane groups that describe where to deploy instances, along with how many instances.
        """
        return pulumi.get(self, "dataplane_groups")

    @dataplane_groups.setter
    def dataplane_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudGatewayConfigurationDataplaneGroupArgs']]]]):
        pulumi.set(self, "dataplane_groups", value)

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> Optional[pulumi.Input[float]]:
        """
        Positive, monotonically increasing version integer, to serialize configuration changes.
        """
        return pulumi.get(self, "entity_version")

    @entity_version.setter
    def entity_version(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "entity_version", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of configuration update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Supported gateway version.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


class CloudGatewayConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_access: Optional[pulumi.Input[str]] = None,
                 control_plane_geo: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 dataplane_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayConfigurationDataplaneGroupArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        CloudGatewayConfiguration Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_access: Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayConfigurationDataplaneGroupArgs']]]] dataplane_groups: List of data-plane groups that describe where to deploy instances, along with how many instances.
        :param pulumi.Input[str] version: Supported gateway version.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudGatewayConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CloudGatewayConfiguration Resource

        :param str resource_name: The name of the resource.
        :param CloudGatewayConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudGatewayConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_access: Optional[pulumi.Input[str]] = None,
                 control_plane_geo: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 dataplane_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayConfigurationDataplaneGroupArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudGatewayConfigurationArgs.__new__(CloudGatewayConfigurationArgs)

            __props__.__dict__["api_access"] = api_access
            if control_plane_geo is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane_geo'")
            __props__.__dict__["control_plane_geo"] = control_plane_geo
            if control_plane_id is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane_id'")
            __props__.__dict__["control_plane_id"] = control_plane_id
            if dataplane_groups is None and not opts.urn:
                raise TypeError("Missing required property 'dataplane_groups'")
            __props__.__dict__["dataplane_groups"] = dataplane_groups
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
            __props__.__dict__["created_at"] = None
            __props__.__dict__["dataplane_group_configs"] = None
            __props__.__dict__["entity_version"] = None
            __props__.__dict__["updated_at"] = None
        super(CloudGatewayConfiguration, __self__).__init__(
            'konnect:index/cloudGatewayConfiguration:CloudGatewayConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_access: Optional[pulumi.Input[str]] = None,
            control_plane_geo: Optional[pulumi.Input[str]] = None,
            control_plane_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            dataplane_group_configs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayConfigurationDataplaneGroupConfigArgs']]]]] = None,
            dataplane_groups: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayConfigurationDataplaneGroupArgs']]]]] = None,
            entity_version: Optional[pulumi.Input[float]] = None,
            updated_at: Optional[pulumi.Input[str]] = None,
            version: Optional[pulumi.Input[str]] = None) -> 'CloudGatewayConfiguration':
        """
        Get an existing CloudGatewayConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_access: Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        :param pulumi.Input[str] created_at: An RFC-3339 timestamp representation of configuration creation date.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayConfigurationDataplaneGroupConfigArgs']]]] dataplane_group_configs: Object that describes where data-planes will be deployed to, along with how many instances.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudGatewayConfigurationDataplaneGroupArgs']]]] dataplane_groups: List of data-plane groups that describe where to deploy instances, along with how many instances.
        :param pulumi.Input[float] entity_version: Positive, monotonically increasing version integer, to serialize configuration changes.
        :param pulumi.Input[str] updated_at: An RFC-3339 timestamp representation of configuration update date.
        :param pulumi.Input[str] version: Supported gateway version.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudGatewayConfigurationState.__new__(_CloudGatewayConfigurationState)

        __props__.__dict__["api_access"] = api_access
        __props__.__dict__["control_plane_geo"] = control_plane_geo
        __props__.__dict__["control_plane_id"] = control_plane_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["dataplane_group_configs"] = dataplane_group_configs
        __props__.__dict__["dataplane_groups"] = dataplane_groups
        __props__.__dict__["entity_version"] = entity_version
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["version"] = version
        return CloudGatewayConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiAccess")
    def api_access(self) -> pulumi.Output[str]:
        """
        Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        """
        return pulumi.get(self, "api_access")

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> pulumi.Output[str]:
        """
        Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        """
        return pulumi.get(self, "control_plane_geo")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        An RFC-3339 timestamp representation of configuration creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dataplaneGroupConfigs")
    def dataplane_group_configs(self) -> pulumi.Output[Sequence['outputs.CloudGatewayConfigurationDataplaneGroupConfig']]:
        """
        Object that describes where data-planes will be deployed to, along with how many instances.
        """
        return pulumi.get(self, "dataplane_group_configs")

    @property
    @pulumi.getter(name="dataplaneGroups")
    def dataplane_groups(self) -> pulumi.Output[Sequence['outputs.CloudGatewayConfigurationDataplaneGroup']]:
        """
        List of data-plane groups that describe where to deploy instances, along with how many instances.
        """
        return pulumi.get(self, "dataplane_groups")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> pulumi.Output[float]:
        """
        Positive, monotonically increasing version integer, to serialize configuration changes.
        """
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        An RFC-3339 timestamp representation of configuration update date.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        Supported gateway version.
        """
        return pulumi.get(self, "version")

