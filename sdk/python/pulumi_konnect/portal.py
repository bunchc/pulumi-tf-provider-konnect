# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PortalArgs', 'Portal']

@pulumi.input_type
class PortalArgs:
    def __init__(__self__, *,
                 auto_approve_applications: Optional[pulumi.Input[bool]] = None,
                 auto_approve_developers: Optional[pulumi.Input[bool]] = None,
                 custom_client_domain: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_application_auth_strategy_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[str]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rbac_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Portal resource.
        :param pulumi.Input[bool] auto_approve_applications: Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[bool] auto_approve_developers: Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[str] custom_client_domain: The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        :param pulumi.Input[str] custom_domain: The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        :param pulumi.Input[str] default_application_auth_strategy_id: Default strategy ID applied on applications for the portal
        :param pulumi.Input[str] description: The description of the portal.
        :param pulumi.Input[str] display_name: The display name of the portal. This value will be the portal's `name` in Portal API.
        :param pulumi.Input[str] force: If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        :param pulumi.Input[bool] is_public: Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the portal, used to distinguish it from other portals. Name must be unique.
        :param pulumi.Input[bool] rbac_enabled: Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
               for products until unless assigned to teams with access to view and consume specific products.
        """
        if auto_approve_applications is not None:
            pulumi.set(__self__, "auto_approve_applications", auto_approve_applications)
        if auto_approve_developers is not None:
            pulumi.set(__self__, "auto_approve_developers", auto_approve_developers)
        if custom_client_domain is not None:
            pulumi.set(__self__, "custom_client_domain", custom_client_domain)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if default_application_auth_strategy_id is not None:
            pulumi.set(__self__, "default_application_auth_strategy_id", default_application_auth_strategy_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rbac_enabled is not None:
            pulumi.set(__self__, "rbac_enabled", rbac_enabled)

    @property
    @pulumi.getter(name="autoApproveApplications")
    def auto_approve_applications(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        """
        return pulumi.get(self, "auto_approve_applications")

    @auto_approve_applications.setter
    def auto_approve_applications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_approve_applications", value)

    @property
    @pulumi.getter(name="autoApproveDevelopers")
    def auto_approve_developers(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        """
        return pulumi.get(self, "auto_approve_developers")

    @auto_approve_developers.setter
    def auto_approve_developers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_approve_developers", value)

    @property
    @pulumi.getter(name="customClientDomain")
    def custom_client_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        """
        return pulumi.get(self, "custom_client_domain")

    @custom_client_domain.setter
    def custom_client_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_client_domain", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="defaultApplicationAuthStrategyId")
    def default_application_auth_strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default strategy ID applied on applications for the portal
        """
        return pulumi.get(self, "default_application_auth_strategy_id")

    @default_application_auth_strategy_id.setter
    def default_application_auth_strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_application_auth_strategy_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the portal.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the portal. This value will be the portal's `name` in Portal API.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[str]]:
        """
        If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        """
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_public", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the portal, used to distinguish it from other portals. Name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="rbacEnabled")
    def rbac_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
        for products until unless assigned to teams with access to view and consume specific products.
        """
        return pulumi.get(self, "rbac_enabled")

    @rbac_enabled.setter
    def rbac_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rbac_enabled", value)


@pulumi.input_type
class _PortalState:
    def __init__(__self__, *,
                 application_count: Optional[pulumi.Input[float]] = None,
                 auto_approve_applications: Optional[pulumi.Input[bool]] = None,
                 auto_approve_developers: Optional[pulumi.Input[bool]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 custom_client_domain: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_application_auth_strategy_id: Optional[pulumi.Input[str]] = None,
                 default_domain: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 developer_count: Optional[pulumi.Input[float]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[str]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 published_product_count: Optional[pulumi.Input[float]] = None,
                 rbac_enabled: Optional[pulumi.Input[bool]] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Portal resources.
        :param pulumi.Input[float] application_count: Number of applications created in the portal.
        :param pulumi.Input[bool] auto_approve_applications: Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[bool] auto_approve_developers: Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input[str] custom_client_domain: The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        :param pulumi.Input[str] custom_domain: The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        :param pulumi.Input[str] default_application_auth_strategy_id: Default strategy ID applied on applications for the portal
        :param pulumi.Input[str] default_domain: The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
               `custom_domain``.
        :param pulumi.Input[str] description: The description of the portal.
        :param pulumi.Input[float] developer_count: Number of developers using the portal.
        :param pulumi.Input[str] display_name: The display name of the portal. This value will be the portal's `name` in Portal API.
        :param pulumi.Input[str] force: If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        :param pulumi.Input[bool] is_public: Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the portal, used to distinguish it from other portals. Name must be unique.
        :param pulumi.Input[float] published_product_count: Number of api products published to the portal
        :param pulumi.Input[bool] rbac_enabled: Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
               for products until unless assigned to teams with access to view and consume specific products.
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        if application_count is not None:
            pulumi.set(__self__, "application_count", application_count)
        if auto_approve_applications is not None:
            pulumi.set(__self__, "auto_approve_applications", auto_approve_applications)
        if auto_approve_developers is not None:
            pulumi.set(__self__, "auto_approve_developers", auto_approve_developers)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if custom_client_domain is not None:
            pulumi.set(__self__, "custom_client_domain", custom_client_domain)
        if custom_domain is not None:
            pulumi.set(__self__, "custom_domain", custom_domain)
        if default_application_auth_strategy_id is not None:
            pulumi.set(__self__, "default_application_auth_strategy_id", default_application_auth_strategy_id)
        if default_domain is not None:
            pulumi.set(__self__, "default_domain", default_domain)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if developer_count is not None:
            pulumi.set(__self__, "developer_count", developer_count)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if is_public is not None:
            pulumi.set(__self__, "is_public", is_public)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if published_product_count is not None:
            pulumi.set(__self__, "published_product_count", published_product_count)
        if rbac_enabled is not None:
            pulumi.set(__self__, "rbac_enabled", rbac_enabled)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="applicationCount")
    def application_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of applications created in the portal.
        """
        return pulumi.get(self, "application_count")

    @application_count.setter
    def application_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "application_count", value)

    @property
    @pulumi.getter(name="autoApproveApplications")
    def auto_approve_applications(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        """
        return pulumi.get(self, "auto_approve_applications")

    @auto_approve_applications.setter
    def auto_approve_applications(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_approve_applications", value)

    @property
    @pulumi.getter(name="autoApproveDevelopers")
    def auto_approve_developers(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        """
        return pulumi.get(self, "auto_approve_developers")

    @auto_approve_developers.setter
    def auto_approve_developers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_approve_developers", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="customClientDomain")
    def custom_client_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        """
        return pulumi.get(self, "custom_client_domain")

    @custom_client_domain.setter
    def custom_client_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_client_domain", value)

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        """
        return pulumi.get(self, "custom_domain")

    @custom_domain.setter
    def custom_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_domain", value)

    @property
    @pulumi.getter(name="defaultApplicationAuthStrategyId")
    def default_application_auth_strategy_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default strategy ID applied on applications for the portal
        """
        return pulumi.get(self, "default_application_auth_strategy_id")

    @default_application_auth_strategy_id.setter
    def default_application_auth_strategy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_application_auth_strategy_id", value)

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
        `custom_domain``.
        """
        return pulumi.get(self, "default_domain")

    @default_domain.setter
    def default_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_domain", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the portal.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="developerCount")
    def developer_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of developers using the portal.
        """
        return pulumi.get(self, "developer_count")

    @developer_count.setter
    def developer_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "developer_count", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the portal. This value will be the portal's `name` in Portal API.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[str]]:
        """
        If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        """
        return pulumi.get(self, "is_public")

    @is_public.setter
    def is_public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_public", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the portal, used to distinguish it from other portals. Name must be unique.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="publishedProductCount")
    def published_product_count(self) -> Optional[pulumi.Input[float]]:
        """
        Number of api products published to the portal
        """
        return pulumi.get(self, "published_product_count")

    @published_product_count.setter
    def published_product_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "published_product_count", value)

    @property
    @pulumi.getter(name="rbacEnabled")
    def rbac_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
        for products until unless assigned to teams with access to view and consume specific products.
        """
        return pulumi.get(self, "rbac_enabled")

    @rbac_enabled.setter
    def rbac_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "rbac_enabled", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class Portal(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_approve_applications: Optional[pulumi.Input[bool]] = None,
                 auto_approve_developers: Optional[pulumi.Input[bool]] = None,
                 custom_client_domain: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_application_auth_strategy_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[str]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rbac_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Portal Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_approve_applications: Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[bool] auto_approve_developers: Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[str] custom_client_domain: The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        :param pulumi.Input[str] custom_domain: The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        :param pulumi.Input[str] default_application_auth_strategy_id: Default strategy ID applied on applications for the portal
        :param pulumi.Input[str] description: The description of the portal.
        :param pulumi.Input[str] display_name: The display name of the portal. This value will be the portal's `name` in Portal API.
        :param pulumi.Input[str] force: If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        :param pulumi.Input[bool] is_public: Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the portal, used to distinguish it from other portals. Name must be unique.
        :param pulumi.Input[bool] rbac_enabled: Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
               for products until unless assigned to teams with access to view and consume specific products.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PortalArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Portal Resource

        :param str resource_name: The name of the resource.
        :param PortalArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortalArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_approve_applications: Optional[pulumi.Input[bool]] = None,
                 auto_approve_developers: Optional[pulumi.Input[bool]] = None,
                 custom_client_domain: Optional[pulumi.Input[str]] = None,
                 custom_domain: Optional[pulumi.Input[str]] = None,
                 default_application_auth_strategy_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 display_name: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[str]] = None,
                 is_public: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 rbac_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortalArgs.__new__(PortalArgs)

            __props__.__dict__["auto_approve_applications"] = auto_approve_applications
            __props__.__dict__["auto_approve_developers"] = auto_approve_developers
            __props__.__dict__["custom_client_domain"] = custom_client_domain
            __props__.__dict__["custom_domain"] = custom_domain
            __props__.__dict__["default_application_auth_strategy_id"] = default_application_auth_strategy_id
            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["force"] = force
            __props__.__dict__["is_public"] = is_public
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["rbac_enabled"] = rbac_enabled
            __props__.__dict__["application_count"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["default_domain"] = None
            __props__.__dict__["developer_count"] = None
            __props__.__dict__["published_product_count"] = None
            __props__.__dict__["updated_at"] = None
        super(Portal, __self__).__init__(
            'konnect:index/portal:Portal',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            application_count: Optional[pulumi.Input[float]] = None,
            auto_approve_applications: Optional[pulumi.Input[bool]] = None,
            auto_approve_developers: Optional[pulumi.Input[bool]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            custom_client_domain: Optional[pulumi.Input[str]] = None,
            custom_domain: Optional[pulumi.Input[str]] = None,
            default_application_auth_strategy_id: Optional[pulumi.Input[str]] = None,
            default_domain: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            developer_count: Optional[pulumi.Input[float]] = None,
            display_name: Optional[pulumi.Input[str]] = None,
            force: Optional[pulumi.Input[str]] = None,
            is_public: Optional[pulumi.Input[bool]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            published_product_count: Optional[pulumi.Input[float]] = None,
            rbac_enabled: Optional[pulumi.Input[bool]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'Portal':
        """
        Get an existing Portal resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[float] application_count: Number of applications created in the portal.
        :param pulumi.Input[bool] auto_approve_applications: Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[bool] auto_approve_developers: Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        :param pulumi.Input[str] created_at: An ISO-8601 timestamp representation of entity creation date.
        :param pulumi.Input[str] custom_client_domain: The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        :param pulumi.Input[str] custom_domain: The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        :param pulumi.Input[str] default_application_auth_strategy_id: Default strategy ID applied on applications for the portal
        :param pulumi.Input[str] default_domain: The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
               `custom_domain``.
        :param pulumi.Input[str] description: The description of the portal.
        :param pulumi.Input[float] developer_count: Number of developers using the portal.
        :param pulumi.Input[str] display_name: The display name of the portal. This value will be the portal's `name` in Portal API.
        :param pulumi.Input[str] force: If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        :param pulumi.Input[bool] is_public: Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        :param pulumi.Input[str] name: The name of the portal, used to distinguish it from other portals. Name must be unique.
        :param pulumi.Input[float] published_product_count: Number of api products published to the portal
        :param pulumi.Input[bool] rbac_enabled: Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
               for products until unless assigned to teams with access to view and consume specific products.
        :param pulumi.Input[str] updated_at: An ISO-8601 timestamp representation of entity update date.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortalState.__new__(_PortalState)

        __props__.__dict__["application_count"] = application_count
        __props__.__dict__["auto_approve_applications"] = auto_approve_applications
        __props__.__dict__["auto_approve_developers"] = auto_approve_developers
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["custom_client_domain"] = custom_client_domain
        __props__.__dict__["custom_domain"] = custom_domain
        __props__.__dict__["default_application_auth_strategy_id"] = default_application_auth_strategy_id
        __props__.__dict__["default_domain"] = default_domain
        __props__.__dict__["description"] = description
        __props__.__dict__["developer_count"] = developer_count
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["force"] = force
        __props__.__dict__["is_public"] = is_public
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["published_product_count"] = published_product_count
        __props__.__dict__["rbac_enabled"] = rbac_enabled
        __props__.__dict__["updated_at"] = updated_at
        return Portal(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="applicationCount")
    def application_count(self) -> pulumi.Output[float]:
        """
        Number of applications created in the portal.
        """
        return pulumi.get(self, "application_count")

    @property
    @pulumi.getter(name="autoApproveApplications")
    def auto_approve_applications(self) -> pulumi.Output[bool]:
        """
        Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        """
        return pulumi.get(self, "auto_approve_applications")

    @property
    @pulumi.getter(name="autoApproveDevelopers")
    def auto_approve_developers(self) -> pulumi.Output[bool]:
        """
        Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        """
        return pulumi.get(self, "auto_approve_developers")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        An ISO-8601 timestamp representation of entity creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customClientDomain")
    def custom_client_domain(self) -> pulumi.Output[str]:
        """
        The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        """
        return pulumi.get(self, "custom_client_domain")

    @property
    @pulumi.getter(name="customDomain")
    def custom_domain(self) -> pulumi.Output[str]:
        """
        The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        """
        return pulumi.get(self, "custom_domain")

    @property
    @pulumi.getter(name="defaultApplicationAuthStrategyId")
    def default_application_auth_strategy_id(self) -> pulumi.Output[str]:
        """
        Default strategy ID applied on applications for the portal
        """
        return pulumi.get(self, "default_application_auth_strategy_id")

    @property
    @pulumi.getter(name="defaultDomain")
    def default_domain(self) -> pulumi.Output[str]:
        """
        The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
        `custom_domain``.
        """
        return pulumi.get(self, "default_domain")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the portal.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="developerCount")
    def developer_count(self) -> pulumi.Output[float]:
        """
        Number of developers using the portal.
        """
        return pulumi.get(self, "developer_count")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[str]:
        """
        The display name of the portal. This value will be the portal's `name` in Portal API.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def force(self) -> pulumi.Output[str]:
        """
        If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        """
        return pulumi.get(self, "force")

    @property
    @pulumi.getter(name="isPublic")
    def is_public(self) -> pulumi.Output[bool]:
        """
        Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        """
        return pulumi.get(self, "is_public")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the portal, used to distinguish it from other portals. Name must be unique.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="publishedProductCount")
    def published_product_count(self) -> pulumi.Output[float]:
        """
        Number of api products published to the portal
        """
        return pulumi.get(self, "published_product_count")

    @property
    @pulumi.getter(name="rbacEnabled")
    def rbac_enabled(self) -> pulumi.Output[bool]:
        """
        Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
        for products until unless assigned to teams with access to view and consume specific products.
        """
        return pulumi.get(self, "rbac_enabled")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        An ISO-8601 timestamp representation of entity update date.
        """
        return pulumi.get(self, "updated_at")

