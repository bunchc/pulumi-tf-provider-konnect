# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetApiProductSpecificationResult',
    'AwaitableGetApiProductSpecificationResult',
    'get_api_product_specification',
    'get_api_product_specification_output',
]

@pulumi.output_type
class GetApiProductSpecificationResult:
    """
    A collection of values returned by getApiProductSpecification.
    """
    def __init__(__self__, api_product_id=None, api_product_version_id=None, content=None, created_at=None, id=None, name=None, updated_at=None):
        if api_product_id and not isinstance(api_product_id, str):
            raise TypeError("Expected argument 'api_product_id' to be a str")
        pulumi.set(__self__, "api_product_id", api_product_id)
        if api_product_version_id and not isinstance(api_product_version_id, str):
            raise TypeError("Expected argument 'api_product_version_id' to be a str")
        pulumi.set(__self__, "api_product_version_id", api_product_version_id)
        if content and not isinstance(content, str):
            raise TypeError("Expected argument 'content' to be a str")
        pulumi.set(__self__, "content", content)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="apiProductId")
    def api_product_id(self) -> str:
        return pulumi.get(self, "api_product_id")

    @property
    @pulumi.getter(name="apiProductVersionId")
    def api_product_version_id(self) -> str:
        return pulumi.get(self, "api_product_version_id")

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetApiProductSpecificationResult(GetApiProductSpecificationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiProductSpecificationResult(
            api_product_id=self.api_product_id,
            api_product_version_id=self.api_product_version_id,
            content=self.content,
            created_at=self.created_at,
            id=self.id,
            name=self.name,
            updated_at=self.updated_at)


def get_api_product_specification(api_product_id: Optional[str] = None,
                                  api_product_version_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiProductSpecificationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiProductId'] = api_product_id
    __args__['apiProductVersionId'] = api_product_version_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getApiProductSpecification:getApiProductSpecification', __args__, opts=opts, typ=GetApiProductSpecificationResult).value

    return AwaitableGetApiProductSpecificationResult(
        api_product_id=pulumi.get(__ret__, 'api_product_id'),
        api_product_version_id=pulumi.get(__ret__, 'api_product_version_id'),
        content=pulumi.get(__ret__, 'content'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_api_product_specification)
def get_api_product_specification_output(api_product_id: Optional[pulumi.Input[str]] = None,
                                         api_product_version_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiProductSpecificationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
