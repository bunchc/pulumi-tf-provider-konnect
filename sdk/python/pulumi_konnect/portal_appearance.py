# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortalAppearanceArgs', 'PortalAppearance']

@pulumi.input_type
class PortalAppearanceArgs:
    def __init__(__self__, *,
                 portal_id: pulumi.Input[str],
                 custom_fonts: Optional[pulumi.Input['PortalAppearanceCustomFontsArgs']] = None,
                 custom_theme: Optional[pulumi.Input['PortalAppearanceCustomThemeArgs']] = None,
                 images: Optional[pulumi.Input['PortalAppearanceImagesArgs']] = None,
                 text: Optional[pulumi.Input['PortalAppearanceTextArgs']] = None,
                 theme_name: Optional[pulumi.Input[str]] = None,
                 use_custom_fonts: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a PortalAppearance resource.
        :param pulumi.Input[str] portal_id: ID of the portal.
        :param pulumi.Input['PortalAppearanceCustomFontsArgs'] custom_fonts: Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        :param pulumi.Input['PortalAppearanceCustomThemeArgs'] custom_theme: Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        :param pulumi.Input['PortalAppearanceImagesArgs'] images: A collection of binary image data to customize images in the portal
        :param pulumi.Input['PortalAppearanceTextArgs'] text: Values to display for customizable text in the portal user interface
        :param pulumi.Input[str] theme_name: Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        :param pulumi.Input[bool] use_custom_fonts: If true, fonts in custom_fonts will be used over the theme's default fonts
        """
        pulumi.set(__self__, "portal_id", portal_id)
        if custom_fonts is not None:
            pulumi.set(__self__, "custom_fonts", custom_fonts)
        if custom_theme is not None:
            pulumi.set(__self__, "custom_theme", custom_theme)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if theme_name is not None:
            pulumi.set(__self__, "theme_name", theme_name)
        if use_custom_fonts is not None:
            pulumi.set(__self__, "use_custom_fonts", use_custom_fonts)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> pulumi.Input[str]:
        """
        ID of the portal.
        """
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "portal_id", value)

    @property
    @pulumi.getter(name="customFonts")
    def custom_fonts(self) -> Optional[pulumi.Input['PortalAppearanceCustomFontsArgs']]:
        """
        Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        """
        return pulumi.get(self, "custom_fonts")

    @custom_fonts.setter
    def custom_fonts(self, value: Optional[pulumi.Input['PortalAppearanceCustomFontsArgs']]):
        pulumi.set(self, "custom_fonts", value)

    @property
    @pulumi.getter(name="customTheme")
    def custom_theme(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeArgs']]:
        """
        Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        """
        return pulumi.get(self, "custom_theme")

    @custom_theme.setter
    def custom_theme(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeArgs']]):
        pulumi.set(self, "custom_theme", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input['PortalAppearanceImagesArgs']]:
        """
        A collection of binary image data to customize images in the portal
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input['PortalAppearanceImagesArgs']]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input['PortalAppearanceTextArgs']]:
        """
        Values to display for customizable text in the portal user interface
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input['PortalAppearanceTextArgs']]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="themeName")
    def theme_name(self) -> Optional[pulumi.Input[str]]:
        """
        Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        """
        return pulumi.get(self, "theme_name")

    @theme_name.setter
    def theme_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "theme_name", value)

    @property
    @pulumi.getter(name="useCustomFonts")
    def use_custom_fonts(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, fonts in custom_fonts will be used over the theme's default fonts
        """
        return pulumi.get(self, "use_custom_fonts")

    @use_custom_fonts.setter
    def use_custom_fonts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_custom_fonts", value)


@pulumi.input_type
class _PortalAppearanceState:
    def __init__(__self__, *,
                 custom_fonts: Optional[pulumi.Input['PortalAppearanceCustomFontsArgs']] = None,
                 custom_theme: Optional[pulumi.Input['PortalAppearanceCustomThemeArgs']] = None,
                 images: Optional[pulumi.Input['PortalAppearanceImagesArgs']] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input['PortalAppearanceTextArgs']] = None,
                 theme_name: Optional[pulumi.Input[str]] = None,
                 use_custom_fonts: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering PortalAppearance resources.
        :param pulumi.Input['PortalAppearanceCustomFontsArgs'] custom_fonts: Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        :param pulumi.Input['PortalAppearanceCustomThemeArgs'] custom_theme: Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        :param pulumi.Input['PortalAppearanceImagesArgs'] images: A collection of binary image data to customize images in the portal
        :param pulumi.Input[str] portal_id: ID of the portal.
        :param pulumi.Input['PortalAppearanceTextArgs'] text: Values to display for customizable text in the portal user interface
        :param pulumi.Input[str] theme_name: Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        :param pulumi.Input[bool] use_custom_fonts: If true, fonts in custom_fonts will be used over the theme's default fonts
        """
        if custom_fonts is not None:
            pulumi.set(__self__, "custom_fonts", custom_fonts)
        if custom_theme is not None:
            pulumi.set(__self__, "custom_theme", custom_theme)
        if images is not None:
            pulumi.set(__self__, "images", images)
        if portal_id is not None:
            pulumi.set(__self__, "portal_id", portal_id)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if theme_name is not None:
            pulumi.set(__self__, "theme_name", theme_name)
        if use_custom_fonts is not None:
            pulumi.set(__self__, "use_custom_fonts", use_custom_fonts)

    @property
    @pulumi.getter(name="customFonts")
    def custom_fonts(self) -> Optional[pulumi.Input['PortalAppearanceCustomFontsArgs']]:
        """
        Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        """
        return pulumi.get(self, "custom_fonts")

    @custom_fonts.setter
    def custom_fonts(self, value: Optional[pulumi.Input['PortalAppearanceCustomFontsArgs']]):
        pulumi.set(self, "custom_fonts", value)

    @property
    @pulumi.getter(name="customTheme")
    def custom_theme(self) -> Optional[pulumi.Input['PortalAppearanceCustomThemeArgs']]:
        """
        Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        """
        return pulumi.get(self, "custom_theme")

    @custom_theme.setter
    def custom_theme(self, value: Optional[pulumi.Input['PortalAppearanceCustomThemeArgs']]):
        pulumi.set(self, "custom_theme", value)

    @property
    @pulumi.getter
    def images(self) -> Optional[pulumi.Input['PortalAppearanceImagesArgs']]:
        """
        A collection of binary image data to customize images in the portal
        """
        return pulumi.get(self, "images")

    @images.setter
    def images(self, value: Optional[pulumi.Input['PortalAppearanceImagesArgs']]):
        pulumi.set(self, "images", value)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the portal.
        """
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_id", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input['PortalAppearanceTextArgs']]:
        """
        Values to display for customizable text in the portal user interface
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input['PortalAppearanceTextArgs']]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="themeName")
    def theme_name(self) -> Optional[pulumi.Input[str]]:
        """
        Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        """
        return pulumi.get(self, "theme_name")

    @theme_name.setter
    def theme_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "theme_name", value)

    @property
    @pulumi.getter(name="useCustomFonts")
    def use_custom_fonts(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, fonts in custom_fonts will be used over the theme's default fonts
        """
        return pulumi.get(self, "use_custom_fonts")

    @use_custom_fonts.setter
    def use_custom_fonts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_custom_fonts", value)


class PortalAppearance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_fonts: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceCustomFontsArgs']]] = None,
                 custom_theme: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceCustomThemeArgs']]] = None,
                 images: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceImagesArgs']]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceTextArgs']]] = None,
                 theme_name: Optional[pulumi.Input[str]] = None,
                 use_custom_fonts: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        PortalAppearance Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceCustomFontsArgs']] custom_fonts: Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceCustomThemeArgs']] custom_theme: Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceImagesArgs']] images: A collection of binary image data to customize images in the portal
        :param pulumi.Input[str] portal_id: ID of the portal.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceTextArgs']] text: Values to display for customizable text in the portal user interface
        :param pulumi.Input[str] theme_name: Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        :param pulumi.Input[bool] use_custom_fonts: If true, fonts in custom_fonts will be used over the theme's default fonts
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PortalAppearanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        PortalAppearance Resource

        :param str resource_name: The name of the resource.
        :param PortalAppearanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortalAppearanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_fonts: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceCustomFontsArgs']]] = None,
                 custom_theme: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceCustomThemeArgs']]] = None,
                 images: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceImagesArgs']]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceTextArgs']]] = None,
                 theme_name: Optional[pulumi.Input[str]] = None,
                 use_custom_fonts: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortalAppearanceArgs.__new__(PortalAppearanceArgs)

            __props__.__dict__["custom_fonts"] = custom_fonts
            __props__.__dict__["custom_theme"] = custom_theme
            __props__.__dict__["images"] = images
            if portal_id is None and not opts.urn:
                raise TypeError("Missing required property 'portal_id'")
            __props__.__dict__["portal_id"] = portal_id
            __props__.__dict__["text"] = text
            __props__.__dict__["theme_name"] = theme_name
            __props__.__dict__["use_custom_fonts"] = use_custom_fonts
        super(PortalAppearance, __self__).__init__(
            'konnect:index/portalAppearance:PortalAppearance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_fonts: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceCustomFontsArgs']]] = None,
            custom_theme: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceCustomThemeArgs']]] = None,
            images: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceImagesArgs']]] = None,
            portal_id: Optional[pulumi.Input[str]] = None,
            text: Optional[pulumi.Input[pulumi.InputType['PortalAppearanceTextArgs']]] = None,
            theme_name: Optional[pulumi.Input[str]] = None,
            use_custom_fonts: Optional[pulumi.Input[bool]] = None) -> 'PortalAppearance':
        """
        Get an existing PortalAppearance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceCustomFontsArgs']] custom_fonts: Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceCustomThemeArgs']] custom_theme: Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceImagesArgs']] images: A collection of binary image data to customize images in the portal
        :param pulumi.Input[str] portal_id: ID of the portal.
        :param pulumi.Input[pulumi.InputType['PortalAppearanceTextArgs']] text: Values to display for customizable text in the portal user interface
        :param pulumi.Input[str] theme_name: Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        :param pulumi.Input[bool] use_custom_fonts: If true, fonts in custom_fonts will be used over the theme's default fonts
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortalAppearanceState.__new__(_PortalAppearanceState)

        __props__.__dict__["custom_fonts"] = custom_fonts
        __props__.__dict__["custom_theme"] = custom_theme
        __props__.__dict__["images"] = images
        __props__.__dict__["portal_id"] = portal_id
        __props__.__dict__["text"] = text
        __props__.__dict__["theme_name"] = theme_name
        __props__.__dict__["use_custom_fonts"] = use_custom_fonts
        return PortalAppearance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customFonts")
    def custom_fonts(self) -> pulumi.Output['outputs.PortalAppearanceCustomFonts']:
        """
        Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        """
        return pulumi.get(self, "custom_fonts")

    @property
    @pulumi.getter(name="customTheme")
    def custom_theme(self) -> pulumi.Output['outputs.PortalAppearanceCustomTheme']:
        """
        Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        """
        return pulumi.get(self, "custom_theme")

    @property
    @pulumi.getter
    def images(self) -> pulumi.Output['outputs.PortalAppearanceImages']:
        """
        A collection of binary image data to customize images in the portal
        """
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> pulumi.Output[str]:
        """
        ID of the portal.
        """
        return pulumi.get(self, "portal_id")

    @property
    @pulumi.getter
    def text(self) -> pulumi.Output['outputs.PortalAppearanceText']:
        """
        Values to display for customizable text in the portal user interface
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="themeName")
    def theme_name(self) -> pulumi.Output[str]:
        """
        Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        """
        return pulumi.get(self, "theme_name")

    @property
    @pulumi.getter(name="useCustomFonts")
    def use_custom_fonts(self) -> pulumi.Output[bool]:
        """
        If true, fonts in custom_fonts will be used over the theme's default fonts
        """
        return pulumi.get(self, "use_custom_fonts")

