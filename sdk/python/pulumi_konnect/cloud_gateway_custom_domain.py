# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudGatewayCustomDomainArgs', 'CloudGatewayCustomDomain']

@pulumi.input_type
class CloudGatewayCustomDomainArgs:
    def __init__(__self__, *,
                 control_plane_geo: pulumi.Input[str],
                 control_plane_id: pulumi.Input[str],
                 domain: pulumi.Input[str]):
        """
        The set of arguments for constructing a CloudGatewayCustomDomain resource.
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        :param pulumi.Input[str] control_plane_id: Requires replacement if changed.
        :param pulumi.Input[str] domain: Domain name of the custom domain. Requires replacement if changed.
        """
        pulumi.set(__self__, "control_plane_geo", control_plane_geo)
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        pulumi.set(__self__, "domain", domain)

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> pulumi.Input[str]:
        """
        Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        """
        return pulumi.get(self, "control_plane_geo")

    @control_plane_geo.setter
    def control_plane_geo(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_plane_geo", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Input[str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        Domain name of the custom domain. Requires replacement if changed.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class _CloudGatewayCustomDomainState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[str]] = None,
                 control_plane_geo: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 entity_version: Optional[pulumi.Input[int]] = None,
                 sni_id: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 state_metadata: Optional[pulumi.Input['CloudGatewayCustomDomainStateMetadataArgs']] = None,
                 updated_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering CloudGatewayCustomDomain resources.
        :param pulumi.Input[str] certificate_id: Certificate ID for the certificate representing this domain and stored on data-planes for this
               control-plane. Can be retrieved via the control-planes API for this custom domain's control-plane.
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        :param pulumi.Input[str] control_plane_id: Requires replacement if changed.
        :param pulumi.Input[str] created_at: An RFC-3339 timestamp representation of custom domain creation date.
        :param pulumi.Input[str] domain: Domain name of the custom domain. Requires replacement if changed.
        :param pulumi.Input[int] entity_version: Monotonically-increasing version count of the custom domain, to indicate the order of updates to the custom
               domain.
        :param pulumi.Input[str] sni_id: Server Name Indication ID for this domain and stored on data-planes for this control-plane. Can be retrieved
               via the control-planes API for this custom domain's control-plane.
        :param pulumi.Input[str] state: State of the custom domain. must be one of ["created", "initializing", "ready", "terminating", "terminated", "error"]
        :param pulumi.Input['CloudGatewayCustomDomainStateMetadataArgs'] state_metadata: Metadata describing the backing state of the custom domain and why it may be in an erroneous state.
        :param pulumi.Input[str] updated_at: An RFC-3339 timestamp representation of custom domain update date.
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if control_plane_geo is not None:
            pulumi.set(__self__, "control_plane_geo", control_plane_geo)
        if control_plane_id is not None:
            pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if entity_version is not None:
            pulumi.set(__self__, "entity_version", entity_version)
        if sni_id is not None:
            pulumi.set(__self__, "sni_id", sni_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if state_metadata is not None:
            pulumi.set(__self__, "state_metadata", state_metadata)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[str]]:
        """
        Certificate ID for the certificate representing this domain and stored on data-planes for this
        control-plane. Can be retrieved via the control-planes API for this custom domain's control-plane.
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> Optional[pulumi.Input[str]]:
        """
        Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        """
        return pulumi.get(self, "control_plane_geo")

    @control_plane_geo.setter
    def control_plane_geo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_geo", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> Optional[pulumi.Input[str]]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of custom domain creation date.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain name of the custom domain. Requires replacement if changed.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> Optional[pulumi.Input[int]]:
        """
        Monotonically-increasing version count of the custom domain, to indicate the order of updates to the custom
        domain.
        """
        return pulumi.get(self, "entity_version")

    @entity_version.setter
    def entity_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "entity_version", value)

    @property
    @pulumi.getter(name="sniId")
    def sni_id(self) -> Optional[pulumi.Input[str]]:
        """
        Server Name Indication ID for this domain and stored on data-planes for this control-plane. Can be retrieved
        via the control-planes API for this custom domain's control-plane.
        """
        return pulumi.get(self, "sni_id")

    @sni_id.setter
    def sni_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sni_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        State of the custom domain. must be one of ["created", "initializing", "ready", "terminating", "terminated", "error"]
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="stateMetadata")
    def state_metadata(self) -> Optional[pulumi.Input['CloudGatewayCustomDomainStateMetadataArgs']]:
        """
        Metadata describing the backing state of the custom domain and why it may be in an erroneous state.
        """
        return pulumi.get(self, "state_metadata")

    @state_metadata.setter
    def state_metadata(self, value: Optional[pulumi.Input['CloudGatewayCustomDomainStateMetadataArgs']]):
        pulumi.set(self, "state_metadata", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[str]]:
        """
        An RFC-3339 timestamp representation of custom domain update date.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "updated_at", value)


class CloudGatewayCustomDomain(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 control_plane_geo: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        CloudGatewayCustomDomain Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        :param pulumi.Input[str] control_plane_id: Requires replacement if changed.
        :param pulumi.Input[str] domain: Domain name of the custom domain. Requires replacement if changed.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudGatewayCustomDomainArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        CloudGatewayCustomDomain Resource

        :param str resource_name: The name of the resource.
        :param CloudGatewayCustomDomainArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudGatewayCustomDomainArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 control_plane_geo: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudGatewayCustomDomainArgs.__new__(CloudGatewayCustomDomainArgs)

            if control_plane_geo is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane_geo'")
            __props__.__dict__["control_plane_geo"] = control_plane_geo
            if control_plane_id is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane_id'")
            __props__.__dict__["control_plane_id"] = control_plane_id
            if domain is None and not opts.urn:
                raise TypeError("Missing required property 'domain'")
            __props__.__dict__["domain"] = domain
            __props__.__dict__["certificate_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["entity_version"] = None
            __props__.__dict__["sni_id"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["state_metadata"] = None
            __props__.__dict__["updated_at"] = None
        super(CloudGatewayCustomDomain, __self__).__init__(
            'konnect:index/cloudGatewayCustomDomain:CloudGatewayCustomDomain',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[str]] = None,
            control_plane_geo: Optional[pulumi.Input[str]] = None,
            control_plane_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            domain: Optional[pulumi.Input[str]] = None,
            entity_version: Optional[pulumi.Input[int]] = None,
            sni_id: Optional[pulumi.Input[str]] = None,
            state: Optional[pulumi.Input[str]] = None,
            state_metadata: Optional[pulumi.Input[pulumi.InputType['CloudGatewayCustomDomainStateMetadataArgs']]] = None,
            updated_at: Optional[pulumi.Input[str]] = None) -> 'CloudGatewayCustomDomain':
        """
        Get an existing CloudGatewayCustomDomain resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] certificate_id: Certificate ID for the certificate representing this domain and stored on data-planes for this
               control-plane. Can be retrieved via the control-planes API for this custom domain's control-plane.
        :param pulumi.Input[str] control_plane_geo: Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        :param pulumi.Input[str] control_plane_id: Requires replacement if changed.
        :param pulumi.Input[str] created_at: An RFC-3339 timestamp representation of custom domain creation date.
        :param pulumi.Input[str] domain: Domain name of the custom domain. Requires replacement if changed.
        :param pulumi.Input[int] entity_version: Monotonically-increasing version count of the custom domain, to indicate the order of updates to the custom
               domain.
        :param pulumi.Input[str] sni_id: Server Name Indication ID for this domain and stored on data-planes for this control-plane. Can be retrieved
               via the control-planes API for this custom domain's control-plane.
        :param pulumi.Input[str] state: State of the custom domain. must be one of ["created", "initializing", "ready", "terminating", "terminated", "error"]
        :param pulumi.Input[pulumi.InputType['CloudGatewayCustomDomainStateMetadataArgs']] state_metadata: Metadata describing the backing state of the custom domain and why it may be in an erroneous state.
        :param pulumi.Input[str] updated_at: An RFC-3339 timestamp representation of custom domain update date.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudGatewayCustomDomainState.__new__(_CloudGatewayCustomDomainState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["control_plane_geo"] = control_plane_geo
        __props__.__dict__["control_plane_id"] = control_plane_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["domain"] = domain
        __props__.__dict__["entity_version"] = entity_version
        __props__.__dict__["sni_id"] = sni_id
        __props__.__dict__["state"] = state
        __props__.__dict__["state_metadata"] = state_metadata
        __props__.__dict__["updated_at"] = updated_at
        return CloudGatewayCustomDomain(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[str]:
        """
        Certificate ID for the certificate representing this domain and stored on data-planes for this
        control-plane. Can be retrieved via the control-planes API for this custom domain's control-plane.
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="controlPlaneGeo")
    def control_plane_geo(self) -> pulumi.Output[str]:
        """
        Set of control-plane geos supported for deploying cloud-gateways configurations. Requires replacement if changed. ; must be one of ["us", "eu", "au"]
        """
        return pulumi.get(self, "control_plane_geo")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Output[str]:
        """
        Requires replacement if changed.
        """
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        An RFC-3339 timestamp representation of custom domain creation date.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[str]:
        """
        Domain name of the custom domain. Requires replacement if changed.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="entityVersion")
    def entity_version(self) -> pulumi.Output[int]:
        """
        Monotonically-increasing version count of the custom domain, to indicate the order of updates to the custom
        domain.
        """
        return pulumi.get(self, "entity_version")

    @property
    @pulumi.getter(name="sniId")
    def sni_id(self) -> pulumi.Output[str]:
        """
        Server Name Indication ID for this domain and stored on data-planes for this control-plane. Can be retrieved
        via the control-planes API for this custom domain's control-plane.
        """
        return pulumi.get(self, "sni_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        State of the custom domain. must be one of ["created", "initializing", "ready", "terminating", "terminated", "error"]
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="stateMetadata")
    def state_metadata(self) -> pulumi.Output['outputs.CloudGatewayCustomDomainStateMetadata']:
        """
        Metadata describing the backing state of the custom domain and why it may be in an erroneous state.
        """
        return pulumi.get(self, "state_metadata")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        """
        An RFC-3339 timestamp representation of custom domain update date.
        """
        return pulumi.get(self, "updated_at")

