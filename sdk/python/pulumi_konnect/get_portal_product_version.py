# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPortalProductVersionResult',
    'AwaitableGetPortalProductVersionResult',
    'get_portal_product_version',
    'get_portal_product_version_output',
]

@pulumi.output_type
class GetPortalProductVersionResult:
    """
    A collection of values returned by getPortalProductVersion.
    """
    def __init__(__self__, application_registration_enabled=None, auth_strategies=None, auto_approve_registration=None, created_at=None, deprecated=None, id=None, portal_id=None, product_version_id=None, publish_status=None, updated_at=None):
        if application_registration_enabled and not isinstance(application_registration_enabled, bool):
            raise TypeError("Expected argument 'application_registration_enabled' to be a bool")
        pulumi.set(__self__, "application_registration_enabled", application_registration_enabled)
        if auth_strategies and not isinstance(auth_strategies, list):
            raise TypeError("Expected argument 'auth_strategies' to be a list")
        pulumi.set(__self__, "auth_strategies", auth_strategies)
        if auto_approve_registration and not isinstance(auto_approve_registration, bool):
            raise TypeError("Expected argument 'auto_approve_registration' to be a bool")
        pulumi.set(__self__, "auto_approve_registration", auto_approve_registration)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if deprecated and not isinstance(deprecated, bool):
            raise TypeError("Expected argument 'deprecated' to be a bool")
        pulumi.set(__self__, "deprecated", deprecated)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if portal_id and not isinstance(portal_id, str):
            raise TypeError("Expected argument 'portal_id' to be a str")
        pulumi.set(__self__, "portal_id", portal_id)
        if product_version_id and not isinstance(product_version_id, str):
            raise TypeError("Expected argument 'product_version_id' to be a str")
        pulumi.set(__self__, "product_version_id", product_version_id)
        if publish_status and not isinstance(publish_status, str):
            raise TypeError("Expected argument 'publish_status' to be a str")
        pulumi.set(__self__, "publish_status", publish_status)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="applicationRegistrationEnabled")
    def application_registration_enabled(self) -> bool:
        return pulumi.get(self, "application_registration_enabled")

    @property
    @pulumi.getter(name="authStrategies")
    def auth_strategies(self) -> Sequence['outputs.GetPortalProductVersionAuthStrategyResult']:
        return pulumi.get(self, "auth_strategies")

    @property
    @pulumi.getter(name="autoApproveRegistration")
    def auto_approve_registration(self) -> bool:
        return pulumi.get(self, "auto_approve_registration")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def deprecated(self) -> bool:
        return pulumi.get(self, "deprecated")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> str:
        return pulumi.get(self, "portal_id")

    @property
    @pulumi.getter(name="productVersionId")
    def product_version_id(self) -> str:
        return pulumi.get(self, "product_version_id")

    @property
    @pulumi.getter(name="publishStatus")
    def publish_status(self) -> str:
        return pulumi.get(self, "publish_status")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetPortalProductVersionResult(GetPortalProductVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortalProductVersionResult(
            application_registration_enabled=self.application_registration_enabled,
            auth_strategies=self.auth_strategies,
            auto_approve_registration=self.auto_approve_registration,
            created_at=self.created_at,
            deprecated=self.deprecated,
            id=self.id,
            portal_id=self.portal_id,
            product_version_id=self.product_version_id,
            publish_status=self.publish_status,
            updated_at=self.updated_at)


def get_portal_product_version(portal_id: Optional[str] = None,
                               product_version_id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortalProductVersionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['portalId'] = portal_id
    __args__['productVersionId'] = product_version_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getPortalProductVersion:getPortalProductVersion', __args__, opts=opts, typ=GetPortalProductVersionResult).value

    return AwaitableGetPortalProductVersionResult(
        application_registration_enabled=pulumi.get(__ret__, 'application_registration_enabled'),
        auth_strategies=pulumi.get(__ret__, 'auth_strategies'),
        auto_approve_registration=pulumi.get(__ret__, 'auto_approve_registration'),
        created_at=pulumi.get(__ret__, 'created_at'),
        deprecated=pulumi.get(__ret__, 'deprecated'),
        id=pulumi.get(__ret__, 'id'),
        portal_id=pulumi.get(__ret__, 'portal_id'),
        product_version_id=pulumi.get(__ret__, 'product_version_id'),
        publish_status=pulumi.get(__ret__, 'publish_status'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_portal_product_version)
def get_portal_product_version_output(portal_id: Optional[pulumi.Input[str]] = None,
                                      product_version_id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPortalProductVersionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
