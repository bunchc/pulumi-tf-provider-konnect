# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetPortalAppearanceResult',
    'AwaitableGetPortalAppearanceResult',
    'get_portal_appearance',
    'get_portal_appearance_output',
]

@pulumi.output_type
class GetPortalAppearanceResult:
    """
    A collection of values returned by getPortalAppearance.
    """
    def __init__(__self__, custom_fonts=None, custom_theme=None, id=None, images=None, portal_id=None, text=None, theme_name=None, use_custom_fonts=None):
        if custom_fonts and not isinstance(custom_fonts, dict):
            raise TypeError("Expected argument 'custom_fonts' to be a dict")
        pulumi.set(__self__, "custom_fonts", custom_fonts)
        if custom_theme and not isinstance(custom_theme, dict):
            raise TypeError("Expected argument 'custom_theme' to be a dict")
        pulumi.set(__self__, "custom_theme", custom_theme)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if images and not isinstance(images, dict):
            raise TypeError("Expected argument 'images' to be a dict")
        pulumi.set(__self__, "images", images)
        if portal_id and not isinstance(portal_id, str):
            raise TypeError("Expected argument 'portal_id' to be a str")
        pulumi.set(__self__, "portal_id", portal_id)
        if text and not isinstance(text, dict):
            raise TypeError("Expected argument 'text' to be a dict")
        pulumi.set(__self__, "text", text)
        if theme_name and not isinstance(theme_name, str):
            raise TypeError("Expected argument 'theme_name' to be a str")
        pulumi.set(__self__, "theme_name", theme_name)
        if use_custom_fonts and not isinstance(use_custom_fonts, bool):
            raise TypeError("Expected argument 'use_custom_fonts' to be a bool")
        pulumi.set(__self__, "use_custom_fonts", use_custom_fonts)

    @property
    @pulumi.getter(name="customFonts")
    def custom_fonts(self) -> 'outputs.GetPortalAppearanceCustomFontsResult':
        return pulumi.get(self, "custom_fonts")

    @property
    @pulumi.getter(name="customTheme")
    def custom_theme(self) -> 'outputs.GetPortalAppearanceCustomThemeResult':
        return pulumi.get(self, "custom_theme")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def images(self) -> 'outputs.GetPortalAppearanceImagesResult':
        return pulumi.get(self, "images")

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> str:
        return pulumi.get(self, "portal_id")

    @property
    @pulumi.getter
    def text(self) -> 'outputs.GetPortalAppearanceTextResult':
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="themeName")
    def theme_name(self) -> str:
        return pulumi.get(self, "theme_name")

    @property
    @pulumi.getter(name="useCustomFonts")
    def use_custom_fonts(self) -> bool:
        return pulumi.get(self, "use_custom_fonts")


class AwaitableGetPortalAppearanceResult(GetPortalAppearanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPortalAppearanceResult(
            custom_fonts=self.custom_fonts,
            custom_theme=self.custom_theme,
            id=self.id,
            images=self.images,
            portal_id=self.portal_id,
            text=self.text,
            theme_name=self.theme_name,
            use_custom_fonts=self.use_custom_fonts)


def get_portal_appearance(portal_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPortalAppearanceResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['portalId'] = portal_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getPortalAppearance:getPortalAppearance', __args__, opts=opts, typ=GetPortalAppearanceResult).value

    return AwaitableGetPortalAppearanceResult(
        custom_fonts=pulumi.get(__ret__, 'custom_fonts'),
        custom_theme=pulumi.get(__ret__, 'custom_theme'),
        id=pulumi.get(__ret__, 'id'),
        images=pulumi.get(__ret__, 'images'),
        portal_id=pulumi.get(__ret__, 'portal_id'),
        text=pulumi.get(__ret__, 'text'),
        theme_name=pulumi.get(__ret__, 'theme_name'),
        use_custom_fonts=pulumi.get(__ret__, 'use_custom_fonts'))


@_utilities.lift_output_func(get_portal_appearance)
def get_portal_appearance_output(portal_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPortalAppearanceResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
