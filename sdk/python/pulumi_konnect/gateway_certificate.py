# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GatewayCertificateArgs', 'GatewayCertificate']

@pulumi.input_type
class GatewayCertificateArgs:
    def __init__(__self__, *,
                 control_plane_id: pulumi.Input[str],
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_alt: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_alt: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a GatewayCertificate resource.
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[str] cert: PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] cert_alt: PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] key: PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] key_alt: PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Certificate for grouping and filtering.
        """
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if cert_alt is not None:
            pulumi.set(__self__, "cert_alt", cert_alt)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_alt is not None:
            pulumi.set(__self__, "key_alt", key_alt)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Input[str]:
        """
        The UUID of your control plane. This variable is available in the Konnect manager.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="certAlt")
    def cert_alt(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "cert_alt")

    @cert_alt.setter
    def cert_alt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_alt", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyAlt")
    def key_alt(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "key_alt")

    @key_alt.setter
    def key_alt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_alt", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of strings associated with the Certificate for grouping and filtering.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _GatewayCertificateState:
    def __init__(__self__, *,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_alt: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[int]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_alt: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 updated_at: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering GatewayCertificate resources.
        :param pulumi.Input[str] cert: PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] cert_alt: PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[int] created_at: Unix epoch when the resource was created.
        :param pulumi.Input[str] key: PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] key_alt: PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Certificate for grouping and filtering.
        :param pulumi.Input[int] updated_at: Unix epoch when the resource was last updated.
        """
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if cert_alt is not None:
            pulumi.set(__self__, "cert_alt", cert_alt)
        if control_plane_id is not None:
            pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if key_alt is not None:
            pulumi.set(__self__, "key_alt", key_alt)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="certAlt")
    def cert_alt(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "cert_alt")

    @cert_alt.setter
    def cert_alt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert_alt", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of your control plane. This variable is available in the Konnect manager.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[int]]:
        """
        Unix epoch when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="keyAlt")
    def key_alt(self) -> Optional[pulumi.Input[str]]:
        """
        PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "key_alt")

    @key_alt.setter
    def key_alt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_alt", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of strings associated with the Certificate for grouping and filtering.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[int]]:
        """
        Unix epoch when the resource was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_at", value)


class GatewayCertificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_alt: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_alt: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        GatewayCertificate Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cert: PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] cert_alt: PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[str] key: PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] key_alt: PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Certificate for grouping and filtering.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayCertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        GatewayCertificate Resource

        :param str resource_name: The name of the resource.
        :param GatewayCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_alt: Optional[pulumi.Input[str]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 key_alt: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayCertificateArgs.__new__(GatewayCertificateArgs)

            __props__.__dict__["cert"] = cert
            __props__.__dict__["cert_alt"] = cert_alt
            if control_plane_id is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane_id'")
            __props__.__dict__["control_plane_id"] = control_plane_id
            __props__.__dict__["key"] = key
            __props__.__dict__["key_alt"] = key_alt
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(GatewayCertificate, __self__).__init__(
            'konnect:index/gatewayCertificate:GatewayCertificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cert: Optional[pulumi.Input[str]] = None,
            cert_alt: Optional[pulumi.Input[str]] = None,
            control_plane_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[int]] = None,
            key: Optional[pulumi.Input[str]] = None,
            key_alt: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            updated_at: Optional[pulumi.Input[int]] = None) -> 'GatewayCertificate':
        """
        Get an existing GatewayCertificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cert: PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] cert_alt: PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[int] created_at: Unix epoch when the resource was created.
        :param pulumi.Input[str] key: PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[str] key_alt: PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Certificate for grouping and filtering.
        :param pulumi.Input[int] updated_at: Unix epoch when the resource was last updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayCertificateState.__new__(_GatewayCertificateState)

        __props__.__dict__["cert"] = cert
        __props__.__dict__["cert_alt"] = cert_alt
        __props__.__dict__["control_plane_id"] = control_plane_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["key"] = key
        __props__.__dict__["key_alt"] = key_alt
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        return GatewayCertificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Output[str]:
        """
        PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "cert")

    @property
    @pulumi.getter(name="certAlt")
    def cert_alt(self) -> pulumi.Output[str]:
        """
        PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "cert_alt")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Output[str]:
        """
        The UUID of your control plane. This variable is available in the Konnect manager.
        """
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[int]:
        """
        Unix epoch when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyAlt")
    def key_alt(self) -> pulumi.Output[str]:
        """
        PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        """
        return pulumi.get(self, "key_alt")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[str]]:
        """
        An optional set of strings associated with the Certificate for grouping and filtering.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[int]:
        """
        Unix epoch when the resource was last updated.
        """
        return pulumi.get(self, "updated_at")

