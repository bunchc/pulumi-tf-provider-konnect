# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PortalAuthArgs', 'PortalAuth']

@pulumi.input_type
class PortalAuthArgs:
    def __init__(__self__, *,
                 portal_id: pulumi.Input[str],
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 konnect_mapping_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_claim_mappings: Optional[pulumi.Input['PortalAuthOidcClaimMappingsArgs']] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_issuer: Optional[pulumi.Input[str]] = None,
                 oidc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_team_mapping_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a PortalAuth resource.
        :param pulumi.Input[str] portal_id: ID of the portal.
        :param pulumi.Input[bool] basic_auth_enabled: The organization has basic auth enabled.
        :param pulumi.Input[bool] konnect_mapping_enabled: Whether a Konnect Identity Admin assigns teams to a developer.
        :param pulumi.Input[bool] oidc_auth_enabled: The organization has OIDC disabled.
        :param pulumi.Input['PortalAuthOidcClaimMappingsArgs'] oidc_claim_mappings: Mappings from a portal developer atribute to an Identity Provider claim.
        :param pulumi.Input[bool] oidc_team_mapping_enabled: Whether IdP groups determine the Konnect Portal teams a developer has.
        """
        pulumi.set(__self__, "portal_id", portal_id)
        if basic_auth_enabled is not None:
            pulumi.set(__self__, "basic_auth_enabled", basic_auth_enabled)
        if konnect_mapping_enabled is not None:
            pulumi.set(__self__, "konnect_mapping_enabled", konnect_mapping_enabled)
        if oidc_auth_enabled is not None:
            pulumi.set(__self__, "oidc_auth_enabled", oidc_auth_enabled)
        if oidc_claim_mappings is not None:
            pulumi.set(__self__, "oidc_claim_mappings", oidc_claim_mappings)
        if oidc_client_id is not None:
            pulumi.set(__self__, "oidc_client_id", oidc_client_id)
        if oidc_client_secret is not None:
            pulumi.set(__self__, "oidc_client_secret", oidc_client_secret)
        if oidc_issuer is not None:
            pulumi.set(__self__, "oidc_issuer", oidc_issuer)
        if oidc_scopes is not None:
            pulumi.set(__self__, "oidc_scopes", oidc_scopes)
        if oidc_team_mapping_enabled is not None:
            pulumi.set(__self__, "oidc_team_mapping_enabled", oidc_team_mapping_enabled)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> pulumi.Input[str]:
        """
        ID of the portal.
        """
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "portal_id", value)

    @property
    @pulumi.getter(name="basicAuthEnabled")
    def basic_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The organization has basic auth enabled.
        """
        return pulumi.get(self, "basic_auth_enabled")

    @basic_auth_enabled.setter
    def basic_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "basic_auth_enabled", value)

    @property
    @pulumi.getter(name="konnectMappingEnabled")
    def konnect_mapping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a Konnect Identity Admin assigns teams to a developer.
        """
        return pulumi.get(self, "konnect_mapping_enabled")

    @konnect_mapping_enabled.setter
    def konnect_mapping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "konnect_mapping_enabled", value)

    @property
    @pulumi.getter(name="oidcAuthEnabled")
    def oidc_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The organization has OIDC disabled.
        """
        return pulumi.get(self, "oidc_auth_enabled")

    @oidc_auth_enabled.setter
    def oidc_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_auth_enabled", value)

    @property
    @pulumi.getter(name="oidcClaimMappings")
    def oidc_claim_mappings(self) -> Optional[pulumi.Input['PortalAuthOidcClaimMappingsArgs']]:
        """
        Mappings from a portal developer atribute to an Identity Provider claim.
        """
        return pulumi.get(self, "oidc_claim_mappings")

    @oidc_claim_mappings.setter
    def oidc_claim_mappings(self, value: Optional[pulumi.Input['PortalAuthOidcClaimMappingsArgs']]):
        pulumi.set(self, "oidc_claim_mappings", value)

    @property
    @pulumi.getter(name="oidcClientId")
    def oidc_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_id")

    @oidc_client_id.setter
    def oidc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_id", value)

    @property
    @pulumi.getter(name="oidcClientSecret")
    def oidc_client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_secret")

    @oidc_client_secret.setter
    def oidc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_secret", value)

    @property
    @pulumi.getter(name="oidcIssuer")
    def oidc_issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_issuer")

    @oidc_issuer.setter
    def oidc_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_issuer", value)

    @property
    @pulumi.getter(name="oidcScopes")
    def oidc_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_scopes")

    @oidc_scopes.setter
    def oidc_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_scopes", value)

    @property
    @pulumi.getter(name="oidcTeamMappingEnabled")
    def oidc_team_mapping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether IdP groups determine the Konnect Portal teams a developer has.
        """
        return pulumi.get(self, "oidc_team_mapping_enabled")

    @oidc_team_mapping_enabled.setter
    def oidc_team_mapping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_team_mapping_enabled", value)


@pulumi.input_type
class _PortalAuthState:
    def __init__(__self__, *,
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 konnect_mapping_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_claim_mappings: Optional[pulumi.Input['PortalAuthOidcClaimMappingsArgs']] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_config: Optional[pulumi.Input['PortalAuthOidcConfigArgs']] = None,
                 oidc_issuer: Optional[pulumi.Input[str]] = None,
                 oidc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_team_mapping_enabled: Optional[pulumi.Input[bool]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PortalAuth resources.
        :param pulumi.Input[bool] basic_auth_enabled: The organization has basic auth enabled.
        :param pulumi.Input[bool] konnect_mapping_enabled: Whether a Konnect Identity Admin assigns teams to a developer.
        :param pulumi.Input[bool] oidc_auth_enabled: The organization has OIDC disabled.
        :param pulumi.Input['PortalAuthOidcClaimMappingsArgs'] oidc_claim_mappings: Mappings from a portal developer atribute to an Identity Provider claim.
        :param pulumi.Input['PortalAuthOidcConfigArgs'] oidc_config: Configuration properties for an OpenID Connect Identity Provider.
        :param pulumi.Input[bool] oidc_team_mapping_enabled: Whether IdP groups determine the Konnect Portal teams a developer has.
        :param pulumi.Input[str] portal_id: ID of the portal.
        """
        if basic_auth_enabled is not None:
            pulumi.set(__self__, "basic_auth_enabled", basic_auth_enabled)
        if konnect_mapping_enabled is not None:
            pulumi.set(__self__, "konnect_mapping_enabled", konnect_mapping_enabled)
        if oidc_auth_enabled is not None:
            pulumi.set(__self__, "oidc_auth_enabled", oidc_auth_enabled)
        if oidc_claim_mappings is not None:
            pulumi.set(__self__, "oidc_claim_mappings", oidc_claim_mappings)
        if oidc_client_id is not None:
            pulumi.set(__self__, "oidc_client_id", oidc_client_id)
        if oidc_client_secret is not None:
            pulumi.set(__self__, "oidc_client_secret", oidc_client_secret)
        if oidc_config is not None:
            pulumi.set(__self__, "oidc_config", oidc_config)
        if oidc_issuer is not None:
            pulumi.set(__self__, "oidc_issuer", oidc_issuer)
        if oidc_scopes is not None:
            pulumi.set(__self__, "oidc_scopes", oidc_scopes)
        if oidc_team_mapping_enabled is not None:
            pulumi.set(__self__, "oidc_team_mapping_enabled", oidc_team_mapping_enabled)
        if portal_id is not None:
            pulumi.set(__self__, "portal_id", portal_id)

    @property
    @pulumi.getter(name="basicAuthEnabled")
    def basic_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The organization has basic auth enabled.
        """
        return pulumi.get(self, "basic_auth_enabled")

    @basic_auth_enabled.setter
    def basic_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "basic_auth_enabled", value)

    @property
    @pulumi.getter(name="konnectMappingEnabled")
    def konnect_mapping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether a Konnect Identity Admin assigns teams to a developer.
        """
        return pulumi.get(self, "konnect_mapping_enabled")

    @konnect_mapping_enabled.setter
    def konnect_mapping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "konnect_mapping_enabled", value)

    @property
    @pulumi.getter(name="oidcAuthEnabled")
    def oidc_auth_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The organization has OIDC disabled.
        """
        return pulumi.get(self, "oidc_auth_enabled")

    @oidc_auth_enabled.setter
    def oidc_auth_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_auth_enabled", value)

    @property
    @pulumi.getter(name="oidcClaimMappings")
    def oidc_claim_mappings(self) -> Optional[pulumi.Input['PortalAuthOidcClaimMappingsArgs']]:
        """
        Mappings from a portal developer atribute to an Identity Provider claim.
        """
        return pulumi.get(self, "oidc_claim_mappings")

    @oidc_claim_mappings.setter
    def oidc_claim_mappings(self, value: Optional[pulumi.Input['PortalAuthOidcClaimMappingsArgs']]):
        pulumi.set(self, "oidc_claim_mappings", value)

    @property
    @pulumi.getter(name="oidcClientId")
    def oidc_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_id")

    @oidc_client_id.setter
    def oidc_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_id", value)

    @property
    @pulumi.getter(name="oidcClientSecret")
    def oidc_client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_client_secret")

    @oidc_client_secret.setter
    def oidc_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_client_secret", value)

    @property
    @pulumi.getter(name="oidcConfig")
    def oidc_config(self) -> Optional[pulumi.Input['PortalAuthOidcConfigArgs']]:
        """
        Configuration properties for an OpenID Connect Identity Provider.
        """
        return pulumi.get(self, "oidc_config")

    @oidc_config.setter
    def oidc_config(self, value: Optional[pulumi.Input['PortalAuthOidcConfigArgs']]):
        pulumi.set(self, "oidc_config", value)

    @property
    @pulumi.getter(name="oidcIssuer")
    def oidc_issuer(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "oidc_issuer")

    @oidc_issuer.setter
    def oidc_issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "oidc_issuer", value)

    @property
    @pulumi.getter(name="oidcScopes")
    def oidc_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "oidc_scopes")

    @oidc_scopes.setter
    def oidc_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oidc_scopes", value)

    @property
    @pulumi.getter(name="oidcTeamMappingEnabled")
    def oidc_team_mapping_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether IdP groups determine the Konnect Portal teams a developer has.
        """
        return pulumi.get(self, "oidc_team_mapping_enabled")

    @oidc_team_mapping_enabled.setter
    def oidc_team_mapping_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "oidc_team_mapping_enabled", value)

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the portal.
        """
        return pulumi.get(self, "portal_id")

    @portal_id.setter
    def portal_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "portal_id", value)


class PortalAuth(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 konnect_mapping_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_claim_mappings: Optional[pulumi.Input[pulumi.InputType['PortalAuthOidcClaimMappingsArgs']]] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_issuer: Optional[pulumi.Input[str]] = None,
                 oidc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_team_mapping_enabled: Optional[pulumi.Input[bool]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        PortalAuth Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] basic_auth_enabled: The organization has basic auth enabled.
        :param pulumi.Input[bool] konnect_mapping_enabled: Whether a Konnect Identity Admin assigns teams to a developer.
        :param pulumi.Input[bool] oidc_auth_enabled: The organization has OIDC disabled.
        :param pulumi.Input[pulumi.InputType['PortalAuthOidcClaimMappingsArgs']] oidc_claim_mappings: Mappings from a portal developer atribute to an Identity Provider claim.
        :param pulumi.Input[bool] oidc_team_mapping_enabled: Whether IdP groups determine the Konnect Portal teams a developer has.
        :param pulumi.Input[str] portal_id: ID of the portal.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PortalAuthArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        PortalAuth Resource

        :param str resource_name: The name of the resource.
        :param PortalAuthArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PortalAuthArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 konnect_mapping_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_auth_enabled: Optional[pulumi.Input[bool]] = None,
                 oidc_claim_mappings: Optional[pulumi.Input[pulumi.InputType['PortalAuthOidcClaimMappingsArgs']]] = None,
                 oidc_client_id: Optional[pulumi.Input[str]] = None,
                 oidc_client_secret: Optional[pulumi.Input[str]] = None,
                 oidc_issuer: Optional[pulumi.Input[str]] = None,
                 oidc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 oidc_team_mapping_enabled: Optional[pulumi.Input[bool]] = None,
                 portal_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PortalAuthArgs.__new__(PortalAuthArgs)

            __props__.__dict__["basic_auth_enabled"] = basic_auth_enabled
            __props__.__dict__["konnect_mapping_enabled"] = konnect_mapping_enabled
            __props__.__dict__["oidc_auth_enabled"] = oidc_auth_enabled
            __props__.__dict__["oidc_claim_mappings"] = oidc_claim_mappings
            __props__.__dict__["oidc_client_id"] = oidc_client_id
            __props__.__dict__["oidc_client_secret"] = oidc_client_secret
            __props__.__dict__["oidc_issuer"] = oidc_issuer
            __props__.__dict__["oidc_scopes"] = oidc_scopes
            __props__.__dict__["oidc_team_mapping_enabled"] = oidc_team_mapping_enabled
            if portal_id is None and not opts.urn:
                raise TypeError("Missing required property 'portal_id'")
            __props__.__dict__["portal_id"] = portal_id
            __props__.__dict__["oidc_config"] = None
        super(PortalAuth, __self__).__init__(
            'konnect:index/portalAuth:PortalAuth',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            basic_auth_enabled: Optional[pulumi.Input[bool]] = None,
            konnect_mapping_enabled: Optional[pulumi.Input[bool]] = None,
            oidc_auth_enabled: Optional[pulumi.Input[bool]] = None,
            oidc_claim_mappings: Optional[pulumi.Input[pulumi.InputType['PortalAuthOidcClaimMappingsArgs']]] = None,
            oidc_client_id: Optional[pulumi.Input[str]] = None,
            oidc_client_secret: Optional[pulumi.Input[str]] = None,
            oidc_config: Optional[pulumi.Input[pulumi.InputType['PortalAuthOidcConfigArgs']]] = None,
            oidc_issuer: Optional[pulumi.Input[str]] = None,
            oidc_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            oidc_team_mapping_enabled: Optional[pulumi.Input[bool]] = None,
            portal_id: Optional[pulumi.Input[str]] = None) -> 'PortalAuth':
        """
        Get an existing PortalAuth resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] basic_auth_enabled: The organization has basic auth enabled.
        :param pulumi.Input[bool] konnect_mapping_enabled: Whether a Konnect Identity Admin assigns teams to a developer.
        :param pulumi.Input[bool] oidc_auth_enabled: The organization has OIDC disabled.
        :param pulumi.Input[pulumi.InputType['PortalAuthOidcClaimMappingsArgs']] oidc_claim_mappings: Mappings from a portal developer atribute to an Identity Provider claim.
        :param pulumi.Input[pulumi.InputType['PortalAuthOidcConfigArgs']] oidc_config: Configuration properties for an OpenID Connect Identity Provider.
        :param pulumi.Input[bool] oidc_team_mapping_enabled: Whether IdP groups determine the Konnect Portal teams a developer has.
        :param pulumi.Input[str] portal_id: ID of the portal.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PortalAuthState.__new__(_PortalAuthState)

        __props__.__dict__["basic_auth_enabled"] = basic_auth_enabled
        __props__.__dict__["konnect_mapping_enabled"] = konnect_mapping_enabled
        __props__.__dict__["oidc_auth_enabled"] = oidc_auth_enabled
        __props__.__dict__["oidc_claim_mappings"] = oidc_claim_mappings
        __props__.__dict__["oidc_client_id"] = oidc_client_id
        __props__.__dict__["oidc_client_secret"] = oidc_client_secret
        __props__.__dict__["oidc_config"] = oidc_config
        __props__.__dict__["oidc_issuer"] = oidc_issuer
        __props__.__dict__["oidc_scopes"] = oidc_scopes
        __props__.__dict__["oidc_team_mapping_enabled"] = oidc_team_mapping_enabled
        __props__.__dict__["portal_id"] = portal_id
        return PortalAuth(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="basicAuthEnabled")
    def basic_auth_enabled(self) -> pulumi.Output[bool]:
        """
        The organization has basic auth enabled.
        """
        return pulumi.get(self, "basic_auth_enabled")

    @property
    @pulumi.getter(name="konnectMappingEnabled")
    def konnect_mapping_enabled(self) -> pulumi.Output[bool]:
        """
        Whether a Konnect Identity Admin assigns teams to a developer.
        """
        return pulumi.get(self, "konnect_mapping_enabled")

    @property
    @pulumi.getter(name="oidcAuthEnabled")
    def oidc_auth_enabled(self) -> pulumi.Output[bool]:
        """
        The organization has OIDC disabled.
        """
        return pulumi.get(self, "oidc_auth_enabled")

    @property
    @pulumi.getter(name="oidcClaimMappings")
    def oidc_claim_mappings(self) -> pulumi.Output[Optional['outputs.PortalAuthOidcClaimMappings']]:
        """
        Mappings from a portal developer atribute to an Identity Provider claim.
        """
        return pulumi.get(self, "oidc_claim_mappings")

    @property
    @pulumi.getter(name="oidcClientId")
    def oidc_client_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_client_id")

    @property
    @pulumi.getter(name="oidcClientSecret")
    def oidc_client_secret(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_client_secret")

    @property
    @pulumi.getter(name="oidcConfig")
    def oidc_config(self) -> pulumi.Output['outputs.PortalAuthOidcConfig']:
        """
        Configuration properties for an OpenID Connect Identity Provider.
        """
        return pulumi.get(self, "oidc_config")

    @property
    @pulumi.getter(name="oidcIssuer")
    def oidc_issuer(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "oidc_issuer")

    @property
    @pulumi.getter(name="oidcScopes")
    def oidc_scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "oidc_scopes")

    @property
    @pulumi.getter(name="oidcTeamMappingEnabled")
    def oidc_team_mapping_enabled(self) -> pulumi.Output[bool]:
        """
        Whether IdP groups determine the Konnect Portal teams a developer has.
        """
        return pulumi.get(self, "oidc_team_mapping_enabled")

    @property
    @pulumi.getter(name="portalId")
    def portal_id(self) -> pulumi.Output[str]:
        """
        ID of the portal.
        """
        return pulumi.get(self, "portal_id")

