# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetServerlessCloudGatewayResult',
    'AwaitableGetServerlessCloudGatewayResult',
    'get_serverless_cloud_gateway',
    'get_serverless_cloud_gateway_output',
]

@pulumi.output_type
class GetServerlessCloudGatewayResult:
    """
    A collection of values returned by getServerlessCloudGateway.
    """
    def __init__(__self__, control_plane=None, created_at=None, gateway_endpoint=None, id=None, labels=None, updated_at=None):
        if control_plane and not isinstance(control_plane, dict):
            raise TypeError("Expected argument 'control_plane' to be a dict")
        pulumi.set(__self__, "control_plane", control_plane)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if gateway_endpoint and not isinstance(gateway_endpoint, str):
            raise TypeError("Expected argument 'gateway_endpoint' to be a str")
        pulumi.set(__self__, "gateway_endpoint", gateway_endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="controlPlane")
    def control_plane(self) -> 'outputs.GetServerlessCloudGatewayControlPlaneResult':
        return pulumi.get(self, "control_plane")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="gatewayEndpoint")
    def gateway_endpoint(self) -> str:
        return pulumi.get(self, "gateway_endpoint")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


class AwaitableGetServerlessCloudGatewayResult(GetServerlessCloudGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServerlessCloudGatewayResult(
            control_plane=self.control_plane,
            created_at=self.created_at,
            gateway_endpoint=self.gateway_endpoint,
            id=self.id,
            labels=self.labels,
            updated_at=self.updated_at)


def get_serverless_cloud_gateway(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServerlessCloudGatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('konnect:index/getServerlessCloudGateway:getServerlessCloudGateway', __args__, opts=opts, typ=GetServerlessCloudGatewayResult).value

    return AwaitableGetServerlessCloudGatewayResult(
        control_plane=pulumi.get(__ret__, 'control_plane'),
        created_at=pulumi.get(__ret__, 'created_at'),
        gateway_endpoint=pulumi.get(__ret__, 'gateway_endpoint'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_serverless_cloud_gateway)
def get_serverless_cloud_gateway_output(opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServerlessCloudGatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
