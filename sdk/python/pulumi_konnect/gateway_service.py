# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GatewayServiceArgs', 'GatewayService']

@pulumi.input_type
class GatewayServiceArgs:
    def __init__(__self__, *,
                 control_plane_id: pulumi.Input[str],
                 ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input['GatewayServiceClientCertificateArgs']] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 read_timeout: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_verify: Optional[pulumi.Input[bool]] = None,
                 tls_verify_depth: Optional[pulumi.Input[int]] = None,
                 write_timeout: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a GatewayService resource.
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificates: Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
        :param pulumi.Input['GatewayServiceClientCertificateArgs'] client_certificate: Certificate to be used as client certificate while TLS handshaking to the upstream server.
        :param pulumi.Input[int] connect_timeout: The timeout in milliseconds for establishing a connection to the upstream server.
        :param pulumi.Input[bool] enabled: Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
        :param pulumi.Input[str] host: The host of the upstream server. Note that the host value is case sensitive.
        :param pulumi.Input[str] name: The Service name.
        :param pulumi.Input[str] path: The path to be used in requests to the upstream server.
        :param pulumi.Input[int] port: The upstream server port.
        :param pulumi.Input[str] protocol: The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
        :param pulumi.Input[int] read_timeout: The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
        :param pulumi.Input[int] retries: The number of retries to execute upon failure to proxy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Service for grouping and filtering.
        :param pulumi.Input[bool] tls_verify: Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] tls_verify_depth: Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] write_timeout: The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
        """
        pulumi.set(__self__, "control_plane_id", control_plane_id)
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_verify is not None:
            pulumi.set(__self__, "tls_verify", tls_verify)
        if tls_verify_depth is not None:
            pulumi.set(__self__, "tls_verify_depth", tls_verify_depth)
        if write_timeout is not None:
            pulumi.set(__self__, "write_timeout", write_timeout)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Input[str]:
        """
        The UUID of your control plane. This variable is available in the Konnect manager.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
        """
        return pulumi.get(self, "ca_certificates")

    @ca_certificates.setter
    def ca_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ca_certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input['GatewayServiceClientCertificateArgs']]:
        """
        Certificate to be used as client certificate while TLS handshaking to the upstream server.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input['GatewayServiceClientCertificateArgs']]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in milliseconds for establishing a connection to the upstream server.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host of the upstream server. Note that the host value is case sensitive.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to be used in requests to the upstream server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The upstream server port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
        """
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        The number of retries to execute upon failure to proxy.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of strings associated with the Service for grouping and filtering.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsVerify")
    def tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
        """
        return pulumi.get(self, "tls_verify")

    @tls_verify.setter
    def tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_verify", value)

    @property
    @pulumi.getter(name="tlsVerifyDepth")
    def tls_verify_depth(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
        """
        return pulumi.get(self, "tls_verify_depth")

    @tls_verify_depth.setter
    def tls_verify_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tls_verify_depth", value)

    @property
    @pulumi.getter(name="writeTimeout")
    def write_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
        """
        return pulumi.get(self, "write_timeout")

    @write_timeout.setter
    def write_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "write_timeout", value)


@pulumi.input_type
class _GatewayServiceState:
    def __init__(__self__, *,
                 ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input['GatewayServiceClientCertificateArgs']] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 read_timeout: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_verify: Optional[pulumi.Input[bool]] = None,
                 tls_verify_depth: Optional[pulumi.Input[int]] = None,
                 updated_at: Optional[pulumi.Input[int]] = None,
                 write_timeout: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering GatewayService resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificates: Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
        :param pulumi.Input['GatewayServiceClientCertificateArgs'] client_certificate: Certificate to be used as client certificate while TLS handshaking to the upstream server.
        :param pulumi.Input[int] connect_timeout: The timeout in milliseconds for establishing a connection to the upstream server.
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[int] created_at: Unix epoch when the resource was created.
        :param pulumi.Input[bool] enabled: Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
        :param pulumi.Input[str] host: The host of the upstream server. Note that the host value is case sensitive.
        :param pulumi.Input[str] name: The Service name.
        :param pulumi.Input[str] path: The path to be used in requests to the upstream server.
        :param pulumi.Input[int] port: The upstream server port.
        :param pulumi.Input[str] protocol: The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
        :param pulumi.Input[int] read_timeout: The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
        :param pulumi.Input[int] retries: The number of retries to execute upon failure to proxy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Service for grouping and filtering.
        :param pulumi.Input[bool] tls_verify: Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] tls_verify_depth: Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] updated_at: Unix epoch when the resource was last updated.
        :param pulumi.Input[int] write_timeout: The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
        """
        if ca_certificates is not None:
            pulumi.set(__self__, "ca_certificates", ca_certificates)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if control_plane_id is not None:
            pulumi.set(__self__, "control_plane_id", control_plane_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if read_timeout is not None:
            pulumi.set(__self__, "read_timeout", read_timeout)
        if retries is not None:
            pulumi.set(__self__, "retries", retries)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tls_verify is not None:
            pulumi.set(__self__, "tls_verify", tls_verify)
        if tls_verify_depth is not None:
            pulumi.set(__self__, "tls_verify_depth", tls_verify_depth)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if write_timeout is not None:
            pulumi.set(__self__, "write_timeout", write_timeout)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
        """
        return pulumi.get(self, "ca_certificates")

    @ca_certificates.setter
    def ca_certificates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ca_certificates", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input['GatewayServiceClientCertificateArgs']]:
        """
        Certificate to be used as client certificate while TLS handshaking to the upstream server.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input['GatewayServiceClientCertificateArgs']]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in milliseconds for establishing a connection to the upstream server.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> Optional[pulumi.Input[str]]:
        """
        The UUID of your control plane. This variable is available in the Konnect manager.
        """
        return pulumi.get(self, "control_plane_id")

    @control_plane_id.setter
    def control_plane_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_plane_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[int]]:
        """
        Unix epoch when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The host of the upstream server. Note that the host value is case sensitive.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Service name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to be used in requests to the upstream server.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        The upstream server port.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        """
        The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
        """
        return pulumi.get(self, "read_timeout")

    @read_timeout.setter
    def read_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_timeout", value)

    @property
    @pulumi.getter
    def retries(self) -> Optional[pulumi.Input[int]]:
        """
        The number of retries to execute upon failure to proxy.
        """
        return pulumi.get(self, "retries")

    @retries.setter
    def retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retries", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An optional set of strings associated with the Service for grouping and filtering.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tlsVerify")
    def tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
        """
        return pulumi.get(self, "tls_verify")

    @tls_verify.setter
    def tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_verify", value)

    @property
    @pulumi.getter(name="tlsVerifyDepth")
    def tls_verify_depth(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
        """
        return pulumi.get(self, "tls_verify_depth")

    @tls_verify_depth.setter
    def tls_verify_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tls_verify_depth", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[int]]:
        """
        Unix epoch when the resource was last updated.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="writeTimeout")
    def write_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
        """
        return pulumi.get(self, "write_timeout")

    @write_timeout.setter
    def write_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "write_timeout", value)


class GatewayService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[pulumi.InputType['GatewayServiceClientCertificateArgs']]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 read_timeout: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_verify: Optional[pulumi.Input[bool]] = None,
                 tls_verify_depth: Optional[pulumi.Input[int]] = None,
                 write_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        GatewayService Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificates: Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
        :param pulumi.Input[pulumi.InputType['GatewayServiceClientCertificateArgs']] client_certificate: Certificate to be used as client certificate while TLS handshaking to the upstream server.
        :param pulumi.Input[int] connect_timeout: The timeout in milliseconds for establishing a connection to the upstream server.
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[bool] enabled: Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
        :param pulumi.Input[str] host: The host of the upstream server. Note that the host value is case sensitive.
        :param pulumi.Input[str] name: The Service name.
        :param pulumi.Input[str] path: The path to be used in requests to the upstream server.
        :param pulumi.Input[int] port: The upstream server port.
        :param pulumi.Input[str] protocol: The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
        :param pulumi.Input[int] read_timeout: The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
        :param pulumi.Input[int] retries: The number of retries to execute upon failure to proxy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Service for grouping and filtering.
        :param pulumi.Input[bool] tls_verify: Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] tls_verify_depth: Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] write_timeout: The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        GatewayService Resource

        :param str resource_name: The name of the resource.
        :param GatewayServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_certificate: Optional[pulumi.Input[pulumi.InputType['GatewayServiceClientCertificateArgs']]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 control_plane_id: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 protocol: Optional[pulumi.Input[str]] = None,
                 read_timeout: Optional[pulumi.Input[int]] = None,
                 retries: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tls_verify: Optional[pulumi.Input[bool]] = None,
                 tls_verify_depth: Optional[pulumi.Input[int]] = None,
                 write_timeout: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayServiceArgs.__new__(GatewayServiceArgs)

            __props__.__dict__["ca_certificates"] = ca_certificates
            __props__.__dict__["client_certificate"] = client_certificate
            __props__.__dict__["connect_timeout"] = connect_timeout
            if control_plane_id is None and not opts.urn:
                raise TypeError("Missing required property 'control_plane_id'")
            __props__.__dict__["control_plane_id"] = control_plane_id
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["host"] = host
            __props__.__dict__["name"] = name
            __props__.__dict__["path"] = path
            __props__.__dict__["port"] = port
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["read_timeout"] = read_timeout
            __props__.__dict__["retries"] = retries
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tls_verify"] = tls_verify
            __props__.__dict__["tls_verify_depth"] = tls_verify_depth
            __props__.__dict__["write_timeout"] = write_timeout
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
        super(GatewayService, __self__).__init__(
            'konnect:index/gatewayService:GatewayService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ca_certificates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            client_certificate: Optional[pulumi.Input[pulumi.InputType['GatewayServiceClientCertificateArgs']]] = None,
            connect_timeout: Optional[pulumi.Input[int]] = None,
            control_plane_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[int]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            host: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None,
            port: Optional[pulumi.Input[int]] = None,
            protocol: Optional[pulumi.Input[str]] = None,
            read_timeout: Optional[pulumi.Input[int]] = None,
            retries: Optional[pulumi.Input[int]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tls_verify: Optional[pulumi.Input[bool]] = None,
            tls_verify_depth: Optional[pulumi.Input[int]] = None,
            updated_at: Optional[pulumi.Input[int]] = None,
            write_timeout: Optional[pulumi.Input[int]] = None) -> 'GatewayService':
        """
        Get an existing GatewayService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ca_certificates: Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
        :param pulumi.Input[pulumi.InputType['GatewayServiceClientCertificateArgs']] client_certificate: Certificate to be used as client certificate while TLS handshaking to the upstream server.
        :param pulumi.Input[int] connect_timeout: The timeout in milliseconds for establishing a connection to the upstream server.
        :param pulumi.Input[str] control_plane_id: The UUID of your control plane. This variable is available in the Konnect manager.
        :param pulumi.Input[int] created_at: Unix epoch when the resource was created.
        :param pulumi.Input[bool] enabled: Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
        :param pulumi.Input[str] host: The host of the upstream server. Note that the host value is case sensitive.
        :param pulumi.Input[str] name: The Service name.
        :param pulumi.Input[str] path: The path to be used in requests to the upstream server.
        :param pulumi.Input[int] port: The upstream server port.
        :param pulumi.Input[str] protocol: The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
        :param pulumi.Input[int] read_timeout: The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
        :param pulumi.Input[int] retries: The number of retries to execute upon failure to proxy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: An optional set of strings associated with the Service for grouping and filtering.
        :param pulumi.Input[bool] tls_verify: Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] tls_verify_depth: Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
        :param pulumi.Input[int] updated_at: Unix epoch when the resource was last updated.
        :param pulumi.Input[int] write_timeout: The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GatewayServiceState.__new__(_GatewayServiceState)

        __props__.__dict__["ca_certificates"] = ca_certificates
        __props__.__dict__["client_certificate"] = client_certificate
        __props__.__dict__["connect_timeout"] = connect_timeout
        __props__.__dict__["control_plane_id"] = control_plane_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["host"] = host
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        __props__.__dict__["port"] = port
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["read_timeout"] = read_timeout
        __props__.__dict__["retries"] = retries
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tls_verify"] = tls_verify
        __props__.__dict__["tls_verify_depth"] = tls_verify_depth
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["write_timeout"] = write_timeout
        return GatewayService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="caCertificates")
    def ca_certificates(self) -> pulumi.Output[Sequence[str]]:
        """
        Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
        """
        return pulumi.get(self, "ca_certificates")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Output['outputs.GatewayServiceClientCertificate']:
        """
        Certificate to be used as client certificate while TLS handshaking to the upstream server.
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> pulumi.Output[int]:
        """
        The timeout in milliseconds for establishing a connection to the upstream server.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="controlPlaneId")
    def control_plane_id(self) -> pulumi.Output[str]:
        """
        The UUID of your control plane. This variable is available in the Konnect manager.
        """
        return pulumi.get(self, "control_plane_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[int]:
        """
        Unix epoch when the resource was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[str]:
        """
        The host of the upstream server. Note that the host value is case sensitive.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Service name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The path to be used in requests to the upstream server.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[int]:
        """
        The upstream server port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[str]:
        """
        The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tls_passthrough", "udp", "ws", "wss"]
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="readTimeout")
    def read_timeout(self) -> pulumi.Output[int]:
        """
        The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
        """
        return pulumi.get(self, "read_timeout")

    @property
    @pulumi.getter
    def retries(self) -> pulumi.Output[int]:
        """
        The number of retries to execute upon failure to proxy.
        """
        return pulumi.get(self, "retries")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence[str]]:
        """
        An optional set of strings associated with the Service for grouping and filtering.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tlsVerify")
    def tls_verify(self) -> pulumi.Output[bool]:
        """
        Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
        """
        return pulumi.get(self, "tls_verify")

    @property
    @pulumi.getter(name="tlsVerifyDepth")
    def tls_verify_depth(self) -> pulumi.Output[int]:
        """
        Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
        """
        return pulumi.get(self, "tls_verify_depth")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[int]:
        """
        Unix epoch when the resource was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="writeTimeout")
    def write_timeout(self) -> pulumi.Output[int]:
        """
        The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
        """
        return pulumi.get(self, "write_timeout")

