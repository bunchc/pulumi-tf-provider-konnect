// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// ApplicationAuthStrategy Resource
    /// </summary>
    [KonnectResourceType("konnect:index/applicationAuthStrategy:ApplicationAuthStrategy")]
    public partial class ApplicationAuthStrategy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// At least one published product version is using this auth strategy.
        /// </summary>
        [Output("active")]
        public Output<bool> Active { get; private set; } = null!;

        /// <summary>
        /// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
        /// </summary>
        [Output("keyAuth")]
        public Output<Outputs.ApplicationAuthStrategyKeyAuth> KeyAuth { get; private set; } = null!;

        /// <summary>
        /// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
        /// </summary>
        [Output("openidConnect")]
        public Output<Outputs.ApplicationAuthStrategyOpenidConnect> OpenidConnect { get; private set; } = null!;


        /// <summary>
        /// Create a ApplicationAuthStrategy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApplicationAuthStrategy(string name, ApplicationAuthStrategyArgs? args = null, CustomResourceOptions? options = null)
            : base("konnect:index/applicationAuthStrategy:ApplicationAuthStrategy", name, args ?? new ApplicationAuthStrategyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApplicationAuthStrategy(string name, Input<string> id, ApplicationAuthStrategyState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/applicationAuthStrategy:ApplicationAuthStrategy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApplicationAuthStrategy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApplicationAuthStrategy Get(string name, Input<string> id, ApplicationAuthStrategyState? state = null, CustomResourceOptions? options = null)
        {
            return new ApplicationAuthStrategy(name, id, state, options);
        }
    }

    public sealed class ApplicationAuthStrategyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
        /// </summary>
        [Input("keyAuth")]
        public Input<Inputs.ApplicationAuthStrategyKeyAuthArgs>? KeyAuth { get; set; }

        /// <summary>
        /// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
        /// </summary>
        [Input("openidConnect")]
        public Input<Inputs.ApplicationAuthStrategyOpenidConnectArgs>? OpenidConnect { get; set; }

        public ApplicationAuthStrategyArgs()
        {
        }
        public static new ApplicationAuthStrategyArgs Empty => new ApplicationAuthStrategyArgs();
    }

    public sealed class ApplicationAuthStrategyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// At least one published product version is using this auth strategy.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
        /// </summary>
        [Input("keyAuth")]
        public Input<Inputs.ApplicationAuthStrategyKeyAuthGetArgs>? KeyAuth { get; set; }

        /// <summary>
        /// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
        /// </summary>
        [Input("openidConnect")]
        public Input<Inputs.ApplicationAuthStrategyOpenidConnectGetArgs>? OpenidConnect { get; set; }

        public ApplicationAuthStrategyState()
        {
        }
        public static new ApplicationAuthStrategyState Empty => new ApplicationAuthStrategyState();
    }
}
