// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Inputs
{

    public sealed class GatewayPluginRateLimitingAdvancedConfigRedisGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("clusterAddresses")]
        private InputList<string>? _clusterAddresses;

        /// <summary>
        /// Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Cluster. Each string element must be a hostname. The minimum length of the array is 1 element.
        /// </summary>
        public InputList<string> ClusterAddresses
        {
            get => _clusterAddresses ?? (_clusterAddresses = new InputList<string>());
            set => _clusterAddresses = value;
        }

        /// <summary>
        /// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// Database to use for the Redis connection when using the `redis` strategy
        /// </summary>
        [Input("database")]
        public Input<int>? Database { get; set; }

        /// <summary>
        /// A string representing a host name, such as example.com.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.
        /// </summary>
        [Input("keepaliveBacklog")]
        public Input<int>? KeepaliveBacklog { get; set; }

        /// <summary>
        /// The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.
        /// </summary>
        [Input("keepalivePoolSize")]
        public Input<int>? KeepalivePoolSize { get; set; }

        /// <summary>
        /// Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// An integer representing a port number between 0 and 65535, inclusive.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        /// </summary>
        [Input("readTimeout")]
        public Input<int>? ReadTimeout { get; set; }

        /// <summary>
        /// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        /// </summary>
        [Input("sendTimeout")]
        public Input<int>? SendTimeout { get; set; }

        [Input("sentinelAddresses")]
        private InputList<string>? _sentinelAddresses;

        /// <summary>
        /// Sentinel addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. Each string element must be a hostname. The minimum length of the array is 1 element.
        /// </summary>
        public InputList<string> SentinelAddresses
        {
            get => _sentinelAddresses ?? (_sentinelAddresses = new InputList<string>());
            set => _sentinelAddresses = value;
        }

        /// <summary>
        /// Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.
        /// </summary>
        [Input("sentinelMaster")]
        public Input<string>? SentinelMaster { get; set; }

        /// <summary>
        /// Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.
        /// </summary>
        [Input("sentinelPassword")]
        public Input<string>? SentinelPassword { get; set; }

        /// <summary>
        /// Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. must be one of ["master", "slave", "any"]
        /// </summary>
        [Input("sentinelRole")]
        public Input<string>? SentinelRole { get; set; }

        /// <summary>
        /// Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.
        /// </summary>
        [Input("sentinelUsername")]
        public Input<string>? SentinelUsername { get; set; }

        /// <summary>
        /// A string representing an SNI (server name indication) value for TLS.
        /// </summary>
        [Input("serverName")]
        public Input<string>? ServerName { get; set; }

        /// <summary>
        /// If set to true, uses SSL to connect to Redis.
        /// </summary>
        [Input("ssl")]
        public Input<bool>? Ssl { get; set; }

        /// <summary>
        /// If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.
        /// </summary>
        [Input("sslVerify")]
        public Input<bool>? SslVerify { get; set; }

        /// <summary>
        /// An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GatewayPluginRateLimitingAdvancedConfigRedisGetArgs()
        {
        }
        public static new GatewayPluginRateLimitingAdvancedConfigRedisGetArgs Empty => new GatewayPluginRateLimitingAdvancedConfigRedisGetArgs();
    }
}
