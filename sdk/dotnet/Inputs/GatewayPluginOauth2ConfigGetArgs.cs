// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Inputs
{

    public sealed class GatewayPluginOauth2ConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Accepts HTTPs requests that have already been terminated by a proxy or load balancer.
        /// </summary>
        [Input("acceptHttpIfAlreadyTerminated")]
        public Input<bool>? AcceptHttpIfAlreadyTerminated { get; set; }

        /// <summary>
        /// An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails.
        /// </summary>
        [Input("anonymous")]
        public Input<string>? Anonymous { get; set; }

        /// <summary>
        /// The name of the header that is supposed to carry the access token.
        /// </summary>
        [Input("authHeaderName")]
        public Input<string>? AuthHeaderName { get; set; }

        /// <summary>
        /// An optional boolean value to enable the three-legged Authorization Code flow (RFC 6742 Section 4.1).
        /// </summary>
        [Input("enableAuthorizationCode")]
        public Input<bool>? EnableAuthorizationCode { get; set; }

        /// <summary>
        /// An optional boolean value to enable the Client Credentials Grant flow (RFC 6742 Section 4.4).
        /// </summary>
        [Input("enableClientCredentials")]
        public Input<bool>? EnableClientCredentials { get; set; }

        /// <summary>
        /// An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process (RFC 6742 Section 4.2).
        /// </summary>
        [Input("enableImplicitGrant")]
        public Input<bool>? EnableImplicitGrant { get; set; }

        /// <summary>
        /// An optional boolean value to enable the Resource Owner Password Credentials Grant flow (RFC 6742 Section 4.3).
        /// </summary>
        [Input("enablePasswordGrant")]
        public Input<bool>? EnablePasswordGrant { get; set; }

        /// <summary>
        /// An optional boolean value that allows using the same OAuth credentials generated by the plugin with any other service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.
        /// </summary>
        [Input("globalCredentials")]
        public Input<bool>? GlobalCredentials { get; set; }

        /// <summary>
        /// An optional boolean value telling the plugin to show or hide the credential from the upstream service.
        /// </summary>
        [Input("hideCredentials")]
        public Input<bool>? HideCredentials { get; set; }

        /// <summary>
        /// An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.
        /// </summary>
        [Input("mandatoryScope")]
        public Input<bool>? MandatoryScope { get; set; }

        [Input("persistentRefreshToken")]
        public Input<bool>? PersistentRefreshToken { get; set; }

        /// <summary>
        /// Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be handled by the plugin. must be one of ["none", "lax", "strict"]
        /// </summary>
        [Input("pkce")]
        public Input<string>? Pkce { get; set; }

        /// <summary>
        /// The unique key the plugin has generated when it has been added to the Service.
        /// </summary>
        [Input("provisionKey")]
        public Input<string>? ProvisionKey { get; set; }

        /// <summary>
        /// Time-to-live value for data
        /// </summary>
        [Input("refreshTokenTtl")]
        public Input<double>? RefreshTokenTtl { get; set; }

        /// <summary>
        /// An optional boolean value that indicates whether an OAuth refresh token is reused when refreshing an access token.
        /// </summary>
        [Input("reuseRefreshToken")]
        public Input<bool>? ReuseRefreshToken { get; set; }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// Describes an array of scope names that will be available to the end user. If `mandatory_scope` is set to `true`, then `scopes` are required.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        /// <summary>
        /// An optional integer value telling the plugin how many seconds a token should last, after which the client will need to refresh the token. Set to `0` to disable the expiration.
        /// </summary>
        [Input("tokenExpiration")]
        public Input<double>? TokenExpiration { get; set; }

        public GatewayPluginOauth2ConfigGetArgs()
        {
        }
        public static new GatewayPluginOauth2ConfigGetArgs Empty => new GatewayPluginOauth2ConfigGetArgs();
    }
}
