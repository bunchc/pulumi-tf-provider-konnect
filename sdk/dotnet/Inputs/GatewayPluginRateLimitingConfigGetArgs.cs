// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Inputs
{

    public sealed class GatewayPluginRateLimitingConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The number of HTTP requests that can be made per day.
        /// </summary>
        [Input("day")]
        public Input<double>? Day { get; set; }

        /// <summary>
        /// Set a custom error code to return when the rate limit is exceeded.
        /// </summary>
        [Input("errorCode")]
        public Input<double>? ErrorCode { get; set; }

        /// <summary>
        /// Set a custom error message to return when the rate limit is exceeded.
        /// </summary>
        [Input("errorMessage")]
        public Input<string>? ErrorMessage { get; set; }

        /// <summary>
        /// A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
        /// </summary>
        [Input("faultTolerant")]
        public Input<bool>? FaultTolerant { get; set; }

        /// <summary>
        /// A string representing an HTTP header name.
        /// </summary>
        [Input("headerName")]
        public Input<string>? HeaderName { get; set; }

        /// <summary>
        /// Optionally hide informative response headers.
        /// </summary>
        [Input("hideClientHeaders")]
        public Input<bool>? HideClientHeaders { get; set; }

        /// <summary>
        /// The number of HTTP requests that can be made per hour.
        /// </summary>
        [Input("hour")]
        public Input<double>? Hour { get; set; }

        /// <summary>
        /// The entity that is used when aggregating the limits. must be one of ["consumer", "credential", "ip", "service", "header", "path", "consumer-group"]
        /// </summary>
        [Input("limitBy")]
        public Input<string>? LimitBy { get; set; }

        /// <summary>
        /// The number of HTTP requests that can be made per minute.
        /// </summary>
        [Input("minute")]
        public Input<double>? Minute { get; set; }

        /// <summary>
        /// The number of HTTP requests that can be made per month.
        /// </summary>
        [Input("month")]
        public Input<double>? Month { get; set; }

        /// <summary>
        /// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// The rate-limiting policies to use for retrieving and incrementing the limits. must be one of ["local", "cluster", "redis"]
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Redis configuration
        /// </summary>
        [Input("redis")]
        public Input<Inputs.GatewayPluginRateLimitingConfigRedisGetArgs>? Redis { get; set; }

        /// <summary>
        /// The number of HTTP requests that can be made per second.
        /// </summary>
        [Input("second")]
        public Input<double>? Second { get; set; }

        /// <summary>
        /// How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
        /// </summary>
        [Input("syncRate")]
        public Input<double>? SyncRate { get; set; }

        /// <summary>
        /// The number of HTTP requests that can be made per year.
        /// </summary>
        [Input("year")]
        public Input<double>? Year { get; set; }

        public GatewayPluginRateLimitingConfigGetArgs()
        {
        }
        public static new GatewayPluginRateLimitingConfigGetArgs Empty => new GatewayPluginRateLimitingConfigGetArgs();
    }
}
