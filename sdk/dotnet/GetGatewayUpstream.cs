// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    public static class GetGatewayUpstream
    {
        public static Task<GetGatewayUpstreamResult> InvokeAsync(GetGatewayUpstreamArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewayUpstreamResult>("konnect:index/getGatewayUpstream:getGatewayUpstream", args ?? new GetGatewayUpstreamArgs(), options.WithDefaults());

        public static Output<GetGatewayUpstreamResult> Invoke(GetGatewayUpstreamInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayUpstreamResult>("konnect:index/getGatewayUpstream:getGatewayUpstream", args ?? new GetGatewayUpstreamInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayUpstreamArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public string ControlPlaneId { get; set; } = null!;

        public GetGatewayUpstreamArgs()
        {
        }
        public static new GetGatewayUpstreamArgs Empty => new GetGatewayUpstreamArgs();
    }

    public sealed class GetGatewayUpstreamInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        public GetGatewayUpstreamInvokeArgs()
        {
        }
        public static new GetGatewayUpstreamInvokeArgs Empty => new GetGatewayUpstreamInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewayUpstreamResult
    {
        public readonly string Algorithm;
        public readonly Outputs.GetGatewayUpstreamClientCertificateResult ClientCertificate;
        public readonly string ControlPlaneId;
        public readonly int CreatedAt;
        public readonly string HashFallback;
        public readonly string HashFallbackHeader;
        public readonly string HashFallbackQueryArg;
        public readonly string HashFallbackUriCapture;
        public readonly string HashOn;
        public readonly string HashOnCookie;
        public readonly string HashOnCookiePath;
        public readonly string HashOnHeader;
        public readonly string HashOnQueryArg;
        public readonly string HashOnUriCapture;
        public readonly Outputs.GetGatewayUpstreamHealthchecksResult Healthchecks;
        public readonly string HostHeader;
        public readonly string Id;
        public readonly string Name;
        public readonly int Slots;
        public readonly ImmutableArray<string> Tags;
        public readonly int UpdatedAt;
        public readonly bool UseSrvName;

        [OutputConstructor]
        private GetGatewayUpstreamResult(
            string algorithm,

            Outputs.GetGatewayUpstreamClientCertificateResult clientCertificate,

            string controlPlaneId,

            int createdAt,

            string hashFallback,

            string hashFallbackHeader,

            string hashFallbackQueryArg,

            string hashFallbackUriCapture,

            string hashOn,

            string hashOnCookie,

            string hashOnCookiePath,

            string hashOnHeader,

            string hashOnQueryArg,

            string hashOnUriCapture,

            Outputs.GetGatewayUpstreamHealthchecksResult healthchecks,

            string hostHeader,

            string id,

            string name,

            int slots,

            ImmutableArray<string> tags,

            int updatedAt,

            bool useSrvName)
        {
            Algorithm = algorithm;
            ClientCertificate = clientCertificate;
            ControlPlaneId = controlPlaneId;
            CreatedAt = createdAt;
            HashFallback = hashFallback;
            HashFallbackHeader = hashFallbackHeader;
            HashFallbackQueryArg = hashFallbackQueryArg;
            HashFallbackUriCapture = hashFallbackUriCapture;
            HashOn = hashOn;
            HashOnCookie = hashOnCookie;
            HashOnCookiePath = hashOnCookiePath;
            HashOnHeader = hashOnHeader;
            HashOnQueryArg = hashOnQueryArg;
            HashOnUriCapture = hashOnUriCapture;
            Healthchecks = healthchecks;
            HostHeader = hostHeader;
            Id = id;
            Name = name;
            Slots = slots;
            Tags = tags;
            UpdatedAt = updatedAt;
            UseSrvName = useSrvName;
        }
    }
}
