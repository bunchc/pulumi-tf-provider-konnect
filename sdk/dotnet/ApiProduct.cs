// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// APIProduct Resource
    /// </summary>
    [KonnectResourceType("konnect:index/apiProduct:ApiProduct")]
    public partial class ApiProduct : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An ISO-8601 timestamp representation of entity creation date.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the API product.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the API product.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of portal identifiers which this API product should be published to
        /// </summary>
        [Output("portalIds")]
        public Output<ImmutableArray<string>> PortalIds { get; private set; } = null!;

        /// <summary>
        /// The list of portals which this API product is published to
        /// </summary>
        [Output("portals")]
        public Output<ImmutableArray<Outputs.ApiProductPortal>> Portals { get; private set; } = null!;

        /// <summary>
        /// An ISO-8601 timestamp representation of entity update date.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The number of product versions attached to this API product
        /// </summary>
        [Output("versionCount")]
        public Output<double> VersionCount { get; private set; } = null!;


        /// <summary>
        /// Create a ApiProduct resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiProduct(string name, ApiProductArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/apiProduct:ApiProduct", name, args ?? new ApiProductArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiProduct(string name, Input<string> id, ApiProductState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/apiProduct:ApiProduct", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiProduct resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiProduct Get(string name, Input<string> id, ApiProductState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiProduct(name, id, state, options);
        }
    }

    public sealed class ApiProductArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the API product.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the API product.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portalIds", required: true)]
        private InputList<string>? _portalIds;

        /// <summary>
        /// The list of portal identifiers which this API product should be published to
        /// </summary>
        public InputList<string> PortalIds
        {
            get => _portalIds ?? (_portalIds = new InputList<string>());
            set => _portalIds = value;
        }

        public ApiProductArgs()
        {
        }
        public static new ApiProductArgs Empty => new ApiProductArgs();
    }

    public sealed class ApiProductState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An ISO-8601 timestamp representation of entity creation date.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the API product.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the API product.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("portalIds")]
        private InputList<string>? _portalIds;

        /// <summary>
        /// The list of portal identifiers which this API product should be published to
        /// </summary>
        public InputList<string> PortalIds
        {
            get => _portalIds ?? (_portalIds = new InputList<string>());
            set => _portalIds = value;
        }

        [Input("portals")]
        private InputList<Inputs.ApiProductPortalGetArgs>? _portals;

        /// <summary>
        /// The list of portals which this API product is published to
        /// </summary>
        public InputList<Inputs.ApiProductPortalGetArgs> Portals
        {
            get => _portals ?? (_portals = new InputList<Inputs.ApiProductPortalGetArgs>());
            set => _portals = value;
        }

        /// <summary>
        /// An ISO-8601 timestamp representation of entity update date.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The number of product versions attached to this API product
        /// </summary>
        [Input("versionCount")]
        public Input<double>? VersionCount { get; set; }

        public ApiProductState()
        {
        }
        public static new ApiProductState Empty => new ApiProductState();
    }
}
