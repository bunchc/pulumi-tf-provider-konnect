// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// Portal Resource
    /// </summary>
    [KonnectResourceType("konnect:index/portal:Portal")]
    public partial class Portal : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Number of applications created in the portal.
        /// </summary>
        [Output("applicationCount")]
        public Output<double> ApplicationCount { get; private set; } = null!;

        /// <summary>
        /// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        /// </summary>
        [Output("autoApproveApplications")]
        public Output<bool> AutoApproveApplications { get; private set; } = null!;

        /// <summary>
        /// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        /// </summary>
        [Output("autoApproveDevelopers")]
        public Output<bool> AutoApproveDevelopers { get; private set; } = null!;

        /// <summary>
        /// An ISO-8601 timestamp representation of entity creation date.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        /// </summary>
        [Output("customClientDomain")]
        public Output<string> CustomClientDomain { get; private set; } = null!;

        /// <summary>
        /// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        /// </summary>
        [Output("customDomain")]
        public Output<string> CustomDomain { get; private set; } = null!;

        /// <summary>
        /// Default strategy ID applied on applications for the portal
        /// </summary>
        [Output("defaultApplicationAuthStrategyId")]
        public Output<string> DefaultApplicationAuthStrategyId { get; private set; } = null!;

        /// <summary>
        /// The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
        /// `custom_domain``.
        /// </summary>
        [Output("defaultDomain")]
        public Output<string> DefaultDomain { get; private set; } = null!;

        /// <summary>
        /// The description of the portal.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Number of developers using the portal.
        /// </summary>
        [Output("developerCount")]
        public Output<double> DeveloperCount { get; private set; } = null!;

        /// <summary>
        /// The display name of the portal. This value will be the portal's `name` in Portal API.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        /// </summary>
        [Output("force")]
        public Output<string> Force { get; private set; } = null!;

        /// <summary>
        /// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        /// </summary>
        [Output("isPublic")]
        public Output<bool> IsPublic { get; private set; } = null!;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the portal, used to distinguish it from other portals. Name must be unique.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of api products published to the portal
        /// </summary>
        [Output("publishedProductCount")]
        public Output<double> PublishedProductCount { get; private set; } = null!;

        /// <summary>
        /// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
        /// for products until unless assigned to teams with access to view and consume specific products.
        /// </summary>
        [Output("rbacEnabled")]
        public Output<bool> RbacEnabled { get; private set; } = null!;

        /// <summary>
        /// An ISO-8601 timestamp representation of entity update date.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a Portal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Portal(string name, PortalArgs? args = null, CustomResourceOptions? options = null)
            : base("konnect:index/portal:Portal", name, args ?? new PortalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Portal(string name, Input<string> id, PortalState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/portal:Portal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Portal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Portal Get(string name, Input<string> id, PortalState? state = null, CustomResourceOptions? options = null)
        {
            return new Portal(name, id, state, options);
        }
    }

    public sealed class PortalArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        /// </summary>
        [Input("autoApproveApplications")]
        public Input<bool>? AutoApproveApplications { get; set; }

        /// <summary>
        /// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        /// </summary>
        [Input("autoApproveDevelopers")]
        public Input<bool>? AutoApproveDevelopers { get; set; }

        /// <summary>
        /// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        /// </summary>
        [Input("customClientDomain")]
        public Input<string>? CustomClientDomain { get; set; }

        /// <summary>
        /// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Default strategy ID applied on applications for the portal
        /// </summary>
        [Input("defaultApplicationAuthStrategyId")]
        public Input<string>? DefaultApplicationAuthStrategyId { get; set; }

        /// <summary>
        /// The description of the portal.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the portal. This value will be the portal's `name` in Portal API.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        /// </summary>
        [Input("force")]
        public Input<string>? Force { get; set; }

        /// <summary>
        /// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        /// </summary>
        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the portal, used to distinguish it from other portals. Name must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
        /// for products until unless assigned to teams with access to view and consume specific products.
        /// </summary>
        [Input("rbacEnabled")]
        public Input<bool>? RbacEnabled { get; set; }

        public PortalArgs()
        {
        }
        public static new PortalArgs Empty => new PortalArgs();
    }

    public sealed class PortalState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Number of applications created in the portal.
        /// </summary>
        [Input("applicationCount")]
        public Input<double>? ApplicationCount { get; set; }

        /// <summary>
        /// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
        /// </summary>
        [Input("autoApproveApplications")]
        public Input<bool>? AutoApproveApplications { get; set; }

        /// <summary>
        /// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
        /// </summary>
        [Input("autoApproveDevelopers")]
        public Input<bool>? AutoApproveDevelopers { get; set; }

        /// <summary>
        /// An ISO-8601 timestamp representation of entity creation date.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `custom_domain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
        /// </summary>
        [Input("customClientDomain")]
        public Input<string>? CustomClientDomain { get; set; }

        /// <summary>
        /// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
        /// </summary>
        [Input("customDomain")]
        public Input<string>? CustomDomain { get; set; }

        /// <summary>
        /// Default strategy ID applied on applications for the portal
        /// </summary>
        [Input("defaultApplicationAuthStrategyId")]
        public Input<string>? DefaultApplicationAuthStrategyId { get; set; }

        /// <summary>
        /// The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
        /// `custom_domain``.
        /// </summary>
        [Input("defaultDomain")]
        public Input<string>? DefaultDomain { get; set; }

        /// <summary>
        /// The description of the portal.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Number of developers using the portal.
        /// </summary>
        [Input("developerCount")]
        public Input<double>? DeveloperCount { get; set; }

        /// <summary>
        /// The display name of the portal. This value will be the portal's `name` in Portal API.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
        /// </summary>
        [Input("force")]
        public Input<string>? Force { get; set; }

        /// <summary>
        /// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
        /// </summary>
        [Input("isPublic")]
        public Input<bool>? IsPublic { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the portal, used to distinguish it from other portals. Name must be unique.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of api products published to the portal
        /// </summary>
        [Input("publishedProductCount")]
        public Input<double>? PublishedProductCount { get; set; }

        /// <summary>
        /// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
        /// for products until unless assigned to teams with access to view and consume specific products.
        /// </summary>
        [Input("rbacEnabled")]
        public Input<bool>? RbacEnabled { get; set; }

        /// <summary>
        /// An ISO-8601 timestamp representation of entity update date.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public PortalState()
        {
        }
        public static new PortalState Empty => new PortalState();
    }
}
