// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// CloudGatewayConfiguration Resource
    /// </summary>
    [KonnectResourceType("konnect:index/cloudGatewayConfiguration:CloudGatewayConfiguration")]
    public partial class CloudGatewayConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        /// </summary>
        [Output("apiAccess")]
        public Output<string> ApiAccess { get; private set; } = null!;

        /// <summary>
        /// Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        /// </summary>
        [Output("controlPlaneGeo")]
        public Output<string> ControlPlaneGeo { get; private set; } = null!;

        [Output("controlPlaneId")]
        public Output<string> ControlPlaneId { get; private set; } = null!;

        /// <summary>
        /// An RFC-3339 timestamp representation of configuration creation date.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Object that describes where data-planes will be deployed to, along with how many instances.
        /// </summary>
        [Output("dataplaneGroupConfigs")]
        public Output<ImmutableArray<Outputs.CloudGatewayConfigurationDataplaneGroupConfig>> DataplaneGroupConfigs { get; private set; } = null!;

        /// <summary>
        /// List of data-plane groups that describe where to deploy instances, along with how many instances.
        /// </summary>
        [Output("dataplaneGroups")]
        public Output<ImmutableArray<Outputs.CloudGatewayConfigurationDataplaneGroup>> DataplaneGroups { get; private set; } = null!;

        /// <summary>
        /// Positive, monotonically increasing version integer, to serialize configuration changes.
        /// </summary>
        [Output("entityVersion")]
        public Output<double> EntityVersion { get; private set; } = null!;

        /// <summary>
        /// An RFC-3339 timestamp representation of configuration update date.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// Supported gateway version.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CloudGatewayConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudGatewayConfiguration(string name, CloudGatewayConfigurationArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/cloudGatewayConfiguration:CloudGatewayConfiguration", name, args ?? new CloudGatewayConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudGatewayConfiguration(string name, Input<string> id, CloudGatewayConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/cloudGatewayConfiguration:CloudGatewayConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudGatewayConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudGatewayConfiguration Get(string name, Input<string> id, CloudGatewayConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudGatewayConfiguration(name, id, state, options);
        }
    }

    public sealed class CloudGatewayConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        /// </summary>
        [Input("apiAccess")]
        public Input<string>? ApiAccess { get; set; }

        /// <summary>
        /// Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        /// </summary>
        [Input("controlPlaneGeo", required: true)]
        public Input<string> ControlPlaneGeo { get; set; } = null!;

        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        [Input("dataplaneGroups", required: true)]
        private InputList<Inputs.CloudGatewayConfigurationDataplaneGroupArgs>? _dataplaneGroups;

        /// <summary>
        /// List of data-plane groups that describe where to deploy instances, along with how many instances.
        /// </summary>
        public InputList<Inputs.CloudGatewayConfigurationDataplaneGroupArgs> DataplaneGroups
        {
            get => _dataplaneGroups ?? (_dataplaneGroups = new InputList<Inputs.CloudGatewayConfigurationDataplaneGroupArgs>());
            set => _dataplaneGroups = value;
        }

        /// <summary>
        /// Supported gateway version.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public CloudGatewayConfigurationArgs()
        {
        }
        public static new CloudGatewayConfigurationArgs Empty => new CloudGatewayConfigurationArgs();
    }

    public sealed class CloudGatewayConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Type of API access data-plane groups will support for a configuration. must be one of ["private", "public", "private+public"]; Default: "private+public"
        /// </summary>
        [Input("apiAccess")]
        public Input<string>? ApiAccess { get; set; }

        /// <summary>
        /// Set of control-plane geos supported for deploying cloud-gateways configurations. must be one of ["us", "eu", "au"]
        /// </summary>
        [Input("controlPlaneGeo")]
        public Input<string>? ControlPlaneGeo { get; set; }

        [Input("controlPlaneId")]
        public Input<string>? ControlPlaneId { get; set; }

        /// <summary>
        /// An RFC-3339 timestamp representation of configuration creation date.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("dataplaneGroupConfigs")]
        private InputList<Inputs.CloudGatewayConfigurationDataplaneGroupConfigGetArgs>? _dataplaneGroupConfigs;

        /// <summary>
        /// Object that describes where data-planes will be deployed to, along with how many instances.
        /// </summary>
        public InputList<Inputs.CloudGatewayConfigurationDataplaneGroupConfigGetArgs> DataplaneGroupConfigs
        {
            get => _dataplaneGroupConfigs ?? (_dataplaneGroupConfigs = new InputList<Inputs.CloudGatewayConfigurationDataplaneGroupConfigGetArgs>());
            set => _dataplaneGroupConfigs = value;
        }

        [Input("dataplaneGroups")]
        private InputList<Inputs.CloudGatewayConfigurationDataplaneGroupGetArgs>? _dataplaneGroups;

        /// <summary>
        /// List of data-plane groups that describe where to deploy instances, along with how many instances.
        /// </summary>
        public InputList<Inputs.CloudGatewayConfigurationDataplaneGroupGetArgs> DataplaneGroups
        {
            get => _dataplaneGroups ?? (_dataplaneGroups = new InputList<Inputs.CloudGatewayConfigurationDataplaneGroupGetArgs>());
            set => _dataplaneGroups = value;
        }

        /// <summary>
        /// Positive, monotonically increasing version integer, to serialize configuration changes.
        /// </summary>
        [Input("entityVersion")]
        public Input<double>? EntityVersion { get; set; }

        /// <summary>
        /// An RFC-3339 timestamp representation of configuration update date.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// Supported gateway version.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public CloudGatewayConfigurationState()
        {
        }
        public static new CloudGatewayConfigurationState Empty => new CloudGatewayConfigurationState();
    }
}
