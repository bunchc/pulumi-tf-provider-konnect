// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    public static class GetGatewayPluginProxyCache
    {
        public static Task<GetGatewayPluginProxyCacheResult> InvokeAsync(GetGatewayPluginProxyCacheArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewayPluginProxyCacheResult>("konnect:index/getGatewayPluginProxyCache:getGatewayPluginProxyCache", args ?? new GetGatewayPluginProxyCacheArgs(), options.WithDefaults());

        public static Output<GetGatewayPluginProxyCacheResult> Invoke(GetGatewayPluginProxyCacheInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayPluginProxyCacheResult>("konnect:index/getGatewayPluginProxyCache:getGatewayPluginProxyCache", args ?? new GetGatewayPluginProxyCacheInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayPluginProxyCacheArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public string ControlPlaneId { get; set; } = null!;

        public GetGatewayPluginProxyCacheArgs()
        {
        }
        public static new GetGatewayPluginProxyCacheArgs Empty => new GetGatewayPluginProxyCacheArgs();
    }

    public sealed class GetGatewayPluginProxyCacheInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        public GetGatewayPluginProxyCacheInvokeArgs()
        {
        }
        public static new GetGatewayPluginProxyCacheInvokeArgs Empty => new GetGatewayPluginProxyCacheInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewayPluginProxyCacheResult
    {
        public readonly Outputs.GetGatewayPluginProxyCacheConfigResult Config;
        public readonly Outputs.GetGatewayPluginProxyCacheConsumerResult Consumer;
        public readonly Outputs.GetGatewayPluginProxyCacheConsumerGroupResult ConsumerGroup;
        public readonly string ControlPlaneId;
        public readonly int CreatedAt;
        public readonly bool Enabled;
        public readonly string Id;
        public readonly string InstanceName;
        public readonly ImmutableArray<string> Protocols;
        public readonly Outputs.GetGatewayPluginProxyCacheRouteResult Route;
        public readonly Outputs.GetGatewayPluginProxyCacheServiceResult Service;
        public readonly ImmutableArray<string> Tags;
        public readonly int UpdatedAt;

        [OutputConstructor]
        private GetGatewayPluginProxyCacheResult(
            Outputs.GetGatewayPluginProxyCacheConfigResult config,

            Outputs.GetGatewayPluginProxyCacheConsumerResult consumer,

            Outputs.GetGatewayPluginProxyCacheConsumerGroupResult consumerGroup,

            string controlPlaneId,

            int createdAt,

            bool enabled,

            string id,

            string instanceName,

            ImmutableArray<string> protocols,

            Outputs.GetGatewayPluginProxyCacheRouteResult route,

            Outputs.GetGatewayPluginProxyCacheServiceResult service,

            ImmutableArray<string> tags,

            int updatedAt)
        {
            Config = config;
            Consumer = consumer;
            ConsumerGroup = consumerGroup;
            ControlPlaneId = controlPlaneId;
            CreatedAt = createdAt;
            Enabled = enabled;
            Id = id;
            InstanceName = instanceName;
            Protocols = protocols;
            Route = route;
            Service = service;
            Tags = tags;
            UpdatedAt = updatedAt;
        }
    }
}
