// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Outputs
{

    [OutputType]
    public sealed class GatewayPluginJwtSignerConfig
    {
        /// <summary>
        /// When the plugin tries to apply an access token to a Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of alues. Valid values are `id`, `username`, and `custom_id`.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenConsumerBies;
        /// <summary>
        /// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (for example, `sub` or `username`) in an access token to Kong consumer entity.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenConsumerClaims;
        /// <summary>
        /// If the introspection endpoint requires client authentication (client being the JWT Signer plugin), you can specify the `Authorization` header's value with this configuration parameter.
        /// </summary>
        public readonly string? AccessTokenIntrospectionAuthorization;
        /// <summary>
        /// This parameter allows you to pass URL encoded request body arguments. For example: `resource=` or `a=1&amp;b=&amp;c`.
        /// </summary>
        public readonly string? AccessTokenIntrospectionBodyArgs;
        /// <summary>
        /// When the plugin tries to do access token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenIntrospectionConsumerBies;
        /// <summary>
        /// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in access token introspection results to the Kong consumer entity.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenIntrospectionConsumerClaims;
        /// <summary>
        /// When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter.
        /// </summary>
        public readonly string? AccessTokenIntrospectionEndpoint;
        /// <summary>
        /// If you need to give `hint` parameter when introspecting an access token, use this parameter to specify the value. By default, the plugin sends `hint=access_token`.
        /// </summary>
        public readonly string? AccessTokenIntrospectionHint;
        /// <summary>
        /// If your introspection endpoint returns an access token in one of the keys (or claims) within the introspection results (`JSON`). If the key cannot be found, the plugin responds with `401 Unauthorized`. Also if the key is found but cannot be decoded as JWT, it also responds with `401 Unauthorized`.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenIntrospectionJwtClaims;
        /// <summary>
        /// Adjusts clock skew between the token issuer introspection results and Kong. The value is added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time in seconds. You can disable access token introspection `expiry` verification altogether with `config.verify_access_token_introspection_expiry`.
        /// </summary>
        public readonly double? AccessTokenIntrospectionLeeway;
        /// <summary>
        /// Specify the claim/property in access token introspection results (`JSON`) to be verified against values of `config.access_token_introspection_scopes_required`. This supports nested claims. For example, with Keycloak you could use `[ "realm_access", "roles" ]`, hich can be given as `realm_access,roles` (form post). If the claim is not found in access token introspection results, and you have specified `config.access_token_introspection_scopes_required`, the plugin responds with `403 Forbidden`.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenIntrospectionScopesClaims;
        /// <summary>
        /// Specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.access_token_introspection_scopes_claim`.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenIntrospectionScopesRequireds;
        /// <summary>
        /// Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on access token introspection.
        /// </summary>
        public readonly double? AccessTokenIntrospectionTimeout;
        /// <summary>
        /// The `iss` claim of a signed or re-signed access token is set to this value. Original `iss` claim of the incoming token (possibly introspected) is stored in `original_iss` claim of the newly signed access token.
        /// </summary>
        public readonly string? AccessTokenIssuer;
        /// <summary>
        /// Specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the access token.
        /// </summary>
        public readonly string? AccessTokenJwksUri;
        /// <summary>
        /// The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
        /// </summary>
        public readonly string? AccessTokenJwksUriClientCertificate;
        /// <summary>
        /// The client password that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_username`
        /// </summary>
        public readonly string? AccessTokenJwksUriClientPassword;
        /// <summary>
        /// The client username that will be used to authenticate Kong if `access_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `access_token_jwks_uri_client_password`
        /// </summary>
        public readonly string? AccessTokenJwksUriClientUsername;
        /// <summary>
        /// Specify the period (in seconds) to auto-rotate the jwks for `access_token_jwks_uri`. The default value 0 means no auto-rotation.
        /// </summary>
        public readonly double? AccessTokenJwksUriRotatePeriod;
        /// <summary>
        /// The name of the keyset containing signing keys.
        /// </summary>
        public readonly string? AccessTokenKeyset;
        /// <summary>
        /// The client certificate that will be used to authenticate Kong if `access_token_keyset` is an https uri that requires mTLS Auth.
        /// </summary>
        public readonly string? AccessTokenKeysetClientCertificate;
        /// <summary>
        /// The client password that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_username`
        /// </summary>
        public readonly string? AccessTokenKeysetClientPassword;
        /// <summary>
        /// The client username that will be used to authenticate Kong if `access_token_keyset` is a uri that requires Basic Auth. Should be configured together with `access_token_keyset_client_password`
        /// </summary>
        public readonly string? AccessTokenKeysetClientUsername;
        /// <summary>
        /// Specify the period (in seconds) to auto-rotate the jwks for `access_token_keyset`. The default value 0 means no auto-rotation.
        /// </summary>
        public readonly double? AccessTokenKeysetRotatePeriod;
        /// <summary>
        /// Adjusts clock skew between the token issuer and Kong. The value is added to the token's `exp` claim before checking token expiry against Kong servers' current time in seconds. You can disable access token `expiry` verification altogether with `config.verify_access_token_expiry`.
        /// </summary>
        public readonly double? AccessTokenLeeway;
        /// <summary>
        /// If an access token is not provided or no `config.access_token_request_header` is specified, the plugin cannot verify the access token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Use this parameter to allow the request to proceed even when there is no token to check. If the token is provided, then this parameter has no effect
        /// </summary>
        public readonly bool? AccessTokenOptional;
        /// <summary>
        /// This parameter tells the name of the header where to look for the access token.
        /// </summary>
        public readonly string? AccessTokenRequestHeader;
        /// <summary>
        /// Specify the claim in an access token to verify against values of `config.access_token_scopes_required`.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenScopesClaims;
        /// <summary>
        /// Specify the required values (or scopes) that are checked by a claim specified by `config.access_token_scopes_claim`.
        /// </summary>
        public readonly ImmutableArray<string> AccessTokenScopesRequireds;
        /// <summary>
        /// When this plugin sets the upstream header as specified with `config.access_token_upstream_header`, re-signs the original access token using the private keys of the JWT Signer plugin. Specify the algorithm that is used to sign the token. The `config.access_token_issuer` specifies which `keyset` is used to sign the new token issued by Kong using the specified signing algorithm. must be one of ["HS256", "HS384", "HS512", "RS256", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512", "EdDSA"]
        /// </summary>
        public readonly string? AccessTokenSigningAlgorithm;
        /// <summary>
        /// Removes the `config.access_token_request_header` from the request after reading its value. With `config.access_token_upstream_header`, you can specify the upstream header where the plugin adds the Kong signed token. If you don't specify a value, such as use `null` or `""` (empty string), the plugin does not even try to sign or re-sign the token.
        /// </summary>
        public readonly string? AccessTokenUpstreamHeader;
        /// <summary>
        /// If you want to add or subtract (using a negative value) expiry time (in seconds) of the original access token, you can specify a value that is added to the original access token's `exp` claim.
        /// </summary>
        public readonly double? AccessTokenUpstreamLeeway;
        /// <summary>
        /// Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AddAccessTokenClaims;
        /// <summary>
        /// Add customized claims if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AddChannelTokenClaims;
        /// <summary>
        /// Add customized claims to both tokens if they are not present yet. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AddClaims;
        /// <summary>
        /// Whether to cache access token introspection results.
        /// </summary>
        public readonly bool? CacheAccessTokenIntrospection;
        /// <summary>
        /// Whether to cache channel token introspection results.
        /// </summary>
        public readonly bool? CacheChannelTokenIntrospection;
        /// <summary>
        /// When the plugin tries to do channel token to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of valid values: `id`, `username`, and `custom_id`.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenConsumerBies;
        /// <summary>
        /// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter. Kong consumers have an `id`, a `username`, and a `custom_id`. If this parameter is enabled but the mapping fails, such as when there's a non-existent Kong consumer, the plugin responds with `403 Forbidden`.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenConsumerClaims;
        /// <summary>
        /// When using `opaque` channel tokens, and you want to turn on channel token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise the plugin will not try introspection, and instead returns `401 Unauthorized` when using opaque channel tokens.
        /// </summary>
        public readonly string? ChannelTokenIntrospectionAuthorization;
        /// <summary>
        /// If you need to pass additional body arguments to introspection endpoint when the plugin introspects the opaque channel token, you can use this config parameter to specify them. You should URL encode the value. For example: `resource=` or `a=1&amp;b=&amp;c`.
        /// </summary>
        public readonly string? ChannelTokenIntrospectionBodyArgs;
        /// <summary>
        /// When the plugin tries to do channel token introspection results to Kong consumer mapping, it tries to find a matching Kong consumer from properties defined using this configuration parameter. The parameter can take an array of values. Valid values are `id`, `username` and `custom_id`.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenIntrospectionConsumerBies;
        /// <summary>
        /// When you set a value for this parameter, the plugin tries to map an arbitrary claim specified with this configuration parameter (such as `sub` or `username`) in channel token introspection results to Kong consumer entity
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenIntrospectionConsumerClaims;
        /// <summary>
        /// When you use `opaque` access tokens and you want to turn on access token introspection, you need to specify the OAuth 2.0 introspection endpoint URI with this configuration parameter. Otherwise, the plugin does not try introspection and returns `401 Unauthorized` instead.
        /// </summary>
        public readonly string? ChannelTokenIntrospectionEndpoint;
        /// <summary>
        /// If you need to give `hint` parameter when introspecting a channel token, you can use this parameter to specify the value of such parameter. By default, a `hint` isn't sent with channel token introspection.
        /// </summary>
        public readonly string? ChannelTokenIntrospectionHint;
        /// <summary>
        /// If your introspection endpoint returns a channel token in one of the keys (or claims) in the introspection results (`JSON`), the plugin can use that value instead of the introspection results when doing expiry verification and signing of the new token issued by Kong.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenIntrospectionJwtClaims;
        /// <summary>
        /// You can use this parameter to adjust clock skew between the token issuer introspection results and Kong. The value will be added to introspection results (`JSON`) `exp` claim/property before checking token expiry against Kong servers current time (in seconds). You can disable channel token introspection `expiry` verification altogether with `config.verify_channel_token_introspection_expiry`.
        /// </summary>
        public readonly double? ChannelTokenIntrospectionLeeway;
        /// <summary>
        /// Use this parameter to specify the claim/property in channel token introspection results (`JSON`) to be verified against values of `config.channel_token_introspection_scopes_required`. This supports nested claims.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenIntrospectionScopesClaims;
        /// <summary>
        /// Use this parameter to specify the required values (or scopes) that are checked by an introspection claim/property specified by `config.channel_token_introspection_scopes_claim`.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenIntrospectionScopesRequireds;
        /// <summary>
        /// Timeout in milliseconds for an introspection request. The plugin tries to introspect twice if the first request fails for some reason. If both requests timeout, then the plugin runs two times the `config.access_token_introspection_timeout` on channel token introspection.
        /// </summary>
        public readonly double? ChannelTokenIntrospectionTimeout;
        /// <summary>
        /// The `iss` claim of the re-signed channel token is set to this value, which is `kong` by default. The original `iss` claim of the incoming token (possibly introspected) is stored in the `original_iss` claim of the newly signed channel token.
        /// </summary>
        public readonly string? ChannelTokenIssuer;
        /// <summary>
        /// If you want to use `config.verify_channel_token_signature`, you must specify the URI where the plugin can fetch the public keys (JWKS) to verify the signature of the channel token. If you don't specify a URI and you pass a JWT token to the plugin, then the plugin responds with `401 Unauthorized`.
        /// </summary>
        public readonly string? ChannelTokenJwksUri;
        /// <summary>
        /// The client certificate that will be used to authenticate Kong if `access_token_jwks_uri` is an https uri that requires mTLS Auth.
        /// </summary>
        public readonly string? ChannelTokenJwksUriClientCertificate;
        /// <summary>
        /// The client password that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_username`
        /// </summary>
        public readonly string? ChannelTokenJwksUriClientPassword;
        /// <summary>
        /// The client username that will be used to authenticate Kong if `channel_token_jwks_uri` is a uri that requires Basic Auth. Should be configured together with `channel_token_jwks_uri_client_password`
        /// </summary>
        public readonly string? ChannelTokenJwksUriClientUsername;
        /// <summary>
        /// Specify the period (in seconds) to auto-rotate the jwks for `channel_token_jwks_uri`. The default value 0 means no auto-rotation.
        /// </summary>
        public readonly double? ChannelTokenJwksUriRotatePeriod;
        /// <summary>
        /// The name of the keyset containing signing keys.
        /// </summary>
        public readonly string? ChannelTokenKeyset;
        /// <summary>
        /// The client certificate that will be used to authenticate Kong if `channel_token_keyset` is an https uri that requires mTLS Auth.
        /// </summary>
        public readonly string? ChannelTokenKeysetClientCertificate;
        /// <summary>
        /// The client password that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_username`
        /// </summary>
        public readonly string? ChannelTokenKeysetClientPassword;
        /// <summary>
        /// The client username that will be used to authenticate Kong if `channel_token_keyset` is a uri that requires Basic Auth. Should be configured together with `channel_token_keyset_client_password`
        /// </summary>
        public readonly string? ChannelTokenKeysetClientUsername;
        /// <summary>
        /// Specify the period (in seconds) to auto-rotate the jwks for `channel_token_keyset`. The default value 0 means no auto-rotation.
        /// </summary>
        public readonly double? ChannelTokenKeysetRotatePeriod;
        /// <summary>
        /// Adjusts clock skew between the token issuer and Kong. The value will be added to token's `exp` claim before checking token expiry against Kong servers current time in seconds. You can disable channel token `expiry` verification altogether with `config.verify_channel_token_expiry`.
        /// </summary>
        public readonly double? ChannelTokenLeeway;
        /// <summary>
        /// If a channel token is not provided or no `config.channel_token_request_header` is specified, the plugin cannot verify the channel token. In that case, the plugin normally responds with `401 Unauthorized` (client didn't send a token) or `500 Unexpected` (a configuration error). Enable this parameter to allow the request to proceed even when there is no channel token to check. If the channel token is provided, then this parameter has no effect
        /// </summary>
        public readonly bool? ChannelTokenOptional;
        /// <summary>
        /// This parameter tells the name of the header where to look for the channel token. If you don't want to do anything with the channel token, then you can set this to `null` or `""` (empty string).
        /// </summary>
        public readonly string? ChannelTokenRequestHeader;
        /// <summary>
        /// Specify the claim in a channel token to verify against values of `config.channel_token_scopes_required`. This supports nested claims.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenScopesClaims;
        /// <summary>
        /// Specify the required values (or scopes) that are checked by a claim specified by `config.channel_token_scopes_claim`.
        /// </summary>
        public readonly ImmutableArray<string> ChannelTokenScopesRequireds;
        /// <summary>
        /// When this plugin sets the upstream header as specified with `config.channel_token_upstream_header`, it also re-signs the original channel token using private keys of this plugin. Specify the algorithm that is used to sign the token. must be one of ["HS256", "HS384", "HS512", "RS256", "RS512", "ES256", "ES384", "ES512", "PS256", "PS384", "PS512", "EdDSA"]
        /// </summary>
        public readonly string? ChannelTokenSigningAlgorithm;
        /// <summary>
        /// This plugin removes the `config.channel_token_request_header` from the request after reading its value.
        /// </summary>
        public readonly string? ChannelTokenUpstreamHeader;
        /// <summary>
        /// If you want to add or perhaps subtract (using negative value) expiry time of the original channel token, you can specify a value that is added to the original channel token's `exp` claim.
        /// </summary>
        public readonly double? ChannelTokenUpstreamLeeway;
        /// <summary>
        /// If you don't want to support opaque access tokens, change this configuration parameter to `false` to disable introspection.
        /// </summary>
        public readonly bool? EnableAccessTokenIntrospection;
        /// <summary>
        /// If you don't want to support opaque channel tokens, disable introspection by changing this configuration parameter to `false`.
        /// </summary>
        public readonly bool? EnableChannelTokenIntrospection;
        /// <summary>
        /// Tokens signed with HMAC algorithms such as `HS256`, `HS384`, or `HS512` are not accepted by default. If you need to accept such tokens for verification, enable this setting.
        /// </summary>
        public readonly bool? EnableHsSignatures;
        /// <summary>
        /// Writes log entries with some added information using `ngx.CRIT` (CRITICAL) level.
        /// </summary>
        public readonly bool? EnableInstrumentation;
        /// <summary>
        /// The HTTP header name used to store the original access token.
        /// </summary>
        public readonly string? OriginalAccessTokenUpstreamHeader;
        /// <summary>
        /// The HTTP header name used to store the original channel token.
        /// </summary>
        public readonly string? OriginalChannelTokenUpstreamHeader;
        /// <summary>
        /// When authentication or authorization fails, or there is an unexpected error, the plugin sends an `WWW-Authenticate` header with the `realm` attribute value.
        /// </summary>
        public readonly string? Realm;
        /// <summary>
        /// remove claims. It should be an array, and each element is a claim key string.
        /// </summary>
        public readonly ImmutableArray<string> RemoveAccessTokenClaims;
        /// <summary>
        /// remove claims. It should be an array, and each element is a claim key string.
        /// </summary>
        public readonly ImmutableArray<string> RemoveChannelTokenClaims;
        /// <summary>
        /// Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? SetAccessTokenClaims;
        /// <summary>
        /// Set customized claims. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? SetChannelTokenClaims;
        /// <summary>
        /// Set customized claims to both tokens. If a claim is already present, it will be overwritten. Value can be a regular or JSON string; if JSON, decoded data is used as the claim's value.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? SetClaims;
        /// <summary>
        /// Use this parameter to enable and disable further checks on a payload before the new token is signed. If you set this to `true`, the expiry or scopes are not checked on a payload.
        /// </summary>
        public readonly bool? TrustAccessTokenIntrospection;
        /// <summary>
        /// Providing an opaque channel token for plugin introspection, and verifying expiry and scopes on introspection results may make further payload checks unnecessary before the plugin signs a new token. This also applies when using a JWT token with introspection JSON as per config.channel*token*introspection*jwt*claim. Use this parameter to manage additional payload checks before signing a new token. With true (default), payload's expiry or scopes aren't checked.
        /// </summary>
        public readonly bool? TrustChannelTokenIntrospection;
        /// <summary>
        /// Quickly turn access token expiry verification off and on as needed.
        /// </summary>
        public readonly bool? VerifyAccessTokenExpiry;
        /// <summary>
        /// Quickly turn access token introspection expiry verification off and on as needed.
        /// </summary>
        public readonly bool? VerifyAccessTokenIntrospectionExpiry;
        /// <summary>
        /// Quickly turn off and on the access token introspection scopes verification, specified with `config.access_token_introspection_scopes_required`.
        /// </summary>
        public readonly bool? VerifyAccessTokenIntrospectionScopes;
        /// <summary>
        /// Quickly turn off and on the access token required scopes verification, specified with `config.access_token_scopes_required`.
        /// </summary>
        public readonly bool? VerifyAccessTokenScopes;
        /// <summary>
        /// Quickly turn access token signature verification off and on as needed.
        /// </summary>
        public readonly bool? VerifyAccessTokenSignature;
        public readonly bool? VerifyChannelTokenExpiry;
        /// <summary>
        /// Quickly turn on/off the channel token introspection expiry verification.
        /// </summary>
        public readonly bool? VerifyChannelTokenIntrospectionExpiry;
        /// <summary>
        /// Quickly turn on/off the channel token introspection scopes verification specified with `config.channel_token_introspection_scopes_required`.
        /// </summary>
        public readonly bool? VerifyChannelTokenIntrospectionScopes;
        /// <summary>
        /// Quickly turn on/off the channel token required scopes verification specified with `config.channel_token_scopes_required`.
        /// </summary>
        public readonly bool? VerifyChannelTokenScopes;
        /// <summary>
        /// Quickly turn on/off the channel token signature verification.
        /// </summary>
        public readonly bool? VerifyChannelTokenSignature;

        [OutputConstructor]
        private GatewayPluginJwtSignerConfig(
            ImmutableArray<string> accessTokenConsumerBies,

            ImmutableArray<string> accessTokenConsumerClaims,

            string? accessTokenIntrospectionAuthorization,

            string? accessTokenIntrospectionBodyArgs,

            ImmutableArray<string> accessTokenIntrospectionConsumerBies,

            ImmutableArray<string> accessTokenIntrospectionConsumerClaims,

            string? accessTokenIntrospectionEndpoint,

            string? accessTokenIntrospectionHint,

            ImmutableArray<string> accessTokenIntrospectionJwtClaims,

            double? accessTokenIntrospectionLeeway,

            ImmutableArray<string> accessTokenIntrospectionScopesClaims,

            ImmutableArray<string> accessTokenIntrospectionScopesRequireds,

            double? accessTokenIntrospectionTimeout,

            string? accessTokenIssuer,

            string? accessTokenJwksUri,

            string? accessTokenJwksUriClientCertificate,

            string? accessTokenJwksUriClientPassword,

            string? accessTokenJwksUriClientUsername,

            double? accessTokenJwksUriRotatePeriod,

            string? accessTokenKeyset,

            string? accessTokenKeysetClientCertificate,

            string? accessTokenKeysetClientPassword,

            string? accessTokenKeysetClientUsername,

            double? accessTokenKeysetRotatePeriod,

            double? accessTokenLeeway,

            bool? accessTokenOptional,

            string? accessTokenRequestHeader,

            ImmutableArray<string> accessTokenScopesClaims,

            ImmutableArray<string> accessTokenScopesRequireds,

            string? accessTokenSigningAlgorithm,

            string? accessTokenUpstreamHeader,

            double? accessTokenUpstreamLeeway,

            ImmutableDictionary<string, string>? addAccessTokenClaims,

            ImmutableDictionary<string, string>? addChannelTokenClaims,

            ImmutableDictionary<string, string>? addClaims,

            bool? cacheAccessTokenIntrospection,

            bool? cacheChannelTokenIntrospection,

            ImmutableArray<string> channelTokenConsumerBies,

            ImmutableArray<string> channelTokenConsumerClaims,

            string? channelTokenIntrospectionAuthorization,

            string? channelTokenIntrospectionBodyArgs,

            ImmutableArray<string> channelTokenIntrospectionConsumerBies,

            ImmutableArray<string> channelTokenIntrospectionConsumerClaims,

            string? channelTokenIntrospectionEndpoint,

            string? channelTokenIntrospectionHint,

            ImmutableArray<string> channelTokenIntrospectionJwtClaims,

            double? channelTokenIntrospectionLeeway,

            ImmutableArray<string> channelTokenIntrospectionScopesClaims,

            ImmutableArray<string> channelTokenIntrospectionScopesRequireds,

            double? channelTokenIntrospectionTimeout,

            string? channelTokenIssuer,

            string? channelTokenJwksUri,

            string? channelTokenJwksUriClientCertificate,

            string? channelTokenJwksUriClientPassword,

            string? channelTokenJwksUriClientUsername,

            double? channelTokenJwksUriRotatePeriod,

            string? channelTokenKeyset,

            string? channelTokenKeysetClientCertificate,

            string? channelTokenKeysetClientPassword,

            string? channelTokenKeysetClientUsername,

            double? channelTokenKeysetRotatePeriod,

            double? channelTokenLeeway,

            bool? channelTokenOptional,

            string? channelTokenRequestHeader,

            ImmutableArray<string> channelTokenScopesClaims,

            ImmutableArray<string> channelTokenScopesRequireds,

            string? channelTokenSigningAlgorithm,

            string? channelTokenUpstreamHeader,

            double? channelTokenUpstreamLeeway,

            bool? enableAccessTokenIntrospection,

            bool? enableChannelTokenIntrospection,

            bool? enableHsSignatures,

            bool? enableInstrumentation,

            string? originalAccessTokenUpstreamHeader,

            string? originalChannelTokenUpstreamHeader,

            string? realm,

            ImmutableArray<string> removeAccessTokenClaims,

            ImmutableArray<string> removeChannelTokenClaims,

            ImmutableDictionary<string, string>? setAccessTokenClaims,

            ImmutableDictionary<string, string>? setChannelTokenClaims,

            ImmutableDictionary<string, string>? setClaims,

            bool? trustAccessTokenIntrospection,

            bool? trustChannelTokenIntrospection,

            bool? verifyAccessTokenExpiry,

            bool? verifyAccessTokenIntrospectionExpiry,

            bool? verifyAccessTokenIntrospectionScopes,

            bool? verifyAccessTokenScopes,

            bool? verifyAccessTokenSignature,

            bool? verifyChannelTokenExpiry,

            bool? verifyChannelTokenIntrospectionExpiry,

            bool? verifyChannelTokenIntrospectionScopes,

            bool? verifyChannelTokenScopes,

            bool? verifyChannelTokenSignature)
        {
            AccessTokenConsumerBies = accessTokenConsumerBies;
            AccessTokenConsumerClaims = accessTokenConsumerClaims;
            AccessTokenIntrospectionAuthorization = accessTokenIntrospectionAuthorization;
            AccessTokenIntrospectionBodyArgs = accessTokenIntrospectionBodyArgs;
            AccessTokenIntrospectionConsumerBies = accessTokenIntrospectionConsumerBies;
            AccessTokenIntrospectionConsumerClaims = accessTokenIntrospectionConsumerClaims;
            AccessTokenIntrospectionEndpoint = accessTokenIntrospectionEndpoint;
            AccessTokenIntrospectionHint = accessTokenIntrospectionHint;
            AccessTokenIntrospectionJwtClaims = accessTokenIntrospectionJwtClaims;
            AccessTokenIntrospectionLeeway = accessTokenIntrospectionLeeway;
            AccessTokenIntrospectionScopesClaims = accessTokenIntrospectionScopesClaims;
            AccessTokenIntrospectionScopesRequireds = accessTokenIntrospectionScopesRequireds;
            AccessTokenIntrospectionTimeout = accessTokenIntrospectionTimeout;
            AccessTokenIssuer = accessTokenIssuer;
            AccessTokenJwksUri = accessTokenJwksUri;
            AccessTokenJwksUriClientCertificate = accessTokenJwksUriClientCertificate;
            AccessTokenJwksUriClientPassword = accessTokenJwksUriClientPassword;
            AccessTokenJwksUriClientUsername = accessTokenJwksUriClientUsername;
            AccessTokenJwksUriRotatePeriod = accessTokenJwksUriRotatePeriod;
            AccessTokenKeyset = accessTokenKeyset;
            AccessTokenKeysetClientCertificate = accessTokenKeysetClientCertificate;
            AccessTokenKeysetClientPassword = accessTokenKeysetClientPassword;
            AccessTokenKeysetClientUsername = accessTokenKeysetClientUsername;
            AccessTokenKeysetRotatePeriod = accessTokenKeysetRotatePeriod;
            AccessTokenLeeway = accessTokenLeeway;
            AccessTokenOptional = accessTokenOptional;
            AccessTokenRequestHeader = accessTokenRequestHeader;
            AccessTokenScopesClaims = accessTokenScopesClaims;
            AccessTokenScopesRequireds = accessTokenScopesRequireds;
            AccessTokenSigningAlgorithm = accessTokenSigningAlgorithm;
            AccessTokenUpstreamHeader = accessTokenUpstreamHeader;
            AccessTokenUpstreamLeeway = accessTokenUpstreamLeeway;
            AddAccessTokenClaims = addAccessTokenClaims;
            AddChannelTokenClaims = addChannelTokenClaims;
            AddClaims = addClaims;
            CacheAccessTokenIntrospection = cacheAccessTokenIntrospection;
            CacheChannelTokenIntrospection = cacheChannelTokenIntrospection;
            ChannelTokenConsumerBies = channelTokenConsumerBies;
            ChannelTokenConsumerClaims = channelTokenConsumerClaims;
            ChannelTokenIntrospectionAuthorization = channelTokenIntrospectionAuthorization;
            ChannelTokenIntrospectionBodyArgs = channelTokenIntrospectionBodyArgs;
            ChannelTokenIntrospectionConsumerBies = channelTokenIntrospectionConsumerBies;
            ChannelTokenIntrospectionConsumerClaims = channelTokenIntrospectionConsumerClaims;
            ChannelTokenIntrospectionEndpoint = channelTokenIntrospectionEndpoint;
            ChannelTokenIntrospectionHint = channelTokenIntrospectionHint;
            ChannelTokenIntrospectionJwtClaims = channelTokenIntrospectionJwtClaims;
            ChannelTokenIntrospectionLeeway = channelTokenIntrospectionLeeway;
            ChannelTokenIntrospectionScopesClaims = channelTokenIntrospectionScopesClaims;
            ChannelTokenIntrospectionScopesRequireds = channelTokenIntrospectionScopesRequireds;
            ChannelTokenIntrospectionTimeout = channelTokenIntrospectionTimeout;
            ChannelTokenIssuer = channelTokenIssuer;
            ChannelTokenJwksUri = channelTokenJwksUri;
            ChannelTokenJwksUriClientCertificate = channelTokenJwksUriClientCertificate;
            ChannelTokenJwksUriClientPassword = channelTokenJwksUriClientPassword;
            ChannelTokenJwksUriClientUsername = channelTokenJwksUriClientUsername;
            ChannelTokenJwksUriRotatePeriod = channelTokenJwksUriRotatePeriod;
            ChannelTokenKeyset = channelTokenKeyset;
            ChannelTokenKeysetClientCertificate = channelTokenKeysetClientCertificate;
            ChannelTokenKeysetClientPassword = channelTokenKeysetClientPassword;
            ChannelTokenKeysetClientUsername = channelTokenKeysetClientUsername;
            ChannelTokenKeysetRotatePeriod = channelTokenKeysetRotatePeriod;
            ChannelTokenLeeway = channelTokenLeeway;
            ChannelTokenOptional = channelTokenOptional;
            ChannelTokenRequestHeader = channelTokenRequestHeader;
            ChannelTokenScopesClaims = channelTokenScopesClaims;
            ChannelTokenScopesRequireds = channelTokenScopesRequireds;
            ChannelTokenSigningAlgorithm = channelTokenSigningAlgorithm;
            ChannelTokenUpstreamHeader = channelTokenUpstreamHeader;
            ChannelTokenUpstreamLeeway = channelTokenUpstreamLeeway;
            EnableAccessTokenIntrospection = enableAccessTokenIntrospection;
            EnableChannelTokenIntrospection = enableChannelTokenIntrospection;
            EnableHsSignatures = enableHsSignatures;
            EnableInstrumentation = enableInstrumentation;
            OriginalAccessTokenUpstreamHeader = originalAccessTokenUpstreamHeader;
            OriginalChannelTokenUpstreamHeader = originalChannelTokenUpstreamHeader;
            Realm = realm;
            RemoveAccessTokenClaims = removeAccessTokenClaims;
            RemoveChannelTokenClaims = removeChannelTokenClaims;
            SetAccessTokenClaims = setAccessTokenClaims;
            SetChannelTokenClaims = setChannelTokenClaims;
            SetClaims = setClaims;
            TrustAccessTokenIntrospection = trustAccessTokenIntrospection;
            TrustChannelTokenIntrospection = trustChannelTokenIntrospection;
            VerifyAccessTokenExpiry = verifyAccessTokenExpiry;
            VerifyAccessTokenIntrospectionExpiry = verifyAccessTokenIntrospectionExpiry;
            VerifyAccessTokenIntrospectionScopes = verifyAccessTokenIntrospectionScopes;
            VerifyAccessTokenScopes = verifyAccessTokenScopes;
            VerifyAccessTokenSignature = verifyAccessTokenSignature;
            VerifyChannelTokenExpiry = verifyChannelTokenExpiry;
            VerifyChannelTokenIntrospectionExpiry = verifyChannelTokenIntrospectionExpiry;
            VerifyChannelTokenIntrospectionScopes = verifyChannelTokenIntrospectionScopes;
            VerifyChannelTokenScopes = verifyChannelTokenScopes;
            VerifyChannelTokenSignature = verifyChannelTokenSignature;
        }
    }
}
