// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Outputs
{

    [OutputType]
    public sealed class GatewayPluginStatsdConfig
    {
        /// <summary>
        /// List of status code ranges that are allowed to be logged in metrics.
        /// </summary>
        public readonly ImmutableArray<string> AllowStatusCodes;
        /// <summary>
        /// must be one of ["consumer*id", "custom*id", "username"]
        /// </summary>
        public readonly string? ConsumerIdentifierDefault;
        public readonly double? FlushTimeout;
        /// <summary>
        /// The IP address or hostname of StatsD server to send data to.
        /// </summary>
        public readonly string? Host;
        public readonly bool? HostnameInPrefix;
        /// <summary>
        /// List of metrics to be logged.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayPluginStatsdConfigMetric> Metrics;
        /// <summary>
        /// The port of StatsD server to send data to.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// String to prefix to each metric's name.
        /// </summary>
        public readonly string? Prefix;
        public readonly Outputs.GatewayPluginStatsdConfigQueue? Queue;
        public readonly int? QueueSize;
        public readonly int? RetryCount;
        /// <summary>
        /// must be one of ["service*id", "service*name", "service*host", "service*name*or*host"]
        /// </summary>
        public readonly string? ServiceIdentifierDefault;
        /// <summary>
        /// must be one of ["dogstatsd", "influxdb", "librato", "signalfx"]
        /// </summary>
        public readonly string? TagStyle;
        public readonly double? UdpPacketSize;
        public readonly bool? UseTcp;
        /// <summary>
        /// must be one of ["workspace*id", "workspace*name"]
        /// </summary>
        public readonly string? WorkspaceIdentifierDefault;

        [OutputConstructor]
        private GatewayPluginStatsdConfig(
            ImmutableArray<string> allowStatusCodes,

            string? consumerIdentifierDefault,

            double? flushTimeout,

            string? host,

            bool? hostnameInPrefix,

            ImmutableArray<Outputs.GatewayPluginStatsdConfigMetric> metrics,

            int? port,

            string? prefix,

            Outputs.GatewayPluginStatsdConfigQueue? queue,

            int? queueSize,

            int? retryCount,

            string? serviceIdentifierDefault,

            string? tagStyle,

            double? udpPacketSize,

            bool? useTcp,

            string? workspaceIdentifierDefault)
        {
            AllowStatusCodes = allowStatusCodes;
            ConsumerIdentifierDefault = consumerIdentifierDefault;
            FlushTimeout = flushTimeout;
            Host = host;
            HostnameInPrefix = hostnameInPrefix;
            Metrics = metrics;
            Port = port;
            Prefix = prefix;
            Queue = queue;
            QueueSize = queueSize;
            RetryCount = retryCount;
            ServiceIdentifierDefault = serviceIdentifierDefault;
            TagStyle = tagStyle;
            UdpPacketSize = udpPacketSize;
            UseTcp = useTcp;
            WorkspaceIdentifierDefault = workspaceIdentifierDefault;
        }
    }
}
