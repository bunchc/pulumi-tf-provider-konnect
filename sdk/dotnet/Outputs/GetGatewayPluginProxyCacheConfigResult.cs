// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Outputs
{

    [OutputType]
    public sealed class GetGatewayPluginProxyCacheConfigResult
    {
        /// <summary>
        /// When enabled, respect the Cache-Control behaviors defined in RFC7234.
        /// </summary>
        public readonly bool CacheControl;
        /// <summary>
        /// TTL, in seconds, of cache entities.
        /// </summary>
        public readonly int CacheTtl;
        /// <summary>
        /// Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value.
        /// </summary>
        public readonly ImmutableArray<string> ContentTypes;
        public readonly bool IgnoreUriCase;
        public readonly Outputs.GetGatewayPluginProxyCacheConfigMemoryResult Memory;
        /// <summary>
        /// Downstream request methods considered cacheable.
        /// </summary>
        public readonly ImmutableArray<string> RequestMethods;
        /// <summary>
        /// Upstream response status code considered cacheable.
        /// </summary>
        public readonly ImmutableArray<int> ResponseCodes;
        /// <summary>
        /// Caching related diagnostic headers that should be included in cached responses
        /// </summary>
        public readonly Outputs.GetGatewayPluginProxyCacheConfigResponseHeadersResult ResponseHeaders;
        /// <summary>
        /// Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors.
        /// </summary>
        public readonly int StorageTtl;
        /// <summary>
        /// The backing data store in which to hold cache entities. must be one of ["memory"]
        /// </summary>
        public readonly string Strategy;
        /// <summary>
        /// Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.
        /// </summary>
        public readonly ImmutableArray<string> VaryHeaders;
        /// <summary>
        /// Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.
        /// </summary>
        public readonly ImmutableArray<string> VaryQueryParams;

        [OutputConstructor]
        private GetGatewayPluginProxyCacheConfigResult(
            bool cacheControl,

            int cacheTtl,

            ImmutableArray<string> contentTypes,

            bool ignoreUriCase,

            Outputs.GetGatewayPluginProxyCacheConfigMemoryResult memory,

            ImmutableArray<string> requestMethods,

            ImmutableArray<int> responseCodes,

            Outputs.GetGatewayPluginProxyCacheConfigResponseHeadersResult responseHeaders,

            int storageTtl,

            string strategy,

            ImmutableArray<string> varyHeaders,

            ImmutableArray<string> varyQueryParams)
        {
            CacheControl = cacheControl;
            CacheTtl = cacheTtl;
            ContentTypes = contentTypes;
            IgnoreUriCase = ignoreUriCase;
            Memory = memory;
            RequestMethods = requestMethods;
            ResponseCodes = responseCodes;
            ResponseHeaders = responseHeaders;
            StorageTtl = storageTtl;
            Strategy = strategy;
            VaryHeaders = varyHeaders;
            VaryQueryParams = varyQueryParams;
        }
    }
}
