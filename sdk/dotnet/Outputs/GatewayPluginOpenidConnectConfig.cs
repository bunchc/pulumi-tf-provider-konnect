// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Outputs
{

    [OutputType]
    public sealed class GatewayPluginOpenidConnectConfig
    {
        /// <summary>
        /// An optional string (consumer UUID or username) value that functions as an “anonymous” consumer if authentication fails. If empty (default null), requests that fail authentication will return a `4xx` HTTP status code. This value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.
        /// </summary>
        public readonly string? Anonymous;
        /// <summary>
        /// The claim that contains the audience. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> AudienceClaims;
        /// <summary>
        /// The audiences (`audience_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        /// </summary>
        public readonly ImmutableArray<string> AudienceRequireds;
        /// <summary>
        /// The audience passed to the authorization endpoint.
        /// </summary>
        public readonly ImmutableArray<string> Audiences;
        /// <summary>
        /// Types of credentials/grants to enable.
        /// </summary>
        public readonly ImmutableArray<string> AuthMethods;
        /// <summary>
        /// The claim that contains authenticated groups. This setting can be used together with ACL plugin, but it also enables IdP managed groups with other applications and integrations. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> AuthenticatedGroupsClaims;
        /// <summary>
        /// The authorization cookie Domain flag.
        /// </summary>
        public readonly string? AuthorizationCookieDomain;
        /// <summary>
        /// Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        /// </summary>
        public readonly bool? AuthorizationCookieHttpOnly;
        /// <summary>
        /// The authorization cookie name.
        /// </summary>
        public readonly string? AuthorizationCookieName;
        /// <summary>
        /// The authorization cookie Path flag.
        /// </summary>
        public readonly string? AuthorizationCookiePath;
        /// <summary>
        /// Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        /// </summary>
        public readonly string? AuthorizationCookieSameSite;
        /// <summary>
        /// Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        /// </summary>
        public readonly bool? AuthorizationCookieSecure;
        /// <summary>
        /// The authorization endpoint. If set it overrides the value in `authorization_endpoint` returned by the discovery endpoint.
        /// </summary>
        public readonly string? AuthorizationEndpoint;
        /// <summary>
        /// Extra query arguments passed from the client to the authorization endpoint.
        /// </summary>
        public readonly ImmutableArray<string> AuthorizationQueryArgsClients;
        /// <summary>
        /// Extra query argument names passed to the authorization endpoint.
        /// </summary>
        public readonly ImmutableArray<string> AuthorizationQueryArgsNames;
        /// <summary>
        /// Extra query argument values passed to the authorization endpoint.
        /// </summary>
        public readonly ImmutableArray<string> AuthorizationQueryArgsValues;
        /// <summary>
        /// Specifies how long the session used for the authorization code flow can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.
        /// </summary>
        public readonly double? AuthorizationRollingTimeout;
        /// <summary>
        /// The name of the cookie in which the bearer token is passed.
        /// </summary>
        public readonly string? BearerTokenCookieName;
        /// <summary>
        /// Where to look for the bearer token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body - `cookie`: search the HTTP request cookies specified with `config.bearer_token_cookie_name`.
        /// </summary>
        public readonly ImmutableArray<string> BearerTokenParamTypes;
        /// <summary>
        /// If `consumer_by` is set to `username`, specify whether `username` can match consumers case-insensitively.
        /// </summary>
        public readonly bool? ByUsernameIgnoreCase;
        /// <summary>
        /// Cache the introspection endpoint requests.
        /// </summary>
        public readonly bool? CacheIntrospection;
        /// <summary>
        /// Cache the token exchange endpoint requests.
        /// </summary>
        public readonly bool? CacheTokenExchange;
        /// <summary>
        /// Cache the token endpoint requests.
        /// </summary>
        public readonly bool? CacheTokens;
        /// <summary>
        /// Salt used for generating the cache key that is used for caching the token endpoint requests.
        /// </summary>
        public readonly string? CacheTokensSalt;
        /// <summary>
        /// The default cache ttl in seconds that is used in case the cached object does not specify the expiry.
        /// </summary>
        public readonly double? CacheTtl;
        /// <summary>
        /// The maximum cache ttl in seconds (enforced).
        /// </summary>
        public readonly double? CacheTtlMax;
        /// <summary>
        /// The minimum cache ttl in seconds (enforced).
        /// </summary>
        public readonly double? CacheTtlMin;
        /// <summary>
        /// The negative cache ttl in seconds.
        /// </summary>
        public readonly double? CacheTtlNeg;
        /// <summary>
        /// The resurrection ttl in seconds.
        /// </summary>
        public readonly double? CacheTtlResurrect;
        /// <summary>
        /// Cache the user info requests.
        /// </summary>
        public readonly bool? CacheUserInfo;
        /// <summary>
        /// The algorithm to use for client*secret*jwt (only HS***) or private*key*jwt authentication.
        /// </summary>
        public readonly ImmutableArray<string> ClientAlgs;
        /// <summary>
        /// The client to use for this request (the selection is made with a request parameter with the same name).
        /// </summary>
        public readonly string? ClientArg;
        /// <summary>
        /// The default OpenID Connect client authentication method is 'client*secret*basic' (using 'Authorization: Basic' header), 'client*secret*post' (credentials in body), 'client*secret*jwt' (signed client assertion in body), 'private*key*jwt' (private key-signed assertion), 'tls*client*auth' (client certificate), 'self*signed*tls*client*auth' (self-signed client certificate), and 'none' (no authentication).
        /// </summary>
        public readonly ImmutableArray<string> ClientAuths;
        /// <summary>
        /// Where to look for the client credentials: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search from the HTTP request body.
        /// </summary>
        public readonly ImmutableArray<string> ClientCredentialsParamTypes;
        /// <summary>
        /// The client id(s) that the plugin uses when it calls authenticated endpoints on the identity provider.
        /// </summary>
        public readonly ImmutableArray<string> ClientIds;
        /// <summary>
        /// The JWK used for the private*key*jwt authentication.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayPluginOpenidConnectConfigClientJwk> ClientJwks;
        /// <summary>
        /// The client secret.
        /// </summary>
        public readonly ImmutableArray<string> ClientSecrets;
        /// <summary>
        /// Consumer fields used for mapping: - `id`: try to find the matching Consumer by `id` - `username`: try to find the matching Consumer by `username` - `custom_id`: try to find the matching Consumer by `custom_id`.
        /// </summary>
        public readonly ImmutableArray<string> ConsumerBies;
        /// <summary>
        /// The claim used for consumer mapping. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> ConsumerClaims;
        /// <summary>
        /// Do not terminate the request if consumer mapping fails.
        /// </summary>
        public readonly bool? ConsumerOptional;
        /// <summary>
        /// The claim used to derive virtual credentials (e.g. to be consumed by the rate-limiting plugin), in case the consumer mapping is not used. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> CredentialClaims;
        /// <summary>
        /// Disable issuing the session cookie with the specified grants.
        /// </summary>
        public readonly ImmutableArray<string> DisableSessions;
        /// <summary>
        /// Extra header names passed to the discovery endpoint.
        /// </summary>
        public readonly ImmutableArray<string> DiscoveryHeadersNames;
        /// <summary>
        /// Extra header values passed to the discovery endpoint.
        /// </summary>
        public readonly ImmutableArray<string> DiscoveryHeadersValues;
        /// <summary>
        /// Display errors on failure responses.
        /// </summary>
        public readonly bool? DisplayErrors;
        /// <summary>
        /// The allowed values for the `hd` claim.
        /// </summary>
        public readonly ImmutableArray<string> Domains;
        /// <summary>
        /// The downstream access token header.
        /// </summary>
        public readonly string? DownstreamAccessTokenHeader;
        /// <summary>
        /// The downstream access token JWK header.
        /// </summary>
        public readonly string? DownstreamAccessTokenJwkHeader;
        /// <summary>
        /// The downstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> DownstreamHeadersClaims;
        /// <summary>
        /// The downstream header names for the claim values.
        /// </summary>
        public readonly ImmutableArray<string> DownstreamHeadersNames;
        /// <summary>
        /// The downstream id token header.
        /// </summary>
        public readonly string? DownstreamIdTokenHeader;
        /// <summary>
        /// The downstream id token JWK header.
        /// </summary>
        public readonly string? DownstreamIdTokenJwkHeader;
        /// <summary>
        /// The downstream introspection header.
        /// </summary>
        public readonly string? DownstreamIntrospectionHeader;
        /// <summary>
        /// The downstream introspection JWT header.
        /// </summary>
        public readonly string? DownstreamIntrospectionJwtHeader;
        /// <summary>
        /// The downstream refresh token header.
        /// </summary>
        public readonly string? DownstreamRefreshTokenHeader;
        /// <summary>
        /// The downstream session id header.
        /// </summary>
        public readonly string? DownstreamSessionIdHeader;
        /// <summary>
        /// The downstream user info header.
        /// </summary>
        public readonly string? DownstreamUserInfoHeader;
        /// <summary>
        /// The downstream user info JWT header (in case the user info returns a JWT response).
        /// </summary>
        public readonly string? DownstreamUserInfoJwtHeader;
        /// <summary>
        /// Specifies the lifetime in seconds of the DPoP proof. It determines how long the same proof can be used after creation. The creation time is determined by the nonce creation time if a nonce is used, and the iat claim otherwise.
        /// </summary>
        public readonly double? DpopProofLifetime;
        /// <summary>
        /// Specifies whether to challenge the client with a nonce value for DPoP proof. When enabled it will also be used to calculate the DPoP proof lifetime.
        /// </summary>
        public readonly bool? DpopUseNonce;
        /// <summary>
        /// Enable shared secret, for example, HS256, signatures (when disabled they will not be accepted).
        /// </summary>
        public readonly bool? EnableHsSignatures;
        /// <summary>
        /// The end session endpoint. If set it overrides the value in `end_session_endpoint` returned by the discovery endpoint.
        /// </summary>
        public readonly string? EndSessionEndpoint;
        /// <summary>
        /// Specifies whether to expose the error code header, as defined in RFC 6750. If an authorization request fails, this header is sent in the response. Set to `false` to disable.
        /// </summary>
        public readonly bool? ExposeErrorCode;
        /// <summary>
        /// JWKS URIs whose public keys are trusted (in addition to the keys found with the discovery).
        /// </summary>
        public readonly ImmutableArray<string> ExtraJwksUris;
        /// <summary>
        /// Destroy any active session for the forbidden requests.
        /// </summary>
        public readonly bool? ForbiddenDestroySession;
        /// <summary>
        /// The error message for the forbidden requests (when not using the redirection).
        /// </summary>
        public readonly string? ForbiddenErrorMessage;
        /// <summary>
        /// Where to redirect the client on forbidden requests.
        /// </summary>
        public readonly ImmutableArray<string> ForbiddenRedirectUris;
        /// <summary>
        /// The claim that contains the groups. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> GroupsClaims;
        /// <summary>
        /// The groups (`groups_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        /// </summary>
        public readonly ImmutableArray<string> GroupsRequireds;
        /// <summary>
        /// Remove the credentials used for authentication from the request. If multiple credentials are sent with the same request, the plugin will remove those that were used for successful authentication.
        /// </summary>
        public readonly bool? HideCredentials;
        /// <summary>
        /// The HTTP proxy.
        /// </summary>
        public readonly string? HttpProxy;
        /// <summary>
        /// The HTTP proxy authorization.
        /// </summary>
        public readonly string? HttpProxyAuthorization;
        /// <summary>
        /// The HTTP version used for the requests by this plugin: - `1.1`: HTTP 1.1 (the default) - `1.0`: HTTP 1.0.
        /// </summary>
        public readonly double? HttpVersion;
        /// <summary>
        /// The HTTPS proxy.
        /// </summary>
        public readonly string? HttpsProxy;
        /// <summary>
        /// The HTTPS proxy authorization.
        /// </summary>
        public readonly string? HttpsProxyAuthorization;
        /// <summary>
        /// The name of the parameter used to pass the id token.
        /// </summary>
        public readonly string? IdTokenParamName;
        /// <summary>
        /// Where to look for the id token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        /// </summary>
        public readonly ImmutableArray<string> IdTokenParamTypes;
        /// <summary>
        /// Skip the token signature verification on certain grants: - `password`: OAuth password grant - `client_credentials`: OAuth client credentials grant - `authorization_code`: authorization code flow - `refresh_token`: OAuth refresh token grant - `session`: session cookie authentication - `introspection`: OAuth introspection - `userinfo`: OpenID Connect user info endpoint authentication.
        /// </summary>
        public readonly ImmutableArray<string> IgnoreSignatures;
        /// <summary>
        /// Specifies whether to introspect the JWT access tokens (can be used to check for revocations).
        /// </summary>
        public readonly bool? IntrospectJwtTokens;
        /// <summary>
        /// The value of `Accept` header for introspection requests: - `application/json`: introspection response as JSON - `application/token-introspection+jwt`: introspection response as JWT (from the current IETF draft document) - `application/jwt`: introspection response as JWT (from the obsolete IETF draft document). must be one of ["application/json", "application/token-introspection+jwt", "application/jwt"]
        /// </summary>
        public readonly string? IntrospectionAccept;
        /// <summary>
        /// Check that the introspection response has an `active` claim with a value of `true`.
        /// </summary>
        public readonly bool? IntrospectionCheckActive;
        /// <summary>
        /// The introspection endpoint. If set it overrides the value in `introspection_endpoint` returned by the discovery endpoint.
        /// </summary>
        public readonly string? IntrospectionEndpoint;
        /// <summary>
        /// The introspection endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client*secret*basic", "client*secret*post", "client*secret*jwt", "private*key*jwt", "tls*client*auth", "self*signed*tls*client*auth", "none"]
        /// </summary>
        public readonly string? IntrospectionEndpointAuthMethod;
        /// <summary>
        /// Extra headers passed from the client to the introspection endpoint.
        /// </summary>
        public readonly ImmutableArray<string> IntrospectionHeadersClients;
        /// <summary>
        /// Extra header names passed to the introspection endpoint.
        /// </summary>
        public readonly ImmutableArray<string> IntrospectionHeadersNames;
        /// <summary>
        /// Extra header values passed to the introspection endpoint.
        /// </summary>
        public readonly ImmutableArray<string> IntrospectionHeadersValues;
        /// <summary>
        /// Introspection hint parameter value passed to the introspection endpoint.
        /// </summary>
        public readonly string? IntrospectionHint;
        /// <summary>
        /// Extra post arguments passed from the client to the introspection endpoint.
        /// </summary>
        public readonly ImmutableArray<string> IntrospectionPostArgsClients;
        /// <summary>
        /// Extra post argument names passed to the introspection endpoint.
        /// </summary>
        public readonly ImmutableArray<string> IntrospectionPostArgsNames;
        /// <summary>
        /// Extra post argument values passed to the introspection endpoint.
        /// </summary>
        public readonly ImmutableArray<string> IntrospectionPostArgsValues;
        /// <summary>
        /// Designate token's parameter name for introspection.
        /// </summary>
        public readonly string? IntrospectionTokenParamName;
        /// <summary>
        /// The discovery endpoint (or the issuer identifier). When there is no discovery endpoint, please also configure `config.using_pseudo_issuer=true`.
        /// </summary>
        public readonly string? Issuer;
        /// <summary>
        /// The issuers allowed to be present in the tokens (`iss` claim).
        /// </summary>
        public readonly ImmutableArray<string> IssuersAlloweds;
        /// <summary>
        /// The claim to match against the JWT session cookie.
        /// </summary>
        public readonly string? JwtSessionClaim;
        /// <summary>
        /// The name of the JWT session cookie.
        /// </summary>
        public readonly string? JwtSessionCookie;
        /// <summary>
        /// Use keepalive with the HTTP client.
        /// </summary>
        public readonly bool? Keepalive;
        /// <summary>
        /// Defines leeway time (in seconds) for `auth_time`, `exp`, `iat`, and `nbf` claims
        /// </summary>
        public readonly double? Leeway;
        /// <summary>
        /// What to do after successful login: - `upstream`: proxy request to upstream service - `response`: terminate request with a response - `redirect`: redirect to a different location. must be one of ["upstream", "response", "redirect"]
        /// </summary>
        public readonly string? LoginAction;
        /// <summary>
        /// Enable login functionality with specified grants.
        /// </summary>
        public readonly ImmutableArray<string> LoginMethods;
        /// <summary>
        /// Where to place `login_tokens` when using `redirect` `login_action`: - `query`: place tokens in query string - `fragment`: place tokens in url fragment (not readable by servers). must be one of ["query", "fragment"]
        /// </summary>
        public readonly string? LoginRedirectMode;
        /// <summary>
        /// Where to redirect the client when `login_action` is set to `redirect`.
        /// </summary>
        public readonly ImmutableArray<string> LoginRedirectUris;
        /// <summary>
        /// What tokens to include in `response` body or `redirect` query string or fragment: - `id_token`: include id token - `access_token`: include access token - `refresh_token`: include refresh token - `tokens`: include the full token endpoint response - `introspection`: include introspection response.
        /// </summary>
        public readonly ImmutableArray<string> LoginTokens;
        /// <summary>
        /// The request methods that can activate the logout: - `POST`: HTTP POST method - `GET`: HTTP GET method - `DELETE`: HTTP DELETE method.
        /// </summary>
        public readonly ImmutableArray<string> LogoutMethods;
        /// <summary>
        /// The request body argument that activates the logout.
        /// </summary>
        public readonly string? LogoutPostArg;
        /// <summary>
        /// The request query argument that activates the logout.
        /// </summary>
        public readonly string? LogoutQueryArg;
        /// <summary>
        /// Where to redirect the client after the logout.
        /// </summary>
        public readonly ImmutableArray<string> LogoutRedirectUris;
        /// <summary>
        /// Revoke tokens as part of the logout.
        /// </summary>
        public readonly bool? LogoutRevoke;
        /// <summary>
        /// Revoke the access token as part of the logout. Requires `logout_revoke` to be set to `true`.
        /// </summary>
        public readonly bool? LogoutRevokeAccessToken;
        /// <summary>
        /// Revoke the refresh token as part of the logout. Requires `logout_revoke` to be set to `true`.
        /// </summary>
        public readonly bool? LogoutRevokeRefreshToken;
        /// <summary>
        /// The request URI suffix that activates the logout.
        /// </summary>
        public readonly string? LogoutUriSuffix;
        /// <summary>
        /// The maximum age (in seconds) compared to the `auth_time` claim.
        /// </summary>
        public readonly double? MaxAge;
        /// <summary>
        /// Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        /// </summary>
        public readonly string? MtlsIntrospectionEndpoint;
        /// <summary>
        /// Alias for the introspection endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        /// </summary>
        public readonly string? MtlsRevocationEndpoint;
        /// <summary>
        /// Alias for the token endpoint to be used for mTLS client authentication. If set it overrides the value in `mtls_endpoint_aliases` returned by the discovery endpoint.
        /// </summary>
        public readonly string? MtlsTokenEndpoint;
        /// <summary>
        /// Do not use proxy with these hosts.
        /// </summary>
        public readonly string? NoProxy;
        /// <summary>
        /// Where to look for the username and password: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        /// </summary>
        public readonly ImmutableArray<string> PasswordParamTypes;
        /// <summary>
        /// With this parameter, you can preserve request query arguments even when doing authorization code flow.
        /// </summary>
        public readonly bool? PreserveQueryArgs;
        /// <summary>
        /// If set to true, only the auth_methods that are compatible with Proof of Possession (PoP) can be configured when PoP is enabled. If set to false, all auth_methods will be configurable and PoP checks will be silently skipped for those auth_methods that are not compatible with PoP.
        /// </summary>
        public readonly bool? ProofOfPossessionAuthMethodsValidation;
        /// <summary>
        /// Enable Demonstrating Proof-of-Possession (DPoP). If set to strict, all request are verified despite the presence of the DPoP key claim (cnf.jkt). If set to optional, only tokens bound with DPoP's key are verified with the proof. must be one of ["off", "strict", "optional"]
        /// </summary>
        public readonly string? ProofOfPossessionDpop;
        /// <summary>
        /// Enable mtls proof of possession. If set to strict, all tokens (from supported auth_methods: bearer, introspection, and session granted with bearer or introspection) are verified, if set to optional, only tokens that contain the certificate hash claim are verified. If the verification fails, the request will be rejected with 401. must be one of ["off", "strict", "optional"]
        /// </summary>
        public readonly string? ProofOfPossessionMtls;
        /// <summary>
        /// The pushed authorization endpoint. If set it overrides the value in `pushed_authorization_request_endpoint` returned by the discovery endpoint.
        /// </summary>
        public readonly string? PushedAuthorizationRequestEndpoint;
        /// <summary>
        /// The pushed authorization request endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        /// </summary>
        public readonly string? PushedAuthorizationRequestEndpointAuthMethod;
        /// <summary>
        /// The redirect URI passed to the authorization and token endpoints.
        /// </summary>
        public readonly ImmutableArray<string> RedirectUris;
        /// <summary>
        /// Specifies how long (in seconds) the plugin waits between discovery attempts. Discovery is still triggered on an as-needed basis.
        /// </summary>
        public readonly double? RediscoveryLifetime;
        /// <summary>
        /// The name of the parameter used to pass the refresh token.
        /// </summary>
        public readonly string? RefreshTokenParamName;
        /// <summary>
        /// Where to look for the refresh token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body.
        /// </summary>
        public readonly ImmutableArray<string> RefreshTokenParamTypes;
        /// <summary>
        /// Specifies whether the plugin should try to refresh (soon to be) expired access tokens if the plugin has a `refresh_token` available.
        /// </summary>
        public readonly bool? RefreshTokens;
        /// <summary>
        /// Forcibly enable or disable the proof key for code exchange. When not set the value is determined through the discovery using the value of `code_challenge_methods_supported`, and enabled automatically (in case the `code_challenge_methods_supported` is missing, the PKCE will not be enabled).
        /// </summary>
        public readonly bool? RequireProofKeyForCodeExchange;
        /// <summary>
        /// Forcibly enable or disable the pushed authorization requests. When not set the value is determined through the discovery using the value of `require_pushed_authorization_requests` (which defaults to `false`).
        /// </summary>
        public readonly bool? RequirePushedAuthorizationRequests;
        /// <summary>
        /// Forcibly enable or disable the usage of signed request object on authorization or pushed authorization endpoint. When not set the value is determined through the discovery using the value of `require_signed_request_object`, and enabled automatically (in case the `require_signed_request_object` is missing, the feature will not be enabled).
        /// </summary>
        public readonly bool? RequireSignedRequestObject;
        /// <summary>
        /// Distributed claims are represented by the `_claim_names` and `_claim_sources` members of the JSON object containing the claims. If this parameter is set to `true`, the plugin explicitly resolves these distributed claims.
        /// </summary>
        public readonly bool? ResolveDistributedClaims;
        /// <summary>
        /// Response mode passed to the authorization endpoint: - `query`: for parameters in query string - `form_post`: for parameters in request body - `fragment`: for parameters in uri fragment (rarely useful as the plugin itself cannot read it) - `query.jwt`, `form_post.jwt`, `fragment.jwt`: similar to `query`, `form_post` and `fragment` but the parameters are encoded in a JWT - `jwt`: shortcut that indicates the default encoding for the requested response type. must be one of ["query", "form_post", "fragment", "query.jwt", "form_post.jwt", "fragment.jwt", "jwt"]
        /// </summary>
        public readonly string? ResponseMode;
        /// <summary>
        /// The response type passed to the authorization endpoint.
        /// </summary>
        public readonly ImmutableArray<string> ResponseTypes;
        /// <summary>
        /// Specifies whether to always verify tokens stored in the session.
        /// </summary>
        public readonly bool? Reverify;
        /// <summary>
        /// The revocation endpoint. If set it overrides the value in `revocation_endpoint` returned by the discovery endpoint.
        /// </summary>
        public readonly string? RevocationEndpoint;
        /// <summary>
        /// The revocation endpoint authentication method: : `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        /// </summary>
        public readonly string? RevocationEndpointAuthMethod;
        /// <summary>
        /// Designate token's parameter name for revocation.
        /// </summary>
        public readonly string? RevocationTokenParamName;
        /// <summary>
        /// The claim that contains the roles. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> RolesClaims;
        /// <summary>
        /// The roles (`roles_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        /// </summary>
        public readonly ImmutableArray<string> RolesRequireds;
        /// <summary>
        /// Specifies whether to run this plugin on pre-flight (`OPTIONS`) requests.
        /// </summary>
        public readonly bool? RunOnPreflight;
        /// <summary>
        /// The scopes passed to the authorization and token endpoints.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// The claim that contains the scopes. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> ScopesClaims;
        /// <summary>
        /// The scopes (`scopes_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.
        /// </summary>
        public readonly ImmutableArray<string> ScopesRequireds;
        /// <summary>
        /// Specify whether to use the user info endpoint to get additional claims for consumer mapping, credential mapping, authenticated groups, and upstream and downstream headers.
        /// </summary>
        public readonly bool? SearchUserInfo;
        /// <summary>
        /// Limits how long the session can be renewed in seconds, until re-authentication is required. 0 disables the checks.
        /// </summary>
        public readonly double? SessionAbsoluteTimeout;
        /// <summary>
        /// The session audience, which is the intended target application. For example `"my-application"`.
        /// </summary>
        public readonly string? SessionAudience;
        /// <summary>
        /// The session cookie Domain flag.
        /// </summary>
        public readonly string? SessionCookieDomain;
        /// <summary>
        /// Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        /// </summary>
        public readonly bool? SessionCookieHttpOnly;
        /// <summary>
        /// The session cookie name.
        /// </summary>
        public readonly string? SessionCookieName;
        /// <summary>
        /// The session cookie Path flag.
        /// </summary>
        public readonly string? SessionCookiePath;
        /// <summary>
        /// Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        /// </summary>
        public readonly string? SessionCookieSameSite;
        /// <summary>
        /// Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        /// </summary>
        public readonly bool? SessionCookieSecure;
        /// <summary>
        /// When set to `true`, audiences are forced to share the same subject.
        /// </summary>
        public readonly bool? SessionEnforceSameSubject;
        /// <summary>
        /// When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.
        /// </summary>
        public readonly bool? SessionHashStorageKey;
        /// <summary>
        /// When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.
        /// </summary>
        public readonly bool? SessionHashSubject;
        /// <summary>
        /// Specifies how long the session can be inactive until it is considered invalid in seconds. 0 disables the checks and touching.
        /// </summary>
        public readonly double? SessionIdlingTimeout;
        /// <summary>
        /// The memcached host.
        /// </summary>
        public readonly string? SessionMemcachedHost;
        /// <summary>
        /// The memcached port.
        /// </summary>
        public readonly int? SessionMemcachedPort;
        /// <summary>
        /// The memcached session key prefix.
        /// </summary>
        public readonly string? SessionMemcachedPrefix;
        /// <summary>
        /// The memcached unix socket path.
        /// </summary>
        public readonly string? SessionMemcachedSocket;
        /// <summary>
        /// The Redis cluster maximum redirects.
        /// </summary>
        public readonly int? SessionRedisClusterMaxRedirections;
        /// <summary>
        /// The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayPluginOpenidConnectConfigSessionRedisClusterNode> SessionRedisClusterNodes;
        /// <summary>
        /// Session redis connection timeout in milliseconds.
        /// </summary>
        public readonly int? SessionRedisConnectTimeout;
        /// <summary>
        /// The Redis host.
        /// </summary>
        public readonly string? SessionRedisHost;
        /// <summary>
        /// Password to use for Redis connection when the `redis` session storage is defined. If undefined, no AUTH commands are sent to Redis.
        /// </summary>
        public readonly string? SessionRedisPassword;
        /// <summary>
        /// The Redis port.
        /// </summary>
        public readonly int? SessionRedisPort;
        /// <summary>
        /// The Redis session key prefix.
        /// </summary>
        public readonly string? SessionRedisPrefix;
        /// <summary>
        /// Session redis read timeout in milliseconds.
        /// </summary>
        public readonly int? SessionRedisReadTimeout;
        /// <summary>
        /// Session redis send timeout in milliseconds.
        /// </summary>
        public readonly int? SessionRedisSendTimeout;
        /// <summary>
        /// The SNI used for connecting the Redis server.
        /// </summary>
        public readonly string? SessionRedisServerName;
        /// <summary>
        /// The Redis unix socket path.
        /// </summary>
        public readonly string? SessionRedisSocket;
        /// <summary>
        /// Use SSL/TLS for Redis connection.
        /// </summary>
        public readonly bool? SessionRedisSsl;
        /// <summary>
        /// Verify identity provider server certificate.
        /// </summary>
        public readonly bool? SessionRedisSslVerify;
        /// <summary>
        /// Username to use for Redis connection when the `redis` session storage is defined and ACL authentication is desired. If undefined, ACL authentication will not be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.
        /// </summary>
        public readonly string? SessionRedisUsername;
        /// <summary>
        /// Enables or disables persistent sessions.
        /// </summary>
        public readonly bool? SessionRemember;
        /// <summary>
        /// Limits how long the persistent session can be renewed in seconds, until re-authentication is required. 0 disables the checks.
        /// </summary>
        public readonly double? SessionRememberAbsoluteTimeout;
        /// <summary>
        /// Persistent session cookie name. Use with the `remember` configuration parameter.
        /// </summary>
        public readonly string? SessionRememberCookieName;
        /// <summary>
        /// Specifies how long the persistent session is considered valid in seconds. 0 disables the checks and rolling.
        /// </summary>
        public readonly double? SessionRememberRollingTimeout;
        /// <summary>
        /// Set of headers to send to upstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ "id", "timeout" ]` will set Session-Id and Session-Timeout request headers.
        /// </summary>
        public readonly ImmutableArray<string> SessionRequestHeaders;
        /// <summary>
        /// Set of headers to send to downstream, use id, audience, subject, timeout, idling-timeout, rolling-timeout, absolute-timeout. E.g. `[ "id", "timeout" ]` will set Session-Id and Session-Timeout response headers.
        /// </summary>
        public readonly ImmutableArray<string> SessionResponseHeaders;
        /// <summary>
        /// Specifies how long the session can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.
        /// </summary>
        public readonly double? SessionRollingTimeout;
        /// <summary>
        /// The session secret.
        /// </summary>
        public readonly string? SessionSecret;
        /// <summary>
        /// The session storage for session data: - `cookie`: stores session data with the session cookie (the session cannot be invalidated or revoked without changing session secret, but is stateless, and doesn't require a database) - `memcache`: stores session data in memcached - `redis`: stores session data in Redis. must be one of ["cookie", "memcache", "memcached", "redis"]
        /// </summary>
        public readonly string? SessionStorage;
        /// <summary>
        /// Configures whether or not session metadata should be stored. This metadata includes information about the active sessions for a specific audience belonging to a specific subject.
        /// </summary>
        public readonly bool? SessionStoreMetadata;
        /// <summary>
        /// Verify identity provider server certificate. If set to `true`, the plugin uses the CA certificate set in the `kong.conf` config parameter `lua_ssl_trusted_certificate`.
        /// </summary>
        public readonly bool? SslVerify;
        /// <summary>
        /// Network IO timeout in milliseconds.
        /// </summary>
        public readonly double? Timeout;
        /// <summary>
        /// ID of the Certificate entity representing the client certificate to use for mTLS client authentication for connections between Kong and the Auth Server.
        /// </summary>
        public readonly string? TlsClientAuthCertId;
        /// <summary>
        /// Verify identity provider server certificate during mTLS client authentication.
        /// </summary>
        public readonly bool? TlsClientAuthSslVerify;
        /// <summary>
        /// Include the scope in the token cache key, so token with different scopes are considered diffrent tokens.
        /// </summary>
        public readonly bool? TokenCacheKeyIncludeScope;
        /// <summary>
        /// The token endpoint. If set it overrides the value in `token_endpoint` returned by the discovery endpoint.
        /// </summary>
        public readonly string? TokenEndpoint;
        /// <summary>
        /// The token endpoint authentication method: `client_secret_basic`, `client_secret_post`, `client_secret_jwt`, `private_key_jwt`, `tls_client_auth`, `self_signed_tls_client_auth`, or `none`: do not authenticate. must be one of ["client_secret_basic", "client_secret_post", "client_secret_jwt", "private_key_jwt", "tls_client_auth", "self_signed_tls_client_auth", "none"]
        /// </summary>
        public readonly string? TokenEndpointAuthMethod;
        /// <summary>
        /// The token exchange endpoint.
        /// </summary>
        public readonly string? TokenExchangeEndpoint;
        /// <summary>
        /// Extra headers passed from the client to the token endpoint.
        /// </summary>
        public readonly ImmutableArray<string> TokenHeadersClients;
        /// <summary>
        /// Enable the sending of the token endpoint response headers only with certain grants: - `password`: with OAuth password grant - `client_credentials`: with OAuth client credentials grant - `authorization_code`: with authorization code flow - `refresh_token` with refresh token grant.
        /// </summary>
        public readonly ImmutableArray<string> TokenHeadersGrants;
        /// <summary>
        /// Extra header names passed to the token endpoint.
        /// </summary>
        public readonly ImmutableArray<string> TokenHeadersNames;
        /// <summary>
        /// Add a prefix to the token endpoint response headers before forwarding them to the downstream client.
        /// </summary>
        public readonly string? TokenHeadersPrefix;
        /// <summary>
        /// The names of token endpoint response headers to forward to the downstream client.
        /// </summary>
        public readonly ImmutableArray<string> TokenHeadersReplays;
        /// <summary>
        /// Extra header values passed to the token endpoint.
        /// </summary>
        public readonly ImmutableArray<string> TokenHeadersValues;
        /// <summary>
        /// Pass extra arguments from the client to the OpenID-Connect plugin. If arguments exist, the client can pass them using: - Query parameters - Request Body - Request Header  This parameter can be used with `scope` values, like this:  `config.token_post_args_client=scope`  In this case, the token would take the `scope` value from the query parameter or from the request body or from the header and send it to the token endpoint.
        /// </summary>
        public readonly ImmutableArray<string> TokenPostArgsClients;
        /// <summary>
        /// Extra post argument names passed to the token endpoint.
        /// </summary>
        public readonly ImmutableArray<string> TokenPostArgsNames;
        /// <summary>
        /// Extra post argument values passed to the token endpoint.
        /// </summary>
        public readonly ImmutableArray<string> TokenPostArgsValues;
        /// <summary>
        /// Destroy any active session for the unauthorized requests.
        /// </summary>
        public readonly bool? UnauthorizedDestroySession;
        /// <summary>
        /// The error message for the unauthorized requests (when not using the redirection).
        /// </summary>
        public readonly string? UnauthorizedErrorMessage;
        /// <summary>
        /// Where to redirect the client on unauthorized requests.
        /// </summary>
        public readonly ImmutableArray<string> UnauthorizedRedirectUris;
        /// <summary>
        /// Where to redirect the client when unexpected errors happen with the requests.
        /// </summary>
        public readonly ImmutableArray<string> UnexpectedRedirectUris;
        /// <summary>
        /// The upstream access token header.
        /// </summary>
        public readonly string? UpstreamAccessTokenHeader;
        /// <summary>
        /// The upstream access token JWK header.
        /// </summary>
        public readonly string? UpstreamAccessTokenJwkHeader;
        /// <summary>
        /// The upstream header claims. If multiple values are set, it means the claim is inside a nested object of the token payload.
        /// </summary>
        public readonly ImmutableArray<string> UpstreamHeadersClaims;
        /// <summary>
        /// The upstream header names for the claim values.
        /// </summary>
        public readonly ImmutableArray<string> UpstreamHeadersNames;
        /// <summary>
        /// The upstream id token header.
        /// </summary>
        public readonly string? UpstreamIdTokenHeader;
        /// <summary>
        /// The upstream id token JWK header.
        /// </summary>
        public readonly string? UpstreamIdTokenJwkHeader;
        /// <summary>
        /// The upstream introspection header.
        /// </summary>
        public readonly string? UpstreamIntrospectionHeader;
        /// <summary>
        /// The upstream introspection JWT header.
        /// </summary>
        public readonly string? UpstreamIntrospectionJwtHeader;
        /// <summary>
        /// The upstream refresh token header.
        /// </summary>
        public readonly string? UpstreamRefreshTokenHeader;
        /// <summary>
        /// The upstream session id header.
        /// </summary>
        public readonly string? UpstreamSessionIdHeader;
        /// <summary>
        /// The upstream user info header.
        /// </summary>
        public readonly string? UpstreamUserInfoHeader;
        /// <summary>
        /// The upstream user info JWT header (in case the user info returns a JWT response).
        /// </summary>
        public readonly string? UpstreamUserInfoJwtHeader;
        /// <summary>
        /// The value of `Accept` header for user info requests: - `application/json`: user info response as JSON - `application/jwt`: user info response as JWT (from the obsolete IETF draft document). must be one of ["application/json", "application/jwt"]
        /// </summary>
        public readonly string? UserinfoAccept;
        /// <summary>
        /// The user info endpoint. If set it overrides the value in `userinfo_endpoint` returned by the discovery endpoint.
        /// </summary>
        public readonly string? UserinfoEndpoint;
        /// <summary>
        /// Extra headers passed from the client to the user info endpoint.
        /// </summary>
        public readonly ImmutableArray<string> UserinfoHeadersClients;
        /// <summary>
        /// Extra header names passed to the user info endpoint.
        /// </summary>
        public readonly ImmutableArray<string> UserinfoHeadersNames;
        /// <summary>
        /// Extra header values passed to the user info endpoint.
        /// </summary>
        public readonly ImmutableArray<string> UserinfoHeadersValues;
        /// <summary>
        /// Extra query arguments passed from the client to the user info endpoint.
        /// </summary>
        public readonly ImmutableArray<string> UserinfoQueryArgsClients;
        /// <summary>
        /// Extra query argument names passed to the user info endpoint.
        /// </summary>
        public readonly ImmutableArray<string> UserinfoQueryArgsNames;
        /// <summary>
        /// Extra query argument values passed to the user info endpoint.
        /// </summary>
        public readonly ImmutableArray<string> UserinfoQueryArgsValues;
        /// <summary>
        /// If the plugin uses a pseudo issuer. When set to true, the plugin will not discover the configuration from the issuer URL specified with `config.issuer`.
        /// </summary>
        public readonly bool? UsingPseudoIssuer;
        /// <summary>
        /// Verify tokens for standard claims.
        /// </summary>
        public readonly bool? VerifyClaims;
        /// <summary>
        /// Verify nonce on authorization code flow.
        /// </summary>
        public readonly bool? VerifyNonce;
        /// <summary>
        /// Verify plugin configuration against discovery.
        /// </summary>
        public readonly bool? VerifyParameters;
        /// <summary>
        /// Verify signature of tokens.
        /// </summary>
        public readonly bool? VerifySignature;

        [OutputConstructor]
        private GatewayPluginOpenidConnectConfig(
            string? anonymous,

            ImmutableArray<string> audienceClaims,

            ImmutableArray<string> audienceRequireds,

            ImmutableArray<string> audiences,

            ImmutableArray<string> authMethods,

            ImmutableArray<string> authenticatedGroupsClaims,

            string? authorizationCookieDomain,

            bool? authorizationCookieHttpOnly,

            string? authorizationCookieName,

            string? authorizationCookiePath,

            string? authorizationCookieSameSite,

            bool? authorizationCookieSecure,

            string? authorizationEndpoint,

            ImmutableArray<string> authorizationQueryArgsClients,

            ImmutableArray<string> authorizationQueryArgsNames,

            ImmutableArray<string> authorizationQueryArgsValues,

            double? authorizationRollingTimeout,

            string? bearerTokenCookieName,

            ImmutableArray<string> bearerTokenParamTypes,

            bool? byUsernameIgnoreCase,

            bool? cacheIntrospection,

            bool? cacheTokenExchange,

            bool? cacheTokens,

            string? cacheTokensSalt,

            double? cacheTtl,

            double? cacheTtlMax,

            double? cacheTtlMin,

            double? cacheTtlNeg,

            double? cacheTtlResurrect,

            bool? cacheUserInfo,

            ImmutableArray<string> clientAlgs,

            string? clientArg,

            ImmutableArray<string> clientAuths,

            ImmutableArray<string> clientCredentialsParamTypes,

            ImmutableArray<string> clientIds,

            ImmutableArray<Outputs.GatewayPluginOpenidConnectConfigClientJwk> clientJwks,

            ImmutableArray<string> clientSecrets,

            ImmutableArray<string> consumerBies,

            ImmutableArray<string> consumerClaims,

            bool? consumerOptional,

            ImmutableArray<string> credentialClaims,

            ImmutableArray<string> disableSessions,

            ImmutableArray<string> discoveryHeadersNames,

            ImmutableArray<string> discoveryHeadersValues,

            bool? displayErrors,

            ImmutableArray<string> domains,

            string? downstreamAccessTokenHeader,

            string? downstreamAccessTokenJwkHeader,

            ImmutableArray<string> downstreamHeadersClaims,

            ImmutableArray<string> downstreamHeadersNames,

            string? downstreamIdTokenHeader,

            string? downstreamIdTokenJwkHeader,

            string? downstreamIntrospectionHeader,

            string? downstreamIntrospectionJwtHeader,

            string? downstreamRefreshTokenHeader,

            string? downstreamSessionIdHeader,

            string? downstreamUserInfoHeader,

            string? downstreamUserInfoJwtHeader,

            double? dpopProofLifetime,

            bool? dpopUseNonce,

            bool? enableHsSignatures,

            string? endSessionEndpoint,

            bool? exposeErrorCode,

            ImmutableArray<string> extraJwksUris,

            bool? forbiddenDestroySession,

            string? forbiddenErrorMessage,

            ImmutableArray<string> forbiddenRedirectUris,

            ImmutableArray<string> groupsClaims,

            ImmutableArray<string> groupsRequireds,

            bool? hideCredentials,

            string? httpProxy,

            string? httpProxyAuthorization,

            double? httpVersion,

            string? httpsProxy,

            string? httpsProxyAuthorization,

            string? idTokenParamName,

            ImmutableArray<string> idTokenParamTypes,

            ImmutableArray<string> ignoreSignatures,

            bool? introspectJwtTokens,

            string? introspectionAccept,

            bool? introspectionCheckActive,

            string? introspectionEndpoint,

            string? introspectionEndpointAuthMethod,

            ImmutableArray<string> introspectionHeadersClients,

            ImmutableArray<string> introspectionHeadersNames,

            ImmutableArray<string> introspectionHeadersValues,

            string? introspectionHint,

            ImmutableArray<string> introspectionPostArgsClients,

            ImmutableArray<string> introspectionPostArgsNames,

            ImmutableArray<string> introspectionPostArgsValues,

            string? introspectionTokenParamName,

            string? issuer,

            ImmutableArray<string> issuersAlloweds,

            string? jwtSessionClaim,

            string? jwtSessionCookie,

            bool? keepalive,

            double? leeway,

            string? loginAction,

            ImmutableArray<string> loginMethods,

            string? loginRedirectMode,

            ImmutableArray<string> loginRedirectUris,

            ImmutableArray<string> loginTokens,

            ImmutableArray<string> logoutMethods,

            string? logoutPostArg,

            string? logoutQueryArg,

            ImmutableArray<string> logoutRedirectUris,

            bool? logoutRevoke,

            bool? logoutRevokeAccessToken,

            bool? logoutRevokeRefreshToken,

            string? logoutUriSuffix,

            double? maxAge,

            string? mtlsIntrospectionEndpoint,

            string? mtlsRevocationEndpoint,

            string? mtlsTokenEndpoint,

            string? noProxy,

            ImmutableArray<string> passwordParamTypes,

            bool? preserveQueryArgs,

            bool? proofOfPossessionAuthMethodsValidation,

            string? proofOfPossessionDpop,

            string? proofOfPossessionMtls,

            string? pushedAuthorizationRequestEndpoint,

            string? pushedAuthorizationRequestEndpointAuthMethod,

            ImmutableArray<string> redirectUris,

            double? rediscoveryLifetime,

            string? refreshTokenParamName,

            ImmutableArray<string> refreshTokenParamTypes,

            bool? refreshTokens,

            bool? requireProofKeyForCodeExchange,

            bool? requirePushedAuthorizationRequests,

            bool? requireSignedRequestObject,

            bool? resolveDistributedClaims,

            string? responseMode,

            ImmutableArray<string> responseTypes,

            bool? reverify,

            string? revocationEndpoint,

            string? revocationEndpointAuthMethod,

            string? revocationTokenParamName,

            ImmutableArray<string> rolesClaims,

            ImmutableArray<string> rolesRequireds,

            bool? runOnPreflight,

            ImmutableArray<string> scopes,

            ImmutableArray<string> scopesClaims,

            ImmutableArray<string> scopesRequireds,

            bool? searchUserInfo,

            double? sessionAbsoluteTimeout,

            string? sessionAudience,

            string? sessionCookieDomain,

            bool? sessionCookieHttpOnly,

            string? sessionCookieName,

            string? sessionCookiePath,

            string? sessionCookieSameSite,

            bool? sessionCookieSecure,

            bool? sessionEnforceSameSubject,

            bool? sessionHashStorageKey,

            bool? sessionHashSubject,

            double? sessionIdlingTimeout,

            string? sessionMemcachedHost,

            int? sessionMemcachedPort,

            string? sessionMemcachedPrefix,

            string? sessionMemcachedSocket,

            int? sessionRedisClusterMaxRedirections,

            ImmutableArray<Outputs.GatewayPluginOpenidConnectConfigSessionRedisClusterNode> sessionRedisClusterNodes,

            int? sessionRedisConnectTimeout,

            string? sessionRedisHost,

            string? sessionRedisPassword,

            int? sessionRedisPort,

            string? sessionRedisPrefix,

            int? sessionRedisReadTimeout,

            int? sessionRedisSendTimeout,

            string? sessionRedisServerName,

            string? sessionRedisSocket,

            bool? sessionRedisSsl,

            bool? sessionRedisSslVerify,

            string? sessionRedisUsername,

            bool? sessionRemember,

            double? sessionRememberAbsoluteTimeout,

            string? sessionRememberCookieName,

            double? sessionRememberRollingTimeout,

            ImmutableArray<string> sessionRequestHeaders,

            ImmutableArray<string> sessionResponseHeaders,

            double? sessionRollingTimeout,

            string? sessionSecret,

            string? sessionStorage,

            bool? sessionStoreMetadata,

            bool? sslVerify,

            double? timeout,

            string? tlsClientAuthCertId,

            bool? tlsClientAuthSslVerify,

            bool? tokenCacheKeyIncludeScope,

            string? tokenEndpoint,

            string? tokenEndpointAuthMethod,

            string? tokenExchangeEndpoint,

            ImmutableArray<string> tokenHeadersClients,

            ImmutableArray<string> tokenHeadersGrants,

            ImmutableArray<string> tokenHeadersNames,

            string? tokenHeadersPrefix,

            ImmutableArray<string> tokenHeadersReplays,

            ImmutableArray<string> tokenHeadersValues,

            ImmutableArray<string> tokenPostArgsClients,

            ImmutableArray<string> tokenPostArgsNames,

            ImmutableArray<string> tokenPostArgsValues,

            bool? unauthorizedDestroySession,

            string? unauthorizedErrorMessage,

            ImmutableArray<string> unauthorizedRedirectUris,

            ImmutableArray<string> unexpectedRedirectUris,

            string? upstreamAccessTokenHeader,

            string? upstreamAccessTokenJwkHeader,

            ImmutableArray<string> upstreamHeadersClaims,

            ImmutableArray<string> upstreamHeadersNames,

            string? upstreamIdTokenHeader,

            string? upstreamIdTokenJwkHeader,

            string? upstreamIntrospectionHeader,

            string? upstreamIntrospectionJwtHeader,

            string? upstreamRefreshTokenHeader,

            string? upstreamSessionIdHeader,

            string? upstreamUserInfoHeader,

            string? upstreamUserInfoJwtHeader,

            string? userinfoAccept,

            string? userinfoEndpoint,

            ImmutableArray<string> userinfoHeadersClients,

            ImmutableArray<string> userinfoHeadersNames,

            ImmutableArray<string> userinfoHeadersValues,

            ImmutableArray<string> userinfoQueryArgsClients,

            ImmutableArray<string> userinfoQueryArgsNames,

            ImmutableArray<string> userinfoQueryArgsValues,

            bool? usingPseudoIssuer,

            bool? verifyClaims,

            bool? verifyNonce,

            bool? verifyParameters,

            bool? verifySignature)
        {
            Anonymous = anonymous;
            AudienceClaims = audienceClaims;
            AudienceRequireds = audienceRequireds;
            Audiences = audiences;
            AuthMethods = authMethods;
            AuthenticatedGroupsClaims = authenticatedGroupsClaims;
            AuthorizationCookieDomain = authorizationCookieDomain;
            AuthorizationCookieHttpOnly = authorizationCookieHttpOnly;
            AuthorizationCookieName = authorizationCookieName;
            AuthorizationCookiePath = authorizationCookiePath;
            AuthorizationCookieSameSite = authorizationCookieSameSite;
            AuthorizationCookieSecure = authorizationCookieSecure;
            AuthorizationEndpoint = authorizationEndpoint;
            AuthorizationQueryArgsClients = authorizationQueryArgsClients;
            AuthorizationQueryArgsNames = authorizationQueryArgsNames;
            AuthorizationQueryArgsValues = authorizationQueryArgsValues;
            AuthorizationRollingTimeout = authorizationRollingTimeout;
            BearerTokenCookieName = bearerTokenCookieName;
            BearerTokenParamTypes = bearerTokenParamTypes;
            ByUsernameIgnoreCase = byUsernameIgnoreCase;
            CacheIntrospection = cacheIntrospection;
            CacheTokenExchange = cacheTokenExchange;
            CacheTokens = cacheTokens;
            CacheTokensSalt = cacheTokensSalt;
            CacheTtl = cacheTtl;
            CacheTtlMax = cacheTtlMax;
            CacheTtlMin = cacheTtlMin;
            CacheTtlNeg = cacheTtlNeg;
            CacheTtlResurrect = cacheTtlResurrect;
            CacheUserInfo = cacheUserInfo;
            ClientAlgs = clientAlgs;
            ClientArg = clientArg;
            ClientAuths = clientAuths;
            ClientCredentialsParamTypes = clientCredentialsParamTypes;
            ClientIds = clientIds;
            ClientJwks = clientJwks;
            ClientSecrets = clientSecrets;
            ConsumerBies = consumerBies;
            ConsumerClaims = consumerClaims;
            ConsumerOptional = consumerOptional;
            CredentialClaims = credentialClaims;
            DisableSessions = disableSessions;
            DiscoveryHeadersNames = discoveryHeadersNames;
            DiscoveryHeadersValues = discoveryHeadersValues;
            DisplayErrors = displayErrors;
            Domains = domains;
            DownstreamAccessTokenHeader = downstreamAccessTokenHeader;
            DownstreamAccessTokenJwkHeader = downstreamAccessTokenJwkHeader;
            DownstreamHeadersClaims = downstreamHeadersClaims;
            DownstreamHeadersNames = downstreamHeadersNames;
            DownstreamIdTokenHeader = downstreamIdTokenHeader;
            DownstreamIdTokenJwkHeader = downstreamIdTokenJwkHeader;
            DownstreamIntrospectionHeader = downstreamIntrospectionHeader;
            DownstreamIntrospectionJwtHeader = downstreamIntrospectionJwtHeader;
            DownstreamRefreshTokenHeader = downstreamRefreshTokenHeader;
            DownstreamSessionIdHeader = downstreamSessionIdHeader;
            DownstreamUserInfoHeader = downstreamUserInfoHeader;
            DownstreamUserInfoJwtHeader = downstreamUserInfoJwtHeader;
            DpopProofLifetime = dpopProofLifetime;
            DpopUseNonce = dpopUseNonce;
            EnableHsSignatures = enableHsSignatures;
            EndSessionEndpoint = endSessionEndpoint;
            ExposeErrorCode = exposeErrorCode;
            ExtraJwksUris = extraJwksUris;
            ForbiddenDestroySession = forbiddenDestroySession;
            ForbiddenErrorMessage = forbiddenErrorMessage;
            ForbiddenRedirectUris = forbiddenRedirectUris;
            GroupsClaims = groupsClaims;
            GroupsRequireds = groupsRequireds;
            HideCredentials = hideCredentials;
            HttpProxy = httpProxy;
            HttpProxyAuthorization = httpProxyAuthorization;
            HttpVersion = httpVersion;
            HttpsProxy = httpsProxy;
            HttpsProxyAuthorization = httpsProxyAuthorization;
            IdTokenParamName = idTokenParamName;
            IdTokenParamTypes = idTokenParamTypes;
            IgnoreSignatures = ignoreSignatures;
            IntrospectJwtTokens = introspectJwtTokens;
            IntrospectionAccept = introspectionAccept;
            IntrospectionCheckActive = introspectionCheckActive;
            IntrospectionEndpoint = introspectionEndpoint;
            IntrospectionEndpointAuthMethod = introspectionEndpointAuthMethod;
            IntrospectionHeadersClients = introspectionHeadersClients;
            IntrospectionHeadersNames = introspectionHeadersNames;
            IntrospectionHeadersValues = introspectionHeadersValues;
            IntrospectionHint = introspectionHint;
            IntrospectionPostArgsClients = introspectionPostArgsClients;
            IntrospectionPostArgsNames = introspectionPostArgsNames;
            IntrospectionPostArgsValues = introspectionPostArgsValues;
            IntrospectionTokenParamName = introspectionTokenParamName;
            Issuer = issuer;
            IssuersAlloweds = issuersAlloweds;
            JwtSessionClaim = jwtSessionClaim;
            JwtSessionCookie = jwtSessionCookie;
            Keepalive = keepalive;
            Leeway = leeway;
            LoginAction = loginAction;
            LoginMethods = loginMethods;
            LoginRedirectMode = loginRedirectMode;
            LoginRedirectUris = loginRedirectUris;
            LoginTokens = loginTokens;
            LogoutMethods = logoutMethods;
            LogoutPostArg = logoutPostArg;
            LogoutQueryArg = logoutQueryArg;
            LogoutRedirectUris = logoutRedirectUris;
            LogoutRevoke = logoutRevoke;
            LogoutRevokeAccessToken = logoutRevokeAccessToken;
            LogoutRevokeRefreshToken = logoutRevokeRefreshToken;
            LogoutUriSuffix = logoutUriSuffix;
            MaxAge = maxAge;
            MtlsIntrospectionEndpoint = mtlsIntrospectionEndpoint;
            MtlsRevocationEndpoint = mtlsRevocationEndpoint;
            MtlsTokenEndpoint = mtlsTokenEndpoint;
            NoProxy = noProxy;
            PasswordParamTypes = passwordParamTypes;
            PreserveQueryArgs = preserveQueryArgs;
            ProofOfPossessionAuthMethodsValidation = proofOfPossessionAuthMethodsValidation;
            ProofOfPossessionDpop = proofOfPossessionDpop;
            ProofOfPossessionMtls = proofOfPossessionMtls;
            PushedAuthorizationRequestEndpoint = pushedAuthorizationRequestEndpoint;
            PushedAuthorizationRequestEndpointAuthMethod = pushedAuthorizationRequestEndpointAuthMethod;
            RedirectUris = redirectUris;
            RediscoveryLifetime = rediscoveryLifetime;
            RefreshTokenParamName = refreshTokenParamName;
            RefreshTokenParamTypes = refreshTokenParamTypes;
            RefreshTokens = refreshTokens;
            RequireProofKeyForCodeExchange = requireProofKeyForCodeExchange;
            RequirePushedAuthorizationRequests = requirePushedAuthorizationRequests;
            RequireSignedRequestObject = requireSignedRequestObject;
            ResolveDistributedClaims = resolveDistributedClaims;
            ResponseMode = responseMode;
            ResponseTypes = responseTypes;
            Reverify = reverify;
            RevocationEndpoint = revocationEndpoint;
            RevocationEndpointAuthMethod = revocationEndpointAuthMethod;
            RevocationTokenParamName = revocationTokenParamName;
            RolesClaims = rolesClaims;
            RolesRequireds = rolesRequireds;
            RunOnPreflight = runOnPreflight;
            Scopes = scopes;
            ScopesClaims = scopesClaims;
            ScopesRequireds = scopesRequireds;
            SearchUserInfo = searchUserInfo;
            SessionAbsoluteTimeout = sessionAbsoluteTimeout;
            SessionAudience = sessionAudience;
            SessionCookieDomain = sessionCookieDomain;
            SessionCookieHttpOnly = sessionCookieHttpOnly;
            SessionCookieName = sessionCookieName;
            SessionCookiePath = sessionCookiePath;
            SessionCookieSameSite = sessionCookieSameSite;
            SessionCookieSecure = sessionCookieSecure;
            SessionEnforceSameSubject = sessionEnforceSameSubject;
            SessionHashStorageKey = sessionHashStorageKey;
            SessionHashSubject = sessionHashSubject;
            SessionIdlingTimeout = sessionIdlingTimeout;
            SessionMemcachedHost = sessionMemcachedHost;
            SessionMemcachedPort = sessionMemcachedPort;
            SessionMemcachedPrefix = sessionMemcachedPrefix;
            SessionMemcachedSocket = sessionMemcachedSocket;
            SessionRedisClusterMaxRedirections = sessionRedisClusterMaxRedirections;
            SessionRedisClusterNodes = sessionRedisClusterNodes;
            SessionRedisConnectTimeout = sessionRedisConnectTimeout;
            SessionRedisHost = sessionRedisHost;
            SessionRedisPassword = sessionRedisPassword;
            SessionRedisPort = sessionRedisPort;
            SessionRedisPrefix = sessionRedisPrefix;
            SessionRedisReadTimeout = sessionRedisReadTimeout;
            SessionRedisSendTimeout = sessionRedisSendTimeout;
            SessionRedisServerName = sessionRedisServerName;
            SessionRedisSocket = sessionRedisSocket;
            SessionRedisSsl = sessionRedisSsl;
            SessionRedisSslVerify = sessionRedisSslVerify;
            SessionRedisUsername = sessionRedisUsername;
            SessionRemember = sessionRemember;
            SessionRememberAbsoluteTimeout = sessionRememberAbsoluteTimeout;
            SessionRememberCookieName = sessionRememberCookieName;
            SessionRememberRollingTimeout = sessionRememberRollingTimeout;
            SessionRequestHeaders = sessionRequestHeaders;
            SessionResponseHeaders = sessionResponseHeaders;
            SessionRollingTimeout = sessionRollingTimeout;
            SessionSecret = sessionSecret;
            SessionStorage = sessionStorage;
            SessionStoreMetadata = sessionStoreMetadata;
            SslVerify = sslVerify;
            Timeout = timeout;
            TlsClientAuthCertId = tlsClientAuthCertId;
            TlsClientAuthSslVerify = tlsClientAuthSslVerify;
            TokenCacheKeyIncludeScope = tokenCacheKeyIncludeScope;
            TokenEndpoint = tokenEndpoint;
            TokenEndpointAuthMethod = tokenEndpointAuthMethod;
            TokenExchangeEndpoint = tokenExchangeEndpoint;
            TokenHeadersClients = tokenHeadersClients;
            TokenHeadersGrants = tokenHeadersGrants;
            TokenHeadersNames = tokenHeadersNames;
            TokenHeadersPrefix = tokenHeadersPrefix;
            TokenHeadersReplays = tokenHeadersReplays;
            TokenHeadersValues = tokenHeadersValues;
            TokenPostArgsClients = tokenPostArgsClients;
            TokenPostArgsNames = tokenPostArgsNames;
            TokenPostArgsValues = tokenPostArgsValues;
            UnauthorizedDestroySession = unauthorizedDestroySession;
            UnauthorizedErrorMessage = unauthorizedErrorMessage;
            UnauthorizedRedirectUris = unauthorizedRedirectUris;
            UnexpectedRedirectUris = unexpectedRedirectUris;
            UpstreamAccessTokenHeader = upstreamAccessTokenHeader;
            UpstreamAccessTokenJwkHeader = upstreamAccessTokenJwkHeader;
            UpstreamHeadersClaims = upstreamHeadersClaims;
            UpstreamHeadersNames = upstreamHeadersNames;
            UpstreamIdTokenHeader = upstreamIdTokenHeader;
            UpstreamIdTokenJwkHeader = upstreamIdTokenJwkHeader;
            UpstreamIntrospectionHeader = upstreamIntrospectionHeader;
            UpstreamIntrospectionJwtHeader = upstreamIntrospectionJwtHeader;
            UpstreamRefreshTokenHeader = upstreamRefreshTokenHeader;
            UpstreamSessionIdHeader = upstreamSessionIdHeader;
            UpstreamUserInfoHeader = upstreamUserInfoHeader;
            UpstreamUserInfoJwtHeader = upstreamUserInfoJwtHeader;
            UserinfoAccept = userinfoAccept;
            UserinfoEndpoint = userinfoEndpoint;
            UserinfoHeadersClients = userinfoHeadersClients;
            UserinfoHeadersNames = userinfoHeadersNames;
            UserinfoHeadersValues = userinfoHeadersValues;
            UserinfoQueryArgsClients = userinfoQueryArgsClients;
            UserinfoQueryArgsNames = userinfoQueryArgsNames;
            UserinfoQueryArgsValues = userinfoQueryArgsValues;
            UsingPseudoIssuer = usingPseudoIssuer;
            VerifyClaims = verifyClaims;
            VerifyNonce = verifyNonce;
            VerifyParameters = verifyParameters;
            VerifySignature = verifySignature;
        }
    }
}
