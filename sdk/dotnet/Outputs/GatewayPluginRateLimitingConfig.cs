// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Outputs
{

    [OutputType]
    public sealed class GatewayPluginRateLimitingConfig
    {
        /// <summary>
        /// The number of HTTP requests that can be made per day.
        /// </summary>
        public readonly double? Day;
        /// <summary>
        /// Set a custom error code to return when the rate limit is exceeded.
        /// </summary>
        public readonly double? ErrorCode;
        /// <summary>
        /// Set a custom error message to return when the rate limit is exceeded.
        /// </summary>
        public readonly string? ErrorMessage;
        /// <summary>
        /// A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.
        /// </summary>
        public readonly bool? FaultTolerant;
        /// <summary>
        /// A string representing an HTTP header name.
        /// </summary>
        public readonly string? HeaderName;
        /// <summary>
        /// Optionally hide informative response headers.
        /// </summary>
        public readonly bool? HideClientHeaders;
        /// <summary>
        /// The number of HTTP requests that can be made per hour.
        /// </summary>
        public readonly double? Hour;
        /// <summary>
        /// The entity that is used when aggregating the limits. must be one of ["consumer", "credential", "ip", "service", "header", "path", "consumer-group"]
        /// </summary>
        public readonly string? LimitBy;
        /// <summary>
        /// The number of HTTP requests that can be made per minute.
        /// </summary>
        public readonly double? Minute;
        /// <summary>
        /// The number of HTTP requests that can be made per month.
        /// </summary>
        public readonly double? Month;
        /// <summary>
        /// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// The rate-limiting policies to use for retrieving and incrementing the limits. must be one of ["local", "cluster", "redis"]
        /// </summary>
        public readonly string? Policy;
        /// <summary>
        /// Redis configuration
        /// </summary>
        public readonly Outputs.GatewayPluginRateLimitingConfigRedis? Redis;
        /// <summary>
        /// The number of HTTP requests that can be made per second.
        /// </summary>
        public readonly double? Second;
        /// <summary>
        /// How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.
        /// </summary>
        public readonly double? SyncRate;
        /// <summary>
        /// The number of HTTP requests that can be made per year.
        /// </summary>
        public readonly double? Year;

        [OutputConstructor]
        private GatewayPluginRateLimitingConfig(
            double? day,

            double? errorCode,

            string? errorMessage,

            bool? faultTolerant,

            string? headerName,

            bool? hideClientHeaders,

            double? hour,

            string? limitBy,

            double? minute,

            double? month,

            string? path,

            string? policy,

            Outputs.GatewayPluginRateLimitingConfigRedis? redis,

            double? second,

            double? syncRate,

            double? year)
        {
            Day = day;
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
            FaultTolerant = faultTolerant;
            HeaderName = headerName;
            HideClientHeaders = hideClientHeaders;
            Hour = hour;
            LimitBy = limitBy;
            Minute = minute;
            Month = month;
            Path = path;
            Policy = policy;
            Redis = redis;
            Second = second;
            SyncRate = syncRate;
            Year = year;
        }
    }
}
