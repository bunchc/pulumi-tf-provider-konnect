// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect.Outputs
{

    [OutputType]
    public sealed class GetGatewayPluginSamlConfigResult
    {
        /// <summary>
        /// An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.
        /// </summary>
        public readonly string Anonymous;
        /// <summary>
        /// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        /// </summary>
        public readonly string AssertionConsumerPath;
        /// <summary>
        /// The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.
        /// </summary>
        public readonly string IdpCertificate;
        /// <summary>
        /// A string representing a URL, such as https://example.com/path/to/resource?q=search.
        /// </summary>
        public readonly string IdpSsoUrl;
        /// <summary>
        /// The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`. must be one of ["Unspecified", "EmailAddress", "Persistent", "Transient"]
        /// </summary>
        public readonly string NameidFormat;
        /// <summary>
        /// The digest algorithm for Authn requests: - `SHA256` - `SHA1`. must be one of ["SHA256", "SHA1"]
        /// </summary>
        public readonly string RequestDigestAlgorithm;
        /// <summary>
        /// The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of ["SHA256", "SHA384", "SHA512"]
        /// </summary>
        public readonly string RequestSignatureAlgorithm;
        /// <summary>
        /// The certificate for signing requests.
        /// </summary>
        public readonly string RequestSigningCertificate;
        /// <summary>
        /// The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.
        /// </summary>
        public readonly string RequestSigningKey;
        /// <summary>
        /// The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`. must be one of ["SHA256", "SHA1"]
        /// </summary>
        public readonly string ResponseDigestAlgorithm;
        /// <summary>
        /// The private encryption key required to decrypt encrypted assertions.
        /// </summary>
        public readonly string ResponseEncryptionKey;
        /// <summary>
        /// The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`. must be one of ["SHA256", "SHA384", "SHA512"]
        /// </summary>
        public readonly string ResponseSignatureAlgorithm;
        /// <summary>
        /// The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
        /// </summary>
        public readonly double SessionAbsoluteTimeout;
        /// <summary>
        /// The session audience, for example "my-application"
        /// </summary>
        public readonly string SessionAudience;
        /// <summary>
        /// The session cookie domain flag.
        /// </summary>
        public readonly string SessionCookieDomain;
        /// <summary>
        /// Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.
        /// </summary>
        public readonly bool SessionCookieHttpOnly;
        /// <summary>
        /// The session cookie name.
        /// </summary>
        public readonly string SessionCookieName;
        /// <summary>
        /// A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).
        /// </summary>
        public readonly string SessionCookiePath;
        /// <summary>
        /// Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks. must be one of ["Strict", "Lax", "None", "Default"]
        /// </summary>
        public readonly string SessionCookieSameSite;
        /// <summary>
        /// The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.
        /// </summary>
        public readonly bool SessionCookieSecure;
        /// <summary>
        /// When set to `true`, audiences are forced to share the same subject.
        /// </summary>
        public readonly bool SessionEnforceSameSubject;
        /// <summary>
        /// When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.
        /// </summary>
        public readonly bool SessionHashStorageKey;
        /// <summary>
        /// When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.
        /// </summary>
        public readonly bool SessionHashSubject;
        /// <summary>
        /// The session cookie idle time in seconds.
        /// </summary>
        public readonly double SessionIdlingTimeout;
        /// <summary>
        /// The memcached host.
        /// </summary>
        public readonly string SessionMemcachedHost;
        /// <summary>
        /// An integer representing a port number between 0 and 65535, inclusive.
        /// </summary>
        public readonly int SessionMemcachedPort;
        /// <summary>
        /// The memcached session key prefix.
        /// </summary>
        public readonly string SessionMemcachedPrefix;
        /// <summary>
        /// The memcached unix socket path.
        /// </summary>
        public readonly string SessionMemcachedSocket;
        /// <summary>
        /// The Redis cluster maximum redirects.
        /// </summary>
        public readonly int SessionRedisClusterMaxRedirections;
        /// <summary>
        /// The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewayPluginSamlConfigSessionRedisClusterNodeResult> SessionRedisClusterNodes;
        /// <summary>
        /// The Redis connection timeout in milliseconds.
        /// </summary>
        public readonly int SessionRedisConnectTimeout;
        /// <summary>
        /// The Redis host IP.
        /// </summary>
        public readonly string SessionRedisHost;
        /// <summary>
        /// Password to use for Redis connection when the `redis` session storage is defined. If undefined, no auth commands are sent to Redis. This value is pulled from
        /// </summary>
        public readonly string SessionRedisPassword;
        /// <summary>
        /// An integer representing a port number between 0 and 65535, inclusive.
        /// </summary>
        public readonly int SessionRedisPort;
        /// <summary>
        /// The Redis session key prefix.
        /// </summary>
        public readonly string SessionRedisPrefix;
        /// <summary>
        /// The Redis read timeout in milliseconds.
        /// </summary>
        public readonly int SessionRedisReadTimeout;
        /// <summary>
        /// The Redis send timeout in milliseconds.
        /// </summary>
        public readonly int SessionRedisSendTimeout;
        /// <summary>
        /// The SNI used for connecting to the Redis server.
        /// </summary>
        public readonly string SessionRedisServerName;
        /// <summary>
        /// The Redis unix socket path.
        /// </summary>
        public readonly string SessionRedisSocket;
        /// <summary>
        /// Use SSL/TLS for the Redis connection.
        /// </summary>
        public readonly bool SessionRedisSsl;
        /// <summary>
        /// Verify the Redis server certificate.
        /// </summary>
        public readonly bool SessionRedisSslVerify;
        /// <summary>
        /// Redis username if the `redis` session storage is defined and ACL authentication is desired.If undefined, ACL authentication will not be performed.  This requires Redis v6.0.0+. The username **cannot** be set to `default`.
        /// </summary>
        public readonly string SessionRedisUsername;
        /// <summary>
        /// Enables or disables persistent sessions
        /// </summary>
        public readonly bool SessionRemember;
        /// <summary>
        /// Persistent session absolute timeout in seconds.
        /// </summary>
        public readonly double SessionRememberAbsoluteTimeout;
        /// <summary>
        /// Persistent session cookie name
        /// </summary>
        public readonly string SessionRememberCookieName;
        /// <summary>
        /// Persistent session rolling timeout in seconds.
        /// </summary>
        public readonly double SessionRememberRollingTimeout;
        public readonly ImmutableArray<string> SessionRequestHeaders;
        public readonly ImmutableArray<string> SessionResponseHeaders;
        /// <summary>
        /// The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.
        /// </summary>
        public readonly double SessionRollingTimeout;
        /// <summary>
        /// The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.
        /// </summary>
        public readonly string SessionSecret;
        /// <summary>
        /// The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis. must be one of ["cookie", "memcache", "memcached", "redis"]
        /// </summary>
        public readonly string SessionStorage;
        /// <summary>
        /// Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.
        /// </summary>
        public readonly bool SessionStoreMetadata;
        /// <summary>
        /// Enable signature validation for SAML responses.
        /// </summary>
        public readonly bool ValidateAssertionSignature;

        [OutputConstructor]
        private GetGatewayPluginSamlConfigResult(
            string anonymous,

            string assertionConsumerPath,

            string idpCertificate,

            string idpSsoUrl,

            string issuer,

            string nameidFormat,

            string requestDigestAlgorithm,

            string requestSignatureAlgorithm,

            string requestSigningCertificate,

            string requestSigningKey,

            string responseDigestAlgorithm,

            string responseEncryptionKey,

            string responseSignatureAlgorithm,

            double sessionAbsoluteTimeout,

            string sessionAudience,

            string sessionCookieDomain,

            bool sessionCookieHttpOnly,

            string sessionCookieName,

            string sessionCookiePath,

            string sessionCookieSameSite,

            bool sessionCookieSecure,

            bool sessionEnforceSameSubject,

            bool sessionHashStorageKey,

            bool sessionHashSubject,

            double sessionIdlingTimeout,

            string sessionMemcachedHost,

            int sessionMemcachedPort,

            string sessionMemcachedPrefix,

            string sessionMemcachedSocket,

            int sessionRedisClusterMaxRedirections,

            ImmutableArray<Outputs.GetGatewayPluginSamlConfigSessionRedisClusterNodeResult> sessionRedisClusterNodes,

            int sessionRedisConnectTimeout,

            string sessionRedisHost,

            string sessionRedisPassword,

            int sessionRedisPort,

            string sessionRedisPrefix,

            int sessionRedisReadTimeout,

            int sessionRedisSendTimeout,

            string sessionRedisServerName,

            string sessionRedisSocket,

            bool sessionRedisSsl,

            bool sessionRedisSslVerify,

            string sessionRedisUsername,

            bool sessionRemember,

            double sessionRememberAbsoluteTimeout,

            string sessionRememberCookieName,

            double sessionRememberRollingTimeout,

            ImmutableArray<string> sessionRequestHeaders,

            ImmutableArray<string> sessionResponseHeaders,

            double sessionRollingTimeout,

            string sessionSecret,

            string sessionStorage,

            bool sessionStoreMetadata,

            bool validateAssertionSignature)
        {
            Anonymous = anonymous;
            AssertionConsumerPath = assertionConsumerPath;
            IdpCertificate = idpCertificate;
            IdpSsoUrl = idpSsoUrl;
            Issuer = issuer;
            NameidFormat = nameidFormat;
            RequestDigestAlgorithm = requestDigestAlgorithm;
            RequestSignatureAlgorithm = requestSignatureAlgorithm;
            RequestSigningCertificate = requestSigningCertificate;
            RequestSigningKey = requestSigningKey;
            ResponseDigestAlgorithm = responseDigestAlgorithm;
            ResponseEncryptionKey = responseEncryptionKey;
            ResponseSignatureAlgorithm = responseSignatureAlgorithm;
            SessionAbsoluteTimeout = sessionAbsoluteTimeout;
            SessionAudience = sessionAudience;
            SessionCookieDomain = sessionCookieDomain;
            SessionCookieHttpOnly = sessionCookieHttpOnly;
            SessionCookieName = sessionCookieName;
            SessionCookiePath = sessionCookiePath;
            SessionCookieSameSite = sessionCookieSameSite;
            SessionCookieSecure = sessionCookieSecure;
            SessionEnforceSameSubject = sessionEnforceSameSubject;
            SessionHashStorageKey = sessionHashStorageKey;
            SessionHashSubject = sessionHashSubject;
            SessionIdlingTimeout = sessionIdlingTimeout;
            SessionMemcachedHost = sessionMemcachedHost;
            SessionMemcachedPort = sessionMemcachedPort;
            SessionMemcachedPrefix = sessionMemcachedPrefix;
            SessionMemcachedSocket = sessionMemcachedSocket;
            SessionRedisClusterMaxRedirections = sessionRedisClusterMaxRedirections;
            SessionRedisClusterNodes = sessionRedisClusterNodes;
            SessionRedisConnectTimeout = sessionRedisConnectTimeout;
            SessionRedisHost = sessionRedisHost;
            SessionRedisPassword = sessionRedisPassword;
            SessionRedisPort = sessionRedisPort;
            SessionRedisPrefix = sessionRedisPrefix;
            SessionRedisReadTimeout = sessionRedisReadTimeout;
            SessionRedisSendTimeout = sessionRedisSendTimeout;
            SessionRedisServerName = sessionRedisServerName;
            SessionRedisSocket = sessionRedisSocket;
            SessionRedisSsl = sessionRedisSsl;
            SessionRedisSslVerify = sessionRedisSslVerify;
            SessionRedisUsername = sessionRedisUsername;
            SessionRemember = sessionRemember;
            SessionRememberAbsoluteTimeout = sessionRememberAbsoluteTimeout;
            SessionRememberCookieName = sessionRememberCookieName;
            SessionRememberRollingTimeout = sessionRememberRollingTimeout;
            SessionRequestHeaders = sessionRequestHeaders;
            SessionResponseHeaders = sessionResponseHeaders;
            SessionRollingTimeout = sessionRollingTimeout;
            SessionSecret = sessionSecret;
            SessionStorage = sessionStorage;
            SessionStoreMetadata = sessionStoreMetadata;
            ValidateAssertionSignature = validateAssertionSignature;
        }
    }
}
