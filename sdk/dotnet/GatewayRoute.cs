// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// GatewayRoute Resource
    /// </summary>
    [KonnectResourceType("konnect:index/gatewayRoute:GatewayRoute")]
    public partial class GatewayRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Output("controlPlaneId")]
        public Output<string> ControlPlaneId { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
        /// </summary>
        [Output("destinations")]
        public Output<ImmutableArray<Outputs.GatewayRouteDestination>> Destinations { get; private set; } = null!;

        /// <summary>
        /// One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableDictionary<string, string>> Headers { get; private set; } = null!;

        /// <summary>
        /// A list of domain names that match this Route. Note that the hosts value is case sensitive.
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<string>> Hosts { get; private set; } = null!;

        /// <summary>
        /// The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of ["426", "301", "302", "307", "308"]
        /// </summary>
        [Output("httpsRedirectStatusCode")]
        public Output<int> HttpsRedirectStatusCode { get; private set; } = null!;

        /// <summary>
        /// A list of HTTP methods that match this Route.
        /// </summary>
        [Output("methods")]
        public Output<ImmutableArray<string>> Methods { get; private set; } = null!;

        /// <summary>
        /// The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of ["v0", "v1"]
        /// </summary>
        [Output("pathHandling")]
        public Output<string> PathHandling { get; private set; } = null!;

        /// <summary>
        /// A list of paths that match this Route.
        /// </summary>
        [Output("paths")]
        public Output<ImmutableArray<string>> Paths { get; private set; } = null!;

        /// <summary>
        /// When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
        /// </summary>
        [Output("preserveHost")]
        public Output<bool> PreserveHost { get; private set; } = null!;

        /// <summary>
        /// An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
        /// </summary>
        [Output("protocols")]
        public Output<ImmutableArray<string>> Protocols { get; private set; } = null!;

        /// <summary>
        /// A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
        /// </summary>
        [Output("regexPriority")]
        public Output<int> RegexPriority { get; private set; } = null!;

        /// <summary>
        /// Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
        /// </summary>
        [Output("requestBuffering")]
        public Output<bool> RequestBuffering { get; private set; } = null!;

        /// <summary>
        /// Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
        /// </summary>
        [Output("responseBuffering")]
        public Output<bool> ResponseBuffering { get; private set; } = null!;

        /// <summary>
        /// The Service this Route is associated to. This is where the Route proxies traffic to.
        /// </summary>
        [Output("service")]
        public Output<Outputs.GatewayRouteService> Service { get; private set; } = null!;

        /// <summary>
        /// A list of SNIs that match this Route when using stream routing.
        /// </summary>
        [Output("snis")]
        public Output<ImmutableArray<string>> Snis { get; private set; } = null!;

        /// <summary>
        /// A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Outputs.GatewayRouteSource>> Sources { get; private set; } = null!;

        /// <summary>
        /// When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
        /// </summary>
        [Output("stripPath")]
        public Output<bool> StripPath { get; private set; } = null!;

        /// <summary>
        /// An optional set of strings associated with the Route for grouping and filtering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayRoute(string name, GatewayRouteArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayRoute:GatewayRoute", name, args ?? new GatewayRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayRoute(string name, Input<string> id, GatewayRouteState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayRoute:GatewayRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayRoute Get(string name, Input<string> id, GatewayRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayRoute(name, id, state, options);
        }
    }

    public sealed class GatewayRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        [Input("destinations")]
        private InputList<Inputs.GatewayRouteDestinationArgs>? _destinations;

        /// <summary>
        /// A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
        /// </summary>
        public InputList<Inputs.GatewayRouteDestinationArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.GatewayRouteDestinationArgs>());
            set => _destinations = value;
        }

        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// A list of domain names that match this Route. Note that the hosts value is case sensitive.
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of ["426", "301", "302", "307", "308"]
        /// </summary>
        [Input("httpsRedirectStatusCode")]
        public Input<int>? HttpsRedirectStatusCode { get; set; }

        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// A list of HTTP methods that match this Route.
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        /// <summary>
        /// The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of ["v0", "v1"]
        /// </summary>
        [Input("pathHandling")]
        public Input<string>? PathHandling { get; set; }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// A list of paths that match this Route.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
        /// </summary>
        [Input("preserveHost")]
        public Input<bool>? PreserveHost { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
        /// </summary>
        [Input("regexPriority")]
        public Input<int>? RegexPriority { get; set; }

        /// <summary>
        /// Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
        /// </summary>
        [Input("requestBuffering")]
        public Input<bool>? RequestBuffering { get; set; }

        /// <summary>
        /// Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
        /// </summary>
        [Input("responseBuffering")]
        public Input<bool>? ResponseBuffering { get; set; }

        /// <summary>
        /// The Service this Route is associated to. This is where the Route proxies traffic to.
        /// </summary>
        [Input("service")]
        public Input<Inputs.GatewayRouteServiceArgs>? Service { get; set; }

        [Input("snis")]
        private InputList<string>? _snis;

        /// <summary>
        /// A list of SNIs that match this Route when using stream routing.
        /// </summary>
        public InputList<string> Snis
        {
            get => _snis ?? (_snis = new InputList<string>());
            set => _snis = value;
        }

        [Input("sources")]
        private InputList<Inputs.GatewayRouteSourceArgs>? _sources;

        /// <summary>
        /// A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
        /// </summary>
        public InputList<Inputs.GatewayRouteSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.GatewayRouteSourceArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
        /// </summary>
        [Input("stripPath")]
        public Input<bool>? StripPath { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Route for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GatewayRouteArgs()
        {
        }
        public static new GatewayRouteArgs Empty => new GatewayRouteArgs();
    }

    public sealed class GatewayRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId")]
        public Input<string>? ControlPlaneId { get; set; }

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        [Input("destinations")]
        private InputList<Inputs.GatewayRouteDestinationGetArgs>? _destinations;

        /// <summary>
        /// A list of IP destinations of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
        /// </summary>
        public InputList<Inputs.GatewayRouteDestinationGetArgs> Destinations
        {
            get => _destinations ?? (_destinations = new InputList<Inputs.GatewayRouteDestinationGetArgs>());
            set => _destinations = value;
        }

        [Input("headers")]
        private InputMap<string>? _headers;

        /// <summary>
        /// One or more lists of values indexed by header name that will cause this Route to match if present in the request. The `Host` header cannot be used with this attribute: hosts should be specified using the `hosts` attribute. When `headers` contains only one value and that value starts with the special prefix `~*`, the value is interpreted as a regular expression.
        /// </summary>
        public InputMap<string> Headers
        {
            get => _headers ?? (_headers = new InputMap<string>());
            set => _headers = value;
        }

        [Input("hosts")]
        private InputList<string>? _hosts;

        /// <summary>
        /// A list of domain names that match this Route. Note that the hosts value is case sensitive.
        /// </summary>
        public InputList<string> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<string>());
            set => _hosts = value;
        }

        /// <summary>
        /// The status code Kong responds with when all properties of a Route match except the protocol i.e. if the protocol of the request is `HTTP` instead of `HTTPS`. `Location` header is injected by Kong if the field is set to 301, 302, 307 or 308. Note: This config applies only if the Route is configured to only accept the `https` protocol. must be one of ["426", "301", "302", "307", "308"]
        /// </summary>
        [Input("httpsRedirectStatusCode")]
        public Input<int>? HttpsRedirectStatusCode { get; set; }

        [Input("methods")]
        private InputList<string>? _methods;

        /// <summary>
        /// A list of HTTP methods that match this Route.
        /// </summary>
        public InputList<string> Methods
        {
            get => _methods ?? (_methods = new InputList<string>());
            set => _methods = value;
        }

        /// <summary>
        /// The name of the Route. Route names must be unique, and they are case sensitive. For example, there can be two different Routes named "test" and "Test".
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Controls how the Service path, Route path and requested path are combined when sending a request to the upstream. See above for a detailed description of each behavior. must be one of ["v0", "v1"]
        /// </summary>
        [Input("pathHandling")]
        public Input<string>? PathHandling { get; set; }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// A list of paths that match this Route.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// When matching a Route via one of the `hosts` domain names, use the request `Host` header in the upstream request headers. If set to `false`, the upstream `Host` header will be that of the Service's `host`.
        /// </summary>
        [Input("preserveHost")]
        public Input<bool>? PreserveHost { get; set; }

        [Input("protocols")]
        private InputList<string>? _protocols;

        /// <summary>
        /// An array of the protocols this Route should allow. See the Route Object section for a list of accepted protocols. When set to only `"https"`, HTTP requests are answered with an upgrade error. When set to only `"http"`, HTTPS requests are answered with an error.
        /// </summary>
        public InputList<string> Protocols
        {
            get => _protocols ?? (_protocols = new InputList<string>());
            set => _protocols = value;
        }

        /// <summary>
        /// A number used to choose which route resolves a given request when several routes match it using regexes simultaneously. When two routes match the path and have the same `regex_priority`, the older one (lowest `created_at`) is used. Note that the priority for non-regex routes is different (longer non-regex routes are matched before shorter ones).
        /// </summary>
        [Input("regexPriority")]
        public Input<int>? RegexPriority { get; set; }

        /// <summary>
        /// Whether to enable request body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that receive data with chunked transfer encoding.
        /// </summary>
        [Input("requestBuffering")]
        public Input<bool>? RequestBuffering { get; set; }

        /// <summary>
        /// Whether to enable response body buffering or not. With HTTP 1.1, it may make sense to turn this off on services that send data with chunked transfer encoding.
        /// </summary>
        [Input("responseBuffering")]
        public Input<bool>? ResponseBuffering { get; set; }

        /// <summary>
        /// The Service this Route is associated to. This is where the Route proxies traffic to.
        /// </summary>
        [Input("service")]
        public Input<Inputs.GatewayRouteServiceGetArgs>? Service { get; set; }

        [Input("snis")]
        private InputList<string>? _snis;

        /// <summary>
        /// A list of SNIs that match this Route when using stream routing.
        /// </summary>
        public InputList<string> Snis
        {
            get => _snis ?? (_snis = new InputList<string>());
            set => _snis = value;
        }

        [Input("sources")]
        private InputList<Inputs.GatewayRouteSourceGetArgs>? _sources;

        /// <summary>
        /// A list of IP sources of incoming connections that match this Route when using stream routing. Each entry is an object with fields "ip" (optionally in CIDR range notation) and/or "port".
        /// </summary>
        public InputList<Inputs.GatewayRouteSourceGetArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.GatewayRouteSourceGetArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// When matching a Route via one of the `paths`, strip the matching prefix from the upstream request URL.
        /// </summary>
        [Input("stripPath")]
        public Input<bool>? StripPath { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Route for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        public GatewayRouteState()
        {
        }
        public static new GatewayRouteState Empty => new GatewayRouteState();
    }
}
