// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// PortalAuth Resource
    /// </summary>
    [KonnectResourceType("konnect:index/portalAuth:PortalAuth")]
    public partial class PortalAuth : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The organization has basic auth enabled.
        /// </summary>
        [Output("basicAuthEnabled")]
        public Output<bool> BasicAuthEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether a Konnect Identity Admin assigns teams to a developer.
        /// </summary>
        [Output("konnectMappingEnabled")]
        public Output<bool> KonnectMappingEnabled { get; private set; } = null!;

        /// <summary>
        /// The organization has OIDC disabled.
        /// </summary>
        [Output("oidcAuthEnabled")]
        public Output<bool> OidcAuthEnabled { get; private set; } = null!;

        /// <summary>
        /// Mappings from a portal developer atribute to an Identity Provider claim.
        /// </summary>
        [Output("oidcClaimMappings")]
        public Output<Outputs.PortalAuthOidcClaimMappings?> OidcClaimMappings { get; private set; } = null!;

        [Output("oidcClientId")]
        public Output<string?> OidcClientId { get; private set; } = null!;

        [Output("oidcClientSecret")]
        public Output<string?> OidcClientSecret { get; private set; } = null!;

        /// <summary>
        /// Configuration properties for an OpenID Connect Identity Provider.
        /// </summary>
        [Output("oidcConfig")]
        public Output<Outputs.PortalAuthOidcConfig> OidcConfig { get; private set; } = null!;

        [Output("oidcIssuer")]
        public Output<string?> OidcIssuer { get; private set; } = null!;

        [Output("oidcScopes")]
        public Output<ImmutableArray<string>> OidcScopes { get; private set; } = null!;

        /// <summary>
        /// Whether IdP groups determine the Konnect Portal teams a developer has.
        /// </summary>
        [Output("oidcTeamMappingEnabled")]
        public Output<bool> OidcTeamMappingEnabled { get; private set; } = null!;

        /// <summary>
        /// ID of the portal.
        /// </summary>
        [Output("portalId")]
        public Output<string> PortalId { get; private set; } = null!;


        /// <summary>
        /// Create a PortalAuth resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PortalAuth(string name, PortalAuthArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/portalAuth:PortalAuth", name, args ?? new PortalAuthArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PortalAuth(string name, Input<string> id, PortalAuthState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/portalAuth:PortalAuth", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PortalAuth resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PortalAuth Get(string name, Input<string> id, PortalAuthState? state = null, CustomResourceOptions? options = null)
        {
            return new PortalAuth(name, id, state, options);
        }
    }

    public sealed class PortalAuthArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The organization has basic auth enabled.
        /// </summary>
        [Input("basicAuthEnabled")]
        public Input<bool>? BasicAuthEnabled { get; set; }

        /// <summary>
        /// Whether a Konnect Identity Admin assigns teams to a developer.
        /// </summary>
        [Input("konnectMappingEnabled")]
        public Input<bool>? KonnectMappingEnabled { get; set; }

        /// <summary>
        /// The organization has OIDC disabled.
        /// </summary>
        [Input("oidcAuthEnabled")]
        public Input<bool>? OidcAuthEnabled { get; set; }

        /// <summary>
        /// Mappings from a portal developer atribute to an Identity Provider claim.
        /// </summary>
        [Input("oidcClaimMappings")]
        public Input<Inputs.PortalAuthOidcClaimMappingsArgs>? OidcClaimMappings { get; set; }

        [Input("oidcClientId")]
        public Input<string>? OidcClientId { get; set; }

        [Input("oidcClientSecret")]
        public Input<string>? OidcClientSecret { get; set; }

        [Input("oidcIssuer")]
        public Input<string>? OidcIssuer { get; set; }

        [Input("oidcScopes")]
        private InputList<string>? _oidcScopes;
        public InputList<string> OidcScopes
        {
            get => _oidcScopes ?? (_oidcScopes = new InputList<string>());
            set => _oidcScopes = value;
        }

        /// <summary>
        /// Whether IdP groups determine the Konnect Portal teams a developer has.
        /// </summary>
        [Input("oidcTeamMappingEnabled")]
        public Input<bool>? OidcTeamMappingEnabled { get; set; }

        /// <summary>
        /// ID of the portal.
        /// </summary>
        [Input("portalId", required: true)]
        public Input<string> PortalId { get; set; } = null!;

        public PortalAuthArgs()
        {
        }
        public static new PortalAuthArgs Empty => new PortalAuthArgs();
    }

    public sealed class PortalAuthState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The organization has basic auth enabled.
        /// </summary>
        [Input("basicAuthEnabled")]
        public Input<bool>? BasicAuthEnabled { get; set; }

        /// <summary>
        /// Whether a Konnect Identity Admin assigns teams to a developer.
        /// </summary>
        [Input("konnectMappingEnabled")]
        public Input<bool>? KonnectMappingEnabled { get; set; }

        /// <summary>
        /// The organization has OIDC disabled.
        /// </summary>
        [Input("oidcAuthEnabled")]
        public Input<bool>? OidcAuthEnabled { get; set; }

        /// <summary>
        /// Mappings from a portal developer atribute to an Identity Provider claim.
        /// </summary>
        [Input("oidcClaimMappings")]
        public Input<Inputs.PortalAuthOidcClaimMappingsGetArgs>? OidcClaimMappings { get; set; }

        [Input("oidcClientId")]
        public Input<string>? OidcClientId { get; set; }

        [Input("oidcClientSecret")]
        public Input<string>? OidcClientSecret { get; set; }

        /// <summary>
        /// Configuration properties for an OpenID Connect Identity Provider.
        /// </summary>
        [Input("oidcConfig")]
        public Input<Inputs.PortalAuthOidcConfigGetArgs>? OidcConfig { get; set; }

        [Input("oidcIssuer")]
        public Input<string>? OidcIssuer { get; set; }

        [Input("oidcScopes")]
        private InputList<string>? _oidcScopes;
        public InputList<string> OidcScopes
        {
            get => _oidcScopes ?? (_oidcScopes = new InputList<string>());
            set => _oidcScopes = value;
        }

        /// <summary>
        /// Whether IdP groups determine the Konnect Portal teams a developer has.
        /// </summary>
        [Input("oidcTeamMappingEnabled")]
        public Input<bool>? OidcTeamMappingEnabled { get; set; }

        /// <summary>
        /// ID of the portal.
        /// </summary>
        [Input("portalId")]
        public Input<string>? PortalId { get; set; }

        public PortalAuthState()
        {
        }
        public static new PortalAuthState Empty => new PortalAuthState();
    }
}
