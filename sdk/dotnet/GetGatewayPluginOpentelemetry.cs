// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    public static class GetGatewayPluginOpentelemetry
    {
        public static Task<GetGatewayPluginOpentelemetryResult> InvokeAsync(GetGatewayPluginOpentelemetryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewayPluginOpentelemetryResult>("konnect:index/getGatewayPluginOpentelemetry:getGatewayPluginOpentelemetry", args ?? new GetGatewayPluginOpentelemetryArgs(), options.WithDefaults());

        public static Output<GetGatewayPluginOpentelemetryResult> Invoke(GetGatewayPluginOpentelemetryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayPluginOpentelemetryResult>("konnect:index/getGatewayPluginOpentelemetry:getGatewayPluginOpentelemetry", args ?? new GetGatewayPluginOpentelemetryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayPluginOpentelemetryArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public string ControlPlaneId { get; set; } = null!;

        public GetGatewayPluginOpentelemetryArgs()
        {
        }
        public static new GetGatewayPluginOpentelemetryArgs Empty => new GetGatewayPluginOpentelemetryArgs();
    }

    public sealed class GetGatewayPluginOpentelemetryInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        public GetGatewayPluginOpentelemetryInvokeArgs()
        {
        }
        public static new GetGatewayPluginOpentelemetryInvokeArgs Empty => new GetGatewayPluginOpentelemetryInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewayPluginOpentelemetryResult
    {
        public readonly Outputs.GetGatewayPluginOpentelemetryConfigResult Config;
        public readonly Outputs.GetGatewayPluginOpentelemetryConsumerResult Consumer;
        public readonly Outputs.GetGatewayPluginOpentelemetryConsumerGroupResult ConsumerGroup;
        public readonly string ControlPlaneId;
        public readonly int CreatedAt;
        public readonly bool Enabled;
        public readonly string Id;
        public readonly string InstanceName;
        public readonly ImmutableArray<string> Protocols;
        public readonly Outputs.GetGatewayPluginOpentelemetryRouteResult Route;
        public readonly Outputs.GetGatewayPluginOpentelemetryServiceResult Service;
        public readonly ImmutableArray<string> Tags;
        public readonly int UpdatedAt;

        [OutputConstructor]
        private GetGatewayPluginOpentelemetryResult(
            Outputs.GetGatewayPluginOpentelemetryConfigResult config,

            Outputs.GetGatewayPluginOpentelemetryConsumerResult consumer,

            Outputs.GetGatewayPluginOpentelemetryConsumerGroupResult consumerGroup,

            string controlPlaneId,

            int createdAt,

            bool enabled,

            string id,

            string instanceName,

            ImmutableArray<string> protocols,

            Outputs.GetGatewayPluginOpentelemetryRouteResult route,

            Outputs.GetGatewayPluginOpentelemetryServiceResult service,

            ImmutableArray<string> tags,

            int updatedAt)
        {
            Config = config;
            Consumer = consumer;
            ConsumerGroup = consumerGroup;
            ControlPlaneId = controlPlaneId;
            CreatedAt = createdAt;
            Enabled = enabled;
            Id = id;
            InstanceName = instanceName;
            Protocols = protocols;
            Route = route;
            Service = service;
            Tags = tags;
            UpdatedAt = updatedAt;
        }
    }
}
