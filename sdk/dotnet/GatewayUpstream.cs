// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// GatewayUpstream Resource
    /// </summary>
    [KonnectResourceType("konnect:index/gatewayUpstream:GatewayUpstream")]
    public partial class GatewayUpstream : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Which load balancing algorithm to use. must be one of ["consistent-hashing", "least-connections", "round-robin", "latency"]
        /// </summary>
        [Output("algorithm")]
        public Output<string> Algorithm { get; private set; } = null!;

        /// <summary>
        /// If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
        /// </summary>
        [Output("clientCertificate")]
        public Output<Outputs.GatewayUpstreamClientCertificate> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Output("controlPlaneId")]
        public Output<string> ControlPlaneId { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
        /// </summary>
        [Output("hashFallback")]
        public Output<string> HashFallback { get; private set; } = null!;

        /// <summary>
        /// The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
        /// </summary>
        [Output("hashFallbackHeader")]
        public Output<string> HashFallbackHeader { get; private set; } = null!;

        /// <summary>
        /// The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
        /// </summary>
        [Output("hashFallbackQueryArg")]
        public Output<string> HashFallbackQueryArg { get; private set; } = null!;

        /// <summary>
        /// The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
        /// </summary>
        [Output("hashFallbackUriCapture")]
        public Output<string> HashFallbackUriCapture { get; private set; } = null!;

        /// <summary>
        /// What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
        /// </summary>
        [Output("hashOn")]
        public Output<string> HashOn { get; private set; } = null!;

        /// <summary>
        /// The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
        /// </summary>
        [Output("hashOnCookie")]
        public Output<string> HashOnCookie { get; private set; } = null!;

        /// <summary>
        /// The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
        /// </summary>
        [Output("hashOnCookiePath")]
        public Output<string> HashOnCookiePath { get; private set; } = null!;

        /// <summary>
        /// The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
        /// </summary>
        [Output("hashOnHeader")]
        public Output<string> HashOnHeader { get; private set; } = null!;

        /// <summary>
        /// The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
        /// </summary>
        [Output("hashOnQueryArg")]
        public Output<string> HashOnQueryArg { get; private set; } = null!;

        /// <summary>
        /// The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
        /// </summary>
        [Output("hashOnUriCapture")]
        public Output<string> HashOnUriCapture { get; private set; } = null!;

        [Output("healthchecks")]
        public Output<Outputs.GatewayUpstreamHealthchecks> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// The hostname to be used as `Host` header when proxying requests through Kong.
        /// </summary>
        [Output("hostHeader")]
        public Output<string> HostHeader { get; private set; } = null!;

        /// <summary>
        /// This is a hostname, which must be equal to the `host` of a Service.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
        /// </summary>
        [Output("slots")]
        public Output<int> Slots { get; private set; } = null!;

        /// <summary>
        /// An optional set of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
        /// </summary>
        [Output("useSrvName")]
        public Output<bool> UseSrvName { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayUpstream resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayUpstream(string name, GatewayUpstreamArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayUpstream:GatewayUpstream", name, args ?? new GatewayUpstreamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayUpstream(string name, Input<string> id, GatewayUpstreamState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayUpstream:GatewayUpstream", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayUpstream resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayUpstream Get(string name, Input<string> id, GatewayUpstreamState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayUpstream(name, id, state, options);
        }
    }

    public sealed class GatewayUpstreamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Which load balancing algorithm to use. must be one of ["consistent-hashing", "least-connections", "round-robin", "latency"]
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
        /// </summary>
        [Input("clientCertificate")]
        public Input<Inputs.GatewayUpstreamClientCertificateArgs>? ClientCertificate { get; set; }

        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        /// <summary>
        /// What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
        /// </summary>
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        /// <summary>
        /// The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
        /// </summary>
        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        /// <summary>
        /// The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
        /// </summary>
        [Input("hashFallbackQueryArg")]
        public Input<string>? HashFallbackQueryArg { get; set; }

        /// <summary>
        /// The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
        /// </summary>
        [Input("hashFallbackUriCapture")]
        public Input<string>? HashFallbackUriCapture { get; set; }

        /// <summary>
        /// What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
        /// </summary>
        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        /// <summary>
        /// The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
        /// </summary>
        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        /// <summary>
        /// The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
        /// </summary>
        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        /// <summary>
        /// The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
        /// </summary>
        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        /// <summary>
        /// The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
        /// </summary>
        [Input("hashOnQueryArg")]
        public Input<string>? HashOnQueryArg { get; set; }

        /// <summary>
        /// The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
        /// </summary>
        [Input("hashOnUriCapture")]
        public Input<string>? HashOnUriCapture { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.GatewayUpstreamHealthchecksArgs>? Healthchecks { get; set; }

        /// <summary>
        /// The hostname to be used as `Host` header when proxying requests through Kong.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// This is a hostname, which must be equal to the `host` of a Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
        /// </summary>
        [Input("slots")]
        public Input<int>? Slots { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
        /// </summary>
        [Input("useSrvName")]
        public Input<bool>? UseSrvName { get; set; }

        public GatewayUpstreamArgs()
        {
        }
        public static new GatewayUpstreamArgs Empty => new GatewayUpstreamArgs();
    }

    public sealed class GatewayUpstreamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Which load balancing algorithm to use. must be one of ["consistent-hashing", "least-connections", "round-robin", "latency"]
        /// </summary>
        [Input("algorithm")]
        public Input<string>? Algorithm { get; set; }

        /// <summary>
        /// If set, the certificate to be used as client certificate while TLS handshaking to the upstream server.
        /// </summary>
        [Input("clientCertificate")]
        public Input<Inputs.GatewayUpstreamClientCertificateGetArgs>? ClientCertificate { get; set; }

        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId")]
        public Input<string>? ControlPlaneId { get; set; }

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// What to use as hashing input if the primary `hash_on` does not return a hash (eg. header is missing, or no Consumer identified). Not available if `hash_on` is set to `cookie`. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
        /// </summary>
        [Input("hashFallback")]
        public Input<string>? HashFallback { get; set; }

        /// <summary>
        /// The header name to take the value from as hash input. Only required when `hash_fallback` is set to `header`.
        /// </summary>
        [Input("hashFallbackHeader")]
        public Input<string>? HashFallbackHeader { get; set; }

        /// <summary>
        /// The name of the query string argument to take the value from as hash input. Only required when `hash_fallback` is set to `query_arg`.
        /// </summary>
        [Input("hashFallbackQueryArg")]
        public Input<string>? HashFallbackQueryArg { get; set; }

        /// <summary>
        /// The name of the route URI capture to take the value from as hash input. Only required when `hash_fallback` is set to `uri_capture`.
        /// </summary>
        [Input("hashFallbackUriCapture")]
        public Input<string>? HashFallbackUriCapture { get; set; }

        /// <summary>
        /// What to use as hashing input. Using `none` results in a weighted-round-robin scheme with no hashing. must be one of ["none", "consumer", "ip", "header", "cookie", "path", "query*arg", "uri*capture"]
        /// </summary>
        [Input("hashOn")]
        public Input<string>? HashOn { get; set; }

        /// <summary>
        /// The cookie name to take the value from as hash input. Only required when `hash_on` or `hash_fallback` is set to `cookie`. If the specified cookie is not in the request, Kong will generate a value and set the cookie in the response.
        /// </summary>
        [Input("hashOnCookie")]
        public Input<string>? HashOnCookie { get; set; }

        /// <summary>
        /// The cookie path to set in the response headers. Only required when `hash_on` or `hash_fallback` is set to `cookie`.
        /// </summary>
        [Input("hashOnCookiePath")]
        public Input<string>? HashOnCookiePath { get; set; }

        /// <summary>
        /// The header name to take the value from as hash input. Only required when `hash_on` is set to `header`.
        /// </summary>
        [Input("hashOnHeader")]
        public Input<string>? HashOnHeader { get; set; }

        /// <summary>
        /// The name of the query string argument to take the value from as hash input. Only required when `hash_on` is set to `query_arg`.
        /// </summary>
        [Input("hashOnQueryArg")]
        public Input<string>? HashOnQueryArg { get; set; }

        /// <summary>
        /// The name of the route URI capture to take the value from as hash input. Only required when `hash_on` is set to `uri_capture`.
        /// </summary>
        [Input("hashOnUriCapture")]
        public Input<string>? HashOnUriCapture { get; set; }

        [Input("healthchecks")]
        public Input<Inputs.GatewayUpstreamHealthchecksGetArgs>? Healthchecks { get; set; }

        /// <summary>
        /// The hostname to be used as `Host` header when proxying requests through Kong.
        /// </summary>
        [Input("hostHeader")]
        public Input<string>? HostHeader { get; set; }

        /// <summary>
        /// This is a hostname, which must be equal to the `host` of a Service.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The number of slots in the load balancer algorithm. If `algorithm` is set to `round-robin`, this setting determines the maximum number of slots. If `algorithm` is set to `consistent-hashing`, this setting determines the actual number of slots in the algorithm. Accepts an integer in the range `10`-`65536`.
        /// </summary>
        [Input("slots")]
        public Input<int>? Slots { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Upstream for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        /// <summary>
        /// If set, the balancer will use SRV hostname(if DNS Answer has SRV record) as the proxy upstream `Host`.
        /// </summary>
        [Input("useSrvName")]
        public Input<bool>? UseSrvName { get; set; }

        public GatewayUpstreamState()
        {
        }
        public static new GatewayUpstreamState Empty => new GatewayUpstreamState();
    }
}
