// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    public static class GetGatewayRoute
    {
        public static Task<GetGatewayRouteResult> InvokeAsync(GetGatewayRouteArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewayRouteResult>("konnect:index/getGatewayRoute:getGatewayRoute", args ?? new GetGatewayRouteArgs(), options.WithDefaults());

        public static Output<GetGatewayRouteResult> Invoke(GetGatewayRouteInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewayRouteResult>("konnect:index/getGatewayRoute:getGatewayRoute", args ?? new GetGatewayRouteInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewayRouteArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public string ControlPlaneId { get; set; } = null!;

        public GetGatewayRouteArgs()
        {
        }
        public static new GetGatewayRouteArgs Empty => new GetGatewayRouteArgs();
    }

    public sealed class GetGatewayRouteInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        public GetGatewayRouteInvokeArgs()
        {
        }
        public static new GetGatewayRouteInvokeArgs Empty => new GetGatewayRouteInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewayRouteResult
    {
        public readonly string ControlPlaneId;
        public readonly int CreatedAt;
        public readonly ImmutableArray<Outputs.GetGatewayRouteDestinationResult> Destinations;
        public readonly ImmutableDictionary<string, string> Headers;
        public readonly ImmutableArray<string> Hosts;
        public readonly int HttpsRedirectStatusCode;
        public readonly string Id;
        public readonly ImmutableArray<string> Methods;
        public readonly string Name;
        public readonly string PathHandling;
        public readonly ImmutableArray<string> Paths;
        public readonly bool PreserveHost;
        public readonly ImmutableArray<string> Protocols;
        public readonly int RegexPriority;
        public readonly bool RequestBuffering;
        public readonly bool ResponseBuffering;
        public readonly Outputs.GetGatewayRouteServiceResult Service;
        public readonly ImmutableArray<string> Snis;
        public readonly ImmutableArray<Outputs.GetGatewayRouteSourceResult> Sources;
        public readonly bool StripPath;
        public readonly ImmutableArray<string> Tags;
        public readonly int UpdatedAt;

        [OutputConstructor]
        private GetGatewayRouteResult(
            string controlPlaneId,

            int createdAt,

            ImmutableArray<Outputs.GetGatewayRouteDestinationResult> destinations,

            ImmutableDictionary<string, string> headers,

            ImmutableArray<string> hosts,

            int httpsRedirectStatusCode,

            string id,

            ImmutableArray<string> methods,

            string name,

            string pathHandling,

            ImmutableArray<string> paths,

            bool preserveHost,

            ImmutableArray<string> protocols,

            int regexPriority,

            bool requestBuffering,

            bool responseBuffering,

            Outputs.GetGatewayRouteServiceResult service,

            ImmutableArray<string> snis,

            ImmutableArray<Outputs.GetGatewayRouteSourceResult> sources,

            bool stripPath,

            ImmutableArray<string> tags,

            int updatedAt)
        {
            ControlPlaneId = controlPlaneId;
            CreatedAt = createdAt;
            Destinations = destinations;
            Headers = headers;
            Hosts = hosts;
            HttpsRedirectStatusCode = httpsRedirectStatusCode;
            Id = id;
            Methods = methods;
            Name = name;
            PathHandling = pathHandling;
            Paths = paths;
            PreserveHost = preserveHost;
            Protocols = protocols;
            RegexPriority = regexPriority;
            RequestBuffering = requestBuffering;
            ResponseBuffering = responseBuffering;
            Service = service;
            Snis = snis;
            Sources = sources;
            StripPath = stripPath;
            Tags = tags;
            UpdatedAt = updatedAt;
        }
    }
}
