// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// APIProductDocument Resource
    /// </summary>
    [KonnectResourceType("konnect:index/apiProductDocument:ApiProductDocument")]
    public partial class ApiProductDocument : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The API product identifier
        /// </summary>
        [Output("apiProductId")]
        public Output<string> ApiProductId { get; private set; } = null!;

        /// <summary>
        /// Can be markdown string content or base64 encoded string
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// An ISO-8601 timestamp representation of entity creation date.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// metadata of the document
        /// </summary>
        [Output("metadata")]
        public Output<Outputs.ApiProductDocumentMetadata> Metadata { get; private set; } = null!;

        /// <summary>
        /// parent document id
        /// </summary>
        [Output("parentDocumentId")]
        public Output<string> ParentDocumentId { get; private set; } = null!;

        /// <summary>
        /// document slug. must be unique accross documents belonging to an api product
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// document publish status. must be one of ["published", "unpublished"]
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// document title
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// An ISO-8601 timestamp representation of entity update date.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a ApiProductDocument resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiProductDocument(string name, ApiProductDocumentArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/apiProductDocument:ApiProductDocument", name, args ?? new ApiProductDocumentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiProductDocument(string name, Input<string> id, ApiProductDocumentState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/apiProductDocument:ApiProductDocument", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiProductDocument resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiProductDocument Get(string name, Input<string> id, ApiProductDocumentState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiProductDocument(name, id, state, options);
        }
    }

    public sealed class ApiProductDocumentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The API product identifier
        /// </summary>
        [Input("apiProductId", required: true)]
        public Input<string> ApiProductId { get; set; } = null!;

        /// <summary>
        /// Can be markdown string content or base64 encoded string
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// metadata of the document
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ApiProductDocumentMetadataArgs>? Metadata { get; set; }

        /// <summary>
        /// parent document id
        /// </summary>
        [Input("parentDocumentId")]
        public Input<string>? ParentDocumentId { get; set; }

        /// <summary>
        /// document slug. must be unique accross documents belonging to an api product
        /// </summary>
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        /// <summary>
        /// document publish status. must be one of ["published", "unpublished"]
        /// </summary>
        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        /// <summary>
        /// document title
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public ApiProductDocumentArgs()
        {
        }
        public static new ApiProductDocumentArgs Empty => new ApiProductDocumentArgs();
    }

    public sealed class ApiProductDocumentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The API product identifier
        /// </summary>
        [Input("apiProductId")]
        public Input<string>? ApiProductId { get; set; }

        /// <summary>
        /// Can be markdown string content or base64 encoded string
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// An ISO-8601 timestamp representation of entity creation date.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// metadata of the document
        /// </summary>
        [Input("metadata")]
        public Input<Inputs.ApiProductDocumentMetadataGetArgs>? Metadata { get; set; }

        /// <summary>
        /// parent document id
        /// </summary>
        [Input("parentDocumentId")]
        public Input<string>? ParentDocumentId { get; set; }

        /// <summary>
        /// document slug. must be unique accross documents belonging to an api product
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// document publish status. must be one of ["published", "unpublished"]
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// document title
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// An ISO-8601 timestamp representation of entity update date.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public ApiProductDocumentState()
        {
        }
        public static new ApiProductDocumentState Empty => new ApiProductDocumentState();
    }
}
