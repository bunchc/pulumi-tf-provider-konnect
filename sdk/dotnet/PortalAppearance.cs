// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// PortalAppearance Resource
    /// </summary>
    [KonnectResourceType("konnect:index/portalAppearance:PortalAppearance")]
    public partial class PortalAppearance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        /// </summary>
        [Output("customFonts")]
        public Output<Outputs.PortalAppearanceCustomFonts> CustomFonts { get; private set; } = null!;

        /// <summary>
        /// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        /// </summary>
        [Output("customTheme")]
        public Output<Outputs.PortalAppearanceCustomTheme> CustomTheme { get; private set; } = null!;

        /// <summary>
        /// A collection of binary image data to customize images in the portal
        /// </summary>
        [Output("images")]
        public Output<Outputs.PortalAppearanceImages> Images { get; private set; } = null!;

        /// <summary>
        /// ID of the portal.
        /// </summary>
        [Output("portalId")]
        public Output<string> PortalId { get; private set; } = null!;

        /// <summary>
        /// Values to display for customizable text in the portal user interface
        /// </summary>
        [Output("text")]
        public Output<Outputs.PortalAppearanceText> Text { get; private set; } = null!;

        /// <summary>
        /// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        /// </summary>
        [Output("themeName")]
        public Output<string> ThemeName { get; private set; } = null!;

        /// <summary>
        /// If true, fonts in custom_fonts will be used over the theme's default fonts
        /// </summary>
        [Output("useCustomFonts")]
        public Output<bool> UseCustomFonts { get; private set; } = null!;


        /// <summary>
        /// Create a PortalAppearance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PortalAppearance(string name, PortalAppearanceArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/portalAppearance:PortalAppearance", name, args ?? new PortalAppearanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PortalAppearance(string name, Input<string> id, PortalAppearanceState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/portalAppearance:PortalAppearance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PortalAppearance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PortalAppearance Get(string name, Input<string> id, PortalAppearanceState? state = null, CustomResourceOptions? options = null)
        {
            return new PortalAppearance(name, id, state, options);
        }
    }

    public sealed class PortalAppearanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        /// </summary>
        [Input("customFonts")]
        public Input<Inputs.PortalAppearanceCustomFontsArgs>? CustomFonts { get; set; }

        /// <summary>
        /// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        /// </summary>
        [Input("customTheme")]
        public Input<Inputs.PortalAppearanceCustomThemeArgs>? CustomTheme { get; set; }

        /// <summary>
        /// A collection of binary image data to customize images in the portal
        /// </summary>
        [Input("images")]
        public Input<Inputs.PortalAppearanceImagesArgs>? Images { get; set; }

        /// <summary>
        /// ID of the portal.
        /// </summary>
        [Input("portalId", required: true)]
        public Input<string> PortalId { get; set; } = null!;

        /// <summary>
        /// Values to display for customizable text in the portal user interface
        /// </summary>
        [Input("text")]
        public Input<Inputs.PortalAppearanceTextArgs>? Text { get; set; }

        /// <summary>
        /// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        /// </summary>
        [Input("themeName")]
        public Input<string>? ThemeName { get; set; }

        /// <summary>
        /// If true, fonts in custom_fonts will be used over the theme's default fonts
        /// </summary>
        [Input("useCustomFonts")]
        public Input<bool>? UseCustomFonts { get; set; }

        public PortalAppearanceArgs()
        {
        }
        public static new PortalAppearanceArgs Empty => new PortalAppearanceArgs();
    }

    public sealed class PortalAppearanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
        /// </summary>
        [Input("customFonts")]
        public Input<Inputs.PortalAppearanceCustomFontsGetArgs>? CustomFonts { get; set; }

        /// <summary>
        /// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
        /// </summary>
        [Input("customTheme")]
        public Input<Inputs.PortalAppearanceCustomThemeGetArgs>? CustomTheme { get; set; }

        /// <summary>
        /// A collection of binary image data to customize images in the portal
        /// </summary>
        [Input("images")]
        public Input<Inputs.PortalAppearanceImagesGetArgs>? Images { get; set; }

        /// <summary>
        /// ID of the portal.
        /// </summary>
        [Input("portalId")]
        public Input<string>? PortalId { get; set; }

        /// <summary>
        /// Values to display for customizable text in the portal user interface
        /// </summary>
        [Input("text")]
        public Input<Inputs.PortalAppearanceTextGetArgs>? Text { get; set; }

        /// <summary>
        /// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "dark_mode", "custom"]
        /// </summary>
        [Input("themeName")]
        public Input<string>? ThemeName { get; set; }

        /// <summary>
        /// If true, fonts in custom_fonts will be used over the theme's default fonts
        /// </summary>
        [Input("useCustomFonts")]
        public Input<bool>? UseCustomFonts { get; set; }

        public PortalAppearanceState()
        {
        }
        public static new PortalAppearanceState Empty => new PortalAppearanceState();
    }
}
