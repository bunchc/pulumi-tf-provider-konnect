// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// GatewayConsumer Resource
    /// </summary>
    [KonnectResourceType("konnect:index/gatewayConsumer:GatewayConsumer")]
    public partial class GatewayConsumer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Output("controlPlaneId")]
        public Output<string> ControlPlaneId { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
        /// </summary>
        [Output("customId")]
        public Output<string> CustomId { get; private set; } = null!;

        /// <summary>
        /// An optional set of strings associated with the Consumer for grouping and filtering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The unique username of the Consumer. You must send either this field or `custom_id` with the request.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayConsumer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayConsumer(string name, GatewayConsumerArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayConsumer:GatewayConsumer", name, args ?? new GatewayConsumerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayConsumer(string name, Input<string> id, GatewayConsumerState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayConsumer:GatewayConsumer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayConsumer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayConsumer Get(string name, Input<string> id, GatewayConsumerState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayConsumer(name, id, state, options);
        }
    }

    public sealed class GatewayConsumerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        /// <summary>
        /// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
        /// </summary>
        [Input("customId")]
        public Input<string>? CustomId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Consumer for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The unique username of the Consumer. You must send either this field or `custom_id` with the request.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GatewayConsumerArgs()
        {
        }
        public static new GatewayConsumerArgs Empty => new GatewayConsumerArgs();
    }

    public sealed class GatewayConsumerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId")]
        public Input<string>? ControlPlaneId { get; set; }

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
        /// </summary>
        [Input("customId")]
        public Input<string>? CustomId { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Consumer for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        /// <summary>
        /// The unique username of the Consumer. You must send either this field or `custom_id` with the request.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public GatewayConsumerState()
        {
        }
        public static new GatewayConsumerState Empty => new GatewayConsumerState();
    }
}
