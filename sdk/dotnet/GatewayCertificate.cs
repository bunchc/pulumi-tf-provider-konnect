// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// GatewayCertificate Resource
    /// </summary>
    [KonnectResourceType("konnect:index/gatewayCertificate:GatewayCertificate")]
    public partial class GatewayCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Output("cert")]
        public Output<string> Cert { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Output("certAlt")]
        public Output<string> CertAlt { get; private set; } = null!;

        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Output("controlPlaneId")]
        public Output<string> ControlPlaneId { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Output("createdAt")]
        public Output<int> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Output("keyAlt")]
        public Output<string> KeyAlt { get; private set; } = null!;

        /// <summary>
        /// An optional set of strings associated with the Certificate for grouping and filtering.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<int> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayCertificate(string name, GatewayCertificateArgs args, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayCertificate:GatewayCertificate", name, args ?? new GatewayCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayCertificate(string name, Input<string> id, GatewayCertificateState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayCertificate:GatewayCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayCertificate Get(string name, Input<string> id, GatewayCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayCertificate(name, id, state, options);
        }
    }

    public sealed class GatewayCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("certAlt")]
        public Input<string>? CertAlt { get; set; }

        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId", required: true)]
        public Input<string> ControlPlaneId { get; set; } = null!;

        /// <summary>
        /// PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("keyAlt")]
        public Input<string>? KeyAlt { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Certificate for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        public GatewayCertificateArgs()
        {
        }
        public static new GatewayCertificateArgs Empty => new GatewayCertificateArgs();
    }

    public sealed class GatewayCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// PEM-encoded public certificate chain of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("cert")]
        public Input<string>? Cert { get; set; }

        /// <summary>
        /// PEM-encoded public certificate chain of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("certAlt")]
        public Input<string>? CertAlt { get; set; }

        /// <summary>
        /// The UUID of your control plane. This variable is available in the Konnect manager.
        /// </summary>
        [Input("controlPlaneId")]
        public Input<string>? ControlPlaneId { get; set; }

        /// <summary>
        /// Unix epoch when the resource was created.
        /// </summary>
        [Input("createdAt")]
        public Input<int>? CreatedAt { get; set; }

        /// <summary>
        /// PEM-encoded private key of the SSL key pair. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// PEM-encoded private key of the alternate SSL key pair. This should only be set if you have both RSA and ECDSA types of certificate available and would like Kong to prefer serving using ECDSA certs when client advertises support for it. This field is *referenceable*, which means it can be securely stored as a [secret](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/getting-started) in a vault. References must follow a [specific format](https://www.terraform.io/gateway/latest/plan-and-deploy/security/secrets-management/reference-format).
        /// </summary>
        [Input("keyAlt")]
        public Input<string>? KeyAlt { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// An optional set of strings associated with the Certificate for grouping and filtering.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Unix epoch when the resource was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<int>? UpdatedAt { get; set; }

        public GatewayCertificateState()
        {
        }
        public static new GatewayCertificateState Empty => new GatewayCertificateState();
    }
}
