// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Konnect
{
    /// <summary>
    /// GatewayControlPlane Resource
    /// </summary>
    [KonnectResourceType("konnect:index/gatewayControlPlane:GatewayControlPlane")]
    public partial class GatewayControlPlane : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        /// </summary>
        [Output("authType")]
        public Output<string?> AuthType { get; private set; } = null!;

        /// <summary>
        /// Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        /// </summary>
        [Output("cloudGateway")]
        public Output<bool?> CloudGateway { get; private set; } = null!;

        /// <summary>
        /// The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        /// </summary>
        [Output("clusterType")]
        public Output<string?> ClusterType { get; private set; } = null!;

        /// <summary>
        /// CP configuration object for related access endpoints.
        /// </summary>
        [Output("config")]
        public Output<Outputs.GatewayControlPlaneConfig> Config { get; private set; } = null!;

        /// <summary>
        /// The description of the control plane in Konnect.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>> Labels { get; private set; } = null!;

        /// <summary>
        /// The name of the control plane.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        /// </summary>
        [Output("proxyUrls")]
        public Output<ImmutableArray<Outputs.GatewayControlPlaneProxyUrl>> ProxyUrls { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayControlPlane resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayControlPlane(string name, GatewayControlPlaneArgs? args = null, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayControlPlane:GatewayControlPlane", name, args ?? new GatewayControlPlaneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayControlPlane(string name, Input<string> id, GatewayControlPlaneState? state = null, CustomResourceOptions? options = null)
            : base("konnect:index/gatewayControlPlane:GatewayControlPlane", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayControlPlane resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayControlPlane Get(string name, Input<string> id, GatewayControlPlaneState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayControlPlane(name, id, state, options);
        }
    }

    public sealed class GatewayControlPlaneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        /// </summary>
        [Input("cloudGateway")]
        public Input<bool>? CloudGateway { get; set; }

        /// <summary>
        /// The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// The description of the control plane in Konnect.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the control plane.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("proxyUrls")]
        private InputList<Inputs.GatewayControlPlaneProxyUrlArgs>? _proxyUrls;

        /// <summary>
        /// Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        /// </summary>
        public InputList<Inputs.GatewayControlPlaneProxyUrlArgs> ProxyUrls
        {
            get => _proxyUrls ?? (_proxyUrls = new InputList<Inputs.GatewayControlPlaneProxyUrlArgs>());
            set => _proxyUrls = value;
        }

        public GatewayControlPlaneArgs()
        {
        }
        public static new GatewayControlPlaneArgs Empty => new GatewayControlPlaneArgs();
    }

    public sealed class GatewayControlPlaneState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auth type value of the cluster associated with the Runtime Group. must be one of ["pinned*client*certs", "pki*client*certs"]
        /// </summary>
        [Input("authType")]
        public Input<string>? AuthType { get; set; }

        /// <summary>
        /// Whether this control-plane can be used for cloud-gateways. Requires replacement if changed.
        /// </summary>
        [Input("cloudGateway")]
        public Input<bool>? CloudGateway { get; set; }

        /// <summary>
        /// The ClusterType value of the cluster associated with the Control Plane. Requires replacement if changed. ; must be one of ["CLUSTER*TYPE*CONTROL*PLANE", "CLUSTER*TYPE*HYBRID", "CLUSTER*TYPE*K8S*INGRESS*CONTROLLER", "CLUSTER*TYPE*CONTROL*PLANE*GROUP", "CLUSTER*TYPE_SERVERLESS"]
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// CP configuration object for related access endpoints.
        /// </summary>
        [Input("config")]
        public Input<Inputs.GatewayControlPlaneConfigGetArgs>? Config { get; set; }

        /// <summary>
        /// The description of the control plane in Konnect.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the control plane.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("proxyUrls")]
        private InputList<Inputs.GatewayControlPlaneProxyUrlGetArgs>? _proxyUrls;

        /// <summary>
        /// Array of proxy URLs associated with reaching the data-planes connected to a control-plane.
        /// </summary>
        public InputList<Inputs.GatewayControlPlaneProxyUrlGetArgs> ProxyUrls
        {
            get => _proxyUrls ?? (_proxyUrls = new InputList<Inputs.GatewayControlPlaneProxyUrlGetArgs>());
            set => _proxyUrls = value;
        }

        public GatewayControlPlaneState()
        {
        }
        public static new GatewayControlPlaneState Empty => new GatewayControlPlaneState();
    }
}
