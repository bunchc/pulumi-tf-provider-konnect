// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PortalAppearance Resource
type PortalAppearance struct {
	pulumi.CustomResourceState

	// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
	CustomFonts PortalAppearanceCustomFontsOutput `pulumi:"customFonts"`
	// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
	CustomTheme PortalAppearanceCustomThemeOutput `pulumi:"customTheme"`
	// A collection of binary image data to customize images in the portal
	Images PortalAppearanceImagesOutput `pulumi:"images"`
	// ID of the portal.
	PortalId pulumi.StringOutput `pulumi:"portalId"`
	// Values to display for customizable text in the portal user interface
	Text PortalAppearanceTextOutput `pulumi:"text"`
	// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
	ThemeName pulumi.StringOutput `pulumi:"themeName"`
	// If true, fonts in customFonts will be used over the theme's default fonts
	UseCustomFonts pulumi.BoolOutput `pulumi:"useCustomFonts"`
}

// NewPortalAppearance registers a new resource with the given unique name, arguments, and options.
func NewPortalAppearance(ctx *pulumi.Context,
	name string, args *PortalAppearanceArgs, opts ...pulumi.ResourceOption) (*PortalAppearance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortalId == nil {
		return nil, errors.New("invalid value for required argument 'PortalId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PortalAppearance
	err := ctx.RegisterResource("konnect:index/portalAppearance:PortalAppearance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortalAppearance gets an existing PortalAppearance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortalAppearance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalAppearanceState, opts ...pulumi.ResourceOption) (*PortalAppearance, error) {
	var resource PortalAppearance
	err := ctx.ReadResource("konnect:index/portalAppearance:PortalAppearance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortalAppearance resources.
type portalAppearanceState struct {
	// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
	CustomFonts *PortalAppearanceCustomFonts `pulumi:"customFonts"`
	// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
	CustomTheme *PortalAppearanceCustomTheme `pulumi:"customTheme"`
	// A collection of binary image data to customize images in the portal
	Images *PortalAppearanceImages `pulumi:"images"`
	// ID of the portal.
	PortalId *string `pulumi:"portalId"`
	// Values to display for customizable text in the portal user interface
	Text *PortalAppearanceText `pulumi:"text"`
	// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
	ThemeName *string `pulumi:"themeName"`
	// If true, fonts in customFonts will be used over the theme's default fonts
	UseCustomFonts *bool `pulumi:"useCustomFonts"`
}

type PortalAppearanceState struct {
	// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
	CustomFonts PortalAppearanceCustomFontsPtrInput
	// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
	CustomTheme PortalAppearanceCustomThemePtrInput
	// A collection of binary image data to customize images in the portal
	Images PortalAppearanceImagesPtrInput
	// ID of the portal.
	PortalId pulumi.StringPtrInput
	// Values to display for customizable text in the portal user interface
	Text PortalAppearanceTextPtrInput
	// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
	ThemeName pulumi.StringPtrInput
	// If true, fonts in customFonts will be used over the theme's default fonts
	UseCustomFonts pulumi.BoolPtrInput
}

func (PortalAppearanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalAppearanceState)(nil)).Elem()
}

type portalAppearanceArgs struct {
	// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
	CustomFonts *PortalAppearanceCustomFonts `pulumi:"customFonts"`
	// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
	CustomTheme *PortalAppearanceCustomTheme `pulumi:"customTheme"`
	// A collection of binary image data to customize images in the portal
	Images *PortalAppearanceImages `pulumi:"images"`
	// ID of the portal.
	PortalId string `pulumi:"portalId"`
	// Values to display for customizable text in the portal user interface
	Text *PortalAppearanceText `pulumi:"text"`
	// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
	ThemeName *string `pulumi:"themeName"`
	// If true, fonts in customFonts will be used over the theme's default fonts
	UseCustomFonts *bool `pulumi:"useCustomFonts"`
}

// The set of arguments for constructing a PortalAppearance resource.
type PortalAppearanceArgs struct {
	// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
	CustomFonts PortalAppearanceCustomFontsPtrInput
	// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
	CustomTheme PortalAppearanceCustomThemePtrInput
	// A collection of binary image data to customize images in the portal
	Images PortalAppearanceImagesPtrInput
	// ID of the portal.
	PortalId pulumi.StringInput
	// Values to display for customizable text in the portal user interface
	Text PortalAppearanceTextPtrInput
	// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
	ThemeName pulumi.StringPtrInput
	// If true, fonts in customFonts will be used over the theme's default fonts
	UseCustomFonts pulumi.BoolPtrInput
}

func (PortalAppearanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalAppearanceArgs)(nil)).Elem()
}

type PortalAppearanceInput interface {
	pulumi.Input

	ToPortalAppearanceOutput() PortalAppearanceOutput
	ToPortalAppearanceOutputWithContext(ctx context.Context) PortalAppearanceOutput
}

func (*PortalAppearance) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalAppearance)(nil)).Elem()
}

func (i *PortalAppearance) ToPortalAppearanceOutput() PortalAppearanceOutput {
	return i.ToPortalAppearanceOutputWithContext(context.Background())
}

func (i *PortalAppearance) ToPortalAppearanceOutputWithContext(ctx context.Context) PortalAppearanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalAppearanceOutput)
}

// PortalAppearanceArrayInput is an input type that accepts PortalAppearanceArray and PortalAppearanceArrayOutput values.
// You can construct a concrete instance of `PortalAppearanceArrayInput` via:
//
//	PortalAppearanceArray{ PortalAppearanceArgs{...} }
type PortalAppearanceArrayInput interface {
	pulumi.Input

	ToPortalAppearanceArrayOutput() PortalAppearanceArrayOutput
	ToPortalAppearanceArrayOutputWithContext(context.Context) PortalAppearanceArrayOutput
}

type PortalAppearanceArray []PortalAppearanceInput

func (PortalAppearanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalAppearance)(nil)).Elem()
}

func (i PortalAppearanceArray) ToPortalAppearanceArrayOutput() PortalAppearanceArrayOutput {
	return i.ToPortalAppearanceArrayOutputWithContext(context.Background())
}

func (i PortalAppearanceArray) ToPortalAppearanceArrayOutputWithContext(ctx context.Context) PortalAppearanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalAppearanceArrayOutput)
}

// PortalAppearanceMapInput is an input type that accepts PortalAppearanceMap and PortalAppearanceMapOutput values.
// You can construct a concrete instance of `PortalAppearanceMapInput` via:
//
//	PortalAppearanceMap{ "key": PortalAppearanceArgs{...} }
type PortalAppearanceMapInput interface {
	pulumi.Input

	ToPortalAppearanceMapOutput() PortalAppearanceMapOutput
	ToPortalAppearanceMapOutputWithContext(context.Context) PortalAppearanceMapOutput
}

type PortalAppearanceMap map[string]PortalAppearanceInput

func (PortalAppearanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalAppearance)(nil)).Elem()
}

func (i PortalAppearanceMap) ToPortalAppearanceMapOutput() PortalAppearanceMapOutput {
	return i.ToPortalAppearanceMapOutputWithContext(context.Background())
}

func (i PortalAppearanceMap) ToPortalAppearanceMapOutputWithContext(ctx context.Context) PortalAppearanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalAppearanceMapOutput)
}

type PortalAppearanceOutput struct{ *pulumi.OutputState }

func (PortalAppearanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalAppearance)(nil)).Elem()
}

func (o PortalAppearanceOutput) ToPortalAppearanceOutput() PortalAppearanceOutput {
	return o
}

func (o PortalAppearanceOutput) ToPortalAppearanceOutputWithContext(ctx context.Context) PortalAppearanceOutput {
	return o
}

// Font selections to render text in the portal user interface. Must set use*custom*fonts to true to enable using custom font values.
func (o PortalAppearanceOutput) CustomFonts() PortalAppearanceCustomFontsOutput {
	return o.ApplyT(func(v *PortalAppearance) PortalAppearanceCustomFontsOutput { return v.CustomFonts }).(PortalAppearanceCustomFontsOutput)
}

// Groups of variables for configuring visual details of the portal user interface. Set theme*name to 'custom' to use custom values for theme variables.
func (o PortalAppearanceOutput) CustomTheme() PortalAppearanceCustomThemeOutput {
	return o.ApplyT(func(v *PortalAppearance) PortalAppearanceCustomThemeOutput { return v.CustomTheme }).(PortalAppearanceCustomThemeOutput)
}

// A collection of binary image data to customize images in the portal
func (o PortalAppearanceOutput) Images() PortalAppearanceImagesOutput {
	return o.ApplyT(func(v *PortalAppearance) PortalAppearanceImagesOutput { return v.Images }).(PortalAppearanceImagesOutput)
}

// ID of the portal.
func (o PortalAppearanceOutput) PortalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PortalAppearance) pulumi.StringOutput { return v.PortalId }).(pulumi.StringOutput)
}

// Values to display for customizable text in the portal user interface
func (o PortalAppearanceOutput) Text() PortalAppearanceTextOutput {
	return o.ApplyT(func(v *PortalAppearance) PortalAppearanceTextOutput { return v.Text }).(PortalAppearanceTextOutput)
}

// Select a pre-existing default theme or specify 'custom' to use custom*theme variables. must be one of ["mint*rocket", "darkMode", "custom"]
func (o PortalAppearanceOutput) ThemeName() pulumi.StringOutput {
	return o.ApplyT(func(v *PortalAppearance) pulumi.StringOutput { return v.ThemeName }).(pulumi.StringOutput)
}

// If true, fonts in customFonts will be used over the theme's default fonts
func (o PortalAppearanceOutput) UseCustomFonts() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortalAppearance) pulumi.BoolOutput { return v.UseCustomFonts }).(pulumi.BoolOutput)
}

type PortalAppearanceArrayOutput struct{ *pulumi.OutputState }

func (PortalAppearanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalAppearance)(nil)).Elem()
}

func (o PortalAppearanceArrayOutput) ToPortalAppearanceArrayOutput() PortalAppearanceArrayOutput {
	return o
}

func (o PortalAppearanceArrayOutput) ToPortalAppearanceArrayOutputWithContext(ctx context.Context) PortalAppearanceArrayOutput {
	return o
}

func (o PortalAppearanceArrayOutput) Index(i pulumi.IntInput) PortalAppearanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortalAppearance {
		return vs[0].([]*PortalAppearance)[vs[1].(int)]
	}).(PortalAppearanceOutput)
}

type PortalAppearanceMapOutput struct{ *pulumi.OutputState }

func (PortalAppearanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalAppearance)(nil)).Elem()
}

func (o PortalAppearanceMapOutput) ToPortalAppearanceMapOutput() PortalAppearanceMapOutput {
	return o
}

func (o PortalAppearanceMapOutput) ToPortalAppearanceMapOutputWithContext(ctx context.Context) PortalAppearanceMapOutput {
	return o
}

func (o PortalAppearanceMapOutput) MapIndex(k pulumi.StringInput) PortalAppearanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortalAppearance {
		return vs[0].(map[string]*PortalAppearance)[vs[1].(string)]
	}).(PortalAppearanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalAppearanceInput)(nil)).Elem(), &PortalAppearance{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalAppearanceArrayInput)(nil)).Elem(), PortalAppearanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalAppearanceMapInput)(nil)).Elem(), PortalAppearanceMap{})
	pulumi.RegisterOutputType(PortalAppearanceOutput{})
	pulumi.RegisterOutputType(PortalAppearanceArrayOutput{})
	pulumi.RegisterOutputType(PortalAppearanceMapOutput{})
}
