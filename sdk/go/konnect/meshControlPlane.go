// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// MeshControlPlane Resource
type MeshControlPlane struct {
	pulumi.CustomResourceState

	CreatedAt   pulumi.StringOutput `pulumi:"createdAt"`
	Description pulumi.StringOutput `pulumi:"description"`
	// Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the control plane.
	Name      pulumi.StringOutput `pulumi:"name"`
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewMeshControlPlane registers a new resource with the given unique name, arguments, and options.
func NewMeshControlPlane(ctx *pulumi.Context,
	name string, args *MeshControlPlaneArgs, opts ...pulumi.ResourceOption) (*MeshControlPlane, error) {
	if args == nil {
		args = &MeshControlPlaneArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MeshControlPlane
	err := ctx.RegisterResource("konnect:index/meshControlPlane:MeshControlPlane", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMeshControlPlane gets an existing MeshControlPlane resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMeshControlPlane(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MeshControlPlaneState, opts ...pulumi.ResourceOption) (*MeshControlPlane, error) {
	var resource MeshControlPlane
	err := ctx.ReadResource("konnect:index/meshControlPlane:MeshControlPlane", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MeshControlPlane resources.
type meshControlPlaneState struct {
	CreatedAt   *string `pulumi:"createdAt"`
	Description *string `pulumi:"description"`
	// Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
	Labels map[string]string `pulumi:"labels"`
	// The name of the control plane.
	Name      *string `pulumi:"name"`
	UpdatedAt *string `pulumi:"updatedAt"`
}

type MeshControlPlaneState struct {
	CreatedAt   pulumi.StringPtrInput
	Description pulumi.StringPtrInput
	// Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
	Labels pulumi.StringMapInput
	// The name of the control plane.
	Name      pulumi.StringPtrInput
	UpdatedAt pulumi.StringPtrInput
}

func (MeshControlPlaneState) ElementType() reflect.Type {
	return reflect.TypeOf((*meshControlPlaneState)(nil)).Elem()
}

type meshControlPlaneArgs struct {
	Description *string `pulumi:"description"`
	// Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
	Labels map[string]string `pulumi:"labels"`
	// The name of the control plane.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a MeshControlPlane resource.
type MeshControlPlaneArgs struct {
	Description pulumi.StringPtrInput
	// Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
	Labels pulumi.StringMapInput
	// The name of the control plane.
	Name pulumi.StringPtrInput
}

func (MeshControlPlaneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*meshControlPlaneArgs)(nil)).Elem()
}

type MeshControlPlaneInput interface {
	pulumi.Input

	ToMeshControlPlaneOutput() MeshControlPlaneOutput
	ToMeshControlPlaneOutputWithContext(ctx context.Context) MeshControlPlaneOutput
}

func (*MeshControlPlane) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshControlPlane)(nil)).Elem()
}

func (i *MeshControlPlane) ToMeshControlPlaneOutput() MeshControlPlaneOutput {
	return i.ToMeshControlPlaneOutputWithContext(context.Background())
}

func (i *MeshControlPlane) ToMeshControlPlaneOutputWithContext(ctx context.Context) MeshControlPlaneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshControlPlaneOutput)
}

// MeshControlPlaneArrayInput is an input type that accepts MeshControlPlaneArray and MeshControlPlaneArrayOutput values.
// You can construct a concrete instance of `MeshControlPlaneArrayInput` via:
//
//	MeshControlPlaneArray{ MeshControlPlaneArgs{...} }
type MeshControlPlaneArrayInput interface {
	pulumi.Input

	ToMeshControlPlaneArrayOutput() MeshControlPlaneArrayOutput
	ToMeshControlPlaneArrayOutputWithContext(context.Context) MeshControlPlaneArrayOutput
}

type MeshControlPlaneArray []MeshControlPlaneInput

func (MeshControlPlaneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeshControlPlane)(nil)).Elem()
}

func (i MeshControlPlaneArray) ToMeshControlPlaneArrayOutput() MeshControlPlaneArrayOutput {
	return i.ToMeshControlPlaneArrayOutputWithContext(context.Background())
}

func (i MeshControlPlaneArray) ToMeshControlPlaneArrayOutputWithContext(ctx context.Context) MeshControlPlaneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshControlPlaneArrayOutput)
}

// MeshControlPlaneMapInput is an input type that accepts MeshControlPlaneMap and MeshControlPlaneMapOutput values.
// You can construct a concrete instance of `MeshControlPlaneMapInput` via:
//
//	MeshControlPlaneMap{ "key": MeshControlPlaneArgs{...} }
type MeshControlPlaneMapInput interface {
	pulumi.Input

	ToMeshControlPlaneMapOutput() MeshControlPlaneMapOutput
	ToMeshControlPlaneMapOutputWithContext(context.Context) MeshControlPlaneMapOutput
}

type MeshControlPlaneMap map[string]MeshControlPlaneInput

func (MeshControlPlaneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeshControlPlane)(nil)).Elem()
}

func (i MeshControlPlaneMap) ToMeshControlPlaneMapOutput() MeshControlPlaneMapOutput {
	return i.ToMeshControlPlaneMapOutputWithContext(context.Background())
}

func (i MeshControlPlaneMap) ToMeshControlPlaneMapOutputWithContext(ctx context.Context) MeshControlPlaneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MeshControlPlaneMapOutput)
}

type MeshControlPlaneOutput struct{ *pulumi.OutputState }

func (MeshControlPlaneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MeshControlPlane)(nil)).Elem()
}

func (o MeshControlPlaneOutput) ToMeshControlPlaneOutput() MeshControlPlaneOutput {
	return o
}

func (o MeshControlPlaneOutput) ToMeshControlPlaneOutputWithContext(ctx context.Context) MeshControlPlaneOutput {
	return o
}

func (o MeshControlPlaneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MeshControlPlane) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o MeshControlPlaneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *MeshControlPlane) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Labels to facilitate tagged search on control planes. Keys must be of length 1-63 characters.
func (o MeshControlPlaneOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MeshControlPlane) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the control plane.
func (o MeshControlPlaneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MeshControlPlane) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MeshControlPlaneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *MeshControlPlane) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type MeshControlPlaneArrayOutput struct{ *pulumi.OutputState }

func (MeshControlPlaneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MeshControlPlane)(nil)).Elem()
}

func (o MeshControlPlaneArrayOutput) ToMeshControlPlaneArrayOutput() MeshControlPlaneArrayOutput {
	return o
}

func (o MeshControlPlaneArrayOutput) ToMeshControlPlaneArrayOutputWithContext(ctx context.Context) MeshControlPlaneArrayOutput {
	return o
}

func (o MeshControlPlaneArrayOutput) Index(i pulumi.IntInput) MeshControlPlaneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MeshControlPlane {
		return vs[0].([]*MeshControlPlane)[vs[1].(int)]
	}).(MeshControlPlaneOutput)
}

type MeshControlPlaneMapOutput struct{ *pulumi.OutputState }

func (MeshControlPlaneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MeshControlPlane)(nil)).Elem()
}

func (o MeshControlPlaneMapOutput) ToMeshControlPlaneMapOutput() MeshControlPlaneMapOutput {
	return o
}

func (o MeshControlPlaneMapOutput) ToMeshControlPlaneMapOutputWithContext(ctx context.Context) MeshControlPlaneMapOutput {
	return o
}

func (o MeshControlPlaneMapOutput) MapIndex(k pulumi.StringInput) MeshControlPlaneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MeshControlPlane {
		return vs[0].(map[string]*MeshControlPlane)[vs[1].(string)]
	}).(MeshControlPlaneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MeshControlPlaneInput)(nil)).Elem(), &MeshControlPlane{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeshControlPlaneArrayInput)(nil)).Elem(), MeshControlPlaneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MeshControlPlaneMapInput)(nil)).Elem(), MeshControlPlaneMap{})
	pulumi.RegisterOutputType(MeshControlPlaneOutput{})
	pulumi.RegisterOutputType(MeshControlPlaneArrayOutput{})
	pulumi.RegisterOutputType(MeshControlPlaneMapOutput{})
}
