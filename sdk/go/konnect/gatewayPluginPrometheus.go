// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginPrometheus Resource
type GatewayPluginPrometheus struct {
	pulumi.CustomResourceState

	Config GatewayPluginPrometheusConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPrometheusConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginPrometheusConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPrometheusRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPrometheusServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginPrometheus registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginPrometheus(ctx *pulumi.Context,
	name string, args *GatewayPluginPrometheusArgs, opts ...pulumi.ResourceOption) (*GatewayPluginPrometheus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginPrometheus
	err := ctx.RegisterResource("konnect:index/gatewayPluginPrometheus:GatewayPluginPrometheus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginPrometheus gets an existing GatewayPluginPrometheus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginPrometheus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginPrometheusState, opts ...pulumi.ResourceOption) (*GatewayPluginPrometheus, error) {
	var resource GatewayPluginPrometheus
	err := ctx.ReadResource("konnect:index/gatewayPluginPrometheus:GatewayPluginPrometheus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginPrometheus resources.
type gatewayPluginPrometheusState struct {
	Config *GatewayPluginPrometheusConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginPrometheusConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginPrometheusConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginPrometheusRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginPrometheusService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginPrometheusState struct {
	Config GatewayPluginPrometheusConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPrometheusConsumerPtrInput
	ConsumerGroup GatewayPluginPrometheusConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPrometheusRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPrometheusServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginPrometheusState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginPrometheusState)(nil)).Elem()
}

type gatewayPluginPrometheusArgs struct {
	Config *GatewayPluginPrometheusConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginPrometheusConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginPrometheusConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginPrometheusRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginPrometheusService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginPrometheus resource.
type GatewayPluginPrometheusArgs struct {
	Config GatewayPluginPrometheusConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPrometheusConsumerPtrInput
	ConsumerGroup GatewayPluginPrometheusConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPrometheusRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPrometheusServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginPrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginPrometheusArgs)(nil)).Elem()
}

type GatewayPluginPrometheusInput interface {
	pulumi.Input

	ToGatewayPluginPrometheusOutput() GatewayPluginPrometheusOutput
	ToGatewayPluginPrometheusOutputWithContext(ctx context.Context) GatewayPluginPrometheusOutput
}

func (*GatewayPluginPrometheus) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginPrometheus)(nil)).Elem()
}

func (i *GatewayPluginPrometheus) ToGatewayPluginPrometheusOutput() GatewayPluginPrometheusOutput {
	return i.ToGatewayPluginPrometheusOutputWithContext(context.Background())
}

func (i *GatewayPluginPrometheus) ToGatewayPluginPrometheusOutputWithContext(ctx context.Context) GatewayPluginPrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPrometheusOutput)
}

// GatewayPluginPrometheusArrayInput is an input type that accepts GatewayPluginPrometheusArray and GatewayPluginPrometheusArrayOutput values.
// You can construct a concrete instance of `GatewayPluginPrometheusArrayInput` via:
//
//	GatewayPluginPrometheusArray{ GatewayPluginPrometheusArgs{...} }
type GatewayPluginPrometheusArrayInput interface {
	pulumi.Input

	ToGatewayPluginPrometheusArrayOutput() GatewayPluginPrometheusArrayOutput
	ToGatewayPluginPrometheusArrayOutputWithContext(context.Context) GatewayPluginPrometheusArrayOutput
}

type GatewayPluginPrometheusArray []GatewayPluginPrometheusInput

func (GatewayPluginPrometheusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginPrometheus)(nil)).Elem()
}

func (i GatewayPluginPrometheusArray) ToGatewayPluginPrometheusArrayOutput() GatewayPluginPrometheusArrayOutput {
	return i.ToGatewayPluginPrometheusArrayOutputWithContext(context.Background())
}

func (i GatewayPluginPrometheusArray) ToGatewayPluginPrometheusArrayOutputWithContext(ctx context.Context) GatewayPluginPrometheusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPrometheusArrayOutput)
}

// GatewayPluginPrometheusMapInput is an input type that accepts GatewayPluginPrometheusMap and GatewayPluginPrometheusMapOutput values.
// You can construct a concrete instance of `GatewayPluginPrometheusMapInput` via:
//
//	GatewayPluginPrometheusMap{ "key": GatewayPluginPrometheusArgs{...} }
type GatewayPluginPrometheusMapInput interface {
	pulumi.Input

	ToGatewayPluginPrometheusMapOutput() GatewayPluginPrometheusMapOutput
	ToGatewayPluginPrometheusMapOutputWithContext(context.Context) GatewayPluginPrometheusMapOutput
}

type GatewayPluginPrometheusMap map[string]GatewayPluginPrometheusInput

func (GatewayPluginPrometheusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginPrometheus)(nil)).Elem()
}

func (i GatewayPluginPrometheusMap) ToGatewayPluginPrometheusMapOutput() GatewayPluginPrometheusMapOutput {
	return i.ToGatewayPluginPrometheusMapOutputWithContext(context.Background())
}

func (i GatewayPluginPrometheusMap) ToGatewayPluginPrometheusMapOutputWithContext(ctx context.Context) GatewayPluginPrometheusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPrometheusMapOutput)
}

type GatewayPluginPrometheusOutput struct{ *pulumi.OutputState }

func (GatewayPluginPrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginPrometheus)(nil)).Elem()
}

func (o GatewayPluginPrometheusOutput) ToGatewayPluginPrometheusOutput() GatewayPluginPrometheusOutput {
	return o
}

func (o GatewayPluginPrometheusOutput) ToGatewayPluginPrometheusOutputWithContext(ctx context.Context) GatewayPluginPrometheusOutput {
	return o
}

func (o GatewayPluginPrometheusOutput) Config() GatewayPluginPrometheusConfigOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) GatewayPluginPrometheusConfigOutput { return v.Config }).(GatewayPluginPrometheusConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginPrometheusOutput) Consumer() GatewayPluginPrometheusConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) GatewayPluginPrometheusConsumerOutput { return v.Consumer }).(GatewayPluginPrometheusConsumerOutput)
}

func (o GatewayPluginPrometheusOutput) ConsumerGroup() GatewayPluginPrometheusConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) GatewayPluginPrometheusConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginPrometheusConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginPrometheusOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginPrometheusOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginPrometheusOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginPrometheusOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginPrometheusOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginPrometheusOutput) Route() GatewayPluginPrometheusRouteOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) GatewayPluginPrometheusRouteOutput { return v.Route }).(GatewayPluginPrometheusRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginPrometheusOutput) Service() GatewayPluginPrometheusServiceOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) GatewayPluginPrometheusServiceOutput { return v.Service }).(GatewayPluginPrometheusServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginPrometheusOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginPrometheusOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginPrometheus) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginPrometheusArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginPrometheusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginPrometheus)(nil)).Elem()
}

func (o GatewayPluginPrometheusArrayOutput) ToGatewayPluginPrometheusArrayOutput() GatewayPluginPrometheusArrayOutput {
	return o
}

func (o GatewayPluginPrometheusArrayOutput) ToGatewayPluginPrometheusArrayOutputWithContext(ctx context.Context) GatewayPluginPrometheusArrayOutput {
	return o
}

func (o GatewayPluginPrometheusArrayOutput) Index(i pulumi.IntInput) GatewayPluginPrometheusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginPrometheus {
		return vs[0].([]*GatewayPluginPrometheus)[vs[1].(int)]
	}).(GatewayPluginPrometheusOutput)
}

type GatewayPluginPrometheusMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginPrometheusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginPrometheus)(nil)).Elem()
}

func (o GatewayPluginPrometheusMapOutput) ToGatewayPluginPrometheusMapOutput() GatewayPluginPrometheusMapOutput {
	return o
}

func (o GatewayPluginPrometheusMapOutput) ToGatewayPluginPrometheusMapOutputWithContext(ctx context.Context) GatewayPluginPrometheusMapOutput {
	return o
}

func (o GatewayPluginPrometheusMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginPrometheusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginPrometheus {
		return vs[0].(map[string]*GatewayPluginPrometheus)[vs[1].(string)]
	}).(GatewayPluginPrometheusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPrometheusInput)(nil)).Elem(), &GatewayPluginPrometheus{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPrometheusArrayInput)(nil)).Elem(), GatewayPluginPrometheusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPrometheusMapInput)(nil)).Elem(), GatewayPluginPrometheusMap{})
	pulumi.RegisterOutputType(GatewayPluginPrometheusOutput{})
	pulumi.RegisterOutputType(GatewayPluginPrometheusArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginPrometheusMapOutput{})
}
