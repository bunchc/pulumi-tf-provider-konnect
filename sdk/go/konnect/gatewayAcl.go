// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayACL Resource
type GatewayAcl struct {
	pulumi.CustomResourceState

	Consumer GatewayAclConsumerOutput `pulumi:"consumer"`
	// Consumer ID for nested entities. Requires replacement if changed.
	ConsumerId pulumi.StringOutput `pulumi:"consumerId"`
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Requires replacement if changed.
	Group pulumi.StringOutput `pulumi:"group"`
	// Requires replacement if changed.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewGatewayAcl registers a new resource with the given unique name, arguments, and options.
func NewGatewayAcl(ctx *pulumi.Context,
	name string, args *GatewayAclArgs, opts ...pulumi.ResourceOption) (*GatewayAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerId == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerId'")
	}
	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayAcl
	err := ctx.RegisterResource("konnect:index/gatewayAcl:GatewayAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayAcl gets an existing GatewayAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayAclState, opts ...pulumi.ResourceOption) (*GatewayAcl, error) {
	var resource GatewayAcl
	err := ctx.ReadResource("konnect:index/gatewayAcl:GatewayAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayAcl resources.
type gatewayAclState struct {
	Consumer *GatewayAclConsumer `pulumi:"consumer"`
	// Consumer ID for nested entities. Requires replacement if changed.
	ConsumerId *string `pulumi:"consumerId"`
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Requires replacement if changed.
	Group *string `pulumi:"group"`
	// Requires replacement if changed.
	Tags []string `pulumi:"tags"`
}

type GatewayAclState struct {
	Consumer GatewayAclConsumerPtrInput
	// Consumer ID for nested entities. Requires replacement if changed.
	ConsumerId pulumi.StringPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Requires replacement if changed.
	Group pulumi.StringPtrInput
	// Requires replacement if changed.
	Tags pulumi.StringArrayInput
}

func (GatewayAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAclState)(nil)).Elem()
}

type gatewayAclArgs struct {
	// Consumer ID for nested entities. Requires replacement if changed.
	ConsumerId string `pulumi:"consumerId"`
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Requires replacement if changed.
	Group *string `pulumi:"group"`
	// Requires replacement if changed.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayAcl resource.
type GatewayAclArgs struct {
	// Consumer ID for nested entities. Requires replacement if changed.
	ConsumerId pulumi.StringInput
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringInput
	// Requires replacement if changed.
	Group pulumi.StringPtrInput
	// Requires replacement if changed.
	Tags pulumi.StringArrayInput
}

func (GatewayAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayAclArgs)(nil)).Elem()
}

type GatewayAclInput interface {
	pulumi.Input

	ToGatewayAclOutput() GatewayAclOutput
	ToGatewayAclOutputWithContext(ctx context.Context) GatewayAclOutput
}

func (*GatewayAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAcl)(nil)).Elem()
}

func (i *GatewayAcl) ToGatewayAclOutput() GatewayAclOutput {
	return i.ToGatewayAclOutputWithContext(context.Background())
}

func (i *GatewayAcl) ToGatewayAclOutputWithContext(ctx context.Context) GatewayAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAclOutput)
}

// GatewayAclArrayInput is an input type that accepts GatewayAclArray and GatewayAclArrayOutput values.
// You can construct a concrete instance of `GatewayAclArrayInput` via:
//
//	GatewayAclArray{ GatewayAclArgs{...} }
type GatewayAclArrayInput interface {
	pulumi.Input

	ToGatewayAclArrayOutput() GatewayAclArrayOutput
	ToGatewayAclArrayOutputWithContext(context.Context) GatewayAclArrayOutput
}

type GatewayAclArray []GatewayAclInput

func (GatewayAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAcl)(nil)).Elem()
}

func (i GatewayAclArray) ToGatewayAclArrayOutput() GatewayAclArrayOutput {
	return i.ToGatewayAclArrayOutputWithContext(context.Background())
}

func (i GatewayAclArray) ToGatewayAclArrayOutputWithContext(ctx context.Context) GatewayAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAclArrayOutput)
}

// GatewayAclMapInput is an input type that accepts GatewayAclMap and GatewayAclMapOutput values.
// You can construct a concrete instance of `GatewayAclMapInput` via:
//
//	GatewayAclMap{ "key": GatewayAclArgs{...} }
type GatewayAclMapInput interface {
	pulumi.Input

	ToGatewayAclMapOutput() GatewayAclMapOutput
	ToGatewayAclMapOutputWithContext(context.Context) GatewayAclMapOutput
}

type GatewayAclMap map[string]GatewayAclInput

func (GatewayAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAcl)(nil)).Elem()
}

func (i GatewayAclMap) ToGatewayAclMapOutput() GatewayAclMapOutput {
	return i.ToGatewayAclMapOutputWithContext(context.Background())
}

func (i GatewayAclMap) ToGatewayAclMapOutputWithContext(ctx context.Context) GatewayAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayAclMapOutput)
}

type GatewayAclOutput struct{ *pulumi.OutputState }

func (GatewayAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayAcl)(nil)).Elem()
}

func (o GatewayAclOutput) ToGatewayAclOutput() GatewayAclOutput {
	return o
}

func (o GatewayAclOutput) ToGatewayAclOutputWithContext(ctx context.Context) GatewayAclOutput {
	return o
}

func (o GatewayAclOutput) Consumer() GatewayAclConsumerOutput {
	return o.ApplyT(func(v *GatewayAcl) GatewayAclConsumerOutput { return v.Consumer }).(GatewayAclConsumerOutput)
}

// Consumer ID for nested entities. Requires replacement if changed.
func (o GatewayAclOutput) ConsumerId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAcl) pulumi.StringOutput { return v.ConsumerId }).(pulumi.StringOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
func (o GatewayAclOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAcl) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayAclOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayAcl) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Requires replacement if changed.
func (o GatewayAclOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayAcl) pulumi.StringOutput { return v.Group }).(pulumi.StringOutput)
}

// Requires replacement if changed.
func (o GatewayAclOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayAcl) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

type GatewayAclArrayOutput struct{ *pulumi.OutputState }

func (GatewayAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayAcl)(nil)).Elem()
}

func (o GatewayAclArrayOutput) ToGatewayAclArrayOutput() GatewayAclArrayOutput {
	return o
}

func (o GatewayAclArrayOutput) ToGatewayAclArrayOutputWithContext(ctx context.Context) GatewayAclArrayOutput {
	return o
}

func (o GatewayAclArrayOutput) Index(i pulumi.IntInput) GatewayAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayAcl {
		return vs[0].([]*GatewayAcl)[vs[1].(int)]
	}).(GatewayAclOutput)
}

type GatewayAclMapOutput struct{ *pulumi.OutputState }

func (GatewayAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayAcl)(nil)).Elem()
}

func (o GatewayAclMapOutput) ToGatewayAclMapOutput() GatewayAclMapOutput {
	return o
}

func (o GatewayAclMapOutput) ToGatewayAclMapOutputWithContext(ctx context.Context) GatewayAclMapOutput {
	return o
}

func (o GatewayAclMapOutput) MapIndex(k pulumi.StringInput) GatewayAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayAcl {
		return vs[0].(map[string]*GatewayAcl)[vs[1].(string)]
	}).(GatewayAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAclInput)(nil)).Elem(), &GatewayAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAclArrayInput)(nil)).Elem(), GatewayAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayAclMapInput)(nil)).Elem(), GatewayAclMap{})
	pulumi.RegisterOutputType(GatewayAclOutput{})
	pulumi.RegisterOutputType(GatewayAclArrayOutput{})
	pulumi.RegisterOutputType(GatewayAclMapOutput{})
}
