// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Portal Resource
type Portal struct {
	pulumi.CustomResourceState

	// Number of applications created in the portal.
	ApplicationCount pulumi.Float64Output `pulumi:"applicationCount"`
	// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveApplications pulumi.BoolOutput `pulumi:"autoApproveApplications"`
	// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveDevelopers pulumi.BoolOutput `pulumi:"autoApproveDevelopers"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
	CustomClientDomain pulumi.StringOutput `pulumi:"customClientDomain"`
	// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
	CustomDomain pulumi.StringOutput `pulumi:"customDomain"`
	// Default strategy ID applied on applications for the portal
	DefaultApplicationAuthStrategyId pulumi.StringOutput `pulumi:"defaultApplicationAuthStrategyId"`
	// The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
	// `customDomain``.
	DefaultDomain pulumi.StringOutput `pulumi:"defaultDomain"`
	// The description of the portal.
	Description pulumi.StringOutput `pulumi:"description"`
	// Number of developers using the portal.
	DeveloperCount pulumi.Float64Output `pulumi:"developerCount"`
	// The display name of the portal. This value will be the portal's `name` in Portal API.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
	Force pulumi.StringOutput `pulumi:"force"`
	// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
	IsPublic pulumi.BoolOutput `pulumi:"isPublic"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the portal, used to distinguish it from other portals. Name must be unique.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of api products published to the portal
	PublishedProductCount pulumi.Float64Output `pulumi:"publishedProductCount"`
	// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
	// for products until unless assigned to teams with access to view and consume specific products.
	RbacEnabled pulumi.BoolOutput `pulumi:"rbacEnabled"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewPortal registers a new resource with the given unique name, arguments, and options.
func NewPortal(ctx *pulumi.Context,
	name string, args *PortalArgs, opts ...pulumi.ResourceOption) (*Portal, error) {
	if args == nil {
		args = &PortalArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Portal
	err := ctx.RegisterResource("konnect:index/portal:Portal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortal gets an existing Portal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalState, opts ...pulumi.ResourceOption) (*Portal, error) {
	var resource Portal
	err := ctx.ReadResource("konnect:index/portal:Portal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Portal resources.
type portalState struct {
	// Number of applications created in the portal.
	ApplicationCount *float64 `pulumi:"applicationCount"`
	// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveApplications *bool `pulumi:"autoApproveApplications"`
	// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveDevelopers *bool `pulumi:"autoApproveDevelopers"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt *string `pulumi:"createdAt"`
	// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
	CustomClientDomain *string `pulumi:"customClientDomain"`
	// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
	CustomDomain *string `pulumi:"customDomain"`
	// Default strategy ID applied on applications for the portal
	DefaultApplicationAuthStrategyId *string `pulumi:"defaultApplicationAuthStrategyId"`
	// The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
	// `customDomain``.
	DefaultDomain *string `pulumi:"defaultDomain"`
	// The description of the portal.
	Description *string `pulumi:"description"`
	// Number of developers using the portal.
	DeveloperCount *float64 `pulumi:"developerCount"`
	// The display name of the portal. This value will be the portal's `name` in Portal API.
	DisplayName *string `pulumi:"displayName"`
	// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
	Force *string `pulumi:"force"`
	// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
	IsPublic *bool `pulumi:"isPublic"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels map[string]string `pulumi:"labels"`
	// The name of the portal, used to distinguish it from other portals. Name must be unique.
	Name *string `pulumi:"name"`
	// Number of api products published to the portal
	PublishedProductCount *float64 `pulumi:"publishedProductCount"`
	// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
	// for products until unless assigned to teams with access to view and consume specific products.
	RbacEnabled *bool `pulumi:"rbacEnabled"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type PortalState struct {
	// Number of applications created in the portal.
	ApplicationCount pulumi.Float64PtrInput
	// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveApplications pulumi.BoolPtrInput
	// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveDevelopers pulumi.BoolPtrInput
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt pulumi.StringPtrInput
	// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
	CustomClientDomain pulumi.StringPtrInput
	// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
	CustomDomain pulumi.StringPtrInput
	// Default strategy ID applied on applications for the portal
	DefaultApplicationAuthStrategyId pulumi.StringPtrInput
	// The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
	// `customDomain``.
	DefaultDomain pulumi.StringPtrInput
	// The description of the portal.
	Description pulumi.StringPtrInput
	// Number of developers using the portal.
	DeveloperCount pulumi.Float64PtrInput
	// The display name of the portal. This value will be the portal's `name` in Portal API.
	DisplayName pulumi.StringPtrInput
	// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
	Force pulumi.StringPtrInput
	// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
	IsPublic pulumi.BoolPtrInput
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels pulumi.StringMapInput
	// The name of the portal, used to distinguish it from other portals. Name must be unique.
	Name pulumi.StringPtrInput
	// Number of api products published to the portal
	PublishedProductCount pulumi.Float64PtrInput
	// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
	// for products until unless assigned to teams with access to view and consume specific products.
	RbacEnabled pulumi.BoolPtrInput
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt pulumi.StringPtrInput
}

func (PortalState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalState)(nil)).Elem()
}

type portalArgs struct {
	// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveApplications *bool `pulumi:"autoApproveApplications"`
	// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveDevelopers *bool `pulumi:"autoApproveDevelopers"`
	// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
	CustomClientDomain *string `pulumi:"customClientDomain"`
	// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
	CustomDomain *string `pulumi:"customDomain"`
	// Default strategy ID applied on applications for the portal
	DefaultApplicationAuthStrategyId *string `pulumi:"defaultApplicationAuthStrategyId"`
	// The description of the portal.
	Description *string `pulumi:"description"`
	// The display name of the portal. This value will be the portal's `name` in Portal API.
	DisplayName *string `pulumi:"displayName"`
	// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
	Force *string `pulumi:"force"`
	// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
	IsPublic *bool `pulumi:"isPublic"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels map[string]string `pulumi:"labels"`
	// The name of the portal, used to distinguish it from other portals. Name must be unique.
	Name *string `pulumi:"name"`
	// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
	// for products until unless assigned to teams with access to view and consume specific products.
	RbacEnabled *bool `pulumi:"rbacEnabled"`
}

// The set of arguments for constructing a Portal resource.
type PortalArgs struct {
	// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveApplications pulumi.BoolPtrInput
	// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
	AutoApproveDevelopers pulumi.BoolPtrInput
	// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
	CustomClientDomain pulumi.StringPtrInput
	// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
	CustomDomain pulumi.StringPtrInput
	// Default strategy ID applied on applications for the portal
	DefaultApplicationAuthStrategyId pulumi.StringPtrInput
	// The description of the portal.
	Description pulumi.StringPtrInput
	// The display name of the portal. This value will be the portal's `name` in Portal API.
	DisplayName pulumi.StringPtrInput
	// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
	Force pulumi.StringPtrInput
	// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
	IsPublic pulumi.BoolPtrInput
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels pulumi.StringMapInput
	// The name of the portal, used to distinguish it from other portals. Name must be unique.
	Name pulumi.StringPtrInput
	// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
	// for products until unless assigned to teams with access to view and consume specific products.
	RbacEnabled pulumi.BoolPtrInput
}

func (PortalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalArgs)(nil)).Elem()
}

type PortalInput interface {
	pulumi.Input

	ToPortalOutput() PortalOutput
	ToPortalOutputWithContext(ctx context.Context) PortalOutput
}

func (*Portal) ElementType() reflect.Type {
	return reflect.TypeOf((**Portal)(nil)).Elem()
}

func (i *Portal) ToPortalOutput() PortalOutput {
	return i.ToPortalOutputWithContext(context.Background())
}

func (i *Portal) ToPortalOutputWithContext(ctx context.Context) PortalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalOutput)
}

// PortalArrayInput is an input type that accepts PortalArray and PortalArrayOutput values.
// You can construct a concrete instance of `PortalArrayInput` via:
//
//	PortalArray{ PortalArgs{...} }
type PortalArrayInput interface {
	pulumi.Input

	ToPortalArrayOutput() PortalArrayOutput
	ToPortalArrayOutputWithContext(context.Context) PortalArrayOutput
}

type PortalArray []PortalInput

func (PortalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Portal)(nil)).Elem()
}

func (i PortalArray) ToPortalArrayOutput() PortalArrayOutput {
	return i.ToPortalArrayOutputWithContext(context.Background())
}

func (i PortalArray) ToPortalArrayOutputWithContext(ctx context.Context) PortalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalArrayOutput)
}

// PortalMapInput is an input type that accepts PortalMap and PortalMapOutput values.
// You can construct a concrete instance of `PortalMapInput` via:
//
//	PortalMap{ "key": PortalArgs{...} }
type PortalMapInput interface {
	pulumi.Input

	ToPortalMapOutput() PortalMapOutput
	ToPortalMapOutputWithContext(context.Context) PortalMapOutput
}

type PortalMap map[string]PortalInput

func (PortalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Portal)(nil)).Elem()
}

func (i PortalMap) ToPortalMapOutput() PortalMapOutput {
	return i.ToPortalMapOutputWithContext(context.Background())
}

func (i PortalMap) ToPortalMapOutputWithContext(ctx context.Context) PortalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalMapOutput)
}

type PortalOutput struct{ *pulumi.OutputState }

func (PortalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Portal)(nil)).Elem()
}

func (o PortalOutput) ToPortalOutput() PortalOutput {
	return o
}

func (o PortalOutput) ToPortalOutputWithContext(ctx context.Context) PortalOutput {
	return o
}

// Number of applications created in the portal.
func (o PortalOutput) ApplicationCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Portal) pulumi.Float64Output { return v.ApplicationCount }).(pulumi.Float64Output)
}

// Whether the requests from applications to register for products will be automatically approved, or if they will be set to pending until approved by an admin.
func (o PortalOutput) AutoApproveApplications() pulumi.BoolOutput {
	return o.ApplyT(func(v *Portal) pulumi.BoolOutput { return v.AutoApproveApplications }).(pulumi.BoolOutput)
}

// Whether the developer account registrations will be automatically approved, or if they will be set to pending until approved by an admin.
func (o PortalOutput) AutoApproveDevelopers() pulumi.BoolOutput {
	return o.ApplyT(func(v *Portal) pulumi.BoolOutput { return v.AutoApproveDevelopers }).(pulumi.BoolOutput)
}

// An ISO-8601 timestamp representation of entity creation date.
func (o PortalOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The custom domain to access a self-hosted customized developer portal client. If this is set, the Konnect-hosted portal will no longer be available.  `customDomain` must be also set for this value to be set. See https://github.com/Kong/konnect-portal for information on how to get started deploying and customizing your own Konnect portal.
func (o PortalOutput) CustomClientDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.CustomClientDomain }).(pulumi.StringOutput)
}

// The custom domain to access the developer portal. A CNAME for the portal's default domain must be able to be set for the custom domain for it to be valid. After setting a valid CNAME, an SSL/TLS certificate will be automatically manged for the custom domain, and traffic will be able to use the custom domain to route to the portal's web client and API.
func (o PortalOutput) CustomDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.CustomDomain }).(pulumi.StringOutput)
}

// Default strategy ID applied on applications for the portal
func (o PortalOutput) DefaultApplicationAuthStrategyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.DefaultApplicationAuthStrategyId }).(pulumi.StringOutput)
}

// The domain assigned to the portal by Konnect. This is the default place to access the portal and its API if not using a
// `customDomain“.
func (o PortalOutput) DefaultDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.DefaultDomain }).(pulumi.StringOutput)
}

// The description of the portal.
func (o PortalOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Number of developers using the portal.
func (o PortalOutput) DeveloperCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Portal) pulumi.Float64Output { return v.DeveloperCount }).(pulumi.Float64Output)
}

// The display name of the portal. This value will be the portal's `name` in Portal API.
func (o PortalOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// If true, delete specified portal and all related entities, even if there are developers registered to portal or if there are portal product versions with application registration enabled. If false, do not allow deletion if there are developers registered to portal or if there are portal product versions with application registration enabled. must be one of ["true", "false"]; Default: "false"
func (o PortalOutput) Force() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.Force }).(pulumi.StringOutput)
}

// Whether the portal catalog can be accessed publicly without any developer authentication. Developer accounts and applications cannot be created if the portal is public.
func (o PortalOutput) IsPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v *Portal) pulumi.BoolOutput { return v.IsPublic }).(pulumi.BoolOutput)
}

// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
func (o PortalOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the portal, used to distinguish it from other portals. Name must be unique.
func (o PortalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of api products published to the portal
func (o PortalOutput) PublishedProductCount() pulumi.Float64Output {
	return o.ApplyT(func(v *Portal) pulumi.Float64Output { return v.PublishedProductCount }).(pulumi.Float64Output)
}

// Whether the portal resources are protected by Role Based Access Control (RBAC). If enabled, developers view or register
// for products until unless assigned to teams with access to view and consume specific products.
func (o PortalOutput) RbacEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Portal) pulumi.BoolOutput { return v.RbacEnabled }).(pulumi.BoolOutput)
}

// An ISO-8601 timestamp representation of entity update date.
func (o PortalOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Portal) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type PortalArrayOutput struct{ *pulumi.OutputState }

func (PortalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Portal)(nil)).Elem()
}

func (o PortalArrayOutput) ToPortalArrayOutput() PortalArrayOutput {
	return o
}

func (o PortalArrayOutput) ToPortalArrayOutputWithContext(ctx context.Context) PortalArrayOutput {
	return o
}

func (o PortalArrayOutput) Index(i pulumi.IntInput) PortalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Portal {
		return vs[0].([]*Portal)[vs[1].(int)]
	}).(PortalOutput)
}

type PortalMapOutput struct{ *pulumi.OutputState }

func (PortalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Portal)(nil)).Elem()
}

func (o PortalMapOutput) ToPortalMapOutput() PortalMapOutput {
	return o
}

func (o PortalMapOutput) ToPortalMapOutputWithContext(ctx context.Context) PortalMapOutput {
	return o
}

func (o PortalMapOutput) MapIndex(k pulumi.StringInput) PortalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Portal {
		return vs[0].(map[string]*Portal)[vs[1].(string)]
	}).(PortalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalInput)(nil)).Elem(), &Portal{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalArrayInput)(nil)).Elem(), PortalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalMapInput)(nil)).Elem(), PortalMap{})
	pulumi.RegisterOutputType(PortalOutput{})
	pulumi.RegisterOutputType(PortalArrayOutput{})
	pulumi.RegisterOutputType(PortalMapOutput{})
}
