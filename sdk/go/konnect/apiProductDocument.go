// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// APIProductDocument Resource
type ApiProductDocument struct {
	pulumi.CustomResourceState

	// The API product identifier
	ApiProductId pulumi.StringOutput `pulumi:"apiProductId"`
	// Can be markdown string content or base64 encoded string
	Content pulumi.StringOutput `pulumi:"content"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// metadata of the document
	Metadata ApiProductDocumentMetadataOutput `pulumi:"metadata"`
	// parent document id
	ParentDocumentId pulumi.StringOutput `pulumi:"parentDocumentId"`
	// document slug. must be unique accross documents belonging to an api product
	Slug pulumi.StringOutput `pulumi:"slug"`
	// document publish status. must be one of ["published", "unpublished"]
	Status pulumi.StringOutput `pulumi:"status"`
	// document title
	Title pulumi.StringOutput `pulumi:"title"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewApiProductDocument registers a new resource with the given unique name, arguments, and options.
func NewApiProductDocument(ctx *pulumi.Context,
	name string, args *ApiProductDocumentArgs, opts ...pulumi.ResourceOption) (*ApiProductDocument, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiProductId == nil {
		return nil, errors.New("invalid value for required argument 'ApiProductId'")
	}
	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiProductDocument
	err := ctx.RegisterResource("konnect:index/apiProductDocument:ApiProductDocument", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiProductDocument gets an existing ApiProductDocument resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiProductDocument(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiProductDocumentState, opts ...pulumi.ResourceOption) (*ApiProductDocument, error) {
	var resource ApiProductDocument
	err := ctx.ReadResource("konnect:index/apiProductDocument:ApiProductDocument", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiProductDocument resources.
type apiProductDocumentState struct {
	// The API product identifier
	ApiProductId *string `pulumi:"apiProductId"`
	// Can be markdown string content or base64 encoded string
	Content *string `pulumi:"content"`
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt *string `pulumi:"createdAt"`
	// metadata of the document
	Metadata *ApiProductDocumentMetadata `pulumi:"metadata"`
	// parent document id
	ParentDocumentId *string `pulumi:"parentDocumentId"`
	// document slug. must be unique accross documents belonging to an api product
	Slug *string `pulumi:"slug"`
	// document publish status. must be one of ["published", "unpublished"]
	Status *string `pulumi:"status"`
	// document title
	Title *string `pulumi:"title"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type ApiProductDocumentState struct {
	// The API product identifier
	ApiProductId pulumi.StringPtrInput
	// Can be markdown string content or base64 encoded string
	Content pulumi.StringPtrInput
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt pulumi.StringPtrInput
	// metadata of the document
	Metadata ApiProductDocumentMetadataPtrInput
	// parent document id
	ParentDocumentId pulumi.StringPtrInput
	// document slug. must be unique accross documents belonging to an api product
	Slug pulumi.StringPtrInput
	// document publish status. must be one of ["published", "unpublished"]
	Status pulumi.StringPtrInput
	// document title
	Title pulumi.StringPtrInput
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt pulumi.StringPtrInput
}

func (ApiProductDocumentState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiProductDocumentState)(nil)).Elem()
}

type apiProductDocumentArgs struct {
	// The API product identifier
	ApiProductId string `pulumi:"apiProductId"`
	// Can be markdown string content or base64 encoded string
	Content *string `pulumi:"content"`
	// metadata of the document
	Metadata *ApiProductDocumentMetadata `pulumi:"metadata"`
	// parent document id
	ParentDocumentId *string `pulumi:"parentDocumentId"`
	// document slug. must be unique accross documents belonging to an api product
	Slug string `pulumi:"slug"`
	// document publish status. must be one of ["published", "unpublished"]
	Status string `pulumi:"status"`
	// document title
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a ApiProductDocument resource.
type ApiProductDocumentArgs struct {
	// The API product identifier
	ApiProductId pulumi.StringInput
	// Can be markdown string content or base64 encoded string
	Content pulumi.StringPtrInput
	// metadata of the document
	Metadata ApiProductDocumentMetadataPtrInput
	// parent document id
	ParentDocumentId pulumi.StringPtrInput
	// document slug. must be unique accross documents belonging to an api product
	Slug pulumi.StringInput
	// document publish status. must be one of ["published", "unpublished"]
	Status pulumi.StringInput
	// document title
	Title pulumi.StringInput
}

func (ApiProductDocumentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiProductDocumentArgs)(nil)).Elem()
}

type ApiProductDocumentInput interface {
	pulumi.Input

	ToApiProductDocumentOutput() ApiProductDocumentOutput
	ToApiProductDocumentOutputWithContext(ctx context.Context) ApiProductDocumentOutput
}

func (*ApiProductDocument) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiProductDocument)(nil)).Elem()
}

func (i *ApiProductDocument) ToApiProductDocumentOutput() ApiProductDocumentOutput {
	return i.ToApiProductDocumentOutputWithContext(context.Background())
}

func (i *ApiProductDocument) ToApiProductDocumentOutputWithContext(ctx context.Context) ApiProductDocumentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductDocumentOutput)
}

// ApiProductDocumentArrayInput is an input type that accepts ApiProductDocumentArray and ApiProductDocumentArrayOutput values.
// You can construct a concrete instance of `ApiProductDocumentArrayInput` via:
//
//	ApiProductDocumentArray{ ApiProductDocumentArgs{...} }
type ApiProductDocumentArrayInput interface {
	pulumi.Input

	ToApiProductDocumentArrayOutput() ApiProductDocumentArrayOutput
	ToApiProductDocumentArrayOutputWithContext(context.Context) ApiProductDocumentArrayOutput
}

type ApiProductDocumentArray []ApiProductDocumentInput

func (ApiProductDocumentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiProductDocument)(nil)).Elem()
}

func (i ApiProductDocumentArray) ToApiProductDocumentArrayOutput() ApiProductDocumentArrayOutput {
	return i.ToApiProductDocumentArrayOutputWithContext(context.Background())
}

func (i ApiProductDocumentArray) ToApiProductDocumentArrayOutputWithContext(ctx context.Context) ApiProductDocumentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductDocumentArrayOutput)
}

// ApiProductDocumentMapInput is an input type that accepts ApiProductDocumentMap and ApiProductDocumentMapOutput values.
// You can construct a concrete instance of `ApiProductDocumentMapInput` via:
//
//	ApiProductDocumentMap{ "key": ApiProductDocumentArgs{...} }
type ApiProductDocumentMapInput interface {
	pulumi.Input

	ToApiProductDocumentMapOutput() ApiProductDocumentMapOutput
	ToApiProductDocumentMapOutputWithContext(context.Context) ApiProductDocumentMapOutput
}

type ApiProductDocumentMap map[string]ApiProductDocumentInput

func (ApiProductDocumentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiProductDocument)(nil)).Elem()
}

func (i ApiProductDocumentMap) ToApiProductDocumentMapOutput() ApiProductDocumentMapOutput {
	return i.ToApiProductDocumentMapOutputWithContext(context.Background())
}

func (i ApiProductDocumentMap) ToApiProductDocumentMapOutputWithContext(ctx context.Context) ApiProductDocumentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductDocumentMapOutput)
}

type ApiProductDocumentOutput struct{ *pulumi.OutputState }

func (ApiProductDocumentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiProductDocument)(nil)).Elem()
}

func (o ApiProductDocumentOutput) ToApiProductDocumentOutput() ApiProductDocumentOutput {
	return o
}

func (o ApiProductDocumentOutput) ToApiProductDocumentOutputWithContext(ctx context.Context) ApiProductDocumentOutput {
	return o
}

// The API product identifier
func (o ApiProductDocumentOutput) ApiProductId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.ApiProductId }).(pulumi.StringOutput)
}

// Can be markdown string content or base64 encoded string
func (o ApiProductDocumentOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// An ISO-8601 timestamp representation of entity creation date.
func (o ApiProductDocumentOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// metadata of the document
func (o ApiProductDocumentOutput) Metadata() ApiProductDocumentMetadataOutput {
	return o.ApplyT(func(v *ApiProductDocument) ApiProductDocumentMetadataOutput { return v.Metadata }).(ApiProductDocumentMetadataOutput)
}

// parent document id
func (o ApiProductDocumentOutput) ParentDocumentId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.ParentDocumentId }).(pulumi.StringOutput)
}

// document slug. must be unique accross documents belonging to an api product
func (o ApiProductDocumentOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// document publish status. must be one of ["published", "unpublished"]
func (o ApiProductDocumentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// document title
func (o ApiProductDocumentOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// An ISO-8601 timestamp representation of entity update date.
func (o ApiProductDocumentOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProductDocument) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type ApiProductDocumentArrayOutput struct{ *pulumi.OutputState }

func (ApiProductDocumentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiProductDocument)(nil)).Elem()
}

func (o ApiProductDocumentArrayOutput) ToApiProductDocumentArrayOutput() ApiProductDocumentArrayOutput {
	return o
}

func (o ApiProductDocumentArrayOutput) ToApiProductDocumentArrayOutputWithContext(ctx context.Context) ApiProductDocumentArrayOutput {
	return o
}

func (o ApiProductDocumentArrayOutput) Index(i pulumi.IntInput) ApiProductDocumentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiProductDocument {
		return vs[0].([]*ApiProductDocument)[vs[1].(int)]
	}).(ApiProductDocumentOutput)
}

type ApiProductDocumentMapOutput struct{ *pulumi.OutputState }

func (ApiProductDocumentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiProductDocument)(nil)).Elem()
}

func (o ApiProductDocumentMapOutput) ToApiProductDocumentMapOutput() ApiProductDocumentMapOutput {
	return o
}

func (o ApiProductDocumentMapOutput) ToApiProductDocumentMapOutputWithContext(ctx context.Context) ApiProductDocumentMapOutput {
	return o
}

func (o ApiProductDocumentMapOutput) MapIndex(k pulumi.StringInput) ApiProductDocumentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiProductDocument {
		return vs[0].(map[string]*ApiProductDocument)[vs[1].(string)]
	}).(ApiProductDocumentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductDocumentInput)(nil)).Elem(), &ApiProductDocument{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductDocumentArrayInput)(nil)).Elem(), ApiProductDocumentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductDocumentMapInput)(nil)).Elem(), ApiProductDocumentMap{})
	pulumi.RegisterOutputType(ApiProductDocumentOutput{})
	pulumi.RegisterOutputType(ApiProductDocumentArrayOutput{})
	pulumi.RegisterOutputType(ApiProductDocumentMapOutput{})
}
