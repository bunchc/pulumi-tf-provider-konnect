// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ApplicationAuthStrategy Resource
type ApplicationAuthStrategy struct {
	pulumi.CustomResourceState

	// At least one published product version is using this auth strategy.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
	KeyAuth ApplicationAuthStrategyKeyAuthOutput `pulumi:"keyAuth"`
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	Name pulumi.StringOutput `pulumi:"name"`
	// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
	OpenidConnect ApplicationAuthStrategyOpenidConnectOutput `pulumi:"openidConnect"`
}

// NewApplicationAuthStrategy registers a new resource with the given unique name, arguments, and options.
func NewApplicationAuthStrategy(ctx *pulumi.Context,
	name string, args *ApplicationAuthStrategyArgs, opts ...pulumi.ResourceOption) (*ApplicationAuthStrategy, error) {
	if args == nil {
		args = &ApplicationAuthStrategyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApplicationAuthStrategy
	err := ctx.RegisterResource("konnect:index/applicationAuthStrategy:ApplicationAuthStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplicationAuthStrategy gets an existing ApplicationAuthStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplicationAuthStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationAuthStrategyState, opts ...pulumi.ResourceOption) (*ApplicationAuthStrategy, error) {
	var resource ApplicationAuthStrategy
	err := ctx.ReadResource("konnect:index/applicationAuthStrategy:ApplicationAuthStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApplicationAuthStrategy resources.
type applicationAuthStrategyState struct {
	// At least one published product version is using this auth strategy.
	Active *bool `pulumi:"active"`
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	DisplayName *string `pulumi:"displayName"`
	// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
	KeyAuth *ApplicationAuthStrategyKeyAuth `pulumi:"keyAuth"`
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	Name *string `pulumi:"name"`
	// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
	OpenidConnect *ApplicationAuthStrategyOpenidConnect `pulumi:"openidConnect"`
}

type ApplicationAuthStrategyState struct {
	// At least one published product version is using this auth strategy.
	Active pulumi.BoolPtrInput
	// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
	DisplayName pulumi.StringPtrInput
	// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
	KeyAuth ApplicationAuthStrategyKeyAuthPtrInput
	// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
	Name pulumi.StringPtrInput
	// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
	OpenidConnect ApplicationAuthStrategyOpenidConnectPtrInput
}

func (ApplicationAuthStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAuthStrategyState)(nil)).Elem()
}

type applicationAuthStrategyArgs struct {
	// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
	KeyAuth *ApplicationAuthStrategyKeyAuth `pulumi:"keyAuth"`
	// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
	OpenidConnect *ApplicationAuthStrategyOpenidConnect `pulumi:"openidConnect"`
}

// The set of arguments for constructing a ApplicationAuthStrategy resource.
type ApplicationAuthStrategyArgs struct {
	// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
	KeyAuth ApplicationAuthStrategyKeyAuthPtrInput
	// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
	OpenidConnect ApplicationAuthStrategyOpenidConnectPtrInput
}

func (ApplicationAuthStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationAuthStrategyArgs)(nil)).Elem()
}

type ApplicationAuthStrategyInput interface {
	pulumi.Input

	ToApplicationAuthStrategyOutput() ApplicationAuthStrategyOutput
	ToApplicationAuthStrategyOutputWithContext(ctx context.Context) ApplicationAuthStrategyOutput
}

func (*ApplicationAuthStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAuthStrategy)(nil)).Elem()
}

func (i *ApplicationAuthStrategy) ToApplicationAuthStrategyOutput() ApplicationAuthStrategyOutput {
	return i.ToApplicationAuthStrategyOutputWithContext(context.Background())
}

func (i *ApplicationAuthStrategy) ToApplicationAuthStrategyOutputWithContext(ctx context.Context) ApplicationAuthStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAuthStrategyOutput)
}

// ApplicationAuthStrategyArrayInput is an input type that accepts ApplicationAuthStrategyArray and ApplicationAuthStrategyArrayOutput values.
// You can construct a concrete instance of `ApplicationAuthStrategyArrayInput` via:
//
//	ApplicationAuthStrategyArray{ ApplicationAuthStrategyArgs{...} }
type ApplicationAuthStrategyArrayInput interface {
	pulumi.Input

	ToApplicationAuthStrategyArrayOutput() ApplicationAuthStrategyArrayOutput
	ToApplicationAuthStrategyArrayOutputWithContext(context.Context) ApplicationAuthStrategyArrayOutput
}

type ApplicationAuthStrategyArray []ApplicationAuthStrategyInput

func (ApplicationAuthStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationAuthStrategy)(nil)).Elem()
}

func (i ApplicationAuthStrategyArray) ToApplicationAuthStrategyArrayOutput() ApplicationAuthStrategyArrayOutput {
	return i.ToApplicationAuthStrategyArrayOutputWithContext(context.Background())
}

func (i ApplicationAuthStrategyArray) ToApplicationAuthStrategyArrayOutputWithContext(ctx context.Context) ApplicationAuthStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAuthStrategyArrayOutput)
}

// ApplicationAuthStrategyMapInput is an input type that accepts ApplicationAuthStrategyMap and ApplicationAuthStrategyMapOutput values.
// You can construct a concrete instance of `ApplicationAuthStrategyMapInput` via:
//
//	ApplicationAuthStrategyMap{ "key": ApplicationAuthStrategyArgs{...} }
type ApplicationAuthStrategyMapInput interface {
	pulumi.Input

	ToApplicationAuthStrategyMapOutput() ApplicationAuthStrategyMapOutput
	ToApplicationAuthStrategyMapOutputWithContext(context.Context) ApplicationAuthStrategyMapOutput
}

type ApplicationAuthStrategyMap map[string]ApplicationAuthStrategyInput

func (ApplicationAuthStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationAuthStrategy)(nil)).Elem()
}

func (i ApplicationAuthStrategyMap) ToApplicationAuthStrategyMapOutput() ApplicationAuthStrategyMapOutput {
	return i.ToApplicationAuthStrategyMapOutputWithContext(context.Background())
}

func (i ApplicationAuthStrategyMap) ToApplicationAuthStrategyMapOutputWithContext(ctx context.Context) ApplicationAuthStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationAuthStrategyMapOutput)
}

type ApplicationAuthStrategyOutput struct{ *pulumi.OutputState }

func (ApplicationAuthStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApplicationAuthStrategy)(nil)).Elem()
}

func (o ApplicationAuthStrategyOutput) ToApplicationAuthStrategyOutput() ApplicationAuthStrategyOutput {
	return o
}

func (o ApplicationAuthStrategyOutput) ToApplicationAuthStrategyOutputWithContext(ctx context.Context) ApplicationAuthStrategyOutput {
	return o
}

// At least one published product version is using this auth strategy.
func (o ApplicationAuthStrategyOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ApplicationAuthStrategy) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The display name of the Auth strategy. This is used to identify the Auth strategy in the Portal UI.
func (o ApplicationAuthStrategyOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAuthStrategy) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// Request for creating a Key Auth Application Auth Strategy. Requires replacement if changed.
func (o ApplicationAuthStrategyOutput) KeyAuth() ApplicationAuthStrategyKeyAuthOutput {
	return o.ApplyT(func(v *ApplicationAuthStrategy) ApplicationAuthStrategyKeyAuthOutput { return v.KeyAuth }).(ApplicationAuthStrategyKeyAuthOutput)
}

// The name of the auth strategy. This is used to identify the auth strategy in the Konnect UI.
func (o ApplicationAuthStrategyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApplicationAuthStrategy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Payload for creating an OIDC Application Auth Strategy. Requires replacement if changed.
func (o ApplicationAuthStrategyOutput) OpenidConnect() ApplicationAuthStrategyOpenidConnectOutput {
	return o.ApplyT(func(v *ApplicationAuthStrategy) ApplicationAuthStrategyOpenidConnectOutput { return v.OpenidConnect }).(ApplicationAuthStrategyOpenidConnectOutput)
}

type ApplicationAuthStrategyArrayOutput struct{ *pulumi.OutputState }

func (ApplicationAuthStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApplicationAuthStrategy)(nil)).Elem()
}

func (o ApplicationAuthStrategyArrayOutput) ToApplicationAuthStrategyArrayOutput() ApplicationAuthStrategyArrayOutput {
	return o
}

func (o ApplicationAuthStrategyArrayOutput) ToApplicationAuthStrategyArrayOutputWithContext(ctx context.Context) ApplicationAuthStrategyArrayOutput {
	return o
}

func (o ApplicationAuthStrategyArrayOutput) Index(i pulumi.IntInput) ApplicationAuthStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApplicationAuthStrategy {
		return vs[0].([]*ApplicationAuthStrategy)[vs[1].(int)]
	}).(ApplicationAuthStrategyOutput)
}

type ApplicationAuthStrategyMapOutput struct{ *pulumi.OutputState }

func (ApplicationAuthStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApplicationAuthStrategy)(nil)).Elem()
}

func (o ApplicationAuthStrategyMapOutput) ToApplicationAuthStrategyMapOutput() ApplicationAuthStrategyMapOutput {
	return o
}

func (o ApplicationAuthStrategyMapOutput) ToApplicationAuthStrategyMapOutputWithContext(ctx context.Context) ApplicationAuthStrategyMapOutput {
	return o
}

func (o ApplicationAuthStrategyMapOutput) MapIndex(k pulumi.StringInput) ApplicationAuthStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApplicationAuthStrategy {
		return vs[0].(map[string]*ApplicationAuthStrategy)[vs[1].(string)]
	}).(ApplicationAuthStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAuthStrategyInput)(nil)).Elem(), &ApplicationAuthStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAuthStrategyArrayInput)(nil)).Elem(), ApplicationAuthStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationAuthStrategyMapInput)(nil)).Elem(), ApplicationAuthStrategyMap{})
	pulumi.RegisterOutputType(ApplicationAuthStrategyOutput{})
	pulumi.RegisterOutputType(ApplicationAuthStrategyArrayOutput{})
	pulumi.RegisterOutputType(ApplicationAuthStrategyMapOutput{})
}
