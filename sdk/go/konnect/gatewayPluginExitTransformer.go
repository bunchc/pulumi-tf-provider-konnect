// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginExitTransformer Resource
type GatewayPluginExitTransformer struct {
	pulumi.CustomResourceState

	Config GatewayPluginExitTransformerConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginExitTransformerConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginExitTransformerConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginExitTransformerRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginExitTransformerServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginExitTransformer registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginExitTransformer(ctx *pulumi.Context,
	name string, args *GatewayPluginExitTransformerArgs, opts ...pulumi.ResourceOption) (*GatewayPluginExitTransformer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginExitTransformer
	err := ctx.RegisterResource("konnect:index/gatewayPluginExitTransformer:GatewayPluginExitTransformer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginExitTransformer gets an existing GatewayPluginExitTransformer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginExitTransformer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginExitTransformerState, opts ...pulumi.ResourceOption) (*GatewayPluginExitTransformer, error) {
	var resource GatewayPluginExitTransformer
	err := ctx.ReadResource("konnect:index/gatewayPluginExitTransformer:GatewayPluginExitTransformer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginExitTransformer resources.
type gatewayPluginExitTransformerState struct {
	Config *GatewayPluginExitTransformerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginExitTransformerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginExitTransformerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginExitTransformerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginExitTransformerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginExitTransformerState struct {
	Config GatewayPluginExitTransformerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginExitTransformerConsumerPtrInput
	ConsumerGroup GatewayPluginExitTransformerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginExitTransformerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginExitTransformerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginExitTransformerState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginExitTransformerState)(nil)).Elem()
}

type gatewayPluginExitTransformerArgs struct {
	Config *GatewayPluginExitTransformerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginExitTransformerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginExitTransformerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginExitTransformerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginExitTransformerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginExitTransformer resource.
type GatewayPluginExitTransformerArgs struct {
	Config GatewayPluginExitTransformerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginExitTransformerConsumerPtrInput
	ConsumerGroup GatewayPluginExitTransformerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginExitTransformerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginExitTransformerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginExitTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginExitTransformerArgs)(nil)).Elem()
}

type GatewayPluginExitTransformerInput interface {
	pulumi.Input

	ToGatewayPluginExitTransformerOutput() GatewayPluginExitTransformerOutput
	ToGatewayPluginExitTransformerOutputWithContext(ctx context.Context) GatewayPluginExitTransformerOutput
}

func (*GatewayPluginExitTransformer) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginExitTransformer)(nil)).Elem()
}

func (i *GatewayPluginExitTransformer) ToGatewayPluginExitTransformerOutput() GatewayPluginExitTransformerOutput {
	return i.ToGatewayPluginExitTransformerOutputWithContext(context.Background())
}

func (i *GatewayPluginExitTransformer) ToGatewayPluginExitTransformerOutputWithContext(ctx context.Context) GatewayPluginExitTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginExitTransformerOutput)
}

// GatewayPluginExitTransformerArrayInput is an input type that accepts GatewayPluginExitTransformerArray and GatewayPluginExitTransformerArrayOutput values.
// You can construct a concrete instance of `GatewayPluginExitTransformerArrayInput` via:
//
//	GatewayPluginExitTransformerArray{ GatewayPluginExitTransformerArgs{...} }
type GatewayPluginExitTransformerArrayInput interface {
	pulumi.Input

	ToGatewayPluginExitTransformerArrayOutput() GatewayPluginExitTransformerArrayOutput
	ToGatewayPluginExitTransformerArrayOutputWithContext(context.Context) GatewayPluginExitTransformerArrayOutput
}

type GatewayPluginExitTransformerArray []GatewayPluginExitTransformerInput

func (GatewayPluginExitTransformerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginExitTransformer)(nil)).Elem()
}

func (i GatewayPluginExitTransformerArray) ToGatewayPluginExitTransformerArrayOutput() GatewayPluginExitTransformerArrayOutput {
	return i.ToGatewayPluginExitTransformerArrayOutputWithContext(context.Background())
}

func (i GatewayPluginExitTransformerArray) ToGatewayPluginExitTransformerArrayOutputWithContext(ctx context.Context) GatewayPluginExitTransformerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginExitTransformerArrayOutput)
}

// GatewayPluginExitTransformerMapInput is an input type that accepts GatewayPluginExitTransformerMap and GatewayPluginExitTransformerMapOutput values.
// You can construct a concrete instance of `GatewayPluginExitTransformerMapInput` via:
//
//	GatewayPluginExitTransformerMap{ "key": GatewayPluginExitTransformerArgs{...} }
type GatewayPluginExitTransformerMapInput interface {
	pulumi.Input

	ToGatewayPluginExitTransformerMapOutput() GatewayPluginExitTransformerMapOutput
	ToGatewayPluginExitTransformerMapOutputWithContext(context.Context) GatewayPluginExitTransformerMapOutput
}

type GatewayPluginExitTransformerMap map[string]GatewayPluginExitTransformerInput

func (GatewayPluginExitTransformerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginExitTransformer)(nil)).Elem()
}

func (i GatewayPluginExitTransformerMap) ToGatewayPluginExitTransformerMapOutput() GatewayPluginExitTransformerMapOutput {
	return i.ToGatewayPluginExitTransformerMapOutputWithContext(context.Background())
}

func (i GatewayPluginExitTransformerMap) ToGatewayPluginExitTransformerMapOutputWithContext(ctx context.Context) GatewayPluginExitTransformerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginExitTransformerMapOutput)
}

type GatewayPluginExitTransformerOutput struct{ *pulumi.OutputState }

func (GatewayPluginExitTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginExitTransformer)(nil)).Elem()
}

func (o GatewayPluginExitTransformerOutput) ToGatewayPluginExitTransformerOutput() GatewayPluginExitTransformerOutput {
	return o
}

func (o GatewayPluginExitTransformerOutput) ToGatewayPluginExitTransformerOutputWithContext(ctx context.Context) GatewayPluginExitTransformerOutput {
	return o
}

func (o GatewayPluginExitTransformerOutput) Config() GatewayPluginExitTransformerConfigOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) GatewayPluginExitTransformerConfigOutput { return v.Config }).(GatewayPluginExitTransformerConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginExitTransformerOutput) Consumer() GatewayPluginExitTransformerConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) GatewayPluginExitTransformerConsumerOutput { return v.Consumer }).(GatewayPluginExitTransformerConsumerOutput)
}

func (o GatewayPluginExitTransformerOutput) ConsumerGroup() GatewayPluginExitTransformerConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) GatewayPluginExitTransformerConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginExitTransformerConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginExitTransformerOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginExitTransformerOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginExitTransformerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginExitTransformerOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginExitTransformerOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginExitTransformerOutput) Route() GatewayPluginExitTransformerRouteOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) GatewayPluginExitTransformerRouteOutput { return v.Route }).(GatewayPluginExitTransformerRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginExitTransformerOutput) Service() GatewayPluginExitTransformerServiceOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) GatewayPluginExitTransformerServiceOutput { return v.Service }).(GatewayPluginExitTransformerServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginExitTransformerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginExitTransformerOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginExitTransformer) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginExitTransformerArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginExitTransformerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginExitTransformer)(nil)).Elem()
}

func (o GatewayPluginExitTransformerArrayOutput) ToGatewayPluginExitTransformerArrayOutput() GatewayPluginExitTransformerArrayOutput {
	return o
}

func (o GatewayPluginExitTransformerArrayOutput) ToGatewayPluginExitTransformerArrayOutputWithContext(ctx context.Context) GatewayPluginExitTransformerArrayOutput {
	return o
}

func (o GatewayPluginExitTransformerArrayOutput) Index(i pulumi.IntInput) GatewayPluginExitTransformerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginExitTransformer {
		return vs[0].([]*GatewayPluginExitTransformer)[vs[1].(int)]
	}).(GatewayPluginExitTransformerOutput)
}

type GatewayPluginExitTransformerMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginExitTransformerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginExitTransformer)(nil)).Elem()
}

func (o GatewayPluginExitTransformerMapOutput) ToGatewayPluginExitTransformerMapOutput() GatewayPluginExitTransformerMapOutput {
	return o
}

func (o GatewayPluginExitTransformerMapOutput) ToGatewayPluginExitTransformerMapOutputWithContext(ctx context.Context) GatewayPluginExitTransformerMapOutput {
	return o
}

func (o GatewayPluginExitTransformerMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginExitTransformerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginExitTransformer {
		return vs[0].(map[string]*GatewayPluginExitTransformer)[vs[1].(string)]
	}).(GatewayPluginExitTransformerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginExitTransformerInput)(nil)).Elem(), &GatewayPluginExitTransformer{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginExitTransformerArrayInput)(nil)).Elem(), GatewayPluginExitTransformerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginExitTransformerMapInput)(nil)).Elem(), GatewayPluginExitTransformerMap{})
	pulumi.RegisterOutputType(GatewayPluginExitTransformerOutput{})
	pulumi.RegisterOutputType(GatewayPluginExitTransformerArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginExitTransformerMapOutput{})
}
