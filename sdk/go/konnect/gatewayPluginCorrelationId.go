// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginCorrelationID Resource
type GatewayPluginCorrelationId struct {
	pulumi.CustomResourceState

	Config GatewayPluginCorrelationIdConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginCorrelationIdConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginCorrelationIdConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginCorrelationIdRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginCorrelationIdServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginCorrelationId registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginCorrelationId(ctx *pulumi.Context,
	name string, args *GatewayPluginCorrelationIdArgs, opts ...pulumi.ResourceOption) (*GatewayPluginCorrelationId, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginCorrelationId
	err := ctx.RegisterResource("konnect:index/gatewayPluginCorrelationId:GatewayPluginCorrelationId", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginCorrelationId gets an existing GatewayPluginCorrelationId resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginCorrelationId(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginCorrelationIdState, opts ...pulumi.ResourceOption) (*GatewayPluginCorrelationId, error) {
	var resource GatewayPluginCorrelationId
	err := ctx.ReadResource("konnect:index/gatewayPluginCorrelationId:GatewayPluginCorrelationId", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginCorrelationId resources.
type gatewayPluginCorrelationIdState struct {
	Config *GatewayPluginCorrelationIdConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginCorrelationIdConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginCorrelationIdConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginCorrelationIdRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginCorrelationIdService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginCorrelationIdState struct {
	Config GatewayPluginCorrelationIdConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginCorrelationIdConsumerPtrInput
	ConsumerGroup GatewayPluginCorrelationIdConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginCorrelationIdRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginCorrelationIdServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginCorrelationIdState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginCorrelationIdState)(nil)).Elem()
}

type gatewayPluginCorrelationIdArgs struct {
	Config *GatewayPluginCorrelationIdConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginCorrelationIdConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginCorrelationIdConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginCorrelationIdRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginCorrelationIdService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginCorrelationId resource.
type GatewayPluginCorrelationIdArgs struct {
	Config GatewayPluginCorrelationIdConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginCorrelationIdConsumerPtrInput
	ConsumerGroup GatewayPluginCorrelationIdConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginCorrelationIdRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginCorrelationIdServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginCorrelationIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginCorrelationIdArgs)(nil)).Elem()
}

type GatewayPluginCorrelationIdInput interface {
	pulumi.Input

	ToGatewayPluginCorrelationIdOutput() GatewayPluginCorrelationIdOutput
	ToGatewayPluginCorrelationIdOutputWithContext(ctx context.Context) GatewayPluginCorrelationIdOutput
}

func (*GatewayPluginCorrelationId) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginCorrelationId)(nil)).Elem()
}

func (i *GatewayPluginCorrelationId) ToGatewayPluginCorrelationIdOutput() GatewayPluginCorrelationIdOutput {
	return i.ToGatewayPluginCorrelationIdOutputWithContext(context.Background())
}

func (i *GatewayPluginCorrelationId) ToGatewayPluginCorrelationIdOutputWithContext(ctx context.Context) GatewayPluginCorrelationIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginCorrelationIdOutput)
}

// GatewayPluginCorrelationIdArrayInput is an input type that accepts GatewayPluginCorrelationIdArray and GatewayPluginCorrelationIdArrayOutput values.
// You can construct a concrete instance of `GatewayPluginCorrelationIdArrayInput` via:
//
//	GatewayPluginCorrelationIdArray{ GatewayPluginCorrelationIdArgs{...} }
type GatewayPluginCorrelationIdArrayInput interface {
	pulumi.Input

	ToGatewayPluginCorrelationIdArrayOutput() GatewayPluginCorrelationIdArrayOutput
	ToGatewayPluginCorrelationIdArrayOutputWithContext(context.Context) GatewayPluginCorrelationIdArrayOutput
}

type GatewayPluginCorrelationIdArray []GatewayPluginCorrelationIdInput

func (GatewayPluginCorrelationIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginCorrelationId)(nil)).Elem()
}

func (i GatewayPluginCorrelationIdArray) ToGatewayPluginCorrelationIdArrayOutput() GatewayPluginCorrelationIdArrayOutput {
	return i.ToGatewayPluginCorrelationIdArrayOutputWithContext(context.Background())
}

func (i GatewayPluginCorrelationIdArray) ToGatewayPluginCorrelationIdArrayOutputWithContext(ctx context.Context) GatewayPluginCorrelationIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginCorrelationIdArrayOutput)
}

// GatewayPluginCorrelationIdMapInput is an input type that accepts GatewayPluginCorrelationIdMap and GatewayPluginCorrelationIdMapOutput values.
// You can construct a concrete instance of `GatewayPluginCorrelationIdMapInput` via:
//
//	GatewayPluginCorrelationIdMap{ "key": GatewayPluginCorrelationIdArgs{...} }
type GatewayPluginCorrelationIdMapInput interface {
	pulumi.Input

	ToGatewayPluginCorrelationIdMapOutput() GatewayPluginCorrelationIdMapOutput
	ToGatewayPluginCorrelationIdMapOutputWithContext(context.Context) GatewayPluginCorrelationIdMapOutput
}

type GatewayPluginCorrelationIdMap map[string]GatewayPluginCorrelationIdInput

func (GatewayPluginCorrelationIdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginCorrelationId)(nil)).Elem()
}

func (i GatewayPluginCorrelationIdMap) ToGatewayPluginCorrelationIdMapOutput() GatewayPluginCorrelationIdMapOutput {
	return i.ToGatewayPluginCorrelationIdMapOutputWithContext(context.Background())
}

func (i GatewayPluginCorrelationIdMap) ToGatewayPluginCorrelationIdMapOutputWithContext(ctx context.Context) GatewayPluginCorrelationIdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginCorrelationIdMapOutput)
}

type GatewayPluginCorrelationIdOutput struct{ *pulumi.OutputState }

func (GatewayPluginCorrelationIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginCorrelationId)(nil)).Elem()
}

func (o GatewayPluginCorrelationIdOutput) ToGatewayPluginCorrelationIdOutput() GatewayPluginCorrelationIdOutput {
	return o
}

func (o GatewayPluginCorrelationIdOutput) ToGatewayPluginCorrelationIdOutputWithContext(ctx context.Context) GatewayPluginCorrelationIdOutput {
	return o
}

func (o GatewayPluginCorrelationIdOutput) Config() GatewayPluginCorrelationIdConfigOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) GatewayPluginCorrelationIdConfigOutput { return v.Config }).(GatewayPluginCorrelationIdConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginCorrelationIdOutput) Consumer() GatewayPluginCorrelationIdConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) GatewayPluginCorrelationIdConsumerOutput { return v.Consumer }).(GatewayPluginCorrelationIdConsumerOutput)
}

func (o GatewayPluginCorrelationIdOutput) ConsumerGroup() GatewayPluginCorrelationIdConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) GatewayPluginCorrelationIdConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginCorrelationIdConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginCorrelationIdOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginCorrelationIdOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginCorrelationIdOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginCorrelationIdOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginCorrelationIdOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginCorrelationIdOutput) Route() GatewayPluginCorrelationIdRouteOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) GatewayPluginCorrelationIdRouteOutput { return v.Route }).(GatewayPluginCorrelationIdRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginCorrelationIdOutput) Service() GatewayPluginCorrelationIdServiceOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) GatewayPluginCorrelationIdServiceOutput { return v.Service }).(GatewayPluginCorrelationIdServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginCorrelationIdOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginCorrelationIdOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginCorrelationId) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginCorrelationIdArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginCorrelationIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginCorrelationId)(nil)).Elem()
}

func (o GatewayPluginCorrelationIdArrayOutput) ToGatewayPluginCorrelationIdArrayOutput() GatewayPluginCorrelationIdArrayOutput {
	return o
}

func (o GatewayPluginCorrelationIdArrayOutput) ToGatewayPluginCorrelationIdArrayOutputWithContext(ctx context.Context) GatewayPluginCorrelationIdArrayOutput {
	return o
}

func (o GatewayPluginCorrelationIdArrayOutput) Index(i pulumi.IntInput) GatewayPluginCorrelationIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginCorrelationId {
		return vs[0].([]*GatewayPluginCorrelationId)[vs[1].(int)]
	}).(GatewayPluginCorrelationIdOutput)
}

type GatewayPluginCorrelationIdMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginCorrelationIdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginCorrelationId)(nil)).Elem()
}

func (o GatewayPluginCorrelationIdMapOutput) ToGatewayPluginCorrelationIdMapOutput() GatewayPluginCorrelationIdMapOutput {
	return o
}

func (o GatewayPluginCorrelationIdMapOutput) ToGatewayPluginCorrelationIdMapOutputWithContext(ctx context.Context) GatewayPluginCorrelationIdMapOutput {
	return o
}

func (o GatewayPluginCorrelationIdMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginCorrelationIdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginCorrelationId {
		return vs[0].(map[string]*GatewayPluginCorrelationId)[vs[1].(string)]
	}).(GatewayPluginCorrelationIdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginCorrelationIdInput)(nil)).Elem(), &GatewayPluginCorrelationId{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginCorrelationIdArrayInput)(nil)).Elem(), GatewayPluginCorrelationIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginCorrelationIdMapInput)(nil)).Elem(), GatewayPluginCorrelationIdMap{})
	pulumi.RegisterOutputType(GatewayPluginCorrelationIdOutput{})
	pulumi.RegisterOutputType(GatewayPluginCorrelationIdArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginCorrelationIdMapOutput{})
}
