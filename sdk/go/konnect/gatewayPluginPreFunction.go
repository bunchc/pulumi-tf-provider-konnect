// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginPreFunction Resource
type GatewayPluginPreFunction struct {
	pulumi.CustomResourceState

	Config GatewayPluginPreFunctionConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPreFunctionConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginPreFunctionConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPreFunctionRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPreFunctionServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginPreFunction registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginPreFunction(ctx *pulumi.Context,
	name string, args *GatewayPluginPreFunctionArgs, opts ...pulumi.ResourceOption) (*GatewayPluginPreFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginPreFunction
	err := ctx.RegisterResource("konnect:index/gatewayPluginPreFunction:GatewayPluginPreFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginPreFunction gets an existing GatewayPluginPreFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginPreFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginPreFunctionState, opts ...pulumi.ResourceOption) (*GatewayPluginPreFunction, error) {
	var resource GatewayPluginPreFunction
	err := ctx.ReadResource("konnect:index/gatewayPluginPreFunction:GatewayPluginPreFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginPreFunction resources.
type gatewayPluginPreFunctionState struct {
	Config *GatewayPluginPreFunctionConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginPreFunctionConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginPreFunctionConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginPreFunctionRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginPreFunctionService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginPreFunctionState struct {
	Config GatewayPluginPreFunctionConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPreFunctionConsumerPtrInput
	ConsumerGroup GatewayPluginPreFunctionConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPreFunctionRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPreFunctionServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginPreFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginPreFunctionState)(nil)).Elem()
}

type gatewayPluginPreFunctionArgs struct {
	Config *GatewayPluginPreFunctionConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginPreFunctionConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginPreFunctionConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginPreFunctionRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginPreFunctionService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginPreFunction resource.
type GatewayPluginPreFunctionArgs struct {
	Config GatewayPluginPreFunctionConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPreFunctionConsumerPtrInput
	ConsumerGroup GatewayPluginPreFunctionConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPreFunctionRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPreFunctionServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginPreFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginPreFunctionArgs)(nil)).Elem()
}

type GatewayPluginPreFunctionInput interface {
	pulumi.Input

	ToGatewayPluginPreFunctionOutput() GatewayPluginPreFunctionOutput
	ToGatewayPluginPreFunctionOutputWithContext(ctx context.Context) GatewayPluginPreFunctionOutput
}

func (*GatewayPluginPreFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginPreFunction)(nil)).Elem()
}

func (i *GatewayPluginPreFunction) ToGatewayPluginPreFunctionOutput() GatewayPluginPreFunctionOutput {
	return i.ToGatewayPluginPreFunctionOutputWithContext(context.Background())
}

func (i *GatewayPluginPreFunction) ToGatewayPluginPreFunctionOutputWithContext(ctx context.Context) GatewayPluginPreFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPreFunctionOutput)
}

// GatewayPluginPreFunctionArrayInput is an input type that accepts GatewayPluginPreFunctionArray and GatewayPluginPreFunctionArrayOutput values.
// You can construct a concrete instance of `GatewayPluginPreFunctionArrayInput` via:
//
//	GatewayPluginPreFunctionArray{ GatewayPluginPreFunctionArgs{...} }
type GatewayPluginPreFunctionArrayInput interface {
	pulumi.Input

	ToGatewayPluginPreFunctionArrayOutput() GatewayPluginPreFunctionArrayOutput
	ToGatewayPluginPreFunctionArrayOutputWithContext(context.Context) GatewayPluginPreFunctionArrayOutput
}

type GatewayPluginPreFunctionArray []GatewayPluginPreFunctionInput

func (GatewayPluginPreFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginPreFunction)(nil)).Elem()
}

func (i GatewayPluginPreFunctionArray) ToGatewayPluginPreFunctionArrayOutput() GatewayPluginPreFunctionArrayOutput {
	return i.ToGatewayPluginPreFunctionArrayOutputWithContext(context.Background())
}

func (i GatewayPluginPreFunctionArray) ToGatewayPluginPreFunctionArrayOutputWithContext(ctx context.Context) GatewayPluginPreFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPreFunctionArrayOutput)
}

// GatewayPluginPreFunctionMapInput is an input type that accepts GatewayPluginPreFunctionMap and GatewayPluginPreFunctionMapOutput values.
// You can construct a concrete instance of `GatewayPluginPreFunctionMapInput` via:
//
//	GatewayPluginPreFunctionMap{ "key": GatewayPluginPreFunctionArgs{...} }
type GatewayPluginPreFunctionMapInput interface {
	pulumi.Input

	ToGatewayPluginPreFunctionMapOutput() GatewayPluginPreFunctionMapOutput
	ToGatewayPluginPreFunctionMapOutputWithContext(context.Context) GatewayPluginPreFunctionMapOutput
}

type GatewayPluginPreFunctionMap map[string]GatewayPluginPreFunctionInput

func (GatewayPluginPreFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginPreFunction)(nil)).Elem()
}

func (i GatewayPluginPreFunctionMap) ToGatewayPluginPreFunctionMapOutput() GatewayPluginPreFunctionMapOutput {
	return i.ToGatewayPluginPreFunctionMapOutputWithContext(context.Background())
}

func (i GatewayPluginPreFunctionMap) ToGatewayPluginPreFunctionMapOutputWithContext(ctx context.Context) GatewayPluginPreFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPreFunctionMapOutput)
}

type GatewayPluginPreFunctionOutput struct{ *pulumi.OutputState }

func (GatewayPluginPreFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginPreFunction)(nil)).Elem()
}

func (o GatewayPluginPreFunctionOutput) ToGatewayPluginPreFunctionOutput() GatewayPluginPreFunctionOutput {
	return o
}

func (o GatewayPluginPreFunctionOutput) ToGatewayPluginPreFunctionOutputWithContext(ctx context.Context) GatewayPluginPreFunctionOutput {
	return o
}

func (o GatewayPluginPreFunctionOutput) Config() GatewayPluginPreFunctionConfigOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) GatewayPluginPreFunctionConfigOutput { return v.Config }).(GatewayPluginPreFunctionConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginPreFunctionOutput) Consumer() GatewayPluginPreFunctionConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) GatewayPluginPreFunctionConsumerOutput { return v.Consumer }).(GatewayPluginPreFunctionConsumerOutput)
}

func (o GatewayPluginPreFunctionOutput) ConsumerGroup() GatewayPluginPreFunctionConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) GatewayPluginPreFunctionConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginPreFunctionConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginPreFunctionOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginPreFunctionOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginPreFunctionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginPreFunctionOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginPreFunctionOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginPreFunctionOutput) Route() GatewayPluginPreFunctionRouteOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) GatewayPluginPreFunctionRouteOutput { return v.Route }).(GatewayPluginPreFunctionRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginPreFunctionOutput) Service() GatewayPluginPreFunctionServiceOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) GatewayPluginPreFunctionServiceOutput { return v.Service }).(GatewayPluginPreFunctionServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginPreFunctionOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginPreFunctionOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginPreFunction) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginPreFunctionArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginPreFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginPreFunction)(nil)).Elem()
}

func (o GatewayPluginPreFunctionArrayOutput) ToGatewayPluginPreFunctionArrayOutput() GatewayPluginPreFunctionArrayOutput {
	return o
}

func (o GatewayPluginPreFunctionArrayOutput) ToGatewayPluginPreFunctionArrayOutputWithContext(ctx context.Context) GatewayPluginPreFunctionArrayOutput {
	return o
}

func (o GatewayPluginPreFunctionArrayOutput) Index(i pulumi.IntInput) GatewayPluginPreFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginPreFunction {
		return vs[0].([]*GatewayPluginPreFunction)[vs[1].(int)]
	}).(GatewayPluginPreFunctionOutput)
}

type GatewayPluginPreFunctionMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginPreFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginPreFunction)(nil)).Elem()
}

func (o GatewayPluginPreFunctionMapOutput) ToGatewayPluginPreFunctionMapOutput() GatewayPluginPreFunctionMapOutput {
	return o
}

func (o GatewayPluginPreFunctionMapOutput) ToGatewayPluginPreFunctionMapOutputWithContext(ctx context.Context) GatewayPluginPreFunctionMapOutput {
	return o
}

func (o GatewayPluginPreFunctionMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginPreFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginPreFunction {
		return vs[0].(map[string]*GatewayPluginPreFunction)[vs[1].(string)]
	}).(GatewayPluginPreFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPreFunctionInput)(nil)).Elem(), &GatewayPluginPreFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPreFunctionArrayInput)(nil)).Elem(), GatewayPluginPreFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPreFunctionMapInput)(nil)).Elem(), GatewayPluginPreFunctionMap{})
	pulumi.RegisterOutputType(GatewayPluginPreFunctionOutput{})
	pulumi.RegisterOutputType(GatewayPluginPreFunctionArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginPreFunctionMapOutput{})
}
