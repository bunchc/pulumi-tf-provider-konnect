// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginAWSLambda Resource
type GatewayPluginAwsLambda struct {
	pulumi.CustomResourceState

	Config GatewayPluginAwsLambdaConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAwsLambdaConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginAwsLambdaConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAwsLambdaRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAwsLambdaServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginAwsLambda registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginAwsLambda(ctx *pulumi.Context,
	name string, args *GatewayPluginAwsLambdaArgs, opts ...pulumi.ResourceOption) (*GatewayPluginAwsLambda, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginAwsLambda
	err := ctx.RegisterResource("konnect:index/gatewayPluginAwsLambda:GatewayPluginAwsLambda", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginAwsLambda gets an existing GatewayPluginAwsLambda resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginAwsLambda(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginAwsLambdaState, opts ...pulumi.ResourceOption) (*GatewayPluginAwsLambda, error) {
	var resource GatewayPluginAwsLambda
	err := ctx.ReadResource("konnect:index/gatewayPluginAwsLambda:GatewayPluginAwsLambda", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginAwsLambda resources.
type gatewayPluginAwsLambdaState struct {
	Config *GatewayPluginAwsLambdaConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAwsLambdaConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAwsLambdaConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAwsLambdaRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAwsLambdaService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginAwsLambdaState struct {
	Config GatewayPluginAwsLambdaConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAwsLambdaConsumerPtrInput
	ConsumerGroup GatewayPluginAwsLambdaConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAwsLambdaRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAwsLambdaServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginAwsLambdaState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAwsLambdaState)(nil)).Elem()
}

type gatewayPluginAwsLambdaArgs struct {
	Config *GatewayPluginAwsLambdaConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAwsLambdaConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAwsLambdaConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAwsLambdaRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAwsLambdaService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginAwsLambda resource.
type GatewayPluginAwsLambdaArgs struct {
	Config GatewayPluginAwsLambdaConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAwsLambdaConsumerPtrInput
	ConsumerGroup GatewayPluginAwsLambdaConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAwsLambdaRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAwsLambdaServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginAwsLambdaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAwsLambdaArgs)(nil)).Elem()
}

type GatewayPluginAwsLambdaInput interface {
	pulumi.Input

	ToGatewayPluginAwsLambdaOutput() GatewayPluginAwsLambdaOutput
	ToGatewayPluginAwsLambdaOutputWithContext(ctx context.Context) GatewayPluginAwsLambdaOutput
}

func (*GatewayPluginAwsLambda) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAwsLambda)(nil)).Elem()
}

func (i *GatewayPluginAwsLambda) ToGatewayPluginAwsLambdaOutput() GatewayPluginAwsLambdaOutput {
	return i.ToGatewayPluginAwsLambdaOutputWithContext(context.Background())
}

func (i *GatewayPluginAwsLambda) ToGatewayPluginAwsLambdaOutputWithContext(ctx context.Context) GatewayPluginAwsLambdaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAwsLambdaOutput)
}

// GatewayPluginAwsLambdaArrayInput is an input type that accepts GatewayPluginAwsLambdaArray and GatewayPluginAwsLambdaArrayOutput values.
// You can construct a concrete instance of `GatewayPluginAwsLambdaArrayInput` via:
//
//	GatewayPluginAwsLambdaArray{ GatewayPluginAwsLambdaArgs{...} }
type GatewayPluginAwsLambdaArrayInput interface {
	pulumi.Input

	ToGatewayPluginAwsLambdaArrayOutput() GatewayPluginAwsLambdaArrayOutput
	ToGatewayPluginAwsLambdaArrayOutputWithContext(context.Context) GatewayPluginAwsLambdaArrayOutput
}

type GatewayPluginAwsLambdaArray []GatewayPluginAwsLambdaInput

func (GatewayPluginAwsLambdaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAwsLambda)(nil)).Elem()
}

func (i GatewayPluginAwsLambdaArray) ToGatewayPluginAwsLambdaArrayOutput() GatewayPluginAwsLambdaArrayOutput {
	return i.ToGatewayPluginAwsLambdaArrayOutputWithContext(context.Background())
}

func (i GatewayPluginAwsLambdaArray) ToGatewayPluginAwsLambdaArrayOutputWithContext(ctx context.Context) GatewayPluginAwsLambdaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAwsLambdaArrayOutput)
}

// GatewayPluginAwsLambdaMapInput is an input type that accepts GatewayPluginAwsLambdaMap and GatewayPluginAwsLambdaMapOutput values.
// You can construct a concrete instance of `GatewayPluginAwsLambdaMapInput` via:
//
//	GatewayPluginAwsLambdaMap{ "key": GatewayPluginAwsLambdaArgs{...} }
type GatewayPluginAwsLambdaMapInput interface {
	pulumi.Input

	ToGatewayPluginAwsLambdaMapOutput() GatewayPluginAwsLambdaMapOutput
	ToGatewayPluginAwsLambdaMapOutputWithContext(context.Context) GatewayPluginAwsLambdaMapOutput
}

type GatewayPluginAwsLambdaMap map[string]GatewayPluginAwsLambdaInput

func (GatewayPluginAwsLambdaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAwsLambda)(nil)).Elem()
}

func (i GatewayPluginAwsLambdaMap) ToGatewayPluginAwsLambdaMapOutput() GatewayPluginAwsLambdaMapOutput {
	return i.ToGatewayPluginAwsLambdaMapOutputWithContext(context.Background())
}

func (i GatewayPluginAwsLambdaMap) ToGatewayPluginAwsLambdaMapOutputWithContext(ctx context.Context) GatewayPluginAwsLambdaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAwsLambdaMapOutput)
}

type GatewayPluginAwsLambdaOutput struct{ *pulumi.OutputState }

func (GatewayPluginAwsLambdaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAwsLambda)(nil)).Elem()
}

func (o GatewayPluginAwsLambdaOutput) ToGatewayPluginAwsLambdaOutput() GatewayPluginAwsLambdaOutput {
	return o
}

func (o GatewayPluginAwsLambdaOutput) ToGatewayPluginAwsLambdaOutputWithContext(ctx context.Context) GatewayPluginAwsLambdaOutput {
	return o
}

func (o GatewayPluginAwsLambdaOutput) Config() GatewayPluginAwsLambdaConfigOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) GatewayPluginAwsLambdaConfigOutput { return v.Config }).(GatewayPluginAwsLambdaConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginAwsLambdaOutput) Consumer() GatewayPluginAwsLambdaConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) GatewayPluginAwsLambdaConsumerOutput { return v.Consumer }).(GatewayPluginAwsLambdaConsumerOutput)
}

func (o GatewayPluginAwsLambdaOutput) ConsumerGroup() GatewayPluginAwsLambdaConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) GatewayPluginAwsLambdaConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginAwsLambdaConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginAwsLambdaOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginAwsLambdaOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginAwsLambdaOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginAwsLambdaOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginAwsLambdaOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginAwsLambdaOutput) Route() GatewayPluginAwsLambdaRouteOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) GatewayPluginAwsLambdaRouteOutput { return v.Route }).(GatewayPluginAwsLambdaRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginAwsLambdaOutput) Service() GatewayPluginAwsLambdaServiceOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) GatewayPluginAwsLambdaServiceOutput { return v.Service }).(GatewayPluginAwsLambdaServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginAwsLambdaOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginAwsLambdaOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAwsLambda) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginAwsLambdaArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginAwsLambdaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAwsLambda)(nil)).Elem()
}

func (o GatewayPluginAwsLambdaArrayOutput) ToGatewayPluginAwsLambdaArrayOutput() GatewayPluginAwsLambdaArrayOutput {
	return o
}

func (o GatewayPluginAwsLambdaArrayOutput) ToGatewayPluginAwsLambdaArrayOutputWithContext(ctx context.Context) GatewayPluginAwsLambdaArrayOutput {
	return o
}

func (o GatewayPluginAwsLambdaArrayOutput) Index(i pulumi.IntInput) GatewayPluginAwsLambdaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginAwsLambda {
		return vs[0].([]*GatewayPluginAwsLambda)[vs[1].(int)]
	}).(GatewayPluginAwsLambdaOutput)
}

type GatewayPluginAwsLambdaMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginAwsLambdaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAwsLambda)(nil)).Elem()
}

func (o GatewayPluginAwsLambdaMapOutput) ToGatewayPluginAwsLambdaMapOutput() GatewayPluginAwsLambdaMapOutput {
	return o
}

func (o GatewayPluginAwsLambdaMapOutput) ToGatewayPluginAwsLambdaMapOutputWithContext(ctx context.Context) GatewayPluginAwsLambdaMapOutput {
	return o
}

func (o GatewayPluginAwsLambdaMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginAwsLambdaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginAwsLambda {
		return vs[0].(map[string]*GatewayPluginAwsLambda)[vs[1].(string)]
	}).(GatewayPluginAwsLambdaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAwsLambdaInput)(nil)).Elem(), &GatewayPluginAwsLambda{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAwsLambdaArrayInput)(nil)).Elem(), GatewayPluginAwsLambdaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAwsLambdaMapInput)(nil)).Elem(), GatewayPluginAwsLambdaMap{})
	pulumi.RegisterOutputType(GatewayPluginAwsLambdaOutput{})
	pulumi.RegisterOutputType(GatewayPluginAwsLambdaArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginAwsLambdaMapOutput{})
}
