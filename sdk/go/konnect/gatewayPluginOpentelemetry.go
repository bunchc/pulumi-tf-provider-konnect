// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginOpentelemetry Resource
type GatewayPluginOpentelemetry struct {
	pulumi.CustomResourceState

	Config GatewayPluginOpentelemetryConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginOpentelemetryConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginOpentelemetryConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginOpentelemetryRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginOpentelemetryServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginOpentelemetry registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginOpentelemetry(ctx *pulumi.Context,
	name string, args *GatewayPluginOpentelemetryArgs, opts ...pulumi.ResourceOption) (*GatewayPluginOpentelemetry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginOpentelemetry
	err := ctx.RegisterResource("konnect:index/gatewayPluginOpentelemetry:GatewayPluginOpentelemetry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginOpentelemetry gets an existing GatewayPluginOpentelemetry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginOpentelemetry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginOpentelemetryState, opts ...pulumi.ResourceOption) (*GatewayPluginOpentelemetry, error) {
	var resource GatewayPluginOpentelemetry
	err := ctx.ReadResource("konnect:index/gatewayPluginOpentelemetry:GatewayPluginOpentelemetry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginOpentelemetry resources.
type gatewayPluginOpentelemetryState struct {
	Config *GatewayPluginOpentelemetryConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginOpentelemetryConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginOpentelemetryConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginOpentelemetryRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginOpentelemetryService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginOpentelemetryState struct {
	Config GatewayPluginOpentelemetryConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginOpentelemetryConsumerPtrInput
	ConsumerGroup GatewayPluginOpentelemetryConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginOpentelemetryRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginOpentelemetryServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginOpentelemetryState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginOpentelemetryState)(nil)).Elem()
}

type gatewayPluginOpentelemetryArgs struct {
	Config *GatewayPluginOpentelemetryConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginOpentelemetryConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginOpentelemetryConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginOpentelemetryRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginOpentelemetryService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginOpentelemetry resource.
type GatewayPluginOpentelemetryArgs struct {
	Config GatewayPluginOpentelemetryConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginOpentelemetryConsumerPtrInput
	ConsumerGroup GatewayPluginOpentelemetryConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginOpentelemetryRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginOpentelemetryServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginOpentelemetryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginOpentelemetryArgs)(nil)).Elem()
}

type GatewayPluginOpentelemetryInput interface {
	pulumi.Input

	ToGatewayPluginOpentelemetryOutput() GatewayPluginOpentelemetryOutput
	ToGatewayPluginOpentelemetryOutputWithContext(ctx context.Context) GatewayPluginOpentelemetryOutput
}

func (*GatewayPluginOpentelemetry) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginOpentelemetry)(nil)).Elem()
}

func (i *GatewayPluginOpentelemetry) ToGatewayPluginOpentelemetryOutput() GatewayPluginOpentelemetryOutput {
	return i.ToGatewayPluginOpentelemetryOutputWithContext(context.Background())
}

func (i *GatewayPluginOpentelemetry) ToGatewayPluginOpentelemetryOutputWithContext(ctx context.Context) GatewayPluginOpentelemetryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginOpentelemetryOutput)
}

// GatewayPluginOpentelemetryArrayInput is an input type that accepts GatewayPluginOpentelemetryArray and GatewayPluginOpentelemetryArrayOutput values.
// You can construct a concrete instance of `GatewayPluginOpentelemetryArrayInput` via:
//
//	GatewayPluginOpentelemetryArray{ GatewayPluginOpentelemetryArgs{...} }
type GatewayPluginOpentelemetryArrayInput interface {
	pulumi.Input

	ToGatewayPluginOpentelemetryArrayOutput() GatewayPluginOpentelemetryArrayOutput
	ToGatewayPluginOpentelemetryArrayOutputWithContext(context.Context) GatewayPluginOpentelemetryArrayOutput
}

type GatewayPluginOpentelemetryArray []GatewayPluginOpentelemetryInput

func (GatewayPluginOpentelemetryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginOpentelemetry)(nil)).Elem()
}

func (i GatewayPluginOpentelemetryArray) ToGatewayPluginOpentelemetryArrayOutput() GatewayPluginOpentelemetryArrayOutput {
	return i.ToGatewayPluginOpentelemetryArrayOutputWithContext(context.Background())
}

func (i GatewayPluginOpentelemetryArray) ToGatewayPluginOpentelemetryArrayOutputWithContext(ctx context.Context) GatewayPluginOpentelemetryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginOpentelemetryArrayOutput)
}

// GatewayPluginOpentelemetryMapInput is an input type that accepts GatewayPluginOpentelemetryMap and GatewayPluginOpentelemetryMapOutput values.
// You can construct a concrete instance of `GatewayPluginOpentelemetryMapInput` via:
//
//	GatewayPluginOpentelemetryMap{ "key": GatewayPluginOpentelemetryArgs{...} }
type GatewayPluginOpentelemetryMapInput interface {
	pulumi.Input

	ToGatewayPluginOpentelemetryMapOutput() GatewayPluginOpentelemetryMapOutput
	ToGatewayPluginOpentelemetryMapOutputWithContext(context.Context) GatewayPluginOpentelemetryMapOutput
}

type GatewayPluginOpentelemetryMap map[string]GatewayPluginOpentelemetryInput

func (GatewayPluginOpentelemetryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginOpentelemetry)(nil)).Elem()
}

func (i GatewayPluginOpentelemetryMap) ToGatewayPluginOpentelemetryMapOutput() GatewayPluginOpentelemetryMapOutput {
	return i.ToGatewayPluginOpentelemetryMapOutputWithContext(context.Background())
}

func (i GatewayPluginOpentelemetryMap) ToGatewayPluginOpentelemetryMapOutputWithContext(ctx context.Context) GatewayPluginOpentelemetryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginOpentelemetryMapOutput)
}

type GatewayPluginOpentelemetryOutput struct{ *pulumi.OutputState }

func (GatewayPluginOpentelemetryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginOpentelemetry)(nil)).Elem()
}

func (o GatewayPluginOpentelemetryOutput) ToGatewayPluginOpentelemetryOutput() GatewayPluginOpentelemetryOutput {
	return o
}

func (o GatewayPluginOpentelemetryOutput) ToGatewayPluginOpentelemetryOutputWithContext(ctx context.Context) GatewayPluginOpentelemetryOutput {
	return o
}

func (o GatewayPluginOpentelemetryOutput) Config() GatewayPluginOpentelemetryConfigOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) GatewayPluginOpentelemetryConfigOutput { return v.Config }).(GatewayPluginOpentelemetryConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginOpentelemetryOutput) Consumer() GatewayPluginOpentelemetryConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) GatewayPluginOpentelemetryConsumerOutput { return v.Consumer }).(GatewayPluginOpentelemetryConsumerOutput)
}

func (o GatewayPluginOpentelemetryOutput) ConsumerGroup() GatewayPluginOpentelemetryConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) GatewayPluginOpentelemetryConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginOpentelemetryConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginOpentelemetryOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginOpentelemetryOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginOpentelemetryOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginOpentelemetryOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginOpentelemetryOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginOpentelemetryOutput) Route() GatewayPluginOpentelemetryRouteOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) GatewayPluginOpentelemetryRouteOutput { return v.Route }).(GatewayPluginOpentelemetryRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginOpentelemetryOutput) Service() GatewayPluginOpentelemetryServiceOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) GatewayPluginOpentelemetryServiceOutput { return v.Service }).(GatewayPluginOpentelemetryServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginOpentelemetryOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginOpentelemetryOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginOpentelemetry) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginOpentelemetryArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginOpentelemetryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginOpentelemetry)(nil)).Elem()
}

func (o GatewayPluginOpentelemetryArrayOutput) ToGatewayPluginOpentelemetryArrayOutput() GatewayPluginOpentelemetryArrayOutput {
	return o
}

func (o GatewayPluginOpentelemetryArrayOutput) ToGatewayPluginOpentelemetryArrayOutputWithContext(ctx context.Context) GatewayPluginOpentelemetryArrayOutput {
	return o
}

func (o GatewayPluginOpentelemetryArrayOutput) Index(i pulumi.IntInput) GatewayPluginOpentelemetryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginOpentelemetry {
		return vs[0].([]*GatewayPluginOpentelemetry)[vs[1].(int)]
	}).(GatewayPluginOpentelemetryOutput)
}

type GatewayPluginOpentelemetryMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginOpentelemetryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginOpentelemetry)(nil)).Elem()
}

func (o GatewayPluginOpentelemetryMapOutput) ToGatewayPluginOpentelemetryMapOutput() GatewayPluginOpentelemetryMapOutput {
	return o
}

func (o GatewayPluginOpentelemetryMapOutput) ToGatewayPluginOpentelemetryMapOutputWithContext(ctx context.Context) GatewayPluginOpentelemetryMapOutput {
	return o
}

func (o GatewayPluginOpentelemetryMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginOpentelemetryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginOpentelemetry {
		return vs[0].(map[string]*GatewayPluginOpentelemetry)[vs[1].(string)]
	}).(GatewayPluginOpentelemetryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginOpentelemetryInput)(nil)).Elem(), &GatewayPluginOpentelemetry{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginOpentelemetryArrayInput)(nil)).Elem(), GatewayPluginOpentelemetryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginOpentelemetryMapInput)(nil)).Elem(), GatewayPluginOpentelemetryMap{})
	pulumi.RegisterOutputType(GatewayPluginOpentelemetryOutput{})
	pulumi.RegisterOutputType(GatewayPluginOpentelemetryArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginOpentelemetryMapOutput{})
}
