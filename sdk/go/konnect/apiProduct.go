// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// APIProduct Resource
type ApiProduct struct {
	pulumi.CustomResourceState

	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the API product.
	Description pulumi.StringOutput `pulumi:"description"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the API product.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of portal identifiers which this API product should be published to
	PortalIds pulumi.StringArrayOutput `pulumi:"portalIds"`
	// The list of portals which this API product is published to
	Portals ApiProductPortalArrayOutput `pulumi:"portals"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The number of product versions attached to this API product
	VersionCount pulumi.Float64Output `pulumi:"versionCount"`
}

// NewApiProduct registers a new resource with the given unique name, arguments, and options.
func NewApiProduct(ctx *pulumi.Context,
	name string, args *ApiProductArgs, opts ...pulumi.ResourceOption) (*ApiProduct, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortalIds == nil {
		return nil, errors.New("invalid value for required argument 'PortalIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiProduct
	err := ctx.RegisterResource("konnect:index/apiProduct:ApiProduct", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiProduct gets an existing ApiProduct resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiProduct(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiProductState, opts ...pulumi.ResourceOption) (*ApiProduct, error) {
	var resource ApiProduct
	err := ctx.ReadResource("konnect:index/apiProduct:ApiProduct", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiProduct resources.
type apiProductState struct {
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the API product.
	Description *string `pulumi:"description"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels map[string]string `pulumi:"labels"`
	// The name of the API product.
	Name *string `pulumi:"name"`
	// The list of portal identifiers which this API product should be published to
	PortalIds []string `pulumi:"portalIds"`
	// The list of portals which this API product is published to
	Portals []ApiProductPortal `pulumi:"portals"`
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The number of product versions attached to this API product
	VersionCount *float64 `pulumi:"versionCount"`
}

type ApiProductState struct {
	// An ISO-8601 timestamp representation of entity creation date.
	CreatedAt pulumi.StringPtrInput
	// The description of the API product.
	Description pulumi.StringPtrInput
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels pulumi.StringMapInput
	// The name of the API product.
	Name pulumi.StringPtrInput
	// The list of portal identifiers which this API product should be published to
	PortalIds pulumi.StringArrayInput
	// The list of portals which this API product is published to
	Portals ApiProductPortalArrayInput
	// An ISO-8601 timestamp representation of entity update date.
	UpdatedAt pulumi.StringPtrInput
	// The number of product versions attached to this API product
	VersionCount pulumi.Float64PtrInput
}

func (ApiProductState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiProductState)(nil)).Elem()
}

type apiProductArgs struct {
	// The description of the API product.
	Description *string `pulumi:"description"`
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels map[string]string `pulumi:"labels"`
	// The name of the API product.
	Name *string `pulumi:"name"`
	// The list of portal identifiers which this API product should be published to
	PortalIds []string `pulumi:"portalIds"`
}

// The set of arguments for constructing a ApiProduct resource.
type ApiProductArgs struct {
	// The description of the API product.
	Description pulumi.StringPtrInput
	// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
	Labels pulumi.StringMapInput
	// The name of the API product.
	Name pulumi.StringPtrInput
	// The list of portal identifiers which this API product should be published to
	PortalIds pulumi.StringArrayInput
}

func (ApiProductArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiProductArgs)(nil)).Elem()
}

type ApiProductInput interface {
	pulumi.Input

	ToApiProductOutput() ApiProductOutput
	ToApiProductOutputWithContext(ctx context.Context) ApiProductOutput
}

func (*ApiProduct) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiProduct)(nil)).Elem()
}

func (i *ApiProduct) ToApiProductOutput() ApiProductOutput {
	return i.ToApiProductOutputWithContext(context.Background())
}

func (i *ApiProduct) ToApiProductOutputWithContext(ctx context.Context) ApiProductOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductOutput)
}

// ApiProductArrayInput is an input type that accepts ApiProductArray and ApiProductArrayOutput values.
// You can construct a concrete instance of `ApiProductArrayInput` via:
//
//	ApiProductArray{ ApiProductArgs{...} }
type ApiProductArrayInput interface {
	pulumi.Input

	ToApiProductArrayOutput() ApiProductArrayOutput
	ToApiProductArrayOutputWithContext(context.Context) ApiProductArrayOutput
}

type ApiProductArray []ApiProductInput

func (ApiProductArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiProduct)(nil)).Elem()
}

func (i ApiProductArray) ToApiProductArrayOutput() ApiProductArrayOutput {
	return i.ToApiProductArrayOutputWithContext(context.Background())
}

func (i ApiProductArray) ToApiProductArrayOutputWithContext(ctx context.Context) ApiProductArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductArrayOutput)
}

// ApiProductMapInput is an input type that accepts ApiProductMap and ApiProductMapOutput values.
// You can construct a concrete instance of `ApiProductMapInput` via:
//
//	ApiProductMap{ "key": ApiProductArgs{...} }
type ApiProductMapInput interface {
	pulumi.Input

	ToApiProductMapOutput() ApiProductMapOutput
	ToApiProductMapOutputWithContext(context.Context) ApiProductMapOutput
}

type ApiProductMap map[string]ApiProductInput

func (ApiProductMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiProduct)(nil)).Elem()
}

func (i ApiProductMap) ToApiProductMapOutput() ApiProductMapOutput {
	return i.ToApiProductMapOutputWithContext(context.Background())
}

func (i ApiProductMap) ToApiProductMapOutputWithContext(ctx context.Context) ApiProductMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiProductMapOutput)
}

type ApiProductOutput struct{ *pulumi.OutputState }

func (ApiProductOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiProduct)(nil)).Elem()
}

func (o ApiProductOutput) ToApiProductOutput() ApiProductOutput {
	return o
}

func (o ApiProductOutput) ToApiProductOutputWithContext(ctx context.Context) ApiProductOutput {
	return o
}

// An ISO-8601 timestamp representation of entity creation date.
func (o ApiProductOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the API product.
func (o ApiProductOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Labels store metadata of an entity that can be used for filtering an entity list or for searching across entity types.
func (o ApiProductOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the API product.
func (o ApiProductOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of portal identifiers which this API product should be published to
func (o ApiProductOutput) PortalIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringArrayOutput { return v.PortalIds }).(pulumi.StringArrayOutput)
}

// The list of portals which this API product is published to
func (o ApiProductOutput) Portals() ApiProductPortalArrayOutput {
	return o.ApplyT(func(v *ApiProduct) ApiProductPortalArrayOutput { return v.Portals }).(ApiProductPortalArrayOutput)
}

// An ISO-8601 timestamp representation of entity update date.
func (o ApiProductOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiProduct) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The number of product versions attached to this API product
func (o ApiProductOutput) VersionCount() pulumi.Float64Output {
	return o.ApplyT(func(v *ApiProduct) pulumi.Float64Output { return v.VersionCount }).(pulumi.Float64Output)
}

type ApiProductArrayOutput struct{ *pulumi.OutputState }

func (ApiProductArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiProduct)(nil)).Elem()
}

func (o ApiProductArrayOutput) ToApiProductArrayOutput() ApiProductArrayOutput {
	return o
}

func (o ApiProductArrayOutput) ToApiProductArrayOutputWithContext(ctx context.Context) ApiProductArrayOutput {
	return o
}

func (o ApiProductArrayOutput) Index(i pulumi.IntInput) ApiProductOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiProduct {
		return vs[0].([]*ApiProduct)[vs[1].(int)]
	}).(ApiProductOutput)
}

type ApiProductMapOutput struct{ *pulumi.OutputState }

func (ApiProductMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiProduct)(nil)).Elem()
}

func (o ApiProductMapOutput) ToApiProductMapOutput() ApiProductMapOutput {
	return o
}

func (o ApiProductMapOutput) ToApiProductMapOutputWithContext(ctx context.Context) ApiProductMapOutput {
	return o
}

func (o ApiProductMapOutput) MapIndex(k pulumi.StringInput) ApiProductOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiProduct {
		return vs[0].(map[string]*ApiProduct)[vs[1].(string)]
	}).(ApiProductOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductInput)(nil)).Elem(), &ApiProduct{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductArrayInput)(nil)).Elem(), ApiProductArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiProductMapInput)(nil)).Elem(), ApiProductMap{})
	pulumi.RegisterOutputType(ApiProductOutput{})
	pulumi.RegisterOutputType(ApiProductArrayOutput{})
	pulumi.RegisterOutputType(ApiProductMapOutput{})
}
