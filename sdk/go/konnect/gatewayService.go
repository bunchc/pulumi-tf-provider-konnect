// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayService Resource
type GatewayService struct {
	pulumi.CustomResourceState

	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	CaCertificates pulumi.StringArrayOutput `pulumi:"caCertificates"`
	// Certificate to be used as client certificate while TLS handshaking to the upstream server.
	ClientCertificate GatewayServiceClientCertificateOutput `pulumi:"clientCertificate"`
	// The timeout in milliseconds for establishing a connection to the upstream server.
	ConnectTimeout pulumi.IntOutput `pulumi:"connectTimeout"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The host of the upstream server. Note that the host value is case sensitive.
	Host pulumi.StringOutput `pulumi:"host"`
	// The Service name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The path to be used in requests to the upstream server.
	Path pulumi.StringOutput `pulumi:"path"`
	// The upstream server port.
	Port pulumi.IntOutput `pulumi:"port"`
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	ReadTimeout pulumi.IntOutput `pulumi:"readTimeout"`
	// The number of retries to execute upon failure to proxy.
	Retries pulumi.IntOutput `pulumi:"retries"`
	// An optional set of strings associated with the Service for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerify pulumi.BoolOutput `pulumi:"tlsVerify"`
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerifyDepth pulumi.IntOutput `pulumi:"tlsVerifyDepth"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	WriteTimeout pulumi.IntOutput `pulumi:"writeTimeout"`
}

// NewGatewayService registers a new resource with the given unique name, arguments, and options.
func NewGatewayService(ctx *pulumi.Context,
	name string, args *GatewayServiceArgs, opts ...pulumi.ResourceOption) (*GatewayService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayService
	err := ctx.RegisterResource("konnect:index/gatewayService:GatewayService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayService gets an existing GatewayService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayServiceState, opts ...pulumi.ResourceOption) (*GatewayService, error) {
	var resource GatewayService
	err := ctx.ReadResource("konnect:index/gatewayService:GatewayService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayService resources.
type gatewayServiceState struct {
	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	CaCertificates []string `pulumi:"caCertificates"`
	// Certificate to be used as client certificate while TLS handshaking to the upstream server.
	ClientCertificate *GatewayServiceClientCertificate `pulumi:"clientCertificate"`
	// The timeout in milliseconds for establishing a connection to the upstream server.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// The host of the upstream server. Note that the host value is case sensitive.
	Host *string `pulumi:"host"`
	// The Service name.
	Name *string `pulumi:"name"`
	// The path to be used in requests to the upstream server.
	Path *string `pulumi:"path"`
	// The upstream server port.
	Port *int `pulumi:"port"`
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
	Protocol *string `pulumi:"protocol"`
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	ReadTimeout *int `pulumi:"readTimeout"`
	// The number of retries to execute upon failure to proxy.
	Retries *int `pulumi:"retries"`
	// An optional set of strings associated with the Service for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerify *bool `pulumi:"tlsVerify"`
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerifyDepth *int `pulumi:"tlsVerifyDepth"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	WriteTimeout *int `pulumi:"writeTimeout"`
}

type GatewayServiceState struct {
	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	CaCertificates pulumi.StringArrayInput
	// Certificate to be used as client certificate while TLS handshaking to the upstream server.
	ClientCertificate GatewayServiceClientCertificatePtrInput
	// The timeout in milliseconds for establishing a connection to the upstream server.
	ConnectTimeout pulumi.IntPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled pulumi.BoolPtrInput
	// The host of the upstream server. Note that the host value is case sensitive.
	Host pulumi.StringPtrInput
	// The Service name.
	Name pulumi.StringPtrInput
	// The path to be used in requests to the upstream server.
	Path pulumi.StringPtrInput
	// The upstream server port.
	Port pulumi.IntPtrInput
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
	Protocol pulumi.StringPtrInput
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	ReadTimeout pulumi.IntPtrInput
	// The number of retries to execute upon failure to proxy.
	Retries pulumi.IntPtrInput
	// An optional set of strings associated with the Service for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerify pulumi.BoolPtrInput
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerifyDepth pulumi.IntPtrInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	WriteTimeout pulumi.IntPtrInput
}

func (GatewayServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayServiceState)(nil)).Elem()
}

type gatewayServiceArgs struct {
	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	CaCertificates []string `pulumi:"caCertificates"`
	// Certificate to be used as client certificate while TLS handshaking to the upstream server.
	ClientCertificate *GatewayServiceClientCertificate `pulumi:"clientCertificate"`
	// The timeout in milliseconds for establishing a connection to the upstream server.
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled *bool `pulumi:"enabled"`
	// The host of the upstream server. Note that the host value is case sensitive.
	Host *string `pulumi:"host"`
	// The Service name.
	Name *string `pulumi:"name"`
	// The path to be used in requests to the upstream server.
	Path *string `pulumi:"path"`
	// The upstream server port.
	Port *int `pulumi:"port"`
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
	Protocol *string `pulumi:"protocol"`
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	ReadTimeout *int `pulumi:"readTimeout"`
	// The number of retries to execute upon failure to proxy.
	Retries *int `pulumi:"retries"`
	// An optional set of strings associated with the Service for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerify *bool `pulumi:"tlsVerify"`
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerifyDepth *int `pulumi:"tlsVerifyDepth"`
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	WriteTimeout *int `pulumi:"writeTimeout"`
}

// The set of arguments for constructing a GatewayService resource.
type GatewayServiceArgs struct {
	// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
	CaCertificates pulumi.StringArrayInput
	// Certificate to be used as client certificate while TLS handshaking to the upstream server.
	ClientCertificate GatewayServiceClientCertificatePtrInput
	// The timeout in milliseconds for establishing a connection to the upstream server.
	ConnectTimeout pulumi.IntPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
	Enabled pulumi.BoolPtrInput
	// The host of the upstream server. Note that the host value is case sensitive.
	Host pulumi.StringPtrInput
	// The Service name.
	Name pulumi.StringPtrInput
	// The path to be used in requests to the upstream server.
	Path pulumi.StringPtrInput
	// The upstream server port.
	Port pulumi.IntPtrInput
	// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
	Protocol pulumi.StringPtrInput
	// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
	ReadTimeout pulumi.IntPtrInput
	// The number of retries to execute upon failure to proxy.
	Retries pulumi.IntPtrInput
	// An optional set of strings associated with the Service for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerify pulumi.BoolPtrInput
	// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
	TlsVerifyDepth pulumi.IntPtrInput
	// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
	WriteTimeout pulumi.IntPtrInput
}

func (GatewayServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayServiceArgs)(nil)).Elem()
}

type GatewayServiceInput interface {
	pulumi.Input

	ToGatewayServiceOutput() GatewayServiceOutput
	ToGatewayServiceOutputWithContext(ctx context.Context) GatewayServiceOutput
}

func (*GatewayService) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayService)(nil)).Elem()
}

func (i *GatewayService) ToGatewayServiceOutput() GatewayServiceOutput {
	return i.ToGatewayServiceOutputWithContext(context.Background())
}

func (i *GatewayService) ToGatewayServiceOutputWithContext(ctx context.Context) GatewayServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayServiceOutput)
}

// GatewayServiceArrayInput is an input type that accepts GatewayServiceArray and GatewayServiceArrayOutput values.
// You can construct a concrete instance of `GatewayServiceArrayInput` via:
//
//	GatewayServiceArray{ GatewayServiceArgs{...} }
type GatewayServiceArrayInput interface {
	pulumi.Input

	ToGatewayServiceArrayOutput() GatewayServiceArrayOutput
	ToGatewayServiceArrayOutputWithContext(context.Context) GatewayServiceArrayOutput
}

type GatewayServiceArray []GatewayServiceInput

func (GatewayServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayService)(nil)).Elem()
}

func (i GatewayServiceArray) ToGatewayServiceArrayOutput() GatewayServiceArrayOutput {
	return i.ToGatewayServiceArrayOutputWithContext(context.Background())
}

func (i GatewayServiceArray) ToGatewayServiceArrayOutputWithContext(ctx context.Context) GatewayServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayServiceArrayOutput)
}

// GatewayServiceMapInput is an input type that accepts GatewayServiceMap and GatewayServiceMapOutput values.
// You can construct a concrete instance of `GatewayServiceMapInput` via:
//
//	GatewayServiceMap{ "key": GatewayServiceArgs{...} }
type GatewayServiceMapInput interface {
	pulumi.Input

	ToGatewayServiceMapOutput() GatewayServiceMapOutput
	ToGatewayServiceMapOutputWithContext(context.Context) GatewayServiceMapOutput
}

type GatewayServiceMap map[string]GatewayServiceInput

func (GatewayServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayService)(nil)).Elem()
}

func (i GatewayServiceMap) ToGatewayServiceMapOutput() GatewayServiceMapOutput {
	return i.ToGatewayServiceMapOutputWithContext(context.Background())
}

func (i GatewayServiceMap) ToGatewayServiceMapOutputWithContext(ctx context.Context) GatewayServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayServiceMapOutput)
}

type GatewayServiceOutput struct{ *pulumi.OutputState }

func (GatewayServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayService)(nil)).Elem()
}

func (o GatewayServiceOutput) ToGatewayServiceOutput() GatewayServiceOutput {
	return o
}

func (o GatewayServiceOutput) ToGatewayServiceOutputWithContext(ctx context.Context) GatewayServiceOutput {
	return o
}

// Array of `CA Certificate` object UUIDs that are used to build the trust store while verifying upstream server's TLS certificate. If set to `null` when Nginx default is respected. If default CA list in Nginx are not specified and TLS verification is enabled, then handshake with upstream server will always fail (because no CA are trusted).
func (o GatewayServiceOutput) CaCertificates() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.StringArrayOutput { return v.CaCertificates }).(pulumi.StringArrayOutput)
}

// Certificate to be used as client certificate while TLS handshaking to the upstream server.
func (o GatewayServiceOutput) ClientCertificate() GatewayServiceClientCertificateOutput {
	return o.ApplyT(func(v *GatewayService) GatewayServiceClientCertificateOutput { return v.ClientCertificate }).(GatewayServiceClientCertificateOutput)
}

// The timeout in milliseconds for establishing a connection to the upstream server.
func (o GatewayServiceOutput) ConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.ConnectTimeout }).(pulumi.IntOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayServiceOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayServiceOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the Service is active. If set to `false`, the proxy behavior will be as if any routes attached to it do not exist (404). Default: `true`.
func (o GatewayServiceOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The host of the upstream server. Note that the host value is case sensitive.
func (o GatewayServiceOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The Service name.
func (o GatewayServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The path to be used in requests to the upstream server.
func (o GatewayServiceOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// The upstream server port.
func (o GatewayServiceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The protocol used to communicate with the upstream. must be one of ["grpc", "grpcs", "http", "https", "tcp", "tls", "tlsPassthrough", "udp", "ws", "wss"]
func (o GatewayServiceOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The timeout in milliseconds between two successive read operations for transmitting a request to the upstream server.
func (o GatewayServiceOutput) ReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.ReadTimeout }).(pulumi.IntOutput)
}

// The number of retries to execute upon failure to proxy.
func (o GatewayServiceOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.Retries }).(pulumi.IntOutput)
}

// An optional set of strings associated with the Service for grouping and filtering.
func (o GatewayServiceOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Whether to enable verification of upstream server TLS certificate. If set to `null`, then the Nginx default is respected.
func (o GatewayServiceOutput) TlsVerify() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.BoolOutput { return v.TlsVerify }).(pulumi.BoolOutput)
}

// Maximum depth of chain while verifying Upstream server's TLS certificate. If set to `null`, then the Nginx default is respected.
func (o GatewayServiceOutput) TlsVerifyDepth() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.TlsVerifyDepth }).(pulumi.IntOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayServiceOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

// The timeout in milliseconds between two successive write operations for transmitting a request to the upstream server.
func (o GatewayServiceOutput) WriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayService) pulumi.IntOutput { return v.WriteTimeout }).(pulumi.IntOutput)
}

type GatewayServiceArrayOutput struct{ *pulumi.OutputState }

func (GatewayServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayService)(nil)).Elem()
}

func (o GatewayServiceArrayOutput) ToGatewayServiceArrayOutput() GatewayServiceArrayOutput {
	return o
}

func (o GatewayServiceArrayOutput) ToGatewayServiceArrayOutputWithContext(ctx context.Context) GatewayServiceArrayOutput {
	return o
}

func (o GatewayServiceArrayOutput) Index(i pulumi.IntInput) GatewayServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayService {
		return vs[0].([]*GatewayService)[vs[1].(int)]
	}).(GatewayServiceOutput)
}

type GatewayServiceMapOutput struct{ *pulumi.OutputState }

func (GatewayServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayService)(nil)).Elem()
}

func (o GatewayServiceMapOutput) ToGatewayServiceMapOutput() GatewayServiceMapOutput {
	return o
}

func (o GatewayServiceMapOutput) ToGatewayServiceMapOutputWithContext(ctx context.Context) GatewayServiceMapOutput {
	return o
}

func (o GatewayServiceMapOutput) MapIndex(k pulumi.StringInput) GatewayServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayService {
		return vs[0].(map[string]*GatewayService)[vs[1].(string)]
	}).(GatewayServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayServiceInput)(nil)).Elem(), &GatewayService{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayServiceArrayInput)(nil)).Elem(), GatewayServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayServiceMapInput)(nil)).Elem(), GatewayServiceMap{})
	pulumi.RegisterOutputType(GatewayServiceOutput{})
	pulumi.RegisterOutputType(GatewayServiceArrayOutput{})
	pulumi.RegisterOutputType(GatewayServiceMapOutput{})
}
