// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginStatsd Resource
type GatewayPluginStatsd struct {
	pulumi.CustomResourceState

	Config GatewayPluginStatsdConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginStatsdConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginStatsdConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginStatsdRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginStatsdServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginStatsd registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginStatsd(ctx *pulumi.Context,
	name string, args *GatewayPluginStatsdArgs, opts ...pulumi.ResourceOption) (*GatewayPluginStatsd, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginStatsd
	err := ctx.RegisterResource("konnect:index/gatewayPluginStatsd:GatewayPluginStatsd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginStatsd gets an existing GatewayPluginStatsd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginStatsd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginStatsdState, opts ...pulumi.ResourceOption) (*GatewayPluginStatsd, error) {
	var resource GatewayPluginStatsd
	err := ctx.ReadResource("konnect:index/gatewayPluginStatsd:GatewayPluginStatsd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginStatsd resources.
type gatewayPluginStatsdState struct {
	Config *GatewayPluginStatsdConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginStatsdConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginStatsdConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginStatsdRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginStatsdService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginStatsdState struct {
	Config GatewayPluginStatsdConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginStatsdConsumerPtrInput
	ConsumerGroup GatewayPluginStatsdConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginStatsdRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginStatsdServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginStatsdState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginStatsdState)(nil)).Elem()
}

type gatewayPluginStatsdArgs struct {
	Config *GatewayPluginStatsdConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginStatsdConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginStatsdConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginStatsdRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginStatsdService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginStatsd resource.
type GatewayPluginStatsdArgs struct {
	Config GatewayPluginStatsdConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginStatsdConsumerPtrInput
	ConsumerGroup GatewayPluginStatsdConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginStatsdRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginStatsdServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginStatsdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginStatsdArgs)(nil)).Elem()
}

type GatewayPluginStatsdInput interface {
	pulumi.Input

	ToGatewayPluginStatsdOutput() GatewayPluginStatsdOutput
	ToGatewayPluginStatsdOutputWithContext(ctx context.Context) GatewayPluginStatsdOutput
}

func (*GatewayPluginStatsd) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginStatsd)(nil)).Elem()
}

func (i *GatewayPluginStatsd) ToGatewayPluginStatsdOutput() GatewayPluginStatsdOutput {
	return i.ToGatewayPluginStatsdOutputWithContext(context.Background())
}

func (i *GatewayPluginStatsd) ToGatewayPluginStatsdOutputWithContext(ctx context.Context) GatewayPluginStatsdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginStatsdOutput)
}

// GatewayPluginStatsdArrayInput is an input type that accepts GatewayPluginStatsdArray and GatewayPluginStatsdArrayOutput values.
// You can construct a concrete instance of `GatewayPluginStatsdArrayInput` via:
//
//	GatewayPluginStatsdArray{ GatewayPluginStatsdArgs{...} }
type GatewayPluginStatsdArrayInput interface {
	pulumi.Input

	ToGatewayPluginStatsdArrayOutput() GatewayPluginStatsdArrayOutput
	ToGatewayPluginStatsdArrayOutputWithContext(context.Context) GatewayPluginStatsdArrayOutput
}

type GatewayPluginStatsdArray []GatewayPluginStatsdInput

func (GatewayPluginStatsdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginStatsd)(nil)).Elem()
}

func (i GatewayPluginStatsdArray) ToGatewayPluginStatsdArrayOutput() GatewayPluginStatsdArrayOutput {
	return i.ToGatewayPluginStatsdArrayOutputWithContext(context.Background())
}

func (i GatewayPluginStatsdArray) ToGatewayPluginStatsdArrayOutputWithContext(ctx context.Context) GatewayPluginStatsdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginStatsdArrayOutput)
}

// GatewayPluginStatsdMapInput is an input type that accepts GatewayPluginStatsdMap and GatewayPluginStatsdMapOutput values.
// You can construct a concrete instance of `GatewayPluginStatsdMapInput` via:
//
//	GatewayPluginStatsdMap{ "key": GatewayPluginStatsdArgs{...} }
type GatewayPluginStatsdMapInput interface {
	pulumi.Input

	ToGatewayPluginStatsdMapOutput() GatewayPluginStatsdMapOutput
	ToGatewayPluginStatsdMapOutputWithContext(context.Context) GatewayPluginStatsdMapOutput
}

type GatewayPluginStatsdMap map[string]GatewayPluginStatsdInput

func (GatewayPluginStatsdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginStatsd)(nil)).Elem()
}

func (i GatewayPluginStatsdMap) ToGatewayPluginStatsdMapOutput() GatewayPluginStatsdMapOutput {
	return i.ToGatewayPluginStatsdMapOutputWithContext(context.Background())
}

func (i GatewayPluginStatsdMap) ToGatewayPluginStatsdMapOutputWithContext(ctx context.Context) GatewayPluginStatsdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginStatsdMapOutput)
}

type GatewayPluginStatsdOutput struct{ *pulumi.OutputState }

func (GatewayPluginStatsdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginStatsd)(nil)).Elem()
}

func (o GatewayPluginStatsdOutput) ToGatewayPluginStatsdOutput() GatewayPluginStatsdOutput {
	return o
}

func (o GatewayPluginStatsdOutput) ToGatewayPluginStatsdOutputWithContext(ctx context.Context) GatewayPluginStatsdOutput {
	return o
}

func (o GatewayPluginStatsdOutput) Config() GatewayPluginStatsdConfigOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) GatewayPluginStatsdConfigOutput { return v.Config }).(GatewayPluginStatsdConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginStatsdOutput) Consumer() GatewayPluginStatsdConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) GatewayPluginStatsdConsumerOutput { return v.Consumer }).(GatewayPluginStatsdConsumerOutput)
}

func (o GatewayPluginStatsdOutput) ConsumerGroup() GatewayPluginStatsdConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) GatewayPluginStatsdConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginStatsdConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginStatsdOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginStatsdOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginStatsdOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginStatsdOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginStatsdOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginStatsdOutput) Route() GatewayPluginStatsdRouteOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) GatewayPluginStatsdRouteOutput { return v.Route }).(GatewayPluginStatsdRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginStatsdOutput) Service() GatewayPluginStatsdServiceOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) GatewayPluginStatsdServiceOutput { return v.Service }).(GatewayPluginStatsdServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginStatsdOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginStatsdOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginStatsd) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginStatsdArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginStatsdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginStatsd)(nil)).Elem()
}

func (o GatewayPluginStatsdArrayOutput) ToGatewayPluginStatsdArrayOutput() GatewayPluginStatsdArrayOutput {
	return o
}

func (o GatewayPluginStatsdArrayOutput) ToGatewayPluginStatsdArrayOutputWithContext(ctx context.Context) GatewayPluginStatsdArrayOutput {
	return o
}

func (o GatewayPluginStatsdArrayOutput) Index(i pulumi.IntInput) GatewayPluginStatsdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginStatsd {
		return vs[0].([]*GatewayPluginStatsd)[vs[1].(int)]
	}).(GatewayPluginStatsdOutput)
}

type GatewayPluginStatsdMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginStatsdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginStatsd)(nil)).Elem()
}

func (o GatewayPluginStatsdMapOutput) ToGatewayPluginStatsdMapOutput() GatewayPluginStatsdMapOutput {
	return o
}

func (o GatewayPluginStatsdMapOutput) ToGatewayPluginStatsdMapOutputWithContext(ctx context.Context) GatewayPluginStatsdMapOutput {
	return o
}

func (o GatewayPluginStatsdMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginStatsdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginStatsd {
		return vs[0].(map[string]*GatewayPluginStatsd)[vs[1].(string)]
	}).(GatewayPluginStatsdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginStatsdInput)(nil)).Elem(), &GatewayPluginStatsd{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginStatsdArrayInput)(nil)).Elem(), GatewayPluginStatsdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginStatsdMapInput)(nil)).Elem(), GatewayPluginStatsdMap{})
	pulumi.RegisterOutputType(GatewayPluginStatsdOutput{})
	pulumi.RegisterOutputType(GatewayPluginStatsdArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginStatsdMapOutput{})
}
