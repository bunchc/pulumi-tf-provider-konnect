// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayCACertificate Resource
type GatewayCaCertificate struct {
	pulumi.CustomResourceState

	// PEM-encoded public certificate of the CA.
	Cert pulumi.StringOutput `pulumi:"cert"`
	// SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
	CertDigest pulumi.StringOutput `pulumi:"certDigest"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// An optional set of strings associated with the Certificate for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayCaCertificate registers a new resource with the given unique name, arguments, and options.
func NewGatewayCaCertificate(ctx *pulumi.Context,
	name string, args *GatewayCaCertificateArgs, opts ...pulumi.ResourceOption) (*GatewayCaCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayCaCertificate
	err := ctx.RegisterResource("konnect:index/gatewayCaCertificate:GatewayCaCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayCaCertificate gets an existing GatewayCaCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayCaCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayCaCertificateState, opts ...pulumi.ResourceOption) (*GatewayCaCertificate, error) {
	var resource GatewayCaCertificate
	err := ctx.ReadResource("konnect:index/gatewayCaCertificate:GatewayCaCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayCaCertificate resources.
type gatewayCaCertificateState struct {
	// PEM-encoded public certificate of the CA.
	Cert *string `pulumi:"cert"`
	// SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
	CertDigest *string `pulumi:"certDigest"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// An optional set of strings associated with the Certificate for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayCaCertificateState struct {
	// PEM-encoded public certificate of the CA.
	Cert pulumi.StringPtrInput
	// SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
	CertDigest pulumi.StringPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// An optional set of strings associated with the Certificate for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayCaCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCaCertificateState)(nil)).Elem()
}

type gatewayCaCertificateArgs struct {
	// PEM-encoded public certificate of the CA.
	Cert *string `pulumi:"cert"`
	// SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
	CertDigest *string `pulumi:"certDigest"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// An optional set of strings associated with the Certificate for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayCaCertificate resource.
type GatewayCaCertificateArgs struct {
	// PEM-encoded public certificate of the CA.
	Cert pulumi.StringPtrInput
	// SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
	CertDigest pulumi.StringPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// An optional set of strings associated with the Certificate for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayCaCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayCaCertificateArgs)(nil)).Elem()
}

type GatewayCaCertificateInput interface {
	pulumi.Input

	ToGatewayCaCertificateOutput() GatewayCaCertificateOutput
	ToGatewayCaCertificateOutputWithContext(ctx context.Context) GatewayCaCertificateOutput
}

func (*GatewayCaCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCaCertificate)(nil)).Elem()
}

func (i *GatewayCaCertificate) ToGatewayCaCertificateOutput() GatewayCaCertificateOutput {
	return i.ToGatewayCaCertificateOutputWithContext(context.Background())
}

func (i *GatewayCaCertificate) ToGatewayCaCertificateOutputWithContext(ctx context.Context) GatewayCaCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCaCertificateOutput)
}

// GatewayCaCertificateArrayInput is an input type that accepts GatewayCaCertificateArray and GatewayCaCertificateArrayOutput values.
// You can construct a concrete instance of `GatewayCaCertificateArrayInput` via:
//
//	GatewayCaCertificateArray{ GatewayCaCertificateArgs{...} }
type GatewayCaCertificateArrayInput interface {
	pulumi.Input

	ToGatewayCaCertificateArrayOutput() GatewayCaCertificateArrayOutput
	ToGatewayCaCertificateArrayOutputWithContext(context.Context) GatewayCaCertificateArrayOutput
}

type GatewayCaCertificateArray []GatewayCaCertificateInput

func (GatewayCaCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCaCertificate)(nil)).Elem()
}

func (i GatewayCaCertificateArray) ToGatewayCaCertificateArrayOutput() GatewayCaCertificateArrayOutput {
	return i.ToGatewayCaCertificateArrayOutputWithContext(context.Background())
}

func (i GatewayCaCertificateArray) ToGatewayCaCertificateArrayOutputWithContext(ctx context.Context) GatewayCaCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCaCertificateArrayOutput)
}

// GatewayCaCertificateMapInput is an input type that accepts GatewayCaCertificateMap and GatewayCaCertificateMapOutput values.
// You can construct a concrete instance of `GatewayCaCertificateMapInput` via:
//
//	GatewayCaCertificateMap{ "key": GatewayCaCertificateArgs{...} }
type GatewayCaCertificateMapInput interface {
	pulumi.Input

	ToGatewayCaCertificateMapOutput() GatewayCaCertificateMapOutput
	ToGatewayCaCertificateMapOutputWithContext(context.Context) GatewayCaCertificateMapOutput
}

type GatewayCaCertificateMap map[string]GatewayCaCertificateInput

func (GatewayCaCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCaCertificate)(nil)).Elem()
}

func (i GatewayCaCertificateMap) ToGatewayCaCertificateMapOutput() GatewayCaCertificateMapOutput {
	return i.ToGatewayCaCertificateMapOutputWithContext(context.Background())
}

func (i GatewayCaCertificateMap) ToGatewayCaCertificateMapOutputWithContext(ctx context.Context) GatewayCaCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayCaCertificateMapOutput)
}

type GatewayCaCertificateOutput struct{ *pulumi.OutputState }

func (GatewayCaCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayCaCertificate)(nil)).Elem()
}

func (o GatewayCaCertificateOutput) ToGatewayCaCertificateOutput() GatewayCaCertificateOutput {
	return o
}

func (o GatewayCaCertificateOutput) ToGatewayCaCertificateOutputWithContext(ctx context.Context) GatewayCaCertificateOutput {
	return o
}

// PEM-encoded public certificate of the CA.
func (o GatewayCaCertificateOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCaCertificate) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

// SHA256 hex digest of the public certificate. This field is read-only and it cannot be set by the caller, the value is automatically computed.
func (o GatewayCaCertificateOutput) CertDigest() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCaCertificate) pulumi.StringOutput { return v.CertDigest }).(pulumi.StringOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayCaCertificateOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayCaCertificate) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayCaCertificateOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayCaCertificate) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// An optional set of strings associated with the Certificate for grouping and filtering.
func (o GatewayCaCertificateOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayCaCertificate) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayCaCertificateOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayCaCertificate) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayCaCertificateArrayOutput struct{ *pulumi.OutputState }

func (GatewayCaCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayCaCertificate)(nil)).Elem()
}

func (o GatewayCaCertificateArrayOutput) ToGatewayCaCertificateArrayOutput() GatewayCaCertificateArrayOutput {
	return o
}

func (o GatewayCaCertificateArrayOutput) ToGatewayCaCertificateArrayOutputWithContext(ctx context.Context) GatewayCaCertificateArrayOutput {
	return o
}

func (o GatewayCaCertificateArrayOutput) Index(i pulumi.IntInput) GatewayCaCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayCaCertificate {
		return vs[0].([]*GatewayCaCertificate)[vs[1].(int)]
	}).(GatewayCaCertificateOutput)
}

type GatewayCaCertificateMapOutput struct{ *pulumi.OutputState }

func (GatewayCaCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayCaCertificate)(nil)).Elem()
}

func (o GatewayCaCertificateMapOutput) ToGatewayCaCertificateMapOutput() GatewayCaCertificateMapOutput {
	return o
}

func (o GatewayCaCertificateMapOutput) ToGatewayCaCertificateMapOutputWithContext(ctx context.Context) GatewayCaCertificateMapOutput {
	return o
}

func (o GatewayCaCertificateMapOutput) MapIndex(k pulumi.StringInput) GatewayCaCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayCaCertificate {
		return vs[0].(map[string]*GatewayCaCertificate)[vs[1].(string)]
	}).(GatewayCaCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCaCertificateInput)(nil)).Elem(), &GatewayCaCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCaCertificateArrayInput)(nil)).Elem(), GatewayCaCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayCaCertificateMapInput)(nil)).Elem(), GatewayCaCertificateMap{})
	pulumi.RegisterOutputType(GatewayCaCertificateOutput{})
	pulumi.RegisterOutputType(GatewayCaCertificateArrayOutput{})
	pulumi.RegisterOutputType(GatewayCaCertificateMapOutput{})
}
