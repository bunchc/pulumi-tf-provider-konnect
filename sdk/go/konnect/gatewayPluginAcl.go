// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginACL Resource
type GatewayPluginAcl struct {
	pulumi.CustomResourceState

	Config GatewayPluginAclConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAclConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginAclConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAclRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAclServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginAcl registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginAcl(ctx *pulumi.Context,
	name string, args *GatewayPluginAclArgs, opts ...pulumi.ResourceOption) (*GatewayPluginAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginAcl
	err := ctx.RegisterResource("konnect:index/gatewayPluginAcl:GatewayPluginAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginAcl gets an existing GatewayPluginAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginAclState, opts ...pulumi.ResourceOption) (*GatewayPluginAcl, error) {
	var resource GatewayPluginAcl
	err := ctx.ReadResource("konnect:index/gatewayPluginAcl:GatewayPluginAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginAcl resources.
type gatewayPluginAclState struct {
	Config *GatewayPluginAclConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAclConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAclConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAclRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAclService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginAclState struct {
	Config GatewayPluginAclConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAclConsumerPtrInput
	ConsumerGroup GatewayPluginAclConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAclRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAclServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAclState)(nil)).Elem()
}

type gatewayPluginAclArgs struct {
	Config *GatewayPluginAclConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAclConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAclConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAclRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAclService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginAcl resource.
type GatewayPluginAclArgs struct {
	Config GatewayPluginAclConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAclConsumerPtrInput
	ConsumerGroup GatewayPluginAclConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAclRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAclServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAclArgs)(nil)).Elem()
}

type GatewayPluginAclInput interface {
	pulumi.Input

	ToGatewayPluginAclOutput() GatewayPluginAclOutput
	ToGatewayPluginAclOutputWithContext(ctx context.Context) GatewayPluginAclOutput
}

func (*GatewayPluginAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAcl)(nil)).Elem()
}

func (i *GatewayPluginAcl) ToGatewayPluginAclOutput() GatewayPluginAclOutput {
	return i.ToGatewayPluginAclOutputWithContext(context.Background())
}

func (i *GatewayPluginAcl) ToGatewayPluginAclOutputWithContext(ctx context.Context) GatewayPluginAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAclOutput)
}

// GatewayPluginAclArrayInput is an input type that accepts GatewayPluginAclArray and GatewayPluginAclArrayOutput values.
// You can construct a concrete instance of `GatewayPluginAclArrayInput` via:
//
//	GatewayPluginAclArray{ GatewayPluginAclArgs{...} }
type GatewayPluginAclArrayInput interface {
	pulumi.Input

	ToGatewayPluginAclArrayOutput() GatewayPluginAclArrayOutput
	ToGatewayPluginAclArrayOutputWithContext(context.Context) GatewayPluginAclArrayOutput
}

type GatewayPluginAclArray []GatewayPluginAclInput

func (GatewayPluginAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAcl)(nil)).Elem()
}

func (i GatewayPluginAclArray) ToGatewayPluginAclArrayOutput() GatewayPluginAclArrayOutput {
	return i.ToGatewayPluginAclArrayOutputWithContext(context.Background())
}

func (i GatewayPluginAclArray) ToGatewayPluginAclArrayOutputWithContext(ctx context.Context) GatewayPluginAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAclArrayOutput)
}

// GatewayPluginAclMapInput is an input type that accepts GatewayPluginAclMap and GatewayPluginAclMapOutput values.
// You can construct a concrete instance of `GatewayPluginAclMapInput` via:
//
//	GatewayPluginAclMap{ "key": GatewayPluginAclArgs{...} }
type GatewayPluginAclMapInput interface {
	pulumi.Input

	ToGatewayPluginAclMapOutput() GatewayPluginAclMapOutput
	ToGatewayPluginAclMapOutputWithContext(context.Context) GatewayPluginAclMapOutput
}

type GatewayPluginAclMap map[string]GatewayPluginAclInput

func (GatewayPluginAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAcl)(nil)).Elem()
}

func (i GatewayPluginAclMap) ToGatewayPluginAclMapOutput() GatewayPluginAclMapOutput {
	return i.ToGatewayPluginAclMapOutputWithContext(context.Background())
}

func (i GatewayPluginAclMap) ToGatewayPluginAclMapOutputWithContext(ctx context.Context) GatewayPluginAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAclMapOutput)
}

type GatewayPluginAclOutput struct{ *pulumi.OutputState }

func (GatewayPluginAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAcl)(nil)).Elem()
}

func (o GatewayPluginAclOutput) ToGatewayPluginAclOutput() GatewayPluginAclOutput {
	return o
}

func (o GatewayPluginAclOutput) ToGatewayPluginAclOutputWithContext(ctx context.Context) GatewayPluginAclOutput {
	return o
}

func (o GatewayPluginAclOutput) Config() GatewayPluginAclConfigOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) GatewayPluginAclConfigOutput { return v.Config }).(GatewayPluginAclConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginAclOutput) Consumer() GatewayPluginAclConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) GatewayPluginAclConsumerOutput { return v.Consumer }).(GatewayPluginAclConsumerOutput)
}

func (o GatewayPluginAclOutput) ConsumerGroup() GatewayPluginAclConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) GatewayPluginAclConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginAclConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginAclOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginAclOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginAclOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginAclOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginAclOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginAclOutput) Route() GatewayPluginAclRouteOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) GatewayPluginAclRouteOutput { return v.Route }).(GatewayPluginAclRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginAclOutput) Service() GatewayPluginAclServiceOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) GatewayPluginAclServiceOutput { return v.Service }).(GatewayPluginAclServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginAclOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginAclOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAcl) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginAclArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAcl)(nil)).Elem()
}

func (o GatewayPluginAclArrayOutput) ToGatewayPluginAclArrayOutput() GatewayPluginAclArrayOutput {
	return o
}

func (o GatewayPluginAclArrayOutput) ToGatewayPluginAclArrayOutputWithContext(ctx context.Context) GatewayPluginAclArrayOutput {
	return o
}

func (o GatewayPluginAclArrayOutput) Index(i pulumi.IntInput) GatewayPluginAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginAcl {
		return vs[0].([]*GatewayPluginAcl)[vs[1].(int)]
	}).(GatewayPluginAclOutput)
}

type GatewayPluginAclMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAcl)(nil)).Elem()
}

func (o GatewayPluginAclMapOutput) ToGatewayPluginAclMapOutput() GatewayPluginAclMapOutput {
	return o
}

func (o GatewayPluginAclMapOutput) ToGatewayPluginAclMapOutputWithContext(ctx context.Context) GatewayPluginAclMapOutput {
	return o
}

func (o GatewayPluginAclMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginAcl {
		return vs[0].(map[string]*GatewayPluginAcl)[vs[1].(string)]
	}).(GatewayPluginAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAclInput)(nil)).Elem(), &GatewayPluginAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAclArrayInput)(nil)).Elem(), GatewayPluginAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAclMapInput)(nil)).Elem(), GatewayPluginAclMap{})
	pulumi.RegisterOutputType(GatewayPluginAclOutput{})
	pulumi.RegisterOutputType(GatewayPluginAclArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginAclMapOutput{})
}
