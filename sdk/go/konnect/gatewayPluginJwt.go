// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginJWT Resource
type GatewayPluginJwt struct {
	pulumi.CustomResourceState

	Config GatewayPluginJwtConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJwtConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginJwtConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJwtRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJwtServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginJwt registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginJwt(ctx *pulumi.Context,
	name string, args *GatewayPluginJwtArgs, opts ...pulumi.ResourceOption) (*GatewayPluginJwt, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginJwt
	err := ctx.RegisterResource("konnect:index/gatewayPluginJwt:GatewayPluginJwt", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginJwt gets an existing GatewayPluginJwt resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginJwt(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginJwtState, opts ...pulumi.ResourceOption) (*GatewayPluginJwt, error) {
	var resource GatewayPluginJwt
	err := ctx.ReadResource("konnect:index/gatewayPluginJwt:GatewayPluginJwt", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginJwt resources.
type gatewayPluginJwtState struct {
	Config *GatewayPluginJwtConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginJwtConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginJwtConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginJwtRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginJwtService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginJwtState struct {
	Config GatewayPluginJwtConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJwtConsumerPtrInput
	ConsumerGroup GatewayPluginJwtConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJwtRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJwtServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginJwtState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginJwtState)(nil)).Elem()
}

type gatewayPluginJwtArgs struct {
	Config *GatewayPluginJwtConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginJwtConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginJwtConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginJwtRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginJwtService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginJwt resource.
type GatewayPluginJwtArgs struct {
	Config GatewayPluginJwtConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJwtConsumerPtrInput
	ConsumerGroup GatewayPluginJwtConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJwtRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJwtServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginJwtArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginJwtArgs)(nil)).Elem()
}

type GatewayPluginJwtInput interface {
	pulumi.Input

	ToGatewayPluginJwtOutput() GatewayPluginJwtOutput
	ToGatewayPluginJwtOutputWithContext(ctx context.Context) GatewayPluginJwtOutput
}

func (*GatewayPluginJwt) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginJwt)(nil)).Elem()
}

func (i *GatewayPluginJwt) ToGatewayPluginJwtOutput() GatewayPluginJwtOutput {
	return i.ToGatewayPluginJwtOutputWithContext(context.Background())
}

func (i *GatewayPluginJwt) ToGatewayPluginJwtOutputWithContext(ctx context.Context) GatewayPluginJwtOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJwtOutput)
}

// GatewayPluginJwtArrayInput is an input type that accepts GatewayPluginJwtArray and GatewayPluginJwtArrayOutput values.
// You can construct a concrete instance of `GatewayPluginJwtArrayInput` via:
//
//	GatewayPluginJwtArray{ GatewayPluginJwtArgs{...} }
type GatewayPluginJwtArrayInput interface {
	pulumi.Input

	ToGatewayPluginJwtArrayOutput() GatewayPluginJwtArrayOutput
	ToGatewayPluginJwtArrayOutputWithContext(context.Context) GatewayPluginJwtArrayOutput
}

type GatewayPluginJwtArray []GatewayPluginJwtInput

func (GatewayPluginJwtArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginJwt)(nil)).Elem()
}

func (i GatewayPluginJwtArray) ToGatewayPluginJwtArrayOutput() GatewayPluginJwtArrayOutput {
	return i.ToGatewayPluginJwtArrayOutputWithContext(context.Background())
}

func (i GatewayPluginJwtArray) ToGatewayPluginJwtArrayOutputWithContext(ctx context.Context) GatewayPluginJwtArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJwtArrayOutput)
}

// GatewayPluginJwtMapInput is an input type that accepts GatewayPluginJwtMap and GatewayPluginJwtMapOutput values.
// You can construct a concrete instance of `GatewayPluginJwtMapInput` via:
//
//	GatewayPluginJwtMap{ "key": GatewayPluginJwtArgs{...} }
type GatewayPluginJwtMapInput interface {
	pulumi.Input

	ToGatewayPluginJwtMapOutput() GatewayPluginJwtMapOutput
	ToGatewayPluginJwtMapOutputWithContext(context.Context) GatewayPluginJwtMapOutput
}

type GatewayPluginJwtMap map[string]GatewayPluginJwtInput

func (GatewayPluginJwtMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginJwt)(nil)).Elem()
}

func (i GatewayPluginJwtMap) ToGatewayPluginJwtMapOutput() GatewayPluginJwtMapOutput {
	return i.ToGatewayPluginJwtMapOutputWithContext(context.Background())
}

func (i GatewayPluginJwtMap) ToGatewayPluginJwtMapOutputWithContext(ctx context.Context) GatewayPluginJwtMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJwtMapOutput)
}

type GatewayPluginJwtOutput struct{ *pulumi.OutputState }

func (GatewayPluginJwtOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginJwt)(nil)).Elem()
}

func (o GatewayPluginJwtOutput) ToGatewayPluginJwtOutput() GatewayPluginJwtOutput {
	return o
}

func (o GatewayPluginJwtOutput) ToGatewayPluginJwtOutputWithContext(ctx context.Context) GatewayPluginJwtOutput {
	return o
}

func (o GatewayPluginJwtOutput) Config() GatewayPluginJwtConfigOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) GatewayPluginJwtConfigOutput { return v.Config }).(GatewayPluginJwtConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginJwtOutput) Consumer() GatewayPluginJwtConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) GatewayPluginJwtConsumerOutput { return v.Consumer }).(GatewayPluginJwtConsumerOutput)
}

func (o GatewayPluginJwtOutput) ConsumerGroup() GatewayPluginJwtConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) GatewayPluginJwtConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginJwtConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginJwtOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginJwtOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginJwtOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginJwtOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginJwtOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginJwtOutput) Route() GatewayPluginJwtRouteOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) GatewayPluginJwtRouteOutput { return v.Route }).(GatewayPluginJwtRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginJwtOutput) Service() GatewayPluginJwtServiceOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) GatewayPluginJwtServiceOutput { return v.Service }).(GatewayPluginJwtServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginJwtOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginJwtOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginJwt) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginJwtArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginJwtArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginJwt)(nil)).Elem()
}

func (o GatewayPluginJwtArrayOutput) ToGatewayPluginJwtArrayOutput() GatewayPluginJwtArrayOutput {
	return o
}

func (o GatewayPluginJwtArrayOutput) ToGatewayPluginJwtArrayOutputWithContext(ctx context.Context) GatewayPluginJwtArrayOutput {
	return o
}

func (o GatewayPluginJwtArrayOutput) Index(i pulumi.IntInput) GatewayPluginJwtOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginJwt {
		return vs[0].([]*GatewayPluginJwt)[vs[1].(int)]
	}).(GatewayPluginJwtOutput)
}

type GatewayPluginJwtMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginJwtMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginJwt)(nil)).Elem()
}

func (o GatewayPluginJwtMapOutput) ToGatewayPluginJwtMapOutput() GatewayPluginJwtMapOutput {
	return o
}

func (o GatewayPluginJwtMapOutput) ToGatewayPluginJwtMapOutputWithContext(ctx context.Context) GatewayPluginJwtMapOutput {
	return o
}

func (o GatewayPluginJwtMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginJwtOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginJwt {
		return vs[0].(map[string]*GatewayPluginJwt)[vs[1].(string)]
	}).(GatewayPluginJwtOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJwtInput)(nil)).Elem(), &GatewayPluginJwt{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJwtArrayInput)(nil)).Elem(), GatewayPluginJwtArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJwtMapInput)(nil)).Elem(), GatewayPluginJwtMap{})
	pulumi.RegisterOutputType(GatewayPluginJwtOutput{})
	pulumi.RegisterOutputType(GatewayPluginJwtArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginJwtMapOutput{})
}
