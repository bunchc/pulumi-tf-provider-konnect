// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// TeamRole Resource
type TeamRole struct {
	pulumi.CustomResourceState

	// The ID of the entity. Requires replacement if changed.
	EntityId pulumi.StringOutput `pulumi:"entityId"`
	// The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
	EntityRegion pulumi.StringOutput `pulumi:"entityRegion"`
	// The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
	EntityTypeName pulumi.StringOutput `pulumi:"entityTypeName"`
	// The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// The team ID. Requires replacement if changed.
	TeamId pulumi.StringOutput `pulumi:"teamId"`
}

// NewTeamRole registers a new resource with the given unique name, arguments, and options.
func NewTeamRole(ctx *pulumi.Context,
	name string, args *TeamRoleArgs, opts ...pulumi.ResourceOption) (*TeamRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TeamId == nil {
		return nil, errors.New("invalid value for required argument 'TeamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TeamRole
	err := ctx.RegisterResource("konnect:index/teamRole:TeamRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeamRole gets an existing TeamRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeamRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamRoleState, opts ...pulumi.ResourceOption) (*TeamRole, error) {
	var resource TeamRole
	err := ctx.ReadResource("konnect:index/teamRole:TeamRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TeamRole resources.
type teamRoleState struct {
	// The ID of the entity. Requires replacement if changed.
	EntityId *string `pulumi:"entityId"`
	// The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
	EntityRegion *string `pulumi:"entityRegion"`
	// The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
	EntityTypeName *string `pulumi:"entityTypeName"`
	// The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
	RoleName *string `pulumi:"roleName"`
	// The team ID. Requires replacement if changed.
	TeamId *string `pulumi:"teamId"`
}

type TeamRoleState struct {
	// The ID of the entity. Requires replacement if changed.
	EntityId pulumi.StringPtrInput
	// The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
	EntityRegion pulumi.StringPtrInput
	// The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
	EntityTypeName pulumi.StringPtrInput
	// The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
	RoleName pulumi.StringPtrInput
	// The team ID. Requires replacement if changed.
	TeamId pulumi.StringPtrInput
}

func (TeamRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRoleState)(nil)).Elem()
}

type teamRoleArgs struct {
	// The ID of the entity. Requires replacement if changed.
	EntityId *string `pulumi:"entityId"`
	// The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
	EntityRegion *string `pulumi:"entityRegion"`
	// The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
	EntityTypeName *string `pulumi:"entityTypeName"`
	// The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
	RoleName *string `pulumi:"roleName"`
	// The team ID. Requires replacement if changed.
	TeamId string `pulumi:"teamId"`
}

// The set of arguments for constructing a TeamRole resource.
type TeamRoleArgs struct {
	// The ID of the entity. Requires replacement if changed.
	EntityId pulumi.StringPtrInput
	// The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
	EntityRegion pulumi.StringPtrInput
	// The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
	EntityTypeName pulumi.StringPtrInput
	// The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
	RoleName pulumi.StringPtrInput
	// The team ID. Requires replacement if changed.
	TeamId pulumi.StringInput
}

func (TeamRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamRoleArgs)(nil)).Elem()
}

type TeamRoleInput interface {
	pulumi.Input

	ToTeamRoleOutput() TeamRoleOutput
	ToTeamRoleOutputWithContext(ctx context.Context) TeamRoleOutput
}

func (*TeamRole) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRole)(nil)).Elem()
}

func (i *TeamRole) ToTeamRoleOutput() TeamRoleOutput {
	return i.ToTeamRoleOutputWithContext(context.Background())
}

func (i *TeamRole) ToTeamRoleOutputWithContext(ctx context.Context) TeamRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoleOutput)
}

// TeamRoleArrayInput is an input type that accepts TeamRoleArray and TeamRoleArrayOutput values.
// You can construct a concrete instance of `TeamRoleArrayInput` via:
//
//	TeamRoleArray{ TeamRoleArgs{...} }
type TeamRoleArrayInput interface {
	pulumi.Input

	ToTeamRoleArrayOutput() TeamRoleArrayOutput
	ToTeamRoleArrayOutputWithContext(context.Context) TeamRoleArrayOutput
}

type TeamRoleArray []TeamRoleInput

func (TeamRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRole)(nil)).Elem()
}

func (i TeamRoleArray) ToTeamRoleArrayOutput() TeamRoleArrayOutput {
	return i.ToTeamRoleArrayOutputWithContext(context.Background())
}

func (i TeamRoleArray) ToTeamRoleArrayOutputWithContext(ctx context.Context) TeamRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoleArrayOutput)
}

// TeamRoleMapInput is an input type that accepts TeamRoleMap and TeamRoleMapOutput values.
// You can construct a concrete instance of `TeamRoleMapInput` via:
//
//	TeamRoleMap{ "key": TeamRoleArgs{...} }
type TeamRoleMapInput interface {
	pulumi.Input

	ToTeamRoleMapOutput() TeamRoleMapOutput
	ToTeamRoleMapOutputWithContext(context.Context) TeamRoleMapOutput
}

type TeamRoleMap map[string]TeamRoleInput

func (TeamRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRole)(nil)).Elem()
}

func (i TeamRoleMap) ToTeamRoleMapOutput() TeamRoleMapOutput {
	return i.ToTeamRoleMapOutputWithContext(context.Background())
}

func (i TeamRoleMap) ToTeamRoleMapOutputWithContext(ctx context.Context) TeamRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamRoleMapOutput)
}

type TeamRoleOutput struct{ *pulumi.OutputState }

func (TeamRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamRole)(nil)).Elem()
}

func (o TeamRoleOutput) ToTeamRoleOutput() TeamRoleOutput {
	return o
}

func (o TeamRoleOutput) ToTeamRoleOutputWithContext(ctx context.Context) TeamRoleOutput {
	return o
}

// The ID of the entity. Requires replacement if changed.
func (o TeamRoleOutput) EntityId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.EntityId }).(pulumi.StringOutput)
}

// The region of the team. Requires replacement if changed. ; must be one of ["us", "eu", "au", "*"]
func (o TeamRoleOutput) EntityRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.EntityRegion }).(pulumi.StringOutput)
}

// The type of entity. Requires replacement if changed. ; must be one of ["API Products", "Application Auth Strategies", "Audit Logs", "Control Planes", "DCR Providers", "Identity", "Mesh Control Planes", "Networks", "Portals", "Service Hub"]
func (o TeamRoleOutput) EntityTypeName() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.EntityTypeName }).(pulumi.StringOutput)
}

// The desired role. Requires replacement if changed. ; must be one of ["Admin", "Appearance Maintainer", "Application Registration", "Certificate Admin", "Cloud Gateway Cluster Admin", "Cloud Gateway Cluster Viewer", "Consumer Admin", "Creator", "Deployer", "Discovery Admin", "Discovery Viewer", "Gateway Service Admin", "Integration Admin", "Integration Viewer", "Key Admin", "Maintainer", "Network Admin", "Network Creator", "Network Viewer", "Plugin Admin", "Plugins Admin", "Product Publisher", "Publisher", "Route Admin", "SNI Admin", "Service Admin", "Service Creator", "Service Viewer", "Upstream Admin", "Vault Admin", "Viewer"]
func (o TeamRoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// The team ID. Requires replacement if changed.
func (o TeamRoleOutput) TeamId() pulumi.StringOutput {
	return o.ApplyT(func(v *TeamRole) pulumi.StringOutput { return v.TeamId }).(pulumi.StringOutput)
}

type TeamRoleArrayOutput struct{ *pulumi.OutputState }

func (TeamRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TeamRole)(nil)).Elem()
}

func (o TeamRoleArrayOutput) ToTeamRoleArrayOutput() TeamRoleArrayOutput {
	return o
}

func (o TeamRoleArrayOutput) ToTeamRoleArrayOutputWithContext(ctx context.Context) TeamRoleArrayOutput {
	return o
}

func (o TeamRoleArrayOutput) Index(i pulumi.IntInput) TeamRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TeamRole {
		return vs[0].([]*TeamRole)[vs[1].(int)]
	}).(TeamRoleOutput)
}

type TeamRoleMapOutput struct{ *pulumi.OutputState }

func (TeamRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TeamRole)(nil)).Elem()
}

func (o TeamRoleMapOutput) ToTeamRoleMapOutput() TeamRoleMapOutput {
	return o
}

func (o TeamRoleMapOutput) ToTeamRoleMapOutputWithContext(ctx context.Context) TeamRoleMapOutput {
	return o
}

func (o TeamRoleMapOutput) MapIndex(k pulumi.StringInput) TeamRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TeamRole {
		return vs[0].(map[string]*TeamRole)[vs[1].(string)]
	}).(TeamRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoleInput)(nil)).Elem(), &TeamRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoleArrayInput)(nil)).Elem(), TeamRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamRoleMapInput)(nil)).Elem(), TeamRoleMap{})
	pulumi.RegisterOutputType(TeamRoleOutput{})
	pulumi.RegisterOutputType(TeamRoleArrayOutput{})
	pulumi.RegisterOutputType(TeamRoleMapOutput{})
}
