// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewaySNI Resource
type GatewaySni struct {
	pulumi.CustomResourceState

	// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
	Certificate GatewaySniCertificateOutput `pulumi:"certificate"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// The SNI name to associate with the given certificate.
	Name pulumi.StringOutput `pulumi:"name"`
	// An optional set of strings associated with the SNIs for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewaySni registers a new resource with the given unique name, arguments, and options.
func NewGatewaySni(ctx *pulumi.Context,
	name string, args *GatewaySniArgs, opts ...pulumi.ResourceOption) (*GatewaySni, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewaySni
	err := ctx.RegisterResource("konnect:index/gatewaySni:GatewaySni", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewaySni gets an existing GatewaySni resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewaySni(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewaySniState, opts ...pulumi.ResourceOption) (*GatewaySni, error) {
	var resource GatewaySni
	err := ctx.ReadResource("konnect:index/gatewaySni:GatewaySni", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewaySni resources.
type gatewaySniState struct {
	// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
	Certificate *GatewaySniCertificate `pulumi:"certificate"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// The SNI name to associate with the given certificate.
	Name *string `pulumi:"name"`
	// An optional set of strings associated with the SNIs for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewaySniState struct {
	// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
	Certificate GatewaySniCertificatePtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// The SNI name to associate with the given certificate.
	Name pulumi.StringPtrInput
	// An optional set of strings associated with the SNIs for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewaySniState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewaySniState)(nil)).Elem()
}

type gatewaySniArgs struct {
	// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
	Certificate *GatewaySniCertificate `pulumi:"certificate"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// The SNI name to associate with the given certificate.
	Name *string `pulumi:"name"`
	// An optional set of strings associated with the SNIs for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewaySni resource.
type GatewaySniArgs struct {
	// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
	Certificate GatewaySniCertificatePtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// The SNI name to associate with the given certificate.
	Name pulumi.StringPtrInput
	// An optional set of strings associated with the SNIs for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewaySniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewaySniArgs)(nil)).Elem()
}

type GatewaySniInput interface {
	pulumi.Input

	ToGatewaySniOutput() GatewaySniOutput
	ToGatewaySniOutputWithContext(ctx context.Context) GatewaySniOutput
}

func (*GatewaySni) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySni)(nil)).Elem()
}

func (i *GatewaySni) ToGatewaySniOutput() GatewaySniOutput {
	return i.ToGatewaySniOutputWithContext(context.Background())
}

func (i *GatewaySni) ToGatewaySniOutputWithContext(ctx context.Context) GatewaySniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySniOutput)
}

// GatewaySniArrayInput is an input type that accepts GatewaySniArray and GatewaySniArrayOutput values.
// You can construct a concrete instance of `GatewaySniArrayInput` via:
//
//	GatewaySniArray{ GatewaySniArgs{...} }
type GatewaySniArrayInput interface {
	pulumi.Input

	ToGatewaySniArrayOutput() GatewaySniArrayOutput
	ToGatewaySniArrayOutputWithContext(context.Context) GatewaySniArrayOutput
}

type GatewaySniArray []GatewaySniInput

func (GatewaySniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewaySni)(nil)).Elem()
}

func (i GatewaySniArray) ToGatewaySniArrayOutput() GatewaySniArrayOutput {
	return i.ToGatewaySniArrayOutputWithContext(context.Background())
}

func (i GatewaySniArray) ToGatewaySniArrayOutputWithContext(ctx context.Context) GatewaySniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySniArrayOutput)
}

// GatewaySniMapInput is an input type that accepts GatewaySniMap and GatewaySniMapOutput values.
// You can construct a concrete instance of `GatewaySniMapInput` via:
//
//	GatewaySniMap{ "key": GatewaySniArgs{...} }
type GatewaySniMapInput interface {
	pulumi.Input

	ToGatewaySniMapOutput() GatewaySniMapOutput
	ToGatewaySniMapOutputWithContext(context.Context) GatewaySniMapOutput
}

type GatewaySniMap map[string]GatewaySniInput

func (GatewaySniMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewaySni)(nil)).Elem()
}

func (i GatewaySniMap) ToGatewaySniMapOutput() GatewaySniMapOutput {
	return i.ToGatewaySniMapOutputWithContext(context.Background())
}

func (i GatewaySniMap) ToGatewaySniMapOutputWithContext(ctx context.Context) GatewaySniMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaySniMapOutput)
}

type GatewaySniOutput struct{ *pulumi.OutputState }

func (GatewaySniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewaySni)(nil)).Elem()
}

func (o GatewaySniOutput) ToGatewaySniOutput() GatewaySniOutput {
	return o
}

func (o GatewaySniOutput) ToGatewaySniOutputWithContext(ctx context.Context) GatewaySniOutput {
	return o
}

// The id (a UUID) of the certificate with which to associate the SNI hostname. The Certificate must have a valid private key associated with it to be used by the SNI object.
func (o GatewaySniOutput) Certificate() GatewaySniCertificateOutput {
	return o.ApplyT(func(v *GatewaySni) GatewaySniCertificateOutput { return v.Certificate }).(GatewaySniCertificateOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewaySniOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySni) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewaySniOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewaySni) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// The SNI name to associate with the given certificate.
func (o GatewaySniOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewaySni) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An optional set of strings associated with the SNIs for grouping and filtering.
func (o GatewaySniOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewaySni) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewaySniOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewaySni) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewaySniArrayOutput struct{ *pulumi.OutputState }

func (GatewaySniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewaySni)(nil)).Elem()
}

func (o GatewaySniArrayOutput) ToGatewaySniArrayOutput() GatewaySniArrayOutput {
	return o
}

func (o GatewaySniArrayOutput) ToGatewaySniArrayOutputWithContext(ctx context.Context) GatewaySniArrayOutput {
	return o
}

func (o GatewaySniArrayOutput) Index(i pulumi.IntInput) GatewaySniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewaySni {
		return vs[0].([]*GatewaySni)[vs[1].(int)]
	}).(GatewaySniOutput)
}

type GatewaySniMapOutput struct{ *pulumi.OutputState }

func (GatewaySniMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewaySni)(nil)).Elem()
}

func (o GatewaySniMapOutput) ToGatewaySniMapOutput() GatewaySniMapOutput {
	return o
}

func (o GatewaySniMapOutput) ToGatewaySniMapOutputWithContext(ctx context.Context) GatewaySniMapOutput {
	return o
}

func (o GatewaySniMapOutput) MapIndex(k pulumi.StringInput) GatewaySniOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewaySni {
		return vs[0].(map[string]*GatewaySni)[vs[1].(string)]
	}).(GatewaySniOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySniInput)(nil)).Elem(), &GatewaySni{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySniArrayInput)(nil)).Elem(), GatewaySniArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaySniMapInput)(nil)).Elem(), GatewaySniMap{})
	pulumi.RegisterOutputType(GatewaySniOutput{})
	pulumi.RegisterOutputType(GatewaySniArrayOutput{})
	pulumi.RegisterOutputType(GatewaySniMapOutput{})
}
