// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginSaml Resource
type GatewayPluginSaml struct {
	pulumi.CustomResourceState

	Config GatewayPluginSamlConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginSamlConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginSamlConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginSamlRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginSamlServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginSaml registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginSaml(ctx *pulumi.Context,
	name string, args *GatewayPluginSamlArgs, opts ...pulumi.ResourceOption) (*GatewayPluginSaml, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginSaml
	err := ctx.RegisterResource("konnect:index/gatewayPluginSaml:GatewayPluginSaml", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginSaml gets an existing GatewayPluginSaml resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginSaml(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginSamlState, opts ...pulumi.ResourceOption) (*GatewayPluginSaml, error) {
	var resource GatewayPluginSaml
	err := ctx.ReadResource("konnect:index/gatewayPluginSaml:GatewayPluginSaml", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginSaml resources.
type gatewayPluginSamlState struct {
	Config *GatewayPluginSamlConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginSamlConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginSamlConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginSamlRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginSamlService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginSamlState struct {
	Config GatewayPluginSamlConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginSamlConsumerPtrInput
	ConsumerGroup GatewayPluginSamlConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginSamlRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginSamlServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginSamlState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginSamlState)(nil)).Elem()
}

type gatewayPluginSamlArgs struct {
	Config *GatewayPluginSamlConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginSamlConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginSamlConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginSamlRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginSamlService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginSaml resource.
type GatewayPluginSamlArgs struct {
	Config GatewayPluginSamlConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginSamlConsumerPtrInput
	ConsumerGroup GatewayPluginSamlConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginSamlRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginSamlServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginSamlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginSamlArgs)(nil)).Elem()
}

type GatewayPluginSamlInput interface {
	pulumi.Input

	ToGatewayPluginSamlOutput() GatewayPluginSamlOutput
	ToGatewayPluginSamlOutputWithContext(ctx context.Context) GatewayPluginSamlOutput
}

func (*GatewayPluginSaml) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginSaml)(nil)).Elem()
}

func (i *GatewayPluginSaml) ToGatewayPluginSamlOutput() GatewayPluginSamlOutput {
	return i.ToGatewayPluginSamlOutputWithContext(context.Background())
}

func (i *GatewayPluginSaml) ToGatewayPluginSamlOutputWithContext(ctx context.Context) GatewayPluginSamlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginSamlOutput)
}

// GatewayPluginSamlArrayInput is an input type that accepts GatewayPluginSamlArray and GatewayPluginSamlArrayOutput values.
// You can construct a concrete instance of `GatewayPluginSamlArrayInput` via:
//
//	GatewayPluginSamlArray{ GatewayPluginSamlArgs{...} }
type GatewayPluginSamlArrayInput interface {
	pulumi.Input

	ToGatewayPluginSamlArrayOutput() GatewayPluginSamlArrayOutput
	ToGatewayPluginSamlArrayOutputWithContext(context.Context) GatewayPluginSamlArrayOutput
}

type GatewayPluginSamlArray []GatewayPluginSamlInput

func (GatewayPluginSamlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginSaml)(nil)).Elem()
}

func (i GatewayPluginSamlArray) ToGatewayPluginSamlArrayOutput() GatewayPluginSamlArrayOutput {
	return i.ToGatewayPluginSamlArrayOutputWithContext(context.Background())
}

func (i GatewayPluginSamlArray) ToGatewayPluginSamlArrayOutputWithContext(ctx context.Context) GatewayPluginSamlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginSamlArrayOutput)
}

// GatewayPluginSamlMapInput is an input type that accepts GatewayPluginSamlMap and GatewayPluginSamlMapOutput values.
// You can construct a concrete instance of `GatewayPluginSamlMapInput` via:
//
//	GatewayPluginSamlMap{ "key": GatewayPluginSamlArgs{...} }
type GatewayPluginSamlMapInput interface {
	pulumi.Input

	ToGatewayPluginSamlMapOutput() GatewayPluginSamlMapOutput
	ToGatewayPluginSamlMapOutputWithContext(context.Context) GatewayPluginSamlMapOutput
}

type GatewayPluginSamlMap map[string]GatewayPluginSamlInput

func (GatewayPluginSamlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginSaml)(nil)).Elem()
}

func (i GatewayPluginSamlMap) ToGatewayPluginSamlMapOutput() GatewayPluginSamlMapOutput {
	return i.ToGatewayPluginSamlMapOutputWithContext(context.Background())
}

func (i GatewayPluginSamlMap) ToGatewayPluginSamlMapOutputWithContext(ctx context.Context) GatewayPluginSamlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginSamlMapOutput)
}

type GatewayPluginSamlOutput struct{ *pulumi.OutputState }

func (GatewayPluginSamlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginSaml)(nil)).Elem()
}

func (o GatewayPluginSamlOutput) ToGatewayPluginSamlOutput() GatewayPluginSamlOutput {
	return o
}

func (o GatewayPluginSamlOutput) ToGatewayPluginSamlOutputWithContext(ctx context.Context) GatewayPluginSamlOutput {
	return o
}

func (o GatewayPluginSamlOutput) Config() GatewayPluginSamlConfigOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) GatewayPluginSamlConfigOutput { return v.Config }).(GatewayPluginSamlConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginSamlOutput) Consumer() GatewayPluginSamlConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) GatewayPluginSamlConsumerOutput { return v.Consumer }).(GatewayPluginSamlConsumerOutput)
}

func (o GatewayPluginSamlOutput) ConsumerGroup() GatewayPluginSamlConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) GatewayPluginSamlConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginSamlConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginSamlOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginSamlOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginSamlOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginSamlOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginSamlOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginSamlOutput) Route() GatewayPluginSamlRouteOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) GatewayPluginSamlRouteOutput { return v.Route }).(GatewayPluginSamlRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginSamlOutput) Service() GatewayPluginSamlServiceOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) GatewayPluginSamlServiceOutput { return v.Service }).(GatewayPluginSamlServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginSamlOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginSamlOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginSaml) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginSamlArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginSamlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginSaml)(nil)).Elem()
}

func (o GatewayPluginSamlArrayOutput) ToGatewayPluginSamlArrayOutput() GatewayPluginSamlArrayOutput {
	return o
}

func (o GatewayPluginSamlArrayOutput) ToGatewayPluginSamlArrayOutputWithContext(ctx context.Context) GatewayPluginSamlArrayOutput {
	return o
}

func (o GatewayPluginSamlArrayOutput) Index(i pulumi.IntInput) GatewayPluginSamlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginSaml {
		return vs[0].([]*GatewayPluginSaml)[vs[1].(int)]
	}).(GatewayPluginSamlOutput)
}

type GatewayPluginSamlMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginSamlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginSaml)(nil)).Elem()
}

func (o GatewayPluginSamlMapOutput) ToGatewayPluginSamlMapOutput() GatewayPluginSamlMapOutput {
	return o
}

func (o GatewayPluginSamlMapOutput) ToGatewayPluginSamlMapOutputWithContext(ctx context.Context) GatewayPluginSamlMapOutput {
	return o
}

func (o GatewayPluginSamlMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginSamlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginSaml {
		return vs[0].(map[string]*GatewayPluginSaml)[vs[1].(string)]
	}).(GatewayPluginSamlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginSamlInput)(nil)).Elem(), &GatewayPluginSaml{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginSamlArrayInput)(nil)).Elem(), GatewayPluginSamlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginSamlMapInput)(nil)).Elem(), GatewayPluginSamlMap{})
	pulumi.RegisterOutputType(GatewayPluginSamlOutput{})
	pulumi.RegisterOutputType(GatewayPluginSamlArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginSamlMapOutput{})
}
