// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginAIProxy Resource
type GatewayPluginAiProxy struct {
	pulumi.CustomResourceState

	Config GatewayPluginAiProxyConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiProxyConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginAiProxyConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiProxyRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiProxyServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginAiProxy registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginAiProxy(ctx *pulumi.Context,
	name string, args *GatewayPluginAiProxyArgs, opts ...pulumi.ResourceOption) (*GatewayPluginAiProxy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginAiProxy
	err := ctx.RegisterResource("konnect:index/gatewayPluginAiProxy:GatewayPluginAiProxy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginAiProxy gets an existing GatewayPluginAiProxy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginAiProxy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginAiProxyState, opts ...pulumi.ResourceOption) (*GatewayPluginAiProxy, error) {
	var resource GatewayPluginAiProxy
	err := ctx.ReadResource("konnect:index/gatewayPluginAiProxy:GatewayPluginAiProxy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginAiProxy resources.
type gatewayPluginAiProxyState struct {
	Config *GatewayPluginAiProxyConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAiProxyConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAiProxyConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAiProxyRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAiProxyService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginAiProxyState struct {
	Config GatewayPluginAiProxyConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiProxyConsumerPtrInput
	ConsumerGroup GatewayPluginAiProxyConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiProxyRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiProxyServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginAiProxyState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAiProxyState)(nil)).Elem()
}

type gatewayPluginAiProxyArgs struct {
	Config *GatewayPluginAiProxyConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAiProxyConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAiProxyConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAiProxyRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAiProxyService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginAiProxy resource.
type GatewayPluginAiProxyArgs struct {
	Config GatewayPluginAiProxyConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiProxyConsumerPtrInput
	ConsumerGroup GatewayPluginAiProxyConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiProxyRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiProxyServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginAiProxyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAiProxyArgs)(nil)).Elem()
}

type GatewayPluginAiProxyInput interface {
	pulumi.Input

	ToGatewayPluginAiProxyOutput() GatewayPluginAiProxyOutput
	ToGatewayPluginAiProxyOutputWithContext(ctx context.Context) GatewayPluginAiProxyOutput
}

func (*GatewayPluginAiProxy) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAiProxy)(nil)).Elem()
}

func (i *GatewayPluginAiProxy) ToGatewayPluginAiProxyOutput() GatewayPluginAiProxyOutput {
	return i.ToGatewayPluginAiProxyOutputWithContext(context.Background())
}

func (i *GatewayPluginAiProxy) ToGatewayPluginAiProxyOutputWithContext(ctx context.Context) GatewayPluginAiProxyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiProxyOutput)
}

// GatewayPluginAiProxyArrayInput is an input type that accepts GatewayPluginAiProxyArray and GatewayPluginAiProxyArrayOutput values.
// You can construct a concrete instance of `GatewayPluginAiProxyArrayInput` via:
//
//	GatewayPluginAiProxyArray{ GatewayPluginAiProxyArgs{...} }
type GatewayPluginAiProxyArrayInput interface {
	pulumi.Input

	ToGatewayPluginAiProxyArrayOutput() GatewayPluginAiProxyArrayOutput
	ToGatewayPluginAiProxyArrayOutputWithContext(context.Context) GatewayPluginAiProxyArrayOutput
}

type GatewayPluginAiProxyArray []GatewayPluginAiProxyInput

func (GatewayPluginAiProxyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAiProxy)(nil)).Elem()
}

func (i GatewayPluginAiProxyArray) ToGatewayPluginAiProxyArrayOutput() GatewayPluginAiProxyArrayOutput {
	return i.ToGatewayPluginAiProxyArrayOutputWithContext(context.Background())
}

func (i GatewayPluginAiProxyArray) ToGatewayPluginAiProxyArrayOutputWithContext(ctx context.Context) GatewayPluginAiProxyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiProxyArrayOutput)
}

// GatewayPluginAiProxyMapInput is an input type that accepts GatewayPluginAiProxyMap and GatewayPluginAiProxyMapOutput values.
// You can construct a concrete instance of `GatewayPluginAiProxyMapInput` via:
//
//	GatewayPluginAiProxyMap{ "key": GatewayPluginAiProxyArgs{...} }
type GatewayPluginAiProxyMapInput interface {
	pulumi.Input

	ToGatewayPluginAiProxyMapOutput() GatewayPluginAiProxyMapOutput
	ToGatewayPluginAiProxyMapOutputWithContext(context.Context) GatewayPluginAiProxyMapOutput
}

type GatewayPluginAiProxyMap map[string]GatewayPluginAiProxyInput

func (GatewayPluginAiProxyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAiProxy)(nil)).Elem()
}

func (i GatewayPluginAiProxyMap) ToGatewayPluginAiProxyMapOutput() GatewayPluginAiProxyMapOutput {
	return i.ToGatewayPluginAiProxyMapOutputWithContext(context.Background())
}

func (i GatewayPluginAiProxyMap) ToGatewayPluginAiProxyMapOutputWithContext(ctx context.Context) GatewayPluginAiProxyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiProxyMapOutput)
}

type GatewayPluginAiProxyOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiProxyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAiProxy)(nil)).Elem()
}

func (o GatewayPluginAiProxyOutput) ToGatewayPluginAiProxyOutput() GatewayPluginAiProxyOutput {
	return o
}

func (o GatewayPluginAiProxyOutput) ToGatewayPluginAiProxyOutputWithContext(ctx context.Context) GatewayPluginAiProxyOutput {
	return o
}

func (o GatewayPluginAiProxyOutput) Config() GatewayPluginAiProxyConfigOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) GatewayPluginAiProxyConfigOutput { return v.Config }).(GatewayPluginAiProxyConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginAiProxyOutput) Consumer() GatewayPluginAiProxyConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) GatewayPluginAiProxyConsumerOutput { return v.Consumer }).(GatewayPluginAiProxyConsumerOutput)
}

func (o GatewayPluginAiProxyOutput) ConsumerGroup() GatewayPluginAiProxyConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) GatewayPluginAiProxyConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginAiProxyConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginAiProxyOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginAiProxyOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginAiProxyOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginAiProxyOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginAiProxyOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginAiProxyOutput) Route() GatewayPluginAiProxyRouteOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) GatewayPluginAiProxyRouteOutput { return v.Route }).(GatewayPluginAiProxyRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginAiProxyOutput) Service() GatewayPluginAiProxyServiceOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) GatewayPluginAiProxyServiceOutput { return v.Service }).(GatewayPluginAiProxyServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginAiProxyOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginAiProxyOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAiProxy) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginAiProxyArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiProxyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAiProxy)(nil)).Elem()
}

func (o GatewayPluginAiProxyArrayOutput) ToGatewayPluginAiProxyArrayOutput() GatewayPluginAiProxyArrayOutput {
	return o
}

func (o GatewayPluginAiProxyArrayOutput) ToGatewayPluginAiProxyArrayOutputWithContext(ctx context.Context) GatewayPluginAiProxyArrayOutput {
	return o
}

func (o GatewayPluginAiProxyArrayOutput) Index(i pulumi.IntInput) GatewayPluginAiProxyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginAiProxy {
		return vs[0].([]*GatewayPluginAiProxy)[vs[1].(int)]
	}).(GatewayPluginAiProxyOutput)
}

type GatewayPluginAiProxyMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiProxyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAiProxy)(nil)).Elem()
}

func (o GatewayPluginAiProxyMapOutput) ToGatewayPluginAiProxyMapOutput() GatewayPluginAiProxyMapOutput {
	return o
}

func (o GatewayPluginAiProxyMapOutput) ToGatewayPluginAiProxyMapOutputWithContext(ctx context.Context) GatewayPluginAiProxyMapOutput {
	return o
}

func (o GatewayPluginAiProxyMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginAiProxyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginAiProxy {
		return vs[0].(map[string]*GatewayPluginAiProxy)[vs[1].(string)]
	}).(GatewayPluginAiProxyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiProxyInput)(nil)).Elem(), &GatewayPluginAiProxy{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiProxyArrayInput)(nil)).Elem(), GatewayPluginAiProxyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiProxyMapInput)(nil)).Elem(), GatewayPluginAiProxyMap{})
	pulumi.RegisterOutputType(GatewayPluginAiProxyOutput{})
	pulumi.RegisterOutputType(GatewayPluginAiProxyArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginAiProxyMapOutput{})
}
