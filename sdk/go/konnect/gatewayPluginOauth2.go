// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginOauth2 Resource
type GatewayPluginOauth2 struct {
	pulumi.CustomResourceState

	Config GatewayPluginOauth2ConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginOauth2ConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginOauth2ConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginOauth2RouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginOauth2ServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginOauth2 registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginOauth2(ctx *pulumi.Context,
	name string, args *GatewayPluginOauth2Args, opts ...pulumi.ResourceOption) (*GatewayPluginOauth2, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginOauth2
	err := ctx.RegisterResource("konnect:index/gatewayPluginOauth2:GatewayPluginOauth2", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginOauth2 gets an existing GatewayPluginOauth2 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginOauth2(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginOauth2State, opts ...pulumi.ResourceOption) (*GatewayPluginOauth2, error) {
	var resource GatewayPluginOauth2
	err := ctx.ReadResource("konnect:index/gatewayPluginOauth2:GatewayPluginOauth2", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginOauth2 resources.
type gatewayPluginOauth2State struct {
	Config *GatewayPluginOauth2Config `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginOauth2Consumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginOauth2ConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginOauth2Route `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginOauth2Service `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginOauth2State struct {
	Config GatewayPluginOauth2ConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginOauth2ConsumerPtrInput
	ConsumerGroup GatewayPluginOauth2ConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginOauth2RoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginOauth2ServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginOauth2State) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginOauth2State)(nil)).Elem()
}

type gatewayPluginOauth2Args struct {
	Config *GatewayPluginOauth2Config `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginOauth2Consumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginOauth2ConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginOauth2Route `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginOauth2Service `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginOauth2 resource.
type GatewayPluginOauth2Args struct {
	Config GatewayPluginOauth2ConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginOauth2ConsumerPtrInput
	ConsumerGroup GatewayPluginOauth2ConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginOauth2RoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginOauth2ServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginOauth2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginOauth2Args)(nil)).Elem()
}

type GatewayPluginOauth2Input interface {
	pulumi.Input

	ToGatewayPluginOauth2Output() GatewayPluginOauth2Output
	ToGatewayPluginOauth2OutputWithContext(ctx context.Context) GatewayPluginOauth2Output
}

func (*GatewayPluginOauth2) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginOauth2)(nil)).Elem()
}

func (i *GatewayPluginOauth2) ToGatewayPluginOauth2Output() GatewayPluginOauth2Output {
	return i.ToGatewayPluginOauth2OutputWithContext(context.Background())
}

func (i *GatewayPluginOauth2) ToGatewayPluginOauth2OutputWithContext(ctx context.Context) GatewayPluginOauth2Output {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginOauth2Output)
}

// GatewayPluginOauth2ArrayInput is an input type that accepts GatewayPluginOauth2Array and GatewayPluginOauth2ArrayOutput values.
// You can construct a concrete instance of `GatewayPluginOauth2ArrayInput` via:
//
//	GatewayPluginOauth2Array{ GatewayPluginOauth2Args{...} }
type GatewayPluginOauth2ArrayInput interface {
	pulumi.Input

	ToGatewayPluginOauth2ArrayOutput() GatewayPluginOauth2ArrayOutput
	ToGatewayPluginOauth2ArrayOutputWithContext(context.Context) GatewayPluginOauth2ArrayOutput
}

type GatewayPluginOauth2Array []GatewayPluginOauth2Input

func (GatewayPluginOauth2Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginOauth2)(nil)).Elem()
}

func (i GatewayPluginOauth2Array) ToGatewayPluginOauth2ArrayOutput() GatewayPluginOauth2ArrayOutput {
	return i.ToGatewayPluginOauth2ArrayOutputWithContext(context.Background())
}

func (i GatewayPluginOauth2Array) ToGatewayPluginOauth2ArrayOutputWithContext(ctx context.Context) GatewayPluginOauth2ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginOauth2ArrayOutput)
}

// GatewayPluginOauth2MapInput is an input type that accepts GatewayPluginOauth2Map and GatewayPluginOauth2MapOutput values.
// You can construct a concrete instance of `GatewayPluginOauth2MapInput` via:
//
//	GatewayPluginOauth2Map{ "key": GatewayPluginOauth2Args{...} }
type GatewayPluginOauth2MapInput interface {
	pulumi.Input

	ToGatewayPluginOauth2MapOutput() GatewayPluginOauth2MapOutput
	ToGatewayPluginOauth2MapOutputWithContext(context.Context) GatewayPluginOauth2MapOutput
}

type GatewayPluginOauth2Map map[string]GatewayPluginOauth2Input

func (GatewayPluginOauth2Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginOauth2)(nil)).Elem()
}

func (i GatewayPluginOauth2Map) ToGatewayPluginOauth2MapOutput() GatewayPluginOauth2MapOutput {
	return i.ToGatewayPluginOauth2MapOutputWithContext(context.Background())
}

func (i GatewayPluginOauth2Map) ToGatewayPluginOauth2MapOutputWithContext(ctx context.Context) GatewayPluginOauth2MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginOauth2MapOutput)
}

type GatewayPluginOauth2Output struct{ *pulumi.OutputState }

func (GatewayPluginOauth2Output) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginOauth2)(nil)).Elem()
}

func (o GatewayPluginOauth2Output) ToGatewayPluginOauth2Output() GatewayPluginOauth2Output {
	return o
}

func (o GatewayPluginOauth2Output) ToGatewayPluginOauth2OutputWithContext(ctx context.Context) GatewayPluginOauth2Output {
	return o
}

func (o GatewayPluginOauth2Output) Config() GatewayPluginOauth2ConfigOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) GatewayPluginOauth2ConfigOutput { return v.Config }).(GatewayPluginOauth2ConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginOauth2Output) Consumer() GatewayPluginOauth2ConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) GatewayPluginOauth2ConsumerOutput { return v.Consumer }).(GatewayPluginOauth2ConsumerOutput)
}

func (o GatewayPluginOauth2Output) ConsumerGroup() GatewayPluginOauth2ConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) GatewayPluginOauth2ConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginOauth2ConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginOauth2Output) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginOauth2Output) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginOauth2Output) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginOauth2Output) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginOauth2Output) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginOauth2Output) Route() GatewayPluginOauth2RouteOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) GatewayPluginOauth2RouteOutput { return v.Route }).(GatewayPluginOauth2RouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginOauth2Output) Service() GatewayPluginOauth2ServiceOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) GatewayPluginOauth2ServiceOutput { return v.Service }).(GatewayPluginOauth2ServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginOauth2Output) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginOauth2Output) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginOauth2) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginOauth2ArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginOauth2ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginOauth2)(nil)).Elem()
}

func (o GatewayPluginOauth2ArrayOutput) ToGatewayPluginOauth2ArrayOutput() GatewayPluginOauth2ArrayOutput {
	return o
}

func (o GatewayPluginOauth2ArrayOutput) ToGatewayPluginOauth2ArrayOutputWithContext(ctx context.Context) GatewayPluginOauth2ArrayOutput {
	return o
}

func (o GatewayPluginOauth2ArrayOutput) Index(i pulumi.IntInput) GatewayPluginOauth2Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginOauth2 {
		return vs[0].([]*GatewayPluginOauth2)[vs[1].(int)]
	}).(GatewayPluginOauth2Output)
}

type GatewayPluginOauth2MapOutput struct{ *pulumi.OutputState }

func (GatewayPluginOauth2MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginOauth2)(nil)).Elem()
}

func (o GatewayPluginOauth2MapOutput) ToGatewayPluginOauth2MapOutput() GatewayPluginOauth2MapOutput {
	return o
}

func (o GatewayPluginOauth2MapOutput) ToGatewayPluginOauth2MapOutputWithContext(ctx context.Context) GatewayPluginOauth2MapOutput {
	return o
}

func (o GatewayPluginOauth2MapOutput) MapIndex(k pulumi.StringInput) GatewayPluginOauth2Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginOauth2 {
		return vs[0].(map[string]*GatewayPluginOauth2)[vs[1].(string)]
	}).(GatewayPluginOauth2Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginOauth2Input)(nil)).Elem(), &GatewayPluginOauth2{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginOauth2ArrayInput)(nil)).Elem(), GatewayPluginOauth2Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginOauth2MapInput)(nil)).Elem(), GatewayPluginOauth2Map{})
	pulumi.RegisterOutputType(GatewayPluginOauth2Output{})
	pulumi.RegisterOutputType(GatewayPluginOauth2ArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginOauth2MapOutput{})
}
