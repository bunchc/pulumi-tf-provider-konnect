// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PortalAuth Resource
type PortalAuth struct {
	pulumi.CustomResourceState

	// The organization has basic auth enabled.
	BasicAuthEnabled pulumi.BoolOutput `pulumi:"basicAuthEnabled"`
	// Whether a Konnect Identity Admin assigns teams to a developer.
	KonnectMappingEnabled pulumi.BoolOutput `pulumi:"konnectMappingEnabled"`
	// The organization has OIDC disabled.
	OidcAuthEnabled pulumi.BoolOutput `pulumi:"oidcAuthEnabled"`
	// Mappings from a portal developer atribute to an Identity Provider claim.
	OidcClaimMappings PortalAuthOidcClaimMappingsPtrOutput `pulumi:"oidcClaimMappings"`
	OidcClientId      pulumi.StringPtrOutput               `pulumi:"oidcClientId"`
	OidcClientSecret  pulumi.StringPtrOutput               `pulumi:"oidcClientSecret"`
	// Configuration properties for an OpenID Connect Identity Provider.
	OidcConfig PortalAuthOidcConfigOutput `pulumi:"oidcConfig"`
	OidcIssuer pulumi.StringPtrOutput     `pulumi:"oidcIssuer"`
	OidcScopes pulumi.StringArrayOutput   `pulumi:"oidcScopes"`
	// Whether IdP groups determine the Konnect Portal teams a developer has.
	OidcTeamMappingEnabled pulumi.BoolOutput `pulumi:"oidcTeamMappingEnabled"`
	// ID of the portal.
	PortalId pulumi.StringOutput `pulumi:"portalId"`
}

// NewPortalAuth registers a new resource with the given unique name, arguments, and options.
func NewPortalAuth(ctx *pulumi.Context,
	name string, args *PortalAuthArgs, opts ...pulumi.ResourceOption) (*PortalAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PortalId == nil {
		return nil, errors.New("invalid value for required argument 'PortalId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PortalAuth
	err := ctx.RegisterResource("konnect:index/portalAuth:PortalAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortalAuth gets an existing PortalAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortalAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalAuthState, opts ...pulumi.ResourceOption) (*PortalAuth, error) {
	var resource PortalAuth
	err := ctx.ReadResource("konnect:index/portalAuth:PortalAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortalAuth resources.
type portalAuthState struct {
	// The organization has basic auth enabled.
	BasicAuthEnabled *bool `pulumi:"basicAuthEnabled"`
	// Whether a Konnect Identity Admin assigns teams to a developer.
	KonnectMappingEnabled *bool `pulumi:"konnectMappingEnabled"`
	// The organization has OIDC disabled.
	OidcAuthEnabled *bool `pulumi:"oidcAuthEnabled"`
	// Mappings from a portal developer atribute to an Identity Provider claim.
	OidcClaimMappings *PortalAuthOidcClaimMappings `pulumi:"oidcClaimMappings"`
	OidcClientId      *string                      `pulumi:"oidcClientId"`
	OidcClientSecret  *string                      `pulumi:"oidcClientSecret"`
	// Configuration properties for an OpenID Connect Identity Provider.
	OidcConfig *PortalAuthOidcConfig `pulumi:"oidcConfig"`
	OidcIssuer *string               `pulumi:"oidcIssuer"`
	OidcScopes []string              `pulumi:"oidcScopes"`
	// Whether IdP groups determine the Konnect Portal teams a developer has.
	OidcTeamMappingEnabled *bool `pulumi:"oidcTeamMappingEnabled"`
	// ID of the portal.
	PortalId *string `pulumi:"portalId"`
}

type PortalAuthState struct {
	// The organization has basic auth enabled.
	BasicAuthEnabled pulumi.BoolPtrInput
	// Whether a Konnect Identity Admin assigns teams to a developer.
	KonnectMappingEnabled pulumi.BoolPtrInput
	// The organization has OIDC disabled.
	OidcAuthEnabled pulumi.BoolPtrInput
	// Mappings from a portal developer atribute to an Identity Provider claim.
	OidcClaimMappings PortalAuthOidcClaimMappingsPtrInput
	OidcClientId      pulumi.StringPtrInput
	OidcClientSecret  pulumi.StringPtrInput
	// Configuration properties for an OpenID Connect Identity Provider.
	OidcConfig PortalAuthOidcConfigPtrInput
	OidcIssuer pulumi.StringPtrInput
	OidcScopes pulumi.StringArrayInput
	// Whether IdP groups determine the Konnect Portal teams a developer has.
	OidcTeamMappingEnabled pulumi.BoolPtrInput
	// ID of the portal.
	PortalId pulumi.StringPtrInput
}

func (PortalAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalAuthState)(nil)).Elem()
}

type portalAuthArgs struct {
	// The organization has basic auth enabled.
	BasicAuthEnabled *bool `pulumi:"basicAuthEnabled"`
	// Whether a Konnect Identity Admin assigns teams to a developer.
	KonnectMappingEnabled *bool `pulumi:"konnectMappingEnabled"`
	// The organization has OIDC disabled.
	OidcAuthEnabled *bool `pulumi:"oidcAuthEnabled"`
	// Mappings from a portal developer atribute to an Identity Provider claim.
	OidcClaimMappings *PortalAuthOidcClaimMappings `pulumi:"oidcClaimMappings"`
	OidcClientId      *string                      `pulumi:"oidcClientId"`
	OidcClientSecret  *string                      `pulumi:"oidcClientSecret"`
	OidcIssuer        *string                      `pulumi:"oidcIssuer"`
	OidcScopes        []string                     `pulumi:"oidcScopes"`
	// Whether IdP groups determine the Konnect Portal teams a developer has.
	OidcTeamMappingEnabled *bool `pulumi:"oidcTeamMappingEnabled"`
	// ID of the portal.
	PortalId string `pulumi:"portalId"`
}

// The set of arguments for constructing a PortalAuth resource.
type PortalAuthArgs struct {
	// The organization has basic auth enabled.
	BasicAuthEnabled pulumi.BoolPtrInput
	// Whether a Konnect Identity Admin assigns teams to a developer.
	KonnectMappingEnabled pulumi.BoolPtrInput
	// The organization has OIDC disabled.
	OidcAuthEnabled pulumi.BoolPtrInput
	// Mappings from a portal developer atribute to an Identity Provider claim.
	OidcClaimMappings PortalAuthOidcClaimMappingsPtrInput
	OidcClientId      pulumi.StringPtrInput
	OidcClientSecret  pulumi.StringPtrInput
	OidcIssuer        pulumi.StringPtrInput
	OidcScopes        pulumi.StringArrayInput
	// Whether IdP groups determine the Konnect Portal teams a developer has.
	OidcTeamMappingEnabled pulumi.BoolPtrInput
	// ID of the portal.
	PortalId pulumi.StringInput
}

func (PortalAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalAuthArgs)(nil)).Elem()
}

type PortalAuthInput interface {
	pulumi.Input

	ToPortalAuthOutput() PortalAuthOutput
	ToPortalAuthOutputWithContext(ctx context.Context) PortalAuthOutput
}

func (*PortalAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalAuth)(nil)).Elem()
}

func (i *PortalAuth) ToPortalAuthOutput() PortalAuthOutput {
	return i.ToPortalAuthOutputWithContext(context.Background())
}

func (i *PortalAuth) ToPortalAuthOutputWithContext(ctx context.Context) PortalAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalAuthOutput)
}

// PortalAuthArrayInput is an input type that accepts PortalAuthArray and PortalAuthArrayOutput values.
// You can construct a concrete instance of `PortalAuthArrayInput` via:
//
//	PortalAuthArray{ PortalAuthArgs{...} }
type PortalAuthArrayInput interface {
	pulumi.Input

	ToPortalAuthArrayOutput() PortalAuthArrayOutput
	ToPortalAuthArrayOutputWithContext(context.Context) PortalAuthArrayOutput
}

type PortalAuthArray []PortalAuthInput

func (PortalAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalAuth)(nil)).Elem()
}

func (i PortalAuthArray) ToPortalAuthArrayOutput() PortalAuthArrayOutput {
	return i.ToPortalAuthArrayOutputWithContext(context.Background())
}

func (i PortalAuthArray) ToPortalAuthArrayOutputWithContext(ctx context.Context) PortalAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalAuthArrayOutput)
}

// PortalAuthMapInput is an input type that accepts PortalAuthMap and PortalAuthMapOutput values.
// You can construct a concrete instance of `PortalAuthMapInput` via:
//
//	PortalAuthMap{ "key": PortalAuthArgs{...} }
type PortalAuthMapInput interface {
	pulumi.Input

	ToPortalAuthMapOutput() PortalAuthMapOutput
	ToPortalAuthMapOutputWithContext(context.Context) PortalAuthMapOutput
}

type PortalAuthMap map[string]PortalAuthInput

func (PortalAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalAuth)(nil)).Elem()
}

func (i PortalAuthMap) ToPortalAuthMapOutput() PortalAuthMapOutput {
	return i.ToPortalAuthMapOutputWithContext(context.Background())
}

func (i PortalAuthMap) ToPortalAuthMapOutputWithContext(ctx context.Context) PortalAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalAuthMapOutput)
}

type PortalAuthOutput struct{ *pulumi.OutputState }

func (PortalAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalAuth)(nil)).Elem()
}

func (o PortalAuthOutput) ToPortalAuthOutput() PortalAuthOutput {
	return o
}

func (o PortalAuthOutput) ToPortalAuthOutputWithContext(ctx context.Context) PortalAuthOutput {
	return o
}

// The organization has basic auth enabled.
func (o PortalAuthOutput) BasicAuthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.BoolOutput { return v.BasicAuthEnabled }).(pulumi.BoolOutput)
}

// Whether a Konnect Identity Admin assigns teams to a developer.
func (o PortalAuthOutput) KonnectMappingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.BoolOutput { return v.KonnectMappingEnabled }).(pulumi.BoolOutput)
}

// The organization has OIDC disabled.
func (o PortalAuthOutput) OidcAuthEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.BoolOutput { return v.OidcAuthEnabled }).(pulumi.BoolOutput)
}

// Mappings from a portal developer atribute to an Identity Provider claim.
func (o PortalAuthOutput) OidcClaimMappings() PortalAuthOidcClaimMappingsPtrOutput {
	return o.ApplyT(func(v *PortalAuth) PortalAuthOidcClaimMappingsPtrOutput { return v.OidcClaimMappings }).(PortalAuthOidcClaimMappingsPtrOutput)
}

func (o PortalAuthOutput) OidcClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.StringPtrOutput { return v.OidcClientId }).(pulumi.StringPtrOutput)
}

func (o PortalAuthOutput) OidcClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.StringPtrOutput { return v.OidcClientSecret }).(pulumi.StringPtrOutput)
}

// Configuration properties for an OpenID Connect Identity Provider.
func (o PortalAuthOutput) OidcConfig() PortalAuthOidcConfigOutput {
	return o.ApplyT(func(v *PortalAuth) PortalAuthOidcConfigOutput { return v.OidcConfig }).(PortalAuthOidcConfigOutput)
}

func (o PortalAuthOutput) OidcIssuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.StringPtrOutput { return v.OidcIssuer }).(pulumi.StringPtrOutput)
}

func (o PortalAuthOutput) OidcScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.StringArrayOutput { return v.OidcScopes }).(pulumi.StringArrayOutput)
}

// Whether IdP groups determine the Konnect Portal teams a developer has.
func (o PortalAuthOutput) OidcTeamMappingEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.BoolOutput { return v.OidcTeamMappingEnabled }).(pulumi.BoolOutput)
}

// ID of the portal.
func (o PortalAuthOutput) PortalId() pulumi.StringOutput {
	return o.ApplyT(func(v *PortalAuth) pulumi.StringOutput { return v.PortalId }).(pulumi.StringOutput)
}

type PortalAuthArrayOutput struct{ *pulumi.OutputState }

func (PortalAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalAuth)(nil)).Elem()
}

func (o PortalAuthArrayOutput) ToPortalAuthArrayOutput() PortalAuthArrayOutput {
	return o
}

func (o PortalAuthArrayOutput) ToPortalAuthArrayOutputWithContext(ctx context.Context) PortalAuthArrayOutput {
	return o
}

func (o PortalAuthArrayOutput) Index(i pulumi.IntInput) PortalAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortalAuth {
		return vs[0].([]*PortalAuth)[vs[1].(int)]
	}).(PortalAuthOutput)
}

type PortalAuthMapOutput struct{ *pulumi.OutputState }

func (PortalAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalAuth)(nil)).Elem()
}

func (o PortalAuthMapOutput) ToPortalAuthMapOutput() PortalAuthMapOutput {
	return o
}

func (o PortalAuthMapOutput) ToPortalAuthMapOutputWithContext(ctx context.Context) PortalAuthMapOutput {
	return o
}

func (o PortalAuthMapOutput) MapIndex(k pulumi.StringInput) PortalAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortalAuth {
		return vs[0].(map[string]*PortalAuth)[vs[1].(string)]
	}).(PortalAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalAuthInput)(nil)).Elem(), &PortalAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalAuthArrayInput)(nil)).Elem(), PortalAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalAuthMapInput)(nil)).Elem(), PortalAuthMap{})
	pulumi.RegisterOutputType(PortalAuthOutput{})
	pulumi.RegisterOutputType(PortalAuthArrayOutput{})
	pulumi.RegisterOutputType(PortalAuthMapOutput{})
}
