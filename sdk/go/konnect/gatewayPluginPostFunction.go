// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginPostFunction Resource
type GatewayPluginPostFunction struct {
	pulumi.CustomResourceState

	Config GatewayPluginPostFunctionConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPostFunctionConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginPostFunctionConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPostFunctionRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPostFunctionServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginPostFunction registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginPostFunction(ctx *pulumi.Context,
	name string, args *GatewayPluginPostFunctionArgs, opts ...pulumi.ResourceOption) (*GatewayPluginPostFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginPostFunction
	err := ctx.RegisterResource("konnect:index/gatewayPluginPostFunction:GatewayPluginPostFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginPostFunction gets an existing GatewayPluginPostFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginPostFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginPostFunctionState, opts ...pulumi.ResourceOption) (*GatewayPluginPostFunction, error) {
	var resource GatewayPluginPostFunction
	err := ctx.ReadResource("konnect:index/gatewayPluginPostFunction:GatewayPluginPostFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginPostFunction resources.
type gatewayPluginPostFunctionState struct {
	Config *GatewayPluginPostFunctionConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginPostFunctionConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginPostFunctionConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginPostFunctionRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginPostFunctionService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginPostFunctionState struct {
	Config GatewayPluginPostFunctionConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPostFunctionConsumerPtrInput
	ConsumerGroup GatewayPluginPostFunctionConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPostFunctionRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPostFunctionServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginPostFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginPostFunctionState)(nil)).Elem()
}

type gatewayPluginPostFunctionArgs struct {
	Config *GatewayPluginPostFunctionConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginPostFunctionConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginPostFunctionConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginPostFunctionRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginPostFunctionService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginPostFunction resource.
type GatewayPluginPostFunctionArgs struct {
	Config GatewayPluginPostFunctionConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginPostFunctionConsumerPtrInput
	ConsumerGroup GatewayPluginPostFunctionConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginPostFunctionRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginPostFunctionServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginPostFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginPostFunctionArgs)(nil)).Elem()
}

type GatewayPluginPostFunctionInput interface {
	pulumi.Input

	ToGatewayPluginPostFunctionOutput() GatewayPluginPostFunctionOutput
	ToGatewayPluginPostFunctionOutputWithContext(ctx context.Context) GatewayPluginPostFunctionOutput
}

func (*GatewayPluginPostFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginPostFunction)(nil)).Elem()
}

func (i *GatewayPluginPostFunction) ToGatewayPluginPostFunctionOutput() GatewayPluginPostFunctionOutput {
	return i.ToGatewayPluginPostFunctionOutputWithContext(context.Background())
}

func (i *GatewayPluginPostFunction) ToGatewayPluginPostFunctionOutputWithContext(ctx context.Context) GatewayPluginPostFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPostFunctionOutput)
}

// GatewayPluginPostFunctionArrayInput is an input type that accepts GatewayPluginPostFunctionArray and GatewayPluginPostFunctionArrayOutput values.
// You can construct a concrete instance of `GatewayPluginPostFunctionArrayInput` via:
//
//	GatewayPluginPostFunctionArray{ GatewayPluginPostFunctionArgs{...} }
type GatewayPluginPostFunctionArrayInput interface {
	pulumi.Input

	ToGatewayPluginPostFunctionArrayOutput() GatewayPluginPostFunctionArrayOutput
	ToGatewayPluginPostFunctionArrayOutputWithContext(context.Context) GatewayPluginPostFunctionArrayOutput
}

type GatewayPluginPostFunctionArray []GatewayPluginPostFunctionInput

func (GatewayPluginPostFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginPostFunction)(nil)).Elem()
}

func (i GatewayPluginPostFunctionArray) ToGatewayPluginPostFunctionArrayOutput() GatewayPluginPostFunctionArrayOutput {
	return i.ToGatewayPluginPostFunctionArrayOutputWithContext(context.Background())
}

func (i GatewayPluginPostFunctionArray) ToGatewayPluginPostFunctionArrayOutputWithContext(ctx context.Context) GatewayPluginPostFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPostFunctionArrayOutput)
}

// GatewayPluginPostFunctionMapInput is an input type that accepts GatewayPluginPostFunctionMap and GatewayPluginPostFunctionMapOutput values.
// You can construct a concrete instance of `GatewayPluginPostFunctionMapInput` via:
//
//	GatewayPluginPostFunctionMap{ "key": GatewayPluginPostFunctionArgs{...} }
type GatewayPluginPostFunctionMapInput interface {
	pulumi.Input

	ToGatewayPluginPostFunctionMapOutput() GatewayPluginPostFunctionMapOutput
	ToGatewayPluginPostFunctionMapOutputWithContext(context.Context) GatewayPluginPostFunctionMapOutput
}

type GatewayPluginPostFunctionMap map[string]GatewayPluginPostFunctionInput

func (GatewayPluginPostFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginPostFunction)(nil)).Elem()
}

func (i GatewayPluginPostFunctionMap) ToGatewayPluginPostFunctionMapOutput() GatewayPluginPostFunctionMapOutput {
	return i.ToGatewayPluginPostFunctionMapOutputWithContext(context.Background())
}

func (i GatewayPluginPostFunctionMap) ToGatewayPluginPostFunctionMapOutputWithContext(ctx context.Context) GatewayPluginPostFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginPostFunctionMapOutput)
}

type GatewayPluginPostFunctionOutput struct{ *pulumi.OutputState }

func (GatewayPluginPostFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginPostFunction)(nil)).Elem()
}

func (o GatewayPluginPostFunctionOutput) ToGatewayPluginPostFunctionOutput() GatewayPluginPostFunctionOutput {
	return o
}

func (o GatewayPluginPostFunctionOutput) ToGatewayPluginPostFunctionOutputWithContext(ctx context.Context) GatewayPluginPostFunctionOutput {
	return o
}

func (o GatewayPluginPostFunctionOutput) Config() GatewayPluginPostFunctionConfigOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) GatewayPluginPostFunctionConfigOutput { return v.Config }).(GatewayPluginPostFunctionConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginPostFunctionOutput) Consumer() GatewayPluginPostFunctionConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) GatewayPluginPostFunctionConsumerOutput { return v.Consumer }).(GatewayPluginPostFunctionConsumerOutput)
}

func (o GatewayPluginPostFunctionOutput) ConsumerGroup() GatewayPluginPostFunctionConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) GatewayPluginPostFunctionConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginPostFunctionConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginPostFunctionOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginPostFunctionOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginPostFunctionOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginPostFunctionOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginPostFunctionOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginPostFunctionOutput) Route() GatewayPluginPostFunctionRouteOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) GatewayPluginPostFunctionRouteOutput { return v.Route }).(GatewayPluginPostFunctionRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginPostFunctionOutput) Service() GatewayPluginPostFunctionServiceOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) GatewayPluginPostFunctionServiceOutput { return v.Service }).(GatewayPluginPostFunctionServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginPostFunctionOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginPostFunctionOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginPostFunction) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginPostFunctionArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginPostFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginPostFunction)(nil)).Elem()
}

func (o GatewayPluginPostFunctionArrayOutput) ToGatewayPluginPostFunctionArrayOutput() GatewayPluginPostFunctionArrayOutput {
	return o
}

func (o GatewayPluginPostFunctionArrayOutput) ToGatewayPluginPostFunctionArrayOutputWithContext(ctx context.Context) GatewayPluginPostFunctionArrayOutput {
	return o
}

func (o GatewayPluginPostFunctionArrayOutput) Index(i pulumi.IntInput) GatewayPluginPostFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginPostFunction {
		return vs[0].([]*GatewayPluginPostFunction)[vs[1].(int)]
	}).(GatewayPluginPostFunctionOutput)
}

type GatewayPluginPostFunctionMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginPostFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginPostFunction)(nil)).Elem()
}

func (o GatewayPluginPostFunctionMapOutput) ToGatewayPluginPostFunctionMapOutput() GatewayPluginPostFunctionMapOutput {
	return o
}

func (o GatewayPluginPostFunctionMapOutput) ToGatewayPluginPostFunctionMapOutputWithContext(ctx context.Context) GatewayPluginPostFunctionMapOutput {
	return o
}

func (o GatewayPluginPostFunctionMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginPostFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginPostFunction {
		return vs[0].(map[string]*GatewayPluginPostFunction)[vs[1].(string)]
	}).(GatewayPluginPostFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPostFunctionInput)(nil)).Elem(), &GatewayPluginPostFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPostFunctionArrayInput)(nil)).Elem(), GatewayPluginPostFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginPostFunctionMapInput)(nil)).Elem(), GatewayPluginPostFunctionMap{})
	pulumi.RegisterOutputType(GatewayPluginPostFunctionOutput{})
	pulumi.RegisterOutputType(GatewayPluginPostFunctionArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginPostFunctionMapOutput{})
}
