// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginAIPromptDecorator Resource
type GatewayPluginAiPromptDecorator struct {
	pulumi.CustomResourceState

	Config GatewayPluginAiPromptDecoratorConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiPromptDecoratorConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginAiPromptDecoratorConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiPromptDecoratorRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiPromptDecoratorServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginAiPromptDecorator registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginAiPromptDecorator(ctx *pulumi.Context,
	name string, args *GatewayPluginAiPromptDecoratorArgs, opts ...pulumi.ResourceOption) (*GatewayPluginAiPromptDecorator, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginAiPromptDecorator
	err := ctx.RegisterResource("konnect:index/gatewayPluginAiPromptDecorator:GatewayPluginAiPromptDecorator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginAiPromptDecorator gets an existing GatewayPluginAiPromptDecorator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginAiPromptDecorator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginAiPromptDecoratorState, opts ...pulumi.ResourceOption) (*GatewayPluginAiPromptDecorator, error) {
	var resource GatewayPluginAiPromptDecorator
	err := ctx.ReadResource("konnect:index/gatewayPluginAiPromptDecorator:GatewayPluginAiPromptDecorator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginAiPromptDecorator resources.
type gatewayPluginAiPromptDecoratorState struct {
	Config *GatewayPluginAiPromptDecoratorConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAiPromptDecoratorConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAiPromptDecoratorConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAiPromptDecoratorRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAiPromptDecoratorService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginAiPromptDecoratorState struct {
	Config GatewayPluginAiPromptDecoratorConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiPromptDecoratorConsumerPtrInput
	ConsumerGroup GatewayPluginAiPromptDecoratorConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiPromptDecoratorRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiPromptDecoratorServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginAiPromptDecoratorState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAiPromptDecoratorState)(nil)).Elem()
}

type gatewayPluginAiPromptDecoratorArgs struct {
	Config *GatewayPluginAiPromptDecoratorConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAiPromptDecoratorConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAiPromptDecoratorConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAiPromptDecoratorRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAiPromptDecoratorService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginAiPromptDecorator resource.
type GatewayPluginAiPromptDecoratorArgs struct {
	Config GatewayPluginAiPromptDecoratorConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiPromptDecoratorConsumerPtrInput
	ConsumerGroup GatewayPluginAiPromptDecoratorConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiPromptDecoratorRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiPromptDecoratorServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginAiPromptDecoratorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAiPromptDecoratorArgs)(nil)).Elem()
}

type GatewayPluginAiPromptDecoratorInput interface {
	pulumi.Input

	ToGatewayPluginAiPromptDecoratorOutput() GatewayPluginAiPromptDecoratorOutput
	ToGatewayPluginAiPromptDecoratorOutputWithContext(ctx context.Context) GatewayPluginAiPromptDecoratorOutput
}

func (*GatewayPluginAiPromptDecorator) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAiPromptDecorator)(nil)).Elem()
}

func (i *GatewayPluginAiPromptDecorator) ToGatewayPluginAiPromptDecoratorOutput() GatewayPluginAiPromptDecoratorOutput {
	return i.ToGatewayPluginAiPromptDecoratorOutputWithContext(context.Background())
}

func (i *GatewayPluginAiPromptDecorator) ToGatewayPluginAiPromptDecoratorOutputWithContext(ctx context.Context) GatewayPluginAiPromptDecoratorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiPromptDecoratorOutput)
}

// GatewayPluginAiPromptDecoratorArrayInput is an input type that accepts GatewayPluginAiPromptDecoratorArray and GatewayPluginAiPromptDecoratorArrayOutput values.
// You can construct a concrete instance of `GatewayPluginAiPromptDecoratorArrayInput` via:
//
//	GatewayPluginAiPromptDecoratorArray{ GatewayPluginAiPromptDecoratorArgs{...} }
type GatewayPluginAiPromptDecoratorArrayInput interface {
	pulumi.Input

	ToGatewayPluginAiPromptDecoratorArrayOutput() GatewayPluginAiPromptDecoratorArrayOutput
	ToGatewayPluginAiPromptDecoratorArrayOutputWithContext(context.Context) GatewayPluginAiPromptDecoratorArrayOutput
}

type GatewayPluginAiPromptDecoratorArray []GatewayPluginAiPromptDecoratorInput

func (GatewayPluginAiPromptDecoratorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAiPromptDecorator)(nil)).Elem()
}

func (i GatewayPluginAiPromptDecoratorArray) ToGatewayPluginAiPromptDecoratorArrayOutput() GatewayPluginAiPromptDecoratorArrayOutput {
	return i.ToGatewayPluginAiPromptDecoratorArrayOutputWithContext(context.Background())
}

func (i GatewayPluginAiPromptDecoratorArray) ToGatewayPluginAiPromptDecoratorArrayOutputWithContext(ctx context.Context) GatewayPluginAiPromptDecoratorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiPromptDecoratorArrayOutput)
}

// GatewayPluginAiPromptDecoratorMapInput is an input type that accepts GatewayPluginAiPromptDecoratorMap and GatewayPluginAiPromptDecoratorMapOutput values.
// You can construct a concrete instance of `GatewayPluginAiPromptDecoratorMapInput` via:
//
//	GatewayPluginAiPromptDecoratorMap{ "key": GatewayPluginAiPromptDecoratorArgs{...} }
type GatewayPluginAiPromptDecoratorMapInput interface {
	pulumi.Input

	ToGatewayPluginAiPromptDecoratorMapOutput() GatewayPluginAiPromptDecoratorMapOutput
	ToGatewayPluginAiPromptDecoratorMapOutputWithContext(context.Context) GatewayPluginAiPromptDecoratorMapOutput
}

type GatewayPluginAiPromptDecoratorMap map[string]GatewayPluginAiPromptDecoratorInput

func (GatewayPluginAiPromptDecoratorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAiPromptDecorator)(nil)).Elem()
}

func (i GatewayPluginAiPromptDecoratorMap) ToGatewayPluginAiPromptDecoratorMapOutput() GatewayPluginAiPromptDecoratorMapOutput {
	return i.ToGatewayPluginAiPromptDecoratorMapOutputWithContext(context.Background())
}

func (i GatewayPluginAiPromptDecoratorMap) ToGatewayPluginAiPromptDecoratorMapOutputWithContext(ctx context.Context) GatewayPluginAiPromptDecoratorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiPromptDecoratorMapOutput)
}

type GatewayPluginAiPromptDecoratorOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiPromptDecoratorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAiPromptDecorator)(nil)).Elem()
}

func (o GatewayPluginAiPromptDecoratorOutput) ToGatewayPluginAiPromptDecoratorOutput() GatewayPluginAiPromptDecoratorOutput {
	return o
}

func (o GatewayPluginAiPromptDecoratorOutput) ToGatewayPluginAiPromptDecoratorOutputWithContext(ctx context.Context) GatewayPluginAiPromptDecoratorOutput {
	return o
}

func (o GatewayPluginAiPromptDecoratorOutput) Config() GatewayPluginAiPromptDecoratorConfigOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) GatewayPluginAiPromptDecoratorConfigOutput { return v.Config }).(GatewayPluginAiPromptDecoratorConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginAiPromptDecoratorOutput) Consumer() GatewayPluginAiPromptDecoratorConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) GatewayPluginAiPromptDecoratorConsumerOutput {
		return v.Consumer
	}).(GatewayPluginAiPromptDecoratorConsumerOutput)
}

func (o GatewayPluginAiPromptDecoratorOutput) ConsumerGroup() GatewayPluginAiPromptDecoratorConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) GatewayPluginAiPromptDecoratorConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginAiPromptDecoratorConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginAiPromptDecoratorOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginAiPromptDecoratorOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginAiPromptDecoratorOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginAiPromptDecoratorOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginAiPromptDecoratorOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginAiPromptDecoratorOutput) Route() GatewayPluginAiPromptDecoratorRouteOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) GatewayPluginAiPromptDecoratorRouteOutput { return v.Route }).(GatewayPluginAiPromptDecoratorRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginAiPromptDecoratorOutput) Service() GatewayPluginAiPromptDecoratorServiceOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) GatewayPluginAiPromptDecoratorServiceOutput { return v.Service }).(GatewayPluginAiPromptDecoratorServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginAiPromptDecoratorOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginAiPromptDecoratorOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptDecorator) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginAiPromptDecoratorArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiPromptDecoratorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAiPromptDecorator)(nil)).Elem()
}

func (o GatewayPluginAiPromptDecoratorArrayOutput) ToGatewayPluginAiPromptDecoratorArrayOutput() GatewayPluginAiPromptDecoratorArrayOutput {
	return o
}

func (o GatewayPluginAiPromptDecoratorArrayOutput) ToGatewayPluginAiPromptDecoratorArrayOutputWithContext(ctx context.Context) GatewayPluginAiPromptDecoratorArrayOutput {
	return o
}

func (o GatewayPluginAiPromptDecoratorArrayOutput) Index(i pulumi.IntInput) GatewayPluginAiPromptDecoratorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginAiPromptDecorator {
		return vs[0].([]*GatewayPluginAiPromptDecorator)[vs[1].(int)]
	}).(GatewayPluginAiPromptDecoratorOutput)
}

type GatewayPluginAiPromptDecoratorMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiPromptDecoratorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAiPromptDecorator)(nil)).Elem()
}

func (o GatewayPluginAiPromptDecoratorMapOutput) ToGatewayPluginAiPromptDecoratorMapOutput() GatewayPluginAiPromptDecoratorMapOutput {
	return o
}

func (o GatewayPluginAiPromptDecoratorMapOutput) ToGatewayPluginAiPromptDecoratorMapOutputWithContext(ctx context.Context) GatewayPluginAiPromptDecoratorMapOutput {
	return o
}

func (o GatewayPluginAiPromptDecoratorMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginAiPromptDecoratorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginAiPromptDecorator {
		return vs[0].(map[string]*GatewayPluginAiPromptDecorator)[vs[1].(string)]
	}).(GatewayPluginAiPromptDecoratorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiPromptDecoratorInput)(nil)).Elem(), &GatewayPluginAiPromptDecorator{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiPromptDecoratorArrayInput)(nil)).Elem(), GatewayPluginAiPromptDecoratorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiPromptDecoratorMapInput)(nil)).Elem(), GatewayPluginAiPromptDecoratorMap{})
	pulumi.RegisterOutputType(GatewayPluginAiPromptDecoratorOutput{})
	pulumi.RegisterOutputType(GatewayPluginAiPromptDecoratorArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginAiPromptDecoratorMapOutput{})
}
