// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginFileLog Resource
type GatewayPluginFileLog struct {
	pulumi.CustomResourceState

	Config GatewayPluginFileLogConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginFileLogConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginFileLogConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginFileLogRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginFileLogServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginFileLog registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginFileLog(ctx *pulumi.Context,
	name string, args *GatewayPluginFileLogArgs, opts ...pulumi.ResourceOption) (*GatewayPluginFileLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginFileLog
	err := ctx.RegisterResource("konnect:index/gatewayPluginFileLog:GatewayPluginFileLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginFileLog gets an existing GatewayPluginFileLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginFileLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginFileLogState, opts ...pulumi.ResourceOption) (*GatewayPluginFileLog, error) {
	var resource GatewayPluginFileLog
	err := ctx.ReadResource("konnect:index/gatewayPluginFileLog:GatewayPluginFileLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginFileLog resources.
type gatewayPluginFileLogState struct {
	Config *GatewayPluginFileLogConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginFileLogConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginFileLogConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginFileLogRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginFileLogService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginFileLogState struct {
	Config GatewayPluginFileLogConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginFileLogConsumerPtrInput
	ConsumerGroup GatewayPluginFileLogConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginFileLogRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginFileLogServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginFileLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginFileLogState)(nil)).Elem()
}

type gatewayPluginFileLogArgs struct {
	Config *GatewayPluginFileLogConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginFileLogConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginFileLogConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginFileLogRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginFileLogService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginFileLog resource.
type GatewayPluginFileLogArgs struct {
	Config GatewayPluginFileLogConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginFileLogConsumerPtrInput
	ConsumerGroup GatewayPluginFileLogConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginFileLogRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginFileLogServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginFileLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginFileLogArgs)(nil)).Elem()
}

type GatewayPluginFileLogInput interface {
	pulumi.Input

	ToGatewayPluginFileLogOutput() GatewayPluginFileLogOutput
	ToGatewayPluginFileLogOutputWithContext(ctx context.Context) GatewayPluginFileLogOutput
}

func (*GatewayPluginFileLog) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginFileLog)(nil)).Elem()
}

func (i *GatewayPluginFileLog) ToGatewayPluginFileLogOutput() GatewayPluginFileLogOutput {
	return i.ToGatewayPluginFileLogOutputWithContext(context.Background())
}

func (i *GatewayPluginFileLog) ToGatewayPluginFileLogOutputWithContext(ctx context.Context) GatewayPluginFileLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginFileLogOutput)
}

// GatewayPluginFileLogArrayInput is an input type that accepts GatewayPluginFileLogArray and GatewayPluginFileLogArrayOutput values.
// You can construct a concrete instance of `GatewayPluginFileLogArrayInput` via:
//
//	GatewayPluginFileLogArray{ GatewayPluginFileLogArgs{...} }
type GatewayPluginFileLogArrayInput interface {
	pulumi.Input

	ToGatewayPluginFileLogArrayOutput() GatewayPluginFileLogArrayOutput
	ToGatewayPluginFileLogArrayOutputWithContext(context.Context) GatewayPluginFileLogArrayOutput
}

type GatewayPluginFileLogArray []GatewayPluginFileLogInput

func (GatewayPluginFileLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginFileLog)(nil)).Elem()
}

func (i GatewayPluginFileLogArray) ToGatewayPluginFileLogArrayOutput() GatewayPluginFileLogArrayOutput {
	return i.ToGatewayPluginFileLogArrayOutputWithContext(context.Background())
}

func (i GatewayPluginFileLogArray) ToGatewayPluginFileLogArrayOutputWithContext(ctx context.Context) GatewayPluginFileLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginFileLogArrayOutput)
}

// GatewayPluginFileLogMapInput is an input type that accepts GatewayPluginFileLogMap and GatewayPluginFileLogMapOutput values.
// You can construct a concrete instance of `GatewayPluginFileLogMapInput` via:
//
//	GatewayPluginFileLogMap{ "key": GatewayPluginFileLogArgs{...} }
type GatewayPluginFileLogMapInput interface {
	pulumi.Input

	ToGatewayPluginFileLogMapOutput() GatewayPluginFileLogMapOutput
	ToGatewayPluginFileLogMapOutputWithContext(context.Context) GatewayPluginFileLogMapOutput
}

type GatewayPluginFileLogMap map[string]GatewayPluginFileLogInput

func (GatewayPluginFileLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginFileLog)(nil)).Elem()
}

func (i GatewayPluginFileLogMap) ToGatewayPluginFileLogMapOutput() GatewayPluginFileLogMapOutput {
	return i.ToGatewayPluginFileLogMapOutputWithContext(context.Background())
}

func (i GatewayPluginFileLogMap) ToGatewayPluginFileLogMapOutputWithContext(ctx context.Context) GatewayPluginFileLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginFileLogMapOutput)
}

type GatewayPluginFileLogOutput struct{ *pulumi.OutputState }

func (GatewayPluginFileLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginFileLog)(nil)).Elem()
}

func (o GatewayPluginFileLogOutput) ToGatewayPluginFileLogOutput() GatewayPluginFileLogOutput {
	return o
}

func (o GatewayPluginFileLogOutput) ToGatewayPluginFileLogOutputWithContext(ctx context.Context) GatewayPluginFileLogOutput {
	return o
}

func (o GatewayPluginFileLogOutput) Config() GatewayPluginFileLogConfigOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) GatewayPluginFileLogConfigOutput { return v.Config }).(GatewayPluginFileLogConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginFileLogOutput) Consumer() GatewayPluginFileLogConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) GatewayPluginFileLogConsumerOutput { return v.Consumer }).(GatewayPluginFileLogConsumerOutput)
}

func (o GatewayPluginFileLogOutput) ConsumerGroup() GatewayPluginFileLogConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) GatewayPluginFileLogConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginFileLogConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginFileLogOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginFileLogOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginFileLogOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginFileLogOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginFileLogOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginFileLogOutput) Route() GatewayPluginFileLogRouteOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) GatewayPluginFileLogRouteOutput { return v.Route }).(GatewayPluginFileLogRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginFileLogOutput) Service() GatewayPluginFileLogServiceOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) GatewayPluginFileLogServiceOutput { return v.Service }).(GatewayPluginFileLogServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginFileLogOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginFileLogOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginFileLog) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginFileLogArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginFileLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginFileLog)(nil)).Elem()
}

func (o GatewayPluginFileLogArrayOutput) ToGatewayPluginFileLogArrayOutput() GatewayPluginFileLogArrayOutput {
	return o
}

func (o GatewayPluginFileLogArrayOutput) ToGatewayPluginFileLogArrayOutputWithContext(ctx context.Context) GatewayPluginFileLogArrayOutput {
	return o
}

func (o GatewayPluginFileLogArrayOutput) Index(i pulumi.IntInput) GatewayPluginFileLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginFileLog {
		return vs[0].([]*GatewayPluginFileLog)[vs[1].(int)]
	}).(GatewayPluginFileLogOutput)
}

type GatewayPluginFileLogMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginFileLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginFileLog)(nil)).Elem()
}

func (o GatewayPluginFileLogMapOutput) ToGatewayPluginFileLogMapOutput() GatewayPluginFileLogMapOutput {
	return o
}

func (o GatewayPluginFileLogMapOutput) ToGatewayPluginFileLogMapOutputWithContext(ctx context.Context) GatewayPluginFileLogMapOutput {
	return o
}

func (o GatewayPluginFileLogMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginFileLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginFileLog {
		return vs[0].(map[string]*GatewayPluginFileLog)[vs[1].(string)]
	}).(GatewayPluginFileLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginFileLogInput)(nil)).Elem(), &GatewayPluginFileLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginFileLogArrayInput)(nil)).Elem(), GatewayPluginFileLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginFileLogMapInput)(nil)).Elem(), GatewayPluginFileLogMap{})
	pulumi.RegisterOutputType(GatewayPluginFileLogOutput{})
	pulumi.RegisterOutputType(GatewayPluginFileLogArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginFileLogMapOutput{})
}
