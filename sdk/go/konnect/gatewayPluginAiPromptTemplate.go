// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginAIPromptTemplate Resource
type GatewayPluginAiPromptTemplate struct {
	pulumi.CustomResourceState

	Config GatewayPluginAiPromptTemplateConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiPromptTemplateConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginAiPromptTemplateConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiPromptTemplateRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiPromptTemplateServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginAiPromptTemplate registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginAiPromptTemplate(ctx *pulumi.Context,
	name string, args *GatewayPluginAiPromptTemplateArgs, opts ...pulumi.ResourceOption) (*GatewayPluginAiPromptTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginAiPromptTemplate
	err := ctx.RegisterResource("konnect:index/gatewayPluginAiPromptTemplate:GatewayPluginAiPromptTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginAiPromptTemplate gets an existing GatewayPluginAiPromptTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginAiPromptTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginAiPromptTemplateState, opts ...pulumi.ResourceOption) (*GatewayPluginAiPromptTemplate, error) {
	var resource GatewayPluginAiPromptTemplate
	err := ctx.ReadResource("konnect:index/gatewayPluginAiPromptTemplate:GatewayPluginAiPromptTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginAiPromptTemplate resources.
type gatewayPluginAiPromptTemplateState struct {
	Config *GatewayPluginAiPromptTemplateConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAiPromptTemplateConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAiPromptTemplateConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAiPromptTemplateRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAiPromptTemplateService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginAiPromptTemplateState struct {
	Config GatewayPluginAiPromptTemplateConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiPromptTemplateConsumerPtrInput
	ConsumerGroup GatewayPluginAiPromptTemplateConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiPromptTemplateRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiPromptTemplateServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginAiPromptTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAiPromptTemplateState)(nil)).Elem()
}

type gatewayPluginAiPromptTemplateArgs struct {
	Config *GatewayPluginAiPromptTemplateConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginAiPromptTemplateConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginAiPromptTemplateConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginAiPromptTemplateRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginAiPromptTemplateService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginAiPromptTemplate resource.
type GatewayPluginAiPromptTemplateArgs struct {
	Config GatewayPluginAiPromptTemplateConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginAiPromptTemplateConsumerPtrInput
	ConsumerGroup GatewayPluginAiPromptTemplateConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginAiPromptTemplateRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginAiPromptTemplateServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginAiPromptTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginAiPromptTemplateArgs)(nil)).Elem()
}

type GatewayPluginAiPromptTemplateInput interface {
	pulumi.Input

	ToGatewayPluginAiPromptTemplateOutput() GatewayPluginAiPromptTemplateOutput
	ToGatewayPluginAiPromptTemplateOutputWithContext(ctx context.Context) GatewayPluginAiPromptTemplateOutput
}

func (*GatewayPluginAiPromptTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAiPromptTemplate)(nil)).Elem()
}

func (i *GatewayPluginAiPromptTemplate) ToGatewayPluginAiPromptTemplateOutput() GatewayPluginAiPromptTemplateOutput {
	return i.ToGatewayPluginAiPromptTemplateOutputWithContext(context.Background())
}

func (i *GatewayPluginAiPromptTemplate) ToGatewayPluginAiPromptTemplateOutputWithContext(ctx context.Context) GatewayPluginAiPromptTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiPromptTemplateOutput)
}

// GatewayPluginAiPromptTemplateArrayInput is an input type that accepts GatewayPluginAiPromptTemplateArray and GatewayPluginAiPromptTemplateArrayOutput values.
// You can construct a concrete instance of `GatewayPluginAiPromptTemplateArrayInput` via:
//
//	GatewayPluginAiPromptTemplateArray{ GatewayPluginAiPromptTemplateArgs{...} }
type GatewayPluginAiPromptTemplateArrayInput interface {
	pulumi.Input

	ToGatewayPluginAiPromptTemplateArrayOutput() GatewayPluginAiPromptTemplateArrayOutput
	ToGatewayPluginAiPromptTemplateArrayOutputWithContext(context.Context) GatewayPluginAiPromptTemplateArrayOutput
}

type GatewayPluginAiPromptTemplateArray []GatewayPluginAiPromptTemplateInput

func (GatewayPluginAiPromptTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAiPromptTemplate)(nil)).Elem()
}

func (i GatewayPluginAiPromptTemplateArray) ToGatewayPluginAiPromptTemplateArrayOutput() GatewayPluginAiPromptTemplateArrayOutput {
	return i.ToGatewayPluginAiPromptTemplateArrayOutputWithContext(context.Background())
}

func (i GatewayPluginAiPromptTemplateArray) ToGatewayPluginAiPromptTemplateArrayOutputWithContext(ctx context.Context) GatewayPluginAiPromptTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiPromptTemplateArrayOutput)
}

// GatewayPluginAiPromptTemplateMapInput is an input type that accepts GatewayPluginAiPromptTemplateMap and GatewayPluginAiPromptTemplateMapOutput values.
// You can construct a concrete instance of `GatewayPluginAiPromptTemplateMapInput` via:
//
//	GatewayPluginAiPromptTemplateMap{ "key": GatewayPluginAiPromptTemplateArgs{...} }
type GatewayPluginAiPromptTemplateMapInput interface {
	pulumi.Input

	ToGatewayPluginAiPromptTemplateMapOutput() GatewayPluginAiPromptTemplateMapOutput
	ToGatewayPluginAiPromptTemplateMapOutputWithContext(context.Context) GatewayPluginAiPromptTemplateMapOutput
}

type GatewayPluginAiPromptTemplateMap map[string]GatewayPluginAiPromptTemplateInput

func (GatewayPluginAiPromptTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAiPromptTemplate)(nil)).Elem()
}

func (i GatewayPluginAiPromptTemplateMap) ToGatewayPluginAiPromptTemplateMapOutput() GatewayPluginAiPromptTemplateMapOutput {
	return i.ToGatewayPluginAiPromptTemplateMapOutputWithContext(context.Background())
}

func (i GatewayPluginAiPromptTemplateMap) ToGatewayPluginAiPromptTemplateMapOutputWithContext(ctx context.Context) GatewayPluginAiPromptTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginAiPromptTemplateMapOutput)
}

type GatewayPluginAiPromptTemplateOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiPromptTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginAiPromptTemplate)(nil)).Elem()
}

func (o GatewayPluginAiPromptTemplateOutput) ToGatewayPluginAiPromptTemplateOutput() GatewayPluginAiPromptTemplateOutput {
	return o
}

func (o GatewayPluginAiPromptTemplateOutput) ToGatewayPluginAiPromptTemplateOutputWithContext(ctx context.Context) GatewayPluginAiPromptTemplateOutput {
	return o
}

func (o GatewayPluginAiPromptTemplateOutput) Config() GatewayPluginAiPromptTemplateConfigOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) GatewayPluginAiPromptTemplateConfigOutput { return v.Config }).(GatewayPluginAiPromptTemplateConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginAiPromptTemplateOutput) Consumer() GatewayPluginAiPromptTemplateConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) GatewayPluginAiPromptTemplateConsumerOutput { return v.Consumer }).(GatewayPluginAiPromptTemplateConsumerOutput)
}

func (o GatewayPluginAiPromptTemplateOutput) ConsumerGroup() GatewayPluginAiPromptTemplateConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) GatewayPluginAiPromptTemplateConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginAiPromptTemplateConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginAiPromptTemplateOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginAiPromptTemplateOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginAiPromptTemplateOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginAiPromptTemplateOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginAiPromptTemplateOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginAiPromptTemplateOutput) Route() GatewayPluginAiPromptTemplateRouteOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) GatewayPluginAiPromptTemplateRouteOutput { return v.Route }).(GatewayPluginAiPromptTemplateRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginAiPromptTemplateOutput) Service() GatewayPluginAiPromptTemplateServiceOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) GatewayPluginAiPromptTemplateServiceOutput { return v.Service }).(GatewayPluginAiPromptTemplateServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginAiPromptTemplateOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginAiPromptTemplateOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginAiPromptTemplate) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginAiPromptTemplateArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiPromptTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginAiPromptTemplate)(nil)).Elem()
}

func (o GatewayPluginAiPromptTemplateArrayOutput) ToGatewayPluginAiPromptTemplateArrayOutput() GatewayPluginAiPromptTemplateArrayOutput {
	return o
}

func (o GatewayPluginAiPromptTemplateArrayOutput) ToGatewayPluginAiPromptTemplateArrayOutputWithContext(ctx context.Context) GatewayPluginAiPromptTemplateArrayOutput {
	return o
}

func (o GatewayPluginAiPromptTemplateArrayOutput) Index(i pulumi.IntInput) GatewayPluginAiPromptTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginAiPromptTemplate {
		return vs[0].([]*GatewayPluginAiPromptTemplate)[vs[1].(int)]
	}).(GatewayPluginAiPromptTemplateOutput)
}

type GatewayPluginAiPromptTemplateMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginAiPromptTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginAiPromptTemplate)(nil)).Elem()
}

func (o GatewayPluginAiPromptTemplateMapOutput) ToGatewayPluginAiPromptTemplateMapOutput() GatewayPluginAiPromptTemplateMapOutput {
	return o
}

func (o GatewayPluginAiPromptTemplateMapOutput) ToGatewayPluginAiPromptTemplateMapOutputWithContext(ctx context.Context) GatewayPluginAiPromptTemplateMapOutput {
	return o
}

func (o GatewayPluginAiPromptTemplateMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginAiPromptTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginAiPromptTemplate {
		return vs[0].(map[string]*GatewayPluginAiPromptTemplate)[vs[1].(string)]
	}).(GatewayPluginAiPromptTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiPromptTemplateInput)(nil)).Elem(), &GatewayPluginAiPromptTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiPromptTemplateArrayInput)(nil)).Elem(), GatewayPluginAiPromptTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginAiPromptTemplateMapInput)(nil)).Elem(), GatewayPluginAiPromptTemplateMap{})
	pulumi.RegisterOutputType(GatewayPluginAiPromptTemplateOutput{})
	pulumi.RegisterOutputType(GatewayPluginAiPromptTemplateArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginAiPromptTemplateMapOutput{})
}
