// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginResponseTransformer Resource
type GatewayPluginResponseTransformer struct {
	pulumi.CustomResourceState

	Config GatewayPluginResponseTransformerConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginResponseTransformerConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginResponseTransformerConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginResponseTransformerRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginResponseTransformerServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginResponseTransformer registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginResponseTransformer(ctx *pulumi.Context,
	name string, args *GatewayPluginResponseTransformerArgs, opts ...pulumi.ResourceOption) (*GatewayPluginResponseTransformer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginResponseTransformer
	err := ctx.RegisterResource("konnect:index/gatewayPluginResponseTransformer:GatewayPluginResponseTransformer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginResponseTransformer gets an existing GatewayPluginResponseTransformer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginResponseTransformer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginResponseTransformerState, opts ...pulumi.ResourceOption) (*GatewayPluginResponseTransformer, error) {
	var resource GatewayPluginResponseTransformer
	err := ctx.ReadResource("konnect:index/gatewayPluginResponseTransformer:GatewayPluginResponseTransformer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginResponseTransformer resources.
type gatewayPluginResponseTransformerState struct {
	Config *GatewayPluginResponseTransformerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginResponseTransformerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginResponseTransformerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginResponseTransformerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginResponseTransformerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginResponseTransformerState struct {
	Config GatewayPluginResponseTransformerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginResponseTransformerConsumerPtrInput
	ConsumerGroup GatewayPluginResponseTransformerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginResponseTransformerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginResponseTransformerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginResponseTransformerState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginResponseTransformerState)(nil)).Elem()
}

type gatewayPluginResponseTransformerArgs struct {
	Config *GatewayPluginResponseTransformerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginResponseTransformerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginResponseTransformerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginResponseTransformerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginResponseTransformerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginResponseTransformer resource.
type GatewayPluginResponseTransformerArgs struct {
	Config GatewayPluginResponseTransformerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginResponseTransformerConsumerPtrInput
	ConsumerGroup GatewayPluginResponseTransformerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginResponseTransformerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginResponseTransformerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginResponseTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginResponseTransformerArgs)(nil)).Elem()
}

type GatewayPluginResponseTransformerInput interface {
	pulumi.Input

	ToGatewayPluginResponseTransformerOutput() GatewayPluginResponseTransformerOutput
	ToGatewayPluginResponseTransformerOutputWithContext(ctx context.Context) GatewayPluginResponseTransformerOutput
}

func (*GatewayPluginResponseTransformer) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginResponseTransformer)(nil)).Elem()
}

func (i *GatewayPluginResponseTransformer) ToGatewayPluginResponseTransformerOutput() GatewayPluginResponseTransformerOutput {
	return i.ToGatewayPluginResponseTransformerOutputWithContext(context.Background())
}

func (i *GatewayPluginResponseTransformer) ToGatewayPluginResponseTransformerOutputWithContext(ctx context.Context) GatewayPluginResponseTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginResponseTransformerOutput)
}

// GatewayPluginResponseTransformerArrayInput is an input type that accepts GatewayPluginResponseTransformerArray and GatewayPluginResponseTransformerArrayOutput values.
// You can construct a concrete instance of `GatewayPluginResponseTransformerArrayInput` via:
//
//	GatewayPluginResponseTransformerArray{ GatewayPluginResponseTransformerArgs{...} }
type GatewayPluginResponseTransformerArrayInput interface {
	pulumi.Input

	ToGatewayPluginResponseTransformerArrayOutput() GatewayPluginResponseTransformerArrayOutput
	ToGatewayPluginResponseTransformerArrayOutputWithContext(context.Context) GatewayPluginResponseTransformerArrayOutput
}

type GatewayPluginResponseTransformerArray []GatewayPluginResponseTransformerInput

func (GatewayPluginResponseTransformerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginResponseTransformer)(nil)).Elem()
}

func (i GatewayPluginResponseTransformerArray) ToGatewayPluginResponseTransformerArrayOutput() GatewayPluginResponseTransformerArrayOutput {
	return i.ToGatewayPluginResponseTransformerArrayOutputWithContext(context.Background())
}

func (i GatewayPluginResponseTransformerArray) ToGatewayPluginResponseTransformerArrayOutputWithContext(ctx context.Context) GatewayPluginResponseTransformerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginResponseTransformerArrayOutput)
}

// GatewayPluginResponseTransformerMapInput is an input type that accepts GatewayPluginResponseTransformerMap and GatewayPluginResponseTransformerMapOutput values.
// You can construct a concrete instance of `GatewayPluginResponseTransformerMapInput` via:
//
//	GatewayPluginResponseTransformerMap{ "key": GatewayPluginResponseTransformerArgs{...} }
type GatewayPluginResponseTransformerMapInput interface {
	pulumi.Input

	ToGatewayPluginResponseTransformerMapOutput() GatewayPluginResponseTransformerMapOutput
	ToGatewayPluginResponseTransformerMapOutputWithContext(context.Context) GatewayPluginResponseTransformerMapOutput
}

type GatewayPluginResponseTransformerMap map[string]GatewayPluginResponseTransformerInput

func (GatewayPluginResponseTransformerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginResponseTransformer)(nil)).Elem()
}

func (i GatewayPluginResponseTransformerMap) ToGatewayPluginResponseTransformerMapOutput() GatewayPluginResponseTransformerMapOutput {
	return i.ToGatewayPluginResponseTransformerMapOutputWithContext(context.Background())
}

func (i GatewayPluginResponseTransformerMap) ToGatewayPluginResponseTransformerMapOutputWithContext(ctx context.Context) GatewayPluginResponseTransformerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginResponseTransformerMapOutput)
}

type GatewayPluginResponseTransformerOutput struct{ *pulumi.OutputState }

func (GatewayPluginResponseTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginResponseTransformer)(nil)).Elem()
}

func (o GatewayPluginResponseTransformerOutput) ToGatewayPluginResponseTransformerOutput() GatewayPluginResponseTransformerOutput {
	return o
}

func (o GatewayPluginResponseTransformerOutput) ToGatewayPluginResponseTransformerOutputWithContext(ctx context.Context) GatewayPluginResponseTransformerOutput {
	return o
}

func (o GatewayPluginResponseTransformerOutput) Config() GatewayPluginResponseTransformerConfigOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) GatewayPluginResponseTransformerConfigOutput {
		return v.Config
	}).(GatewayPluginResponseTransformerConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginResponseTransformerOutput) Consumer() GatewayPluginResponseTransformerConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) GatewayPluginResponseTransformerConsumerOutput {
		return v.Consumer
	}).(GatewayPluginResponseTransformerConsumerOutput)
}

func (o GatewayPluginResponseTransformerOutput) ConsumerGroup() GatewayPluginResponseTransformerConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) GatewayPluginResponseTransformerConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginResponseTransformerConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginResponseTransformerOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginResponseTransformerOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginResponseTransformerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginResponseTransformerOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginResponseTransformerOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginResponseTransformerOutput) Route() GatewayPluginResponseTransformerRouteOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) GatewayPluginResponseTransformerRouteOutput { return v.Route }).(GatewayPluginResponseTransformerRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginResponseTransformerOutput) Service() GatewayPluginResponseTransformerServiceOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) GatewayPluginResponseTransformerServiceOutput {
		return v.Service
	}).(GatewayPluginResponseTransformerServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginResponseTransformerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginResponseTransformerOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginResponseTransformer) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginResponseTransformerArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginResponseTransformerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginResponseTransformer)(nil)).Elem()
}

func (o GatewayPluginResponseTransformerArrayOutput) ToGatewayPluginResponseTransformerArrayOutput() GatewayPluginResponseTransformerArrayOutput {
	return o
}

func (o GatewayPluginResponseTransformerArrayOutput) ToGatewayPluginResponseTransformerArrayOutputWithContext(ctx context.Context) GatewayPluginResponseTransformerArrayOutput {
	return o
}

func (o GatewayPluginResponseTransformerArrayOutput) Index(i pulumi.IntInput) GatewayPluginResponseTransformerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginResponseTransformer {
		return vs[0].([]*GatewayPluginResponseTransformer)[vs[1].(int)]
	}).(GatewayPluginResponseTransformerOutput)
}

type GatewayPluginResponseTransformerMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginResponseTransformerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginResponseTransformer)(nil)).Elem()
}

func (o GatewayPluginResponseTransformerMapOutput) ToGatewayPluginResponseTransformerMapOutput() GatewayPluginResponseTransformerMapOutput {
	return o
}

func (o GatewayPluginResponseTransformerMapOutput) ToGatewayPluginResponseTransformerMapOutputWithContext(ctx context.Context) GatewayPluginResponseTransformerMapOutput {
	return o
}

func (o GatewayPluginResponseTransformerMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginResponseTransformerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginResponseTransformer {
		return vs[0].(map[string]*GatewayPluginResponseTransformer)[vs[1].(string)]
	}).(GatewayPluginResponseTransformerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginResponseTransformerInput)(nil)).Elem(), &GatewayPluginResponseTransformer{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginResponseTransformerArrayInput)(nil)).Elem(), GatewayPluginResponseTransformerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginResponseTransformerMapInput)(nil)).Elem(), GatewayPluginResponseTransformerMap{})
	pulumi.RegisterOutputType(GatewayPluginResponseTransformerOutput{})
	pulumi.RegisterOutputType(GatewayPluginResponseTransformerArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginResponseTransformerMapOutput{})
}
