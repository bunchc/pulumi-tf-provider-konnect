// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayDataPlaneClientCertificate Resource
type GatewayDataPlaneClientCertificate struct {
	pulumi.CustomResourceState

	// JSON escaped string of the certificate. Requires replacement if changed.
	Cert pulumi.StringOutput `pulumi:"cert"`
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Date certificate was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Date certificate was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayDataPlaneClientCertificate registers a new resource with the given unique name, arguments, and options.
func NewGatewayDataPlaneClientCertificate(ctx *pulumi.Context,
	name string, args *GatewayDataPlaneClientCertificateArgs, opts ...pulumi.ResourceOption) (*GatewayDataPlaneClientCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cert == nil {
		return nil, errors.New("invalid value for required argument 'Cert'")
	}
	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayDataPlaneClientCertificate
	err := ctx.RegisterResource("konnect:index/gatewayDataPlaneClientCertificate:GatewayDataPlaneClientCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayDataPlaneClientCertificate gets an existing GatewayDataPlaneClientCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayDataPlaneClientCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayDataPlaneClientCertificateState, opts ...pulumi.ResourceOption) (*GatewayDataPlaneClientCertificate, error) {
	var resource GatewayDataPlaneClientCertificate
	err := ctx.ReadResource("konnect:index/gatewayDataPlaneClientCertificate:GatewayDataPlaneClientCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayDataPlaneClientCertificate resources.
type gatewayDataPlaneClientCertificateState struct {
	// JSON escaped string of the certificate. Requires replacement if changed.
	Cert *string `pulumi:"cert"`
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Date certificate was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Date certificate was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayDataPlaneClientCertificateState struct {
	// JSON escaped string of the certificate. Requires replacement if changed.
	Cert pulumi.StringPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringPtrInput
	// Date certificate was created.
	CreatedAt pulumi.IntPtrInput
	// Date certificate was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayDataPlaneClientCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayDataPlaneClientCertificateState)(nil)).Elem()
}

type gatewayDataPlaneClientCertificateArgs struct {
	// JSON escaped string of the certificate. Requires replacement if changed.
	Cert string `pulumi:"cert"`
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId string `pulumi:"controlPlaneId"`
}

// The set of arguments for constructing a GatewayDataPlaneClientCertificate resource.
type GatewayDataPlaneClientCertificateArgs struct {
	// JSON escaped string of the certificate. Requires replacement if changed.
	Cert pulumi.StringInput
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringInput
}

func (GatewayDataPlaneClientCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayDataPlaneClientCertificateArgs)(nil)).Elem()
}

type GatewayDataPlaneClientCertificateInput interface {
	pulumi.Input

	ToGatewayDataPlaneClientCertificateOutput() GatewayDataPlaneClientCertificateOutput
	ToGatewayDataPlaneClientCertificateOutputWithContext(ctx context.Context) GatewayDataPlaneClientCertificateOutput
}

func (*GatewayDataPlaneClientCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayDataPlaneClientCertificate)(nil)).Elem()
}

func (i *GatewayDataPlaneClientCertificate) ToGatewayDataPlaneClientCertificateOutput() GatewayDataPlaneClientCertificateOutput {
	return i.ToGatewayDataPlaneClientCertificateOutputWithContext(context.Background())
}

func (i *GatewayDataPlaneClientCertificate) ToGatewayDataPlaneClientCertificateOutputWithContext(ctx context.Context) GatewayDataPlaneClientCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayDataPlaneClientCertificateOutput)
}

// GatewayDataPlaneClientCertificateArrayInput is an input type that accepts GatewayDataPlaneClientCertificateArray and GatewayDataPlaneClientCertificateArrayOutput values.
// You can construct a concrete instance of `GatewayDataPlaneClientCertificateArrayInput` via:
//
//	GatewayDataPlaneClientCertificateArray{ GatewayDataPlaneClientCertificateArgs{...} }
type GatewayDataPlaneClientCertificateArrayInput interface {
	pulumi.Input

	ToGatewayDataPlaneClientCertificateArrayOutput() GatewayDataPlaneClientCertificateArrayOutput
	ToGatewayDataPlaneClientCertificateArrayOutputWithContext(context.Context) GatewayDataPlaneClientCertificateArrayOutput
}

type GatewayDataPlaneClientCertificateArray []GatewayDataPlaneClientCertificateInput

func (GatewayDataPlaneClientCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayDataPlaneClientCertificate)(nil)).Elem()
}

func (i GatewayDataPlaneClientCertificateArray) ToGatewayDataPlaneClientCertificateArrayOutput() GatewayDataPlaneClientCertificateArrayOutput {
	return i.ToGatewayDataPlaneClientCertificateArrayOutputWithContext(context.Background())
}

func (i GatewayDataPlaneClientCertificateArray) ToGatewayDataPlaneClientCertificateArrayOutputWithContext(ctx context.Context) GatewayDataPlaneClientCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayDataPlaneClientCertificateArrayOutput)
}

// GatewayDataPlaneClientCertificateMapInput is an input type that accepts GatewayDataPlaneClientCertificateMap and GatewayDataPlaneClientCertificateMapOutput values.
// You can construct a concrete instance of `GatewayDataPlaneClientCertificateMapInput` via:
//
//	GatewayDataPlaneClientCertificateMap{ "key": GatewayDataPlaneClientCertificateArgs{...} }
type GatewayDataPlaneClientCertificateMapInput interface {
	pulumi.Input

	ToGatewayDataPlaneClientCertificateMapOutput() GatewayDataPlaneClientCertificateMapOutput
	ToGatewayDataPlaneClientCertificateMapOutputWithContext(context.Context) GatewayDataPlaneClientCertificateMapOutput
}

type GatewayDataPlaneClientCertificateMap map[string]GatewayDataPlaneClientCertificateInput

func (GatewayDataPlaneClientCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayDataPlaneClientCertificate)(nil)).Elem()
}

func (i GatewayDataPlaneClientCertificateMap) ToGatewayDataPlaneClientCertificateMapOutput() GatewayDataPlaneClientCertificateMapOutput {
	return i.ToGatewayDataPlaneClientCertificateMapOutputWithContext(context.Background())
}

func (i GatewayDataPlaneClientCertificateMap) ToGatewayDataPlaneClientCertificateMapOutputWithContext(ctx context.Context) GatewayDataPlaneClientCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayDataPlaneClientCertificateMapOutput)
}

type GatewayDataPlaneClientCertificateOutput struct{ *pulumi.OutputState }

func (GatewayDataPlaneClientCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayDataPlaneClientCertificate)(nil)).Elem()
}

func (o GatewayDataPlaneClientCertificateOutput) ToGatewayDataPlaneClientCertificateOutput() GatewayDataPlaneClientCertificateOutput {
	return o
}

func (o GatewayDataPlaneClientCertificateOutput) ToGatewayDataPlaneClientCertificateOutputWithContext(ctx context.Context) GatewayDataPlaneClientCertificateOutput {
	return o
}

// JSON escaped string of the certificate. Requires replacement if changed.
func (o GatewayDataPlaneClientCertificateOutput) Cert() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayDataPlaneClientCertificate) pulumi.StringOutput { return v.Cert }).(pulumi.StringOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
func (o GatewayDataPlaneClientCertificateOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayDataPlaneClientCertificate) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Date certificate was created.
func (o GatewayDataPlaneClientCertificateOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayDataPlaneClientCertificate) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Date certificate was last updated.
func (o GatewayDataPlaneClientCertificateOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayDataPlaneClientCertificate) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayDataPlaneClientCertificateArrayOutput struct{ *pulumi.OutputState }

func (GatewayDataPlaneClientCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayDataPlaneClientCertificate)(nil)).Elem()
}

func (o GatewayDataPlaneClientCertificateArrayOutput) ToGatewayDataPlaneClientCertificateArrayOutput() GatewayDataPlaneClientCertificateArrayOutput {
	return o
}

func (o GatewayDataPlaneClientCertificateArrayOutput) ToGatewayDataPlaneClientCertificateArrayOutputWithContext(ctx context.Context) GatewayDataPlaneClientCertificateArrayOutput {
	return o
}

func (o GatewayDataPlaneClientCertificateArrayOutput) Index(i pulumi.IntInput) GatewayDataPlaneClientCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayDataPlaneClientCertificate {
		return vs[0].([]*GatewayDataPlaneClientCertificate)[vs[1].(int)]
	}).(GatewayDataPlaneClientCertificateOutput)
}

type GatewayDataPlaneClientCertificateMapOutput struct{ *pulumi.OutputState }

func (GatewayDataPlaneClientCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayDataPlaneClientCertificate)(nil)).Elem()
}

func (o GatewayDataPlaneClientCertificateMapOutput) ToGatewayDataPlaneClientCertificateMapOutput() GatewayDataPlaneClientCertificateMapOutput {
	return o
}

func (o GatewayDataPlaneClientCertificateMapOutput) ToGatewayDataPlaneClientCertificateMapOutputWithContext(ctx context.Context) GatewayDataPlaneClientCertificateMapOutput {
	return o
}

func (o GatewayDataPlaneClientCertificateMapOutput) MapIndex(k pulumi.StringInput) GatewayDataPlaneClientCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayDataPlaneClientCertificate {
		return vs[0].(map[string]*GatewayDataPlaneClientCertificate)[vs[1].(string)]
	}).(GatewayDataPlaneClientCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayDataPlaneClientCertificateInput)(nil)).Elem(), &GatewayDataPlaneClientCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayDataPlaneClientCertificateArrayInput)(nil)).Elem(), GatewayDataPlaneClientCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayDataPlaneClientCertificateMapInput)(nil)).Elem(), GatewayDataPlaneClientCertificateMap{})
	pulumi.RegisterOutputType(GatewayDataPlaneClientCertificateOutput{})
	pulumi.RegisterOutputType(GatewayDataPlaneClientCertificateArrayOutput{})
	pulumi.RegisterOutputType(GatewayDataPlaneClientCertificateMapOutput{})
}
