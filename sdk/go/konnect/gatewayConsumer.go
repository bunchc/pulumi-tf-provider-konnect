// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayConsumer Resource
type GatewayConsumer struct {
	pulumi.CustomResourceState

	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
	CustomId pulumi.StringOutput `pulumi:"customId"`
	// An optional set of strings associated with the Consumer for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
	// The unique username of the Consumer. You must send either this field or `customId` with the request.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewGatewayConsumer registers a new resource with the given unique name, arguments, and options.
func NewGatewayConsumer(ctx *pulumi.Context,
	name string, args *GatewayConsumerArgs, opts ...pulumi.ResourceOption) (*GatewayConsumer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayConsumer
	err := ctx.RegisterResource("konnect:index/gatewayConsumer:GatewayConsumer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayConsumer gets an existing GatewayConsumer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayConsumer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayConsumerState, opts ...pulumi.ResourceOption) (*GatewayConsumer, error) {
	var resource GatewayConsumer
	err := ctx.ReadResource("konnect:index/gatewayConsumer:GatewayConsumer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayConsumer resources.
type gatewayConsumerState struct {
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
	CustomId *string `pulumi:"customId"`
	// An optional set of strings associated with the Consumer for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
	// The unique username of the Consumer. You must send either this field or `customId` with the request.
	Username *string `pulumi:"username"`
}

type GatewayConsumerState struct {
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
	CustomId pulumi.StringPtrInput
	// An optional set of strings associated with the Consumer for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
	// The unique username of the Consumer. You must send either this field or `customId` with the request.
	Username pulumi.StringPtrInput
}

func (GatewayConsumerState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayConsumerState)(nil)).Elem()
}

type gatewayConsumerArgs struct {
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
	CustomId *string `pulumi:"customId"`
	// An optional set of strings associated with the Consumer for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// The unique username of the Consumer. You must send either this field or `customId` with the request.
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a GatewayConsumer resource.
type GatewayConsumerArgs struct {
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
	CustomId pulumi.StringPtrInput
	// An optional set of strings associated with the Consumer for grouping and filtering.
	Tags pulumi.StringArrayInput
	// The unique username of the Consumer. You must send either this field or `customId` with the request.
	Username pulumi.StringPtrInput
}

func (GatewayConsumerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayConsumerArgs)(nil)).Elem()
}

type GatewayConsumerInput interface {
	pulumi.Input

	ToGatewayConsumerOutput() GatewayConsumerOutput
	ToGatewayConsumerOutputWithContext(ctx context.Context) GatewayConsumerOutput
}

func (*GatewayConsumer) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayConsumer)(nil)).Elem()
}

func (i *GatewayConsumer) ToGatewayConsumerOutput() GatewayConsumerOutput {
	return i.ToGatewayConsumerOutputWithContext(context.Background())
}

func (i *GatewayConsumer) ToGatewayConsumerOutputWithContext(ctx context.Context) GatewayConsumerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConsumerOutput)
}

// GatewayConsumerArrayInput is an input type that accepts GatewayConsumerArray and GatewayConsumerArrayOutput values.
// You can construct a concrete instance of `GatewayConsumerArrayInput` via:
//
//	GatewayConsumerArray{ GatewayConsumerArgs{...} }
type GatewayConsumerArrayInput interface {
	pulumi.Input

	ToGatewayConsumerArrayOutput() GatewayConsumerArrayOutput
	ToGatewayConsumerArrayOutputWithContext(context.Context) GatewayConsumerArrayOutput
}

type GatewayConsumerArray []GatewayConsumerInput

func (GatewayConsumerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayConsumer)(nil)).Elem()
}

func (i GatewayConsumerArray) ToGatewayConsumerArrayOutput() GatewayConsumerArrayOutput {
	return i.ToGatewayConsumerArrayOutputWithContext(context.Background())
}

func (i GatewayConsumerArray) ToGatewayConsumerArrayOutputWithContext(ctx context.Context) GatewayConsumerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConsumerArrayOutput)
}

// GatewayConsumerMapInput is an input type that accepts GatewayConsumerMap and GatewayConsumerMapOutput values.
// You can construct a concrete instance of `GatewayConsumerMapInput` via:
//
//	GatewayConsumerMap{ "key": GatewayConsumerArgs{...} }
type GatewayConsumerMapInput interface {
	pulumi.Input

	ToGatewayConsumerMapOutput() GatewayConsumerMapOutput
	ToGatewayConsumerMapOutputWithContext(context.Context) GatewayConsumerMapOutput
}

type GatewayConsumerMap map[string]GatewayConsumerInput

func (GatewayConsumerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayConsumer)(nil)).Elem()
}

func (i GatewayConsumerMap) ToGatewayConsumerMapOutput() GatewayConsumerMapOutput {
	return i.ToGatewayConsumerMapOutputWithContext(context.Background())
}

func (i GatewayConsumerMap) ToGatewayConsumerMapOutputWithContext(ctx context.Context) GatewayConsumerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayConsumerMapOutput)
}

type GatewayConsumerOutput struct{ *pulumi.OutputState }

func (GatewayConsumerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayConsumer)(nil)).Elem()
}

func (o GatewayConsumerOutput) ToGatewayConsumerOutput() GatewayConsumerOutput {
	return o
}

func (o GatewayConsumerOutput) ToGatewayConsumerOutputWithContext(ctx context.Context) GatewayConsumerOutput {
	return o
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayConsumerOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConsumer) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayConsumerOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayConsumer) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Field for storing an existing unique ID for the Consumer - useful for mapping Kong with users in your existing database. You must send either this field or `username` with the request.
func (o GatewayConsumerOutput) CustomId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConsumer) pulumi.StringOutput { return v.CustomId }).(pulumi.StringOutput)
}

// An optional set of strings associated with the Consumer for grouping and filtering.
func (o GatewayConsumerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayConsumer) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayConsumerOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayConsumer) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

// The unique username of the Consumer. You must send either this field or `customId` with the request.
func (o GatewayConsumerOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayConsumer) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type GatewayConsumerArrayOutput struct{ *pulumi.OutputState }

func (GatewayConsumerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayConsumer)(nil)).Elem()
}

func (o GatewayConsumerArrayOutput) ToGatewayConsumerArrayOutput() GatewayConsumerArrayOutput {
	return o
}

func (o GatewayConsumerArrayOutput) ToGatewayConsumerArrayOutputWithContext(ctx context.Context) GatewayConsumerArrayOutput {
	return o
}

func (o GatewayConsumerArrayOutput) Index(i pulumi.IntInput) GatewayConsumerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayConsumer {
		return vs[0].([]*GatewayConsumer)[vs[1].(int)]
	}).(GatewayConsumerOutput)
}

type GatewayConsumerMapOutput struct{ *pulumi.OutputState }

func (GatewayConsumerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayConsumer)(nil)).Elem()
}

func (o GatewayConsumerMapOutput) ToGatewayConsumerMapOutput() GatewayConsumerMapOutput {
	return o
}

func (o GatewayConsumerMapOutput) ToGatewayConsumerMapOutputWithContext(ctx context.Context) GatewayConsumerMapOutput {
	return o
}

func (o GatewayConsumerMapOutput) MapIndex(k pulumi.StringInput) GatewayConsumerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayConsumer {
		return vs[0].(map[string]*GatewayConsumer)[vs[1].(string)]
	}).(GatewayConsumerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConsumerInput)(nil)).Elem(), &GatewayConsumer{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConsumerArrayInput)(nil)).Elem(), GatewayConsumerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayConsumerMapInput)(nil)).Elem(), GatewayConsumerMap{})
	pulumi.RegisterOutputType(GatewayConsumerOutput{})
	pulumi.RegisterOutputType(GatewayConsumerArrayOutput{})
	pulumi.RegisterOutputType(GatewayConsumerMapOutput{})
}
