// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginRequestTransformer Resource
type GatewayPluginRequestTransformer struct {
	pulumi.CustomResourceState

	Config GatewayPluginRequestTransformerConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginRequestTransformerConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginRequestTransformerConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginRequestTransformerRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginRequestTransformerServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginRequestTransformer registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginRequestTransformer(ctx *pulumi.Context,
	name string, args *GatewayPluginRequestTransformerArgs, opts ...pulumi.ResourceOption) (*GatewayPluginRequestTransformer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginRequestTransformer
	err := ctx.RegisterResource("konnect:index/gatewayPluginRequestTransformer:GatewayPluginRequestTransformer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginRequestTransformer gets an existing GatewayPluginRequestTransformer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginRequestTransformer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginRequestTransformerState, opts ...pulumi.ResourceOption) (*GatewayPluginRequestTransformer, error) {
	var resource GatewayPluginRequestTransformer
	err := ctx.ReadResource("konnect:index/gatewayPluginRequestTransformer:GatewayPluginRequestTransformer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginRequestTransformer resources.
type gatewayPluginRequestTransformerState struct {
	Config *GatewayPluginRequestTransformerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginRequestTransformerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginRequestTransformerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginRequestTransformerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginRequestTransformerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginRequestTransformerState struct {
	Config GatewayPluginRequestTransformerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginRequestTransformerConsumerPtrInput
	ConsumerGroup GatewayPluginRequestTransformerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginRequestTransformerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginRequestTransformerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginRequestTransformerState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginRequestTransformerState)(nil)).Elem()
}

type gatewayPluginRequestTransformerArgs struct {
	Config *GatewayPluginRequestTransformerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginRequestTransformerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginRequestTransformerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginRequestTransformerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginRequestTransformerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginRequestTransformer resource.
type GatewayPluginRequestTransformerArgs struct {
	Config GatewayPluginRequestTransformerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginRequestTransformerConsumerPtrInput
	ConsumerGroup GatewayPluginRequestTransformerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginRequestTransformerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginRequestTransformerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginRequestTransformerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginRequestTransformerArgs)(nil)).Elem()
}

type GatewayPluginRequestTransformerInput interface {
	pulumi.Input

	ToGatewayPluginRequestTransformerOutput() GatewayPluginRequestTransformerOutput
	ToGatewayPluginRequestTransformerOutputWithContext(ctx context.Context) GatewayPluginRequestTransformerOutput
}

func (*GatewayPluginRequestTransformer) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginRequestTransformer)(nil)).Elem()
}

func (i *GatewayPluginRequestTransformer) ToGatewayPluginRequestTransformerOutput() GatewayPluginRequestTransformerOutput {
	return i.ToGatewayPluginRequestTransformerOutputWithContext(context.Background())
}

func (i *GatewayPluginRequestTransformer) ToGatewayPluginRequestTransformerOutputWithContext(ctx context.Context) GatewayPluginRequestTransformerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginRequestTransformerOutput)
}

// GatewayPluginRequestTransformerArrayInput is an input type that accepts GatewayPluginRequestTransformerArray and GatewayPluginRequestTransformerArrayOutput values.
// You can construct a concrete instance of `GatewayPluginRequestTransformerArrayInput` via:
//
//	GatewayPluginRequestTransformerArray{ GatewayPluginRequestTransformerArgs{...} }
type GatewayPluginRequestTransformerArrayInput interface {
	pulumi.Input

	ToGatewayPluginRequestTransformerArrayOutput() GatewayPluginRequestTransformerArrayOutput
	ToGatewayPluginRequestTransformerArrayOutputWithContext(context.Context) GatewayPluginRequestTransformerArrayOutput
}

type GatewayPluginRequestTransformerArray []GatewayPluginRequestTransformerInput

func (GatewayPluginRequestTransformerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginRequestTransformer)(nil)).Elem()
}

func (i GatewayPluginRequestTransformerArray) ToGatewayPluginRequestTransformerArrayOutput() GatewayPluginRequestTransformerArrayOutput {
	return i.ToGatewayPluginRequestTransformerArrayOutputWithContext(context.Background())
}

func (i GatewayPluginRequestTransformerArray) ToGatewayPluginRequestTransformerArrayOutputWithContext(ctx context.Context) GatewayPluginRequestTransformerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginRequestTransformerArrayOutput)
}

// GatewayPluginRequestTransformerMapInput is an input type that accepts GatewayPluginRequestTransformerMap and GatewayPluginRequestTransformerMapOutput values.
// You can construct a concrete instance of `GatewayPluginRequestTransformerMapInput` via:
//
//	GatewayPluginRequestTransformerMap{ "key": GatewayPluginRequestTransformerArgs{...} }
type GatewayPluginRequestTransformerMapInput interface {
	pulumi.Input

	ToGatewayPluginRequestTransformerMapOutput() GatewayPluginRequestTransformerMapOutput
	ToGatewayPluginRequestTransformerMapOutputWithContext(context.Context) GatewayPluginRequestTransformerMapOutput
}

type GatewayPluginRequestTransformerMap map[string]GatewayPluginRequestTransformerInput

func (GatewayPluginRequestTransformerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginRequestTransformer)(nil)).Elem()
}

func (i GatewayPluginRequestTransformerMap) ToGatewayPluginRequestTransformerMapOutput() GatewayPluginRequestTransformerMapOutput {
	return i.ToGatewayPluginRequestTransformerMapOutputWithContext(context.Background())
}

func (i GatewayPluginRequestTransformerMap) ToGatewayPluginRequestTransformerMapOutputWithContext(ctx context.Context) GatewayPluginRequestTransformerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginRequestTransformerMapOutput)
}

type GatewayPluginRequestTransformerOutput struct{ *pulumi.OutputState }

func (GatewayPluginRequestTransformerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginRequestTransformer)(nil)).Elem()
}

func (o GatewayPluginRequestTransformerOutput) ToGatewayPluginRequestTransformerOutput() GatewayPluginRequestTransformerOutput {
	return o
}

func (o GatewayPluginRequestTransformerOutput) ToGatewayPluginRequestTransformerOutputWithContext(ctx context.Context) GatewayPluginRequestTransformerOutput {
	return o
}

func (o GatewayPluginRequestTransformerOutput) Config() GatewayPluginRequestTransformerConfigOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) GatewayPluginRequestTransformerConfigOutput { return v.Config }).(GatewayPluginRequestTransformerConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginRequestTransformerOutput) Consumer() GatewayPluginRequestTransformerConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) GatewayPluginRequestTransformerConsumerOutput {
		return v.Consumer
	}).(GatewayPluginRequestTransformerConsumerOutput)
}

func (o GatewayPluginRequestTransformerOutput) ConsumerGroup() GatewayPluginRequestTransformerConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) GatewayPluginRequestTransformerConsumerGroupOutput {
		return v.ConsumerGroup
	}).(GatewayPluginRequestTransformerConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginRequestTransformerOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginRequestTransformerOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginRequestTransformerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginRequestTransformerOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginRequestTransformerOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginRequestTransformerOutput) Route() GatewayPluginRequestTransformerRouteOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) GatewayPluginRequestTransformerRouteOutput { return v.Route }).(GatewayPluginRequestTransformerRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginRequestTransformerOutput) Service() GatewayPluginRequestTransformerServiceOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) GatewayPluginRequestTransformerServiceOutput {
		return v.Service
	}).(GatewayPluginRequestTransformerServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginRequestTransformerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginRequestTransformerOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginRequestTransformer) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginRequestTransformerArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginRequestTransformerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginRequestTransformer)(nil)).Elem()
}

func (o GatewayPluginRequestTransformerArrayOutput) ToGatewayPluginRequestTransformerArrayOutput() GatewayPluginRequestTransformerArrayOutput {
	return o
}

func (o GatewayPluginRequestTransformerArrayOutput) ToGatewayPluginRequestTransformerArrayOutputWithContext(ctx context.Context) GatewayPluginRequestTransformerArrayOutput {
	return o
}

func (o GatewayPluginRequestTransformerArrayOutput) Index(i pulumi.IntInput) GatewayPluginRequestTransformerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginRequestTransformer {
		return vs[0].([]*GatewayPluginRequestTransformer)[vs[1].(int)]
	}).(GatewayPluginRequestTransformerOutput)
}

type GatewayPluginRequestTransformerMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginRequestTransformerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginRequestTransformer)(nil)).Elem()
}

func (o GatewayPluginRequestTransformerMapOutput) ToGatewayPluginRequestTransformerMapOutput() GatewayPluginRequestTransformerMapOutput {
	return o
}

func (o GatewayPluginRequestTransformerMapOutput) ToGatewayPluginRequestTransformerMapOutputWithContext(ctx context.Context) GatewayPluginRequestTransformerMapOutput {
	return o
}

func (o GatewayPluginRequestTransformerMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginRequestTransformerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginRequestTransformer {
		return vs[0].(map[string]*GatewayPluginRequestTransformer)[vs[1].(string)]
	}).(GatewayPluginRequestTransformerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginRequestTransformerInput)(nil)).Elem(), &GatewayPluginRequestTransformer{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginRequestTransformerArrayInput)(nil)).Elem(), GatewayPluginRequestTransformerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginRequestTransformerMapInput)(nil)).Elem(), GatewayPluginRequestTransformerMap{})
	pulumi.RegisterOutputType(GatewayPluginRequestTransformerOutput{})
	pulumi.RegisterOutputType(GatewayPluginRequestTransformerArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginRequestTransformerMapOutput{})
}
