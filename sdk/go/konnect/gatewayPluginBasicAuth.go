// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginBasicAuth Resource
type GatewayPluginBasicAuth struct {
	pulumi.CustomResourceState

	Config GatewayPluginBasicAuthConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginBasicAuthConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginBasicAuthConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginBasicAuthRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginBasicAuthServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginBasicAuth registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginBasicAuth(ctx *pulumi.Context,
	name string, args *GatewayPluginBasicAuthArgs, opts ...pulumi.ResourceOption) (*GatewayPluginBasicAuth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginBasicAuth
	err := ctx.RegisterResource("konnect:index/gatewayPluginBasicAuth:GatewayPluginBasicAuth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginBasicAuth gets an existing GatewayPluginBasicAuth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginBasicAuth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginBasicAuthState, opts ...pulumi.ResourceOption) (*GatewayPluginBasicAuth, error) {
	var resource GatewayPluginBasicAuth
	err := ctx.ReadResource("konnect:index/gatewayPluginBasicAuth:GatewayPluginBasicAuth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginBasicAuth resources.
type gatewayPluginBasicAuthState struct {
	Config *GatewayPluginBasicAuthConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginBasicAuthConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginBasicAuthConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginBasicAuthRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginBasicAuthService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginBasicAuthState struct {
	Config GatewayPluginBasicAuthConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginBasicAuthConsumerPtrInput
	ConsumerGroup GatewayPluginBasicAuthConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginBasicAuthRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginBasicAuthServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginBasicAuthState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginBasicAuthState)(nil)).Elem()
}

type gatewayPluginBasicAuthArgs struct {
	Config *GatewayPluginBasicAuthConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginBasicAuthConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginBasicAuthConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginBasicAuthRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginBasicAuthService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginBasicAuth resource.
type GatewayPluginBasicAuthArgs struct {
	Config GatewayPluginBasicAuthConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginBasicAuthConsumerPtrInput
	ConsumerGroup GatewayPluginBasicAuthConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginBasicAuthRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginBasicAuthServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginBasicAuthArgs)(nil)).Elem()
}

type GatewayPluginBasicAuthInput interface {
	pulumi.Input

	ToGatewayPluginBasicAuthOutput() GatewayPluginBasicAuthOutput
	ToGatewayPluginBasicAuthOutputWithContext(ctx context.Context) GatewayPluginBasicAuthOutput
}

func (*GatewayPluginBasicAuth) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginBasicAuth)(nil)).Elem()
}

func (i *GatewayPluginBasicAuth) ToGatewayPluginBasicAuthOutput() GatewayPluginBasicAuthOutput {
	return i.ToGatewayPluginBasicAuthOutputWithContext(context.Background())
}

func (i *GatewayPluginBasicAuth) ToGatewayPluginBasicAuthOutputWithContext(ctx context.Context) GatewayPluginBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginBasicAuthOutput)
}

// GatewayPluginBasicAuthArrayInput is an input type that accepts GatewayPluginBasicAuthArray and GatewayPluginBasicAuthArrayOutput values.
// You can construct a concrete instance of `GatewayPluginBasicAuthArrayInput` via:
//
//	GatewayPluginBasicAuthArray{ GatewayPluginBasicAuthArgs{...} }
type GatewayPluginBasicAuthArrayInput interface {
	pulumi.Input

	ToGatewayPluginBasicAuthArrayOutput() GatewayPluginBasicAuthArrayOutput
	ToGatewayPluginBasicAuthArrayOutputWithContext(context.Context) GatewayPluginBasicAuthArrayOutput
}

type GatewayPluginBasicAuthArray []GatewayPluginBasicAuthInput

func (GatewayPluginBasicAuthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginBasicAuth)(nil)).Elem()
}

func (i GatewayPluginBasicAuthArray) ToGatewayPluginBasicAuthArrayOutput() GatewayPluginBasicAuthArrayOutput {
	return i.ToGatewayPluginBasicAuthArrayOutputWithContext(context.Background())
}

func (i GatewayPluginBasicAuthArray) ToGatewayPluginBasicAuthArrayOutputWithContext(ctx context.Context) GatewayPluginBasicAuthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginBasicAuthArrayOutput)
}

// GatewayPluginBasicAuthMapInput is an input type that accepts GatewayPluginBasicAuthMap and GatewayPluginBasicAuthMapOutput values.
// You can construct a concrete instance of `GatewayPluginBasicAuthMapInput` via:
//
//	GatewayPluginBasicAuthMap{ "key": GatewayPluginBasicAuthArgs{...} }
type GatewayPluginBasicAuthMapInput interface {
	pulumi.Input

	ToGatewayPluginBasicAuthMapOutput() GatewayPluginBasicAuthMapOutput
	ToGatewayPluginBasicAuthMapOutputWithContext(context.Context) GatewayPluginBasicAuthMapOutput
}

type GatewayPluginBasicAuthMap map[string]GatewayPluginBasicAuthInput

func (GatewayPluginBasicAuthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginBasicAuth)(nil)).Elem()
}

func (i GatewayPluginBasicAuthMap) ToGatewayPluginBasicAuthMapOutput() GatewayPluginBasicAuthMapOutput {
	return i.ToGatewayPluginBasicAuthMapOutputWithContext(context.Background())
}

func (i GatewayPluginBasicAuthMap) ToGatewayPluginBasicAuthMapOutputWithContext(ctx context.Context) GatewayPluginBasicAuthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginBasicAuthMapOutput)
}

type GatewayPluginBasicAuthOutput struct{ *pulumi.OutputState }

func (GatewayPluginBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginBasicAuth)(nil)).Elem()
}

func (o GatewayPluginBasicAuthOutput) ToGatewayPluginBasicAuthOutput() GatewayPluginBasicAuthOutput {
	return o
}

func (o GatewayPluginBasicAuthOutput) ToGatewayPluginBasicAuthOutputWithContext(ctx context.Context) GatewayPluginBasicAuthOutput {
	return o
}

func (o GatewayPluginBasicAuthOutput) Config() GatewayPluginBasicAuthConfigOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) GatewayPluginBasicAuthConfigOutput { return v.Config }).(GatewayPluginBasicAuthConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginBasicAuthOutput) Consumer() GatewayPluginBasicAuthConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) GatewayPluginBasicAuthConsumerOutput { return v.Consumer }).(GatewayPluginBasicAuthConsumerOutput)
}

func (o GatewayPluginBasicAuthOutput) ConsumerGroup() GatewayPluginBasicAuthConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) GatewayPluginBasicAuthConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginBasicAuthConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginBasicAuthOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginBasicAuthOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginBasicAuthOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginBasicAuthOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginBasicAuthOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginBasicAuthOutput) Route() GatewayPluginBasicAuthRouteOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) GatewayPluginBasicAuthRouteOutput { return v.Route }).(GatewayPluginBasicAuthRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginBasicAuthOutput) Service() GatewayPluginBasicAuthServiceOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) GatewayPluginBasicAuthServiceOutput { return v.Service }).(GatewayPluginBasicAuthServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginBasicAuthOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginBasicAuthOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginBasicAuth) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginBasicAuthArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginBasicAuthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginBasicAuth)(nil)).Elem()
}

func (o GatewayPluginBasicAuthArrayOutput) ToGatewayPluginBasicAuthArrayOutput() GatewayPluginBasicAuthArrayOutput {
	return o
}

func (o GatewayPluginBasicAuthArrayOutput) ToGatewayPluginBasicAuthArrayOutputWithContext(ctx context.Context) GatewayPluginBasicAuthArrayOutput {
	return o
}

func (o GatewayPluginBasicAuthArrayOutput) Index(i pulumi.IntInput) GatewayPluginBasicAuthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginBasicAuth {
		return vs[0].([]*GatewayPluginBasicAuth)[vs[1].(int)]
	}).(GatewayPluginBasicAuthOutput)
}

type GatewayPluginBasicAuthMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginBasicAuthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginBasicAuth)(nil)).Elem()
}

func (o GatewayPluginBasicAuthMapOutput) ToGatewayPluginBasicAuthMapOutput() GatewayPluginBasicAuthMapOutput {
	return o
}

func (o GatewayPluginBasicAuthMapOutput) ToGatewayPluginBasicAuthMapOutputWithContext(ctx context.Context) GatewayPluginBasicAuthMapOutput {
	return o
}

func (o GatewayPluginBasicAuthMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginBasicAuthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginBasicAuth {
		return vs[0].(map[string]*GatewayPluginBasicAuth)[vs[1].(string)]
	}).(GatewayPluginBasicAuthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginBasicAuthInput)(nil)).Elem(), &GatewayPluginBasicAuth{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginBasicAuthArrayInput)(nil)).Elem(), GatewayPluginBasicAuthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginBasicAuthMapInput)(nil)).Elem(), GatewayPluginBasicAuthMap{})
	pulumi.RegisterOutputType(GatewayPluginBasicAuthOutput{})
	pulumi.RegisterOutputType(GatewayPluginBasicAuthArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginBasicAuthMapOutput{})
}
