// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayTarget Resource
type GatewayTarget struct {
	pulumi.CustomResourceState

	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.Float64Output `pulumi:"createdAt"`
	// An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Target pulumi.StringOutput `pulumi:"target"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.Float64Output        `pulumi:"updatedAt"`
	Upstream  GatewayTargetUpstreamOutput `pulumi:"upstream"`
	// ID or target of the Target to lookup. Requires replacement if changed.
	UpstreamId pulumi.StringOutput `pulumi:"upstreamId"`
	// The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewGatewayTarget registers a new resource with the given unique name, arguments, and options.
func NewGatewayTarget(ctx *pulumi.Context,
	name string, args *GatewayTargetArgs, opts ...pulumi.ResourceOption) (*GatewayTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	if args.UpstreamId == nil {
		return nil, errors.New("invalid value for required argument 'UpstreamId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayTarget
	err := ctx.RegisterResource("konnect:index/gatewayTarget:GatewayTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayTarget gets an existing GatewayTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayTargetState, opts ...pulumi.ResourceOption) (*GatewayTarget, error) {
	var resource GatewayTarget
	err := ctx.ReadResource("konnect:index/gatewayTarget:GatewayTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayTarget resources.
type gatewayTargetState struct {
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *float64 `pulumi:"createdAt"`
	// An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.
	Tags []string `pulumi:"tags"`
	// The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Target *string `pulumi:"target"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *float64               `pulumi:"updatedAt"`
	Upstream  *GatewayTargetUpstream `pulumi:"upstream"`
	// ID or target of the Target to lookup. Requires replacement if changed.
	UpstreamId *string `pulumi:"upstreamId"`
	// The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Weight *int `pulumi:"weight"`
}

type GatewayTargetState struct {
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.Float64PtrInput
	// An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.
	Tags pulumi.StringArrayInput
	// The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Target pulumi.StringPtrInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.Float64PtrInput
	Upstream  GatewayTargetUpstreamPtrInput
	// ID or target of the Target to lookup. Requires replacement if changed.
	UpstreamId pulumi.StringPtrInput
	// The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Weight pulumi.IntPtrInput
}

func (GatewayTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayTargetState)(nil)).Elem()
}

type gatewayTargetArgs struct {
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.
	Tags []string `pulumi:"tags"`
	// The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Target *string `pulumi:"target"`
	// ID or target of the Target to lookup. Requires replacement if changed.
	UpstreamId string `pulumi:"upstreamId"`
	// The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a GatewayTarget resource.
type GatewayTargetArgs struct {
	// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
	ControlPlaneId pulumi.StringInput
	// An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.
	Tags pulumi.StringArrayInput
	// The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Target pulumi.StringPtrInput
	// ID or target of the Target to lookup. Requires replacement if changed.
	UpstreamId pulumi.StringInput
	// The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.
	Weight pulumi.IntPtrInput
}

func (GatewayTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayTargetArgs)(nil)).Elem()
}

type GatewayTargetInput interface {
	pulumi.Input

	ToGatewayTargetOutput() GatewayTargetOutput
	ToGatewayTargetOutputWithContext(ctx context.Context) GatewayTargetOutput
}

func (*GatewayTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayTarget)(nil)).Elem()
}

func (i *GatewayTarget) ToGatewayTargetOutput() GatewayTargetOutput {
	return i.ToGatewayTargetOutputWithContext(context.Background())
}

func (i *GatewayTarget) ToGatewayTargetOutputWithContext(ctx context.Context) GatewayTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayTargetOutput)
}

// GatewayTargetArrayInput is an input type that accepts GatewayTargetArray and GatewayTargetArrayOutput values.
// You can construct a concrete instance of `GatewayTargetArrayInput` via:
//
//	GatewayTargetArray{ GatewayTargetArgs{...} }
type GatewayTargetArrayInput interface {
	pulumi.Input

	ToGatewayTargetArrayOutput() GatewayTargetArrayOutput
	ToGatewayTargetArrayOutputWithContext(context.Context) GatewayTargetArrayOutput
}

type GatewayTargetArray []GatewayTargetInput

func (GatewayTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayTarget)(nil)).Elem()
}

func (i GatewayTargetArray) ToGatewayTargetArrayOutput() GatewayTargetArrayOutput {
	return i.ToGatewayTargetArrayOutputWithContext(context.Background())
}

func (i GatewayTargetArray) ToGatewayTargetArrayOutputWithContext(ctx context.Context) GatewayTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayTargetArrayOutput)
}

// GatewayTargetMapInput is an input type that accepts GatewayTargetMap and GatewayTargetMapOutput values.
// You can construct a concrete instance of `GatewayTargetMapInput` via:
//
//	GatewayTargetMap{ "key": GatewayTargetArgs{...} }
type GatewayTargetMapInput interface {
	pulumi.Input

	ToGatewayTargetMapOutput() GatewayTargetMapOutput
	ToGatewayTargetMapOutputWithContext(context.Context) GatewayTargetMapOutput
}

type GatewayTargetMap map[string]GatewayTargetInput

func (GatewayTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayTarget)(nil)).Elem()
}

func (i GatewayTargetMap) ToGatewayTargetMapOutput() GatewayTargetMapOutput {
	return i.ToGatewayTargetMapOutputWithContext(context.Background())
}

func (i GatewayTargetMap) ToGatewayTargetMapOutputWithContext(ctx context.Context) GatewayTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayTargetMapOutput)
}

type GatewayTargetOutput struct{ *pulumi.OutputState }

func (GatewayTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayTarget)(nil)).Elem()
}

func (o GatewayTargetOutput) ToGatewayTargetOutput() GatewayTargetOutput {
	return o
}

func (o GatewayTargetOutput) ToGatewayTargetOutputWithContext(ctx context.Context) GatewayTargetOutput {
	return o
}

// The UUID of your control plane. This variable is available in the Konnect manager. Requires replacement if changed.
func (o GatewayTargetOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayTarget) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayTargetOutput) CreatedAt() pulumi.Float64Output {
	return o.ApplyT(func(v *GatewayTarget) pulumi.Float64Output { return v.CreatedAt }).(pulumi.Float64Output)
}

// An optional set of strings associated with the Target for grouping and filtering. Requires replacement if changed.
func (o GatewayTargetOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayTarget) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The target address (ip or hostname) and port. If the hostname resolves to an SRV record, the `port` value will be overridden by the value from the DNS record. Requires replacement if changed.
func (o GatewayTargetOutput) Target() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayTarget) pulumi.StringOutput { return v.Target }).(pulumi.StringOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayTargetOutput) UpdatedAt() pulumi.Float64Output {
	return o.ApplyT(func(v *GatewayTarget) pulumi.Float64Output { return v.UpdatedAt }).(pulumi.Float64Output)
}

func (o GatewayTargetOutput) Upstream() GatewayTargetUpstreamOutput {
	return o.ApplyT(func(v *GatewayTarget) GatewayTargetUpstreamOutput { return v.Upstream }).(GatewayTargetUpstreamOutput)
}

// ID or target of the Target to lookup. Requires replacement if changed.
func (o GatewayTargetOutput) UpstreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayTarget) pulumi.StringOutput { return v.UpstreamId }).(pulumi.StringOutput)
}

// The weight this target gets within the upstream loadbalancer (`0`-`65535`). If the hostname resolves to an SRV record, the `weight` value will be overridden by the value from the DNS record. Requires replacement if changed.
func (o GatewayTargetOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayTarget) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

type GatewayTargetArrayOutput struct{ *pulumi.OutputState }

func (GatewayTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayTarget)(nil)).Elem()
}

func (o GatewayTargetArrayOutput) ToGatewayTargetArrayOutput() GatewayTargetArrayOutput {
	return o
}

func (o GatewayTargetArrayOutput) ToGatewayTargetArrayOutputWithContext(ctx context.Context) GatewayTargetArrayOutput {
	return o
}

func (o GatewayTargetArrayOutput) Index(i pulumi.IntInput) GatewayTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayTarget {
		return vs[0].([]*GatewayTarget)[vs[1].(int)]
	}).(GatewayTargetOutput)
}

type GatewayTargetMapOutput struct{ *pulumi.OutputState }

func (GatewayTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayTarget)(nil)).Elem()
}

func (o GatewayTargetMapOutput) ToGatewayTargetMapOutput() GatewayTargetMapOutput {
	return o
}

func (o GatewayTargetMapOutput) ToGatewayTargetMapOutputWithContext(ctx context.Context) GatewayTargetMapOutput {
	return o
}

func (o GatewayTargetMapOutput) MapIndex(k pulumi.StringInput) GatewayTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayTarget {
		return vs[0].(map[string]*GatewayTarget)[vs[1].(string)]
	}).(GatewayTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayTargetInput)(nil)).Elem(), &GatewayTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayTargetArrayInput)(nil)).Elem(), GatewayTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayTargetMapInput)(nil)).Elem(), GatewayTargetMap{})
	pulumi.RegisterOutputType(GatewayTargetOutput{})
	pulumi.RegisterOutputType(GatewayTargetArrayOutput{})
	pulumi.RegisterOutputType(GatewayTargetMapOutput{})
}
