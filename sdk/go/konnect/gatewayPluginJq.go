// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginJQ Resource
type GatewayPluginJq struct {
	pulumi.CustomResourceState

	Config GatewayPluginJqConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJqConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginJqConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJqRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJqServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginJq registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginJq(ctx *pulumi.Context,
	name string, args *GatewayPluginJqArgs, opts ...pulumi.ResourceOption) (*GatewayPluginJq, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginJq
	err := ctx.RegisterResource("konnect:index/gatewayPluginJq:GatewayPluginJq", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginJq gets an existing GatewayPluginJq resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginJq(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginJqState, opts ...pulumi.ResourceOption) (*GatewayPluginJq, error) {
	var resource GatewayPluginJq
	err := ctx.ReadResource("konnect:index/gatewayPluginJq:GatewayPluginJq", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginJq resources.
type gatewayPluginJqState struct {
	Config *GatewayPluginJqConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginJqConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginJqConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginJqRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginJqService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginJqState struct {
	Config GatewayPluginJqConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJqConsumerPtrInput
	ConsumerGroup GatewayPluginJqConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJqRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJqServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginJqState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginJqState)(nil)).Elem()
}

type gatewayPluginJqArgs struct {
	Config *GatewayPluginJqConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginJqConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginJqConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginJqRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginJqService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginJq resource.
type GatewayPluginJqArgs struct {
	Config GatewayPluginJqConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJqConsumerPtrInput
	ConsumerGroup GatewayPluginJqConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJqRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJqServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginJqArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginJqArgs)(nil)).Elem()
}

type GatewayPluginJqInput interface {
	pulumi.Input

	ToGatewayPluginJqOutput() GatewayPluginJqOutput
	ToGatewayPluginJqOutputWithContext(ctx context.Context) GatewayPluginJqOutput
}

func (*GatewayPluginJq) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginJq)(nil)).Elem()
}

func (i *GatewayPluginJq) ToGatewayPluginJqOutput() GatewayPluginJqOutput {
	return i.ToGatewayPluginJqOutputWithContext(context.Background())
}

func (i *GatewayPluginJq) ToGatewayPluginJqOutputWithContext(ctx context.Context) GatewayPluginJqOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJqOutput)
}

// GatewayPluginJqArrayInput is an input type that accepts GatewayPluginJqArray and GatewayPluginJqArrayOutput values.
// You can construct a concrete instance of `GatewayPluginJqArrayInput` via:
//
//	GatewayPluginJqArray{ GatewayPluginJqArgs{...} }
type GatewayPluginJqArrayInput interface {
	pulumi.Input

	ToGatewayPluginJqArrayOutput() GatewayPluginJqArrayOutput
	ToGatewayPluginJqArrayOutputWithContext(context.Context) GatewayPluginJqArrayOutput
}

type GatewayPluginJqArray []GatewayPluginJqInput

func (GatewayPluginJqArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginJq)(nil)).Elem()
}

func (i GatewayPluginJqArray) ToGatewayPluginJqArrayOutput() GatewayPluginJqArrayOutput {
	return i.ToGatewayPluginJqArrayOutputWithContext(context.Background())
}

func (i GatewayPluginJqArray) ToGatewayPluginJqArrayOutputWithContext(ctx context.Context) GatewayPluginJqArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJqArrayOutput)
}

// GatewayPluginJqMapInput is an input type that accepts GatewayPluginJqMap and GatewayPluginJqMapOutput values.
// You can construct a concrete instance of `GatewayPluginJqMapInput` via:
//
//	GatewayPluginJqMap{ "key": GatewayPluginJqArgs{...} }
type GatewayPluginJqMapInput interface {
	pulumi.Input

	ToGatewayPluginJqMapOutput() GatewayPluginJqMapOutput
	ToGatewayPluginJqMapOutputWithContext(context.Context) GatewayPluginJqMapOutput
}

type GatewayPluginJqMap map[string]GatewayPluginJqInput

func (GatewayPluginJqMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginJq)(nil)).Elem()
}

func (i GatewayPluginJqMap) ToGatewayPluginJqMapOutput() GatewayPluginJqMapOutput {
	return i.ToGatewayPluginJqMapOutputWithContext(context.Background())
}

func (i GatewayPluginJqMap) ToGatewayPluginJqMapOutputWithContext(ctx context.Context) GatewayPluginJqMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJqMapOutput)
}

type GatewayPluginJqOutput struct{ *pulumi.OutputState }

func (GatewayPluginJqOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginJq)(nil)).Elem()
}

func (o GatewayPluginJqOutput) ToGatewayPluginJqOutput() GatewayPluginJqOutput {
	return o
}

func (o GatewayPluginJqOutput) ToGatewayPluginJqOutputWithContext(ctx context.Context) GatewayPluginJqOutput {
	return o
}

func (o GatewayPluginJqOutput) Config() GatewayPluginJqConfigOutput {
	return o.ApplyT(func(v *GatewayPluginJq) GatewayPluginJqConfigOutput { return v.Config }).(GatewayPluginJqConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginJqOutput) Consumer() GatewayPluginJqConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginJq) GatewayPluginJqConsumerOutput { return v.Consumer }).(GatewayPluginJqConsumerOutput)
}

func (o GatewayPluginJqOutput) ConsumerGroup() GatewayPluginJqConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginJq) GatewayPluginJqConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginJqConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginJqOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginJq) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginJqOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginJq) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginJqOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginJq) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginJqOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginJq) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginJqOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginJq) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginJqOutput) Route() GatewayPluginJqRouteOutput {
	return o.ApplyT(func(v *GatewayPluginJq) GatewayPluginJqRouteOutput { return v.Route }).(GatewayPluginJqRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginJqOutput) Service() GatewayPluginJqServiceOutput {
	return o.ApplyT(func(v *GatewayPluginJq) GatewayPluginJqServiceOutput { return v.Service }).(GatewayPluginJqServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginJqOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginJq) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginJqOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginJq) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginJqArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginJqArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginJq)(nil)).Elem()
}

func (o GatewayPluginJqArrayOutput) ToGatewayPluginJqArrayOutput() GatewayPluginJqArrayOutput {
	return o
}

func (o GatewayPluginJqArrayOutput) ToGatewayPluginJqArrayOutputWithContext(ctx context.Context) GatewayPluginJqArrayOutput {
	return o
}

func (o GatewayPluginJqArrayOutput) Index(i pulumi.IntInput) GatewayPluginJqOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginJq {
		return vs[0].([]*GatewayPluginJq)[vs[1].(int)]
	}).(GatewayPluginJqOutput)
}

type GatewayPluginJqMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginJqMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginJq)(nil)).Elem()
}

func (o GatewayPluginJqMapOutput) ToGatewayPluginJqMapOutput() GatewayPluginJqMapOutput {
	return o
}

func (o GatewayPluginJqMapOutput) ToGatewayPluginJqMapOutputWithContext(ctx context.Context) GatewayPluginJqMapOutput {
	return o
}

func (o GatewayPluginJqMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginJqOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginJq {
		return vs[0].(map[string]*GatewayPluginJq)[vs[1].(string)]
	}).(GatewayPluginJqOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJqInput)(nil)).Elem(), &GatewayPluginJq{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJqArrayInput)(nil)).Elem(), GatewayPluginJqArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJqMapInput)(nil)).Elem(), GatewayPluginJqMap{})
	pulumi.RegisterOutputType(GatewayPluginJqOutput{})
	pulumi.RegisterOutputType(GatewayPluginJqArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginJqMapOutput{})
}
