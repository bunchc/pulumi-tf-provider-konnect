// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package konnect

import (
	"context"
	"reflect"

	"errors"
	"github.com/bunchc/pulumi-tf-provider-konnect/sdk/go/konnect/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GatewayPluginJWTSigner Resource
type GatewayPluginJwtSigner struct {
	pulumi.CustomResourceState

	Config GatewayPluginJwtSignerConfigOutput `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJwtSignerConsumerOutput      `pulumi:"consumer"`
	ConsumerGroup GatewayPluginJwtSignerConsumerGroupOutput `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringOutput `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntOutput `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      pulumi.BoolOutput   `pulumi:"enabled"`
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJwtSignerRouteOutput `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJwtSignerServiceOutput `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntOutput `pulumi:"updatedAt"`
}

// NewGatewayPluginJwtSigner registers a new resource with the given unique name, arguments, and options.
func NewGatewayPluginJwtSigner(ctx *pulumi.Context,
	name string, args *GatewayPluginJwtSignerArgs, opts ...pulumi.ResourceOption) (*GatewayPluginJwtSigner, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ControlPlaneId == nil {
		return nil, errors.New("invalid value for required argument 'ControlPlaneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GatewayPluginJwtSigner
	err := ctx.RegisterResource("konnect:index/gatewayPluginJwtSigner:GatewayPluginJwtSigner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayPluginJwtSigner gets an existing GatewayPluginJwtSigner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayPluginJwtSigner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayPluginJwtSignerState, opts ...pulumi.ResourceOption) (*GatewayPluginJwtSigner, error) {
	var resource GatewayPluginJwtSigner
	err := ctx.ReadResource("konnect:index/gatewayPluginJwtSigner:GatewayPluginJwtSigner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayPluginJwtSigner resources.
type gatewayPluginJwtSignerState struct {
	Config *GatewayPluginJwtSignerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginJwtSignerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginJwtSignerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId *string `pulumi:"controlPlaneId"`
	// Unix epoch when the resource was created.
	CreatedAt *int `pulumi:"createdAt"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginJwtSignerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginJwtSignerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
	// Unix epoch when the resource was last updated.
	UpdatedAt *int `pulumi:"updatedAt"`
}

type GatewayPluginJwtSignerState struct {
	Config GatewayPluginJwtSignerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJwtSignerConsumerPtrInput
	ConsumerGroup GatewayPluginJwtSignerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringPtrInput
	// Unix epoch when the resource was created.
	CreatedAt pulumi.IntPtrInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJwtSignerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJwtSignerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
	// Unix epoch when the resource was last updated.
	UpdatedAt pulumi.IntPtrInput
}

func (GatewayPluginJwtSignerState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginJwtSignerState)(nil)).Elem()
}

type gatewayPluginJwtSignerArgs struct {
	Config *GatewayPluginJwtSignerConfig `pulumi:"config"`
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      *GatewayPluginJwtSignerConsumer      `pulumi:"consumer"`
	ConsumerGroup *GatewayPluginJwtSignerConsumerGroup `pulumi:"consumerGroup"`
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId string `pulumi:"controlPlaneId"`
	// Whether the plugin is applied.
	Enabled      *bool   `pulumi:"enabled"`
	InstanceName *string `pulumi:"instanceName"`
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols []string `pulumi:"protocols"`
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route *GatewayPluginJwtSignerRoute `pulumi:"route"`
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service *GatewayPluginJwtSignerService `pulumi:"service"`
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a GatewayPluginJwtSigner resource.
type GatewayPluginJwtSignerArgs struct {
	Config GatewayPluginJwtSignerConfigPtrInput
	// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
	Consumer      GatewayPluginJwtSignerConsumerPtrInput
	ConsumerGroup GatewayPluginJwtSignerConsumerGroupPtrInput
	// The UUID of your control plane. This variable is available in the Konnect manager.
	ControlPlaneId pulumi.StringInput
	// Whether the plugin is applied.
	Enabled      pulumi.BoolPtrInput
	InstanceName pulumi.StringPtrInput
	// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
	Protocols pulumi.StringArrayInput
	// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
	Route GatewayPluginJwtSignerRoutePtrInput
	// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
	Service GatewayPluginJwtSignerServicePtrInput
	// An optional set of strings associated with the Plugin for grouping and filtering.
	Tags pulumi.StringArrayInput
}

func (GatewayPluginJwtSignerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayPluginJwtSignerArgs)(nil)).Elem()
}

type GatewayPluginJwtSignerInput interface {
	pulumi.Input

	ToGatewayPluginJwtSignerOutput() GatewayPluginJwtSignerOutput
	ToGatewayPluginJwtSignerOutputWithContext(ctx context.Context) GatewayPluginJwtSignerOutput
}

func (*GatewayPluginJwtSigner) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginJwtSigner)(nil)).Elem()
}

func (i *GatewayPluginJwtSigner) ToGatewayPluginJwtSignerOutput() GatewayPluginJwtSignerOutput {
	return i.ToGatewayPluginJwtSignerOutputWithContext(context.Background())
}

func (i *GatewayPluginJwtSigner) ToGatewayPluginJwtSignerOutputWithContext(ctx context.Context) GatewayPluginJwtSignerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJwtSignerOutput)
}

// GatewayPluginJwtSignerArrayInput is an input type that accepts GatewayPluginJwtSignerArray and GatewayPluginJwtSignerArrayOutput values.
// You can construct a concrete instance of `GatewayPluginJwtSignerArrayInput` via:
//
//	GatewayPluginJwtSignerArray{ GatewayPluginJwtSignerArgs{...} }
type GatewayPluginJwtSignerArrayInput interface {
	pulumi.Input

	ToGatewayPluginJwtSignerArrayOutput() GatewayPluginJwtSignerArrayOutput
	ToGatewayPluginJwtSignerArrayOutputWithContext(context.Context) GatewayPluginJwtSignerArrayOutput
}

type GatewayPluginJwtSignerArray []GatewayPluginJwtSignerInput

func (GatewayPluginJwtSignerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginJwtSigner)(nil)).Elem()
}

func (i GatewayPluginJwtSignerArray) ToGatewayPluginJwtSignerArrayOutput() GatewayPluginJwtSignerArrayOutput {
	return i.ToGatewayPluginJwtSignerArrayOutputWithContext(context.Background())
}

func (i GatewayPluginJwtSignerArray) ToGatewayPluginJwtSignerArrayOutputWithContext(ctx context.Context) GatewayPluginJwtSignerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJwtSignerArrayOutput)
}

// GatewayPluginJwtSignerMapInput is an input type that accepts GatewayPluginJwtSignerMap and GatewayPluginJwtSignerMapOutput values.
// You can construct a concrete instance of `GatewayPluginJwtSignerMapInput` via:
//
//	GatewayPluginJwtSignerMap{ "key": GatewayPluginJwtSignerArgs{...} }
type GatewayPluginJwtSignerMapInput interface {
	pulumi.Input

	ToGatewayPluginJwtSignerMapOutput() GatewayPluginJwtSignerMapOutput
	ToGatewayPluginJwtSignerMapOutputWithContext(context.Context) GatewayPluginJwtSignerMapOutput
}

type GatewayPluginJwtSignerMap map[string]GatewayPluginJwtSignerInput

func (GatewayPluginJwtSignerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginJwtSigner)(nil)).Elem()
}

func (i GatewayPluginJwtSignerMap) ToGatewayPluginJwtSignerMapOutput() GatewayPluginJwtSignerMapOutput {
	return i.ToGatewayPluginJwtSignerMapOutputWithContext(context.Background())
}

func (i GatewayPluginJwtSignerMap) ToGatewayPluginJwtSignerMapOutputWithContext(ctx context.Context) GatewayPluginJwtSignerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayPluginJwtSignerMapOutput)
}

type GatewayPluginJwtSignerOutput struct{ *pulumi.OutputState }

func (GatewayPluginJwtSignerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayPluginJwtSigner)(nil)).Elem()
}

func (o GatewayPluginJwtSignerOutput) ToGatewayPluginJwtSignerOutput() GatewayPluginJwtSignerOutput {
	return o
}

func (o GatewayPluginJwtSignerOutput) ToGatewayPluginJwtSignerOutputWithContext(ctx context.Context) GatewayPluginJwtSignerOutput {
	return o
}

func (o GatewayPluginJwtSignerOutput) Config() GatewayPluginJwtSignerConfigOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) GatewayPluginJwtSignerConfigOutput { return v.Config }).(GatewayPluginJwtSignerConfigOutput)
}

// If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.
func (o GatewayPluginJwtSignerOutput) Consumer() GatewayPluginJwtSignerConsumerOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) GatewayPluginJwtSignerConsumerOutput { return v.Consumer }).(GatewayPluginJwtSignerConsumerOutput)
}

func (o GatewayPluginJwtSignerOutput) ConsumerGroup() GatewayPluginJwtSignerConsumerGroupOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) GatewayPluginJwtSignerConsumerGroupOutput { return v.ConsumerGroup }).(GatewayPluginJwtSignerConsumerGroupOutput)
}

// The UUID of your control plane. This variable is available in the Konnect manager.
func (o GatewayPluginJwtSignerOutput) ControlPlaneId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) pulumi.StringOutput { return v.ControlPlaneId }).(pulumi.StringOutput)
}

// Unix epoch when the resource was created.
func (o GatewayPluginJwtSignerOutput) CreatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) pulumi.IntOutput { return v.CreatedAt }).(pulumi.IntOutput)
}

// Whether the plugin is applied.
func (o GatewayPluginJwtSignerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GatewayPluginJwtSignerOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support `"tcp"` and `"tls"`.
func (o GatewayPluginJwtSignerOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the Route being used.
func (o GatewayPluginJwtSignerOutput) Route() GatewayPluginJwtSignerRouteOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) GatewayPluginJwtSignerRouteOutput { return v.Route }).(GatewayPluginJwtSignerRouteOutput)
}

// If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.
func (o GatewayPluginJwtSignerOutput) Service() GatewayPluginJwtSignerServiceOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) GatewayPluginJwtSignerServiceOutput { return v.Service }).(GatewayPluginJwtSignerServiceOutput)
}

// An optional set of strings associated with the Plugin for grouping and filtering.
func (o GatewayPluginJwtSignerOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// Unix epoch when the resource was last updated.
func (o GatewayPluginJwtSignerOutput) UpdatedAt() pulumi.IntOutput {
	return o.ApplyT(func(v *GatewayPluginJwtSigner) pulumi.IntOutput { return v.UpdatedAt }).(pulumi.IntOutput)
}

type GatewayPluginJwtSignerArrayOutput struct{ *pulumi.OutputState }

func (GatewayPluginJwtSignerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayPluginJwtSigner)(nil)).Elem()
}

func (o GatewayPluginJwtSignerArrayOutput) ToGatewayPluginJwtSignerArrayOutput() GatewayPluginJwtSignerArrayOutput {
	return o
}

func (o GatewayPluginJwtSignerArrayOutput) ToGatewayPluginJwtSignerArrayOutputWithContext(ctx context.Context) GatewayPluginJwtSignerArrayOutput {
	return o
}

func (o GatewayPluginJwtSignerArrayOutput) Index(i pulumi.IntInput) GatewayPluginJwtSignerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayPluginJwtSigner {
		return vs[0].([]*GatewayPluginJwtSigner)[vs[1].(int)]
	}).(GatewayPluginJwtSignerOutput)
}

type GatewayPluginJwtSignerMapOutput struct{ *pulumi.OutputState }

func (GatewayPluginJwtSignerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayPluginJwtSigner)(nil)).Elem()
}

func (o GatewayPluginJwtSignerMapOutput) ToGatewayPluginJwtSignerMapOutput() GatewayPluginJwtSignerMapOutput {
	return o
}

func (o GatewayPluginJwtSignerMapOutput) ToGatewayPluginJwtSignerMapOutputWithContext(ctx context.Context) GatewayPluginJwtSignerMapOutput {
	return o
}

func (o GatewayPluginJwtSignerMapOutput) MapIndex(k pulumi.StringInput) GatewayPluginJwtSignerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayPluginJwtSigner {
		return vs[0].(map[string]*GatewayPluginJwtSigner)[vs[1].(string)]
	}).(GatewayPluginJwtSignerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJwtSignerInput)(nil)).Elem(), &GatewayPluginJwtSigner{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJwtSignerArrayInput)(nil)).Elem(), GatewayPluginJwtSignerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayPluginJwtSignerMapInput)(nil)).Elem(), GatewayPluginJwtSignerMap{})
	pulumi.RegisterOutputType(GatewayPluginJwtSignerOutput{})
	pulumi.RegisterOutputType(GatewayPluginJwtSignerArrayOutput{})
	pulumi.RegisterOutputType(GatewayPluginJwtSignerMapOutput{})
}
